
test-nfc5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08011254  08011254  00021254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117a4  080117a4  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  080117a4  080117a4  000217a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117ac  080117ac  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117ac  080117ac  000217ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117b0  080117b0  000217b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080117b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  2000009c  08011850  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001110  08011850  00031110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a540  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000652b  00000000  00000000  0006a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f58  00000000  00000000  00070b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cc0  00000000  00000000  00072a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033827  00000000  00000000  00074750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026eb4  00000000  00000000  000a7f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f567  00000000  00000000  000cee2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001de392  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088ec  00000000  00000000  001de410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801123c 	.word	0x0801123c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0801123c 	.word	0x0801123c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08c      	sub	sp, #48	; 0x30
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000588:	2300      	movs	r3, #0
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 800058c:	2300      	movs	r3, #0
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
  /* Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	2036      	movs	r0, #54	; 0x36
 8000596:	f002 fb48 	bl	8002c2a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800059a:	2036      	movs	r0, #54	; 0x36
 800059c:	f002 fb61 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <HAL_InitTick+0xb8>)
 80005a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <HAL_InitTick+0xb8>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6593      	str	r3, [r2, #88]	; 0x58
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <HAL_InitTick+0xb8>)
 80005ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005b8:	f107 020c 	add.w	r2, r7, #12
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fc18 	bl	8004df8 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80005cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d103      	bne.n	80005da <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005d2:	f004 fbe5 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 80005d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80005d8:	e004      	b.n	80005e4 <HAL_InitTick+0x64>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005da:	f004 fbe1 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 80005de:	4603      	mov	r3, r0
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <HAL_InitTick+0xbc>)
 80005e8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ec:	0c9b      	lsrs	r3, r3, #18
 80005ee:	3b01      	subs	r3, #1
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_InitTick+0xc0>)
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <HAL_InitTick+0xc4>)
 80005f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_InitTick+0xc0>)
 80005fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005fe:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000600:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <HAL_InitTick+0xc0>)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_InitTick+0xc0>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_InitTick+0xc0>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <HAL_InitTick+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <HAL_InitTick+0xc0>)
 800061a:	f005 fcf9 	bl	8006010 <HAL_TIM_Base_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <HAL_InitTick+0xc0>)
 8000626:	f005 fd29 	bl	800607c <HAL_TIM_Base_Start_IT>
 800062a:	4603      	mov	r3, r0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0xb0>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3730      	adds	r7, #48	; 0x30
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	431bde83 	.word	0x431bde83
 8000640:	20000d88 	.word	0x20000d88
 8000644:	40001000 	.word	0x40001000

08000648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8000650:	f002 f9d4 	bl	80029fc <HAL_IncTick>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <TIM6_DAC_IRQHandler+0x10>)
 8000662:	f005 fd35 	bl	80060d0 <HAL_TIM_IRQHandler>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000d88 	.word	0x20000d88

08000670 <logUsartInit>:
  * @brief  This function initalize the UART handle.
	* @param	husart : already initalized handle to USART HW
  * @retval none :
  */
void logUsartInit(UART_HandleTypeDef *husart)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    pLogUsart = husart;
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <logUsartInit+0x1c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	200000bc 	.word	0x200000bc

08000690 <logUsartTx>:
	* @param	dataLen : length of data to be transmitted
  * @retval ERR_INVALID_HANDLE : in case the SPI HW is not initalized yet
  * @retval others : HAL status
  */
uint8_t logUsartTx(uint8_t *data, uint16_t dataLen)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	460b      	mov	r3, r1
 800069a:	807b      	strh	r3, [r7, #2]
  if(pLogUsart == 0)
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <logUsartTx+0x34>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <logUsartTx+0x18>
    return ERR_INVALID_HANDLE;
 80006a4:	2326      	movs	r3, #38	; 0x26
 80006a6:	e008      	b.n	80006ba <logUsartTx+0x2a>

  return HAL_UART_Transmit(pLogUsart, data, dataLen, USART_TIMEOUT);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <logUsartTx+0x34>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	887a      	ldrh	r2, [r7, #2]
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f005 ff5a 	bl	800656c <HAL_UART_Transmit>
 80006b8:	4603      	mov	r3, r0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000bc 	.word	0x200000bc

080006c8 <logUsart>:

int logUsart(const char* format, ...)
{
 80006c8:	b40f      	push	{r0, r1, r2, r3}
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b0c2      	sub	sp, #264	; 0x108
 80006ce:	af00      	add	r7, sp, #0
    #define LOG_BUFFER_SIZE 256
    char buf[LOG_BUFFER_SIZE];
    va_list argptr;
    va_start(argptr, format);
 80006d0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006d4:	463b      	mov	r3, r7
 80006d6:	601a      	str	r2, [r3, #0]
    int cnt = vsnprintf(buf, LOG_BUFFER_SIZE, format, argptr);
 80006d8:	463b      	mov	r3, r7
 80006da:	1d38      	adds	r0, r7, #4
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80006e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e6:	f00f fe8f 	bl	8010408 <vsniprintf>
 80006ea:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(argptr);  
      
    /* */
    logUsartTx((uint8_t*)buf, strlen(buf));
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd6d 	bl	80001d0 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffc6 	bl	8000690 <logUsartTx>
    return cnt;
 8000704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8000708:	4618      	mov	r0, r3
 800070a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800070e:	46bd      	mov	sp, r7
 8000710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000714:	b004      	add	sp, #16
 8000716:	4770      	bx	lr

08000718 <hex2Str>:

/* */

char* hex2Str(unsigned char * data, size_t dataLen)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]

    unsigned char * pin = data;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	61fb      	str	r3, [r7, #28]
    const char * hex = "0123456789ABCDEF";
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <hex2Str+0xec>)
 8000728:	613b      	str	r3, [r7, #16]
    char * pout = hexStr[hexStrIdx];
 800072a:	4b37      	ldr	r3, [pc, #220]	; (8000808 <hex2Str+0xf0>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	01db      	lsls	r3, r3, #7
 8000730:	4a36      	ldr	r2, [pc, #216]	; (800080c <hex2Str+0xf4>)
 8000732:	4413      	add	r3, r2
 8000734:	61bb      	str	r3, [r7, #24]
    uint8_t i = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	75fb      	strb	r3, [r7, #23]
    uint8_t idx = hexStrIdx;
 800073a:	4b33      	ldr	r3, [pc, #204]	; (8000808 <hex2Str+0xf0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	73fb      	strb	r3, [r7, #15]
    size_t len;  
      
    if(dataLen == 0)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d103      	bne.n	800074e <hex2Str+0x36>
    {
      pout[0] = 0;     
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e042      	b.n	80007d4 <hex2Str+0xbc>
    } 
    else     
    {
      /* Trim data that doesn't fit in buffer */
      len = MIN( dataLen , (MAX_HEX_STR_LENGTH / 2) );
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b40      	cmp	r3, #64	; 0x40
 8000752:	bf28      	it	cs
 8000754:	2340      	movcs	r3, #64	; 0x40
 8000756:	60bb      	str	r3, [r7, #8]
        
      for(; i < (len - 1); ++i)
 8000758:	e01c      	b.n	8000794 <hex2Str+0x7c>
      {
          *pout++ = hex[(*pin>>4)&0xF];
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	091b      	lsrs	r3, r3, #4
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	441a      	add	r2, r3
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	1c59      	adds	r1, r3, #1
 800076e:	61b9      	str	r1, [r7, #24]
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	701a      	strb	r2, [r3, #0]
          *pout++ = hex[(*pin++)&0xF];
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	61fa      	str	r2, [r7, #28]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f003 030f 	and.w	r3, r3, #15
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	441a      	add	r2, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	1c59      	adds	r1, r3, #1
 8000788:	61b9      	str	r1, [r7, #24]
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	701a      	strb	r2, [r3, #0]
      for(; i < (len - 1); ++i)
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	3301      	adds	r3, #1
 8000792:	75fb      	strb	r3, [r7, #23]
 8000794:	7dfa      	ldrb	r2, [r7, #23]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3b01      	subs	r3, #1
 800079a:	429a      	cmp	r2, r3
 800079c:	d3dd      	bcc.n	800075a <hex2Str+0x42>
      }
      *pout++ = hex[(*pin>>4)&0xF];
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	091b      	lsrs	r3, r3, #4
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	441a      	add	r2, r3
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	1c59      	adds	r1, r3, #1
 80007b2:	61b9      	str	r1, [r7, #24]
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	701a      	strb	r2, [r3, #0]
      *pout++ = hex[(*pin)&0xF];
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	441a      	add	r2, r3
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	1c59      	adds	r1, r3, #1
 80007c8:	61b9      	str	r1, [r7, #24]
 80007ca:	7812      	ldrb	r2, [r2, #0]
 80007cc:	701a      	strb	r2, [r3, #0]
      *pout = 0;
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
    }    
    
    hexStrIdx++;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <hex2Str+0xf0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <hex2Str+0xf0>)
 80007de:	701a      	strb	r2, [r3, #0]
    hexStrIdx %= MAX_HEX_STR;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <hex2Str+0xf0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <hex2Str+0xf0>)
 80007ec:	701a      	strb	r2, [r3, #0]
    
    return hexStr[idx];
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	01db      	lsls	r3, r3, #7
 80007f2:	4a06      	ldr	r2, [pc, #24]	; (800080c <hex2Str+0xf4>)
 80007f4:	4413      	add	r3, r2


}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	08011254 	.word	0x08011254
 8000808:	200000b8 	.word	0x200000b8
 800080c:	20000dc8 	.word	0x20000dc8

08000810 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f002 f8d9 	bl	80029cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f94f 	bl	8000abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 fa91 	bl	8000d44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000822:	f000 fa13 	bl	8000c4c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000826:	f000 f9cf 	bl	8000bc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_I2C1_Init();
 800082a:	f000 fa41 	bl	8000cb0 <MX_I2C1_Init>
  /* Initialize driver*/
  spiInit(&hspi1);
 800082e:	488f      	ldr	r0, [pc, #572]	; (8000a6c <main+0x25c>)
 8000830:	f000 fd58 	bl	80012e4 <spiInit>
  
  /* Initialize log module */
  logUsartInit(&huart2);
 8000834:	488e      	ldr	r0, [pc, #568]	; (8000a70 <main+0x260>)
 8000836:	f7ff ff1b 	bl	8000670 <logUsartInit>
  
  platformLog("Welcome to X-NUCLEO-NFC05A1\r\n");
 800083a:	488e      	ldr	r0, [pc, #568]	; (8000a74 <main+0x264>)
 800083c:	f7ff ff44 	bl	80006c8 <logUsart>
  
  /* Initialize RFAL */
  if( !demoIni() )
 8000840:	f000 fb6a 	bl	8000f18 <demoIni>
 8000844:	4603      	mov	r3, r0
 8000846:	f083 0301 	eor.w	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d022      	beq.n	8000896 <main+0x86>
  {
    /*
    * in case the rfal initalization failed signal it by flashing all LED
    * and stoping all operations
    */
    platformLog("Initialization failed..\r\n\n");
 8000850:	4889      	ldr	r0, [pc, #548]	; (8000a78 <main+0x268>)
 8000852:	f7ff ff39 	bl	80006c8 <logUsart>
    while(1) 
    {
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f002 fc5d 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 8000862:	2101      	movs	r1, #1
 8000864:	4885      	ldr	r0, [pc, #532]	; (8000a7c <main+0x26c>)
 8000866:	f002 fc59 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 800086a:	2110      	movs	r1, #16
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f002 fc54 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000874:	2102      	movs	r1, #2
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f002 fc4f 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800087e:	2110      	movs	r1, #16
 8000880:	487e      	ldr	r0, [pc, #504]	; (8000a7c <main+0x26c>)
 8000882:	f002 fc4b 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000886:	2120      	movs	r1, #32
 8000888:	487c      	ldr	r0, [pc, #496]	; (8000a7c <main+0x26c>)
 800088a:	f002 fc47 	bl	800311c <HAL_GPIO_TogglePin>
      platformDelay(100);
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	f002 f8d2 	bl	8002a38 <HAL_Delay>
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000894:	e7df      	b.n	8000856 <main+0x46>
    }
  }
  else
  {
    platformLog("Initialization succeeded..\r\n\n");
 8000896:	487a      	ldr	r0, [pc, #488]	; (8000a80 <main+0x270>)
 8000898:	f7ff ff16 	bl	80006c8 <logUsart>
    for (int i = 0; i < 6; i++) 
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e021      	b.n	80008e6 <main+0xd6>
    {
      platformLedToogle(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f002 fc37 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80008ae:	2101      	movs	r1, #1
 80008b0:	4872      	ldr	r0, [pc, #456]	; (8000a7c <main+0x26c>)
 80008b2:	f002 fc33 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80008b6:	2110      	movs	r1, #16
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f002 fc2e 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 80008c0:	2102      	movs	r1, #2
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f002 fc29 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 80008ca:	2110      	movs	r1, #16
 80008cc:	486b      	ldr	r0, [pc, #428]	; (8000a7c <main+0x26c>)
 80008ce:	f002 fc25 	bl	800311c <HAL_GPIO_TogglePin>
      platformLedToogle(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 80008d2:	2120      	movs	r1, #32
 80008d4:	4869      	ldr	r0, [pc, #420]	; (8000a7c <main+0x26c>)
 80008d6:	f002 fc21 	bl	800311c <HAL_GPIO_TogglePin>
      platformDelay(200);
 80008da:	20c8      	movs	r0, #200	; 0xc8
 80008dc:	f002 f8ac 	bl	8002a38 <HAL_Delay>
    for (int i = 0; i < 6; i++) 
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	ddda      	ble.n	80008a2 <main+0x92>
    }
    
    platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	4862      	ldr	r0, [pc, #392]	; (8000a7c <main+0x26c>)
 80008f2:	f002 fbfb 	bl	80030ec <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_B_PORT, PLATFORM_LED_B_PIN);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2110      	movs	r1, #16
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f002 fbf5 	bl	80030ec <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_F_PORT, PLATFORM_LED_F_PIN);
 8000902:	2200      	movs	r2, #0
 8000904:	2102      	movs	r1, #2
 8000906:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090a:	f002 fbef 	bl	80030ec <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	485a      	ldr	r0, [pc, #360]	; (8000a7c <main+0x26c>)
 8000914:	f002 fbea 	bl	80030ec <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_AP2P_PORT, PLATFORM_LED_AP2P_PIN);
 8000918:	2200      	movs	r2, #0
 800091a:	2120      	movs	r1, #32
 800091c:	4857      	ldr	r0, [pc, #348]	; (8000a7c <main+0x26c>)
 800091e:	f002 fbe5 	bl	80030ec <HAL_GPIO_WritePin>
    platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f002 fbde 	bl	80030ec <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // FIXME: delete later just a temp var for now
  int tempSlaveReceive = 0; // if on 1 uncomment the code under isIdle
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // keep 14 off bc connected to ground
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	4850      	ldr	r0, [pc, #320]	; (8000a7c <main+0x26c>)
 800093c:	f002 fbd6 	bl	80030ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // toggle 13 (start program with jetson on) RESET = ~1.69mV
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	484d      	ldr	r0, [pc, #308]	; (8000a7c <main+0x26c>)
 8000948:	f002 fbd0 	bl	80030ec <HAL_GPIO_WritePin>
  // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // set = send 3.3 V to pin


  int idx = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  {
	// if isIdle : unshort pin 13 and 14 to turn off jetson
	//    then start the wait for scan and demoCycle
	// else (!isIdle): go directly to wait for scan

    if (haveUID==0 && jetsonDone==0 && strUID==0){ // starts polling for scan
 8000950:	4b4c      	ldr	r3, [pc, #304]	; (8000a84 <main+0x274>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d11f      	bne.n	8000998 <main+0x188>
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <main+0x278>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11b      	bne.n	8000998 <main+0x188>
 8000960:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <main+0x27c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d117      	bne.n	8000998 <main+0x188>
    	platformLog("WAIT: for tag scan\r\n");
 8000968:	4849      	ldr	r0, [pc, #292]	; (8000a90 <main+0x280>)
 800096a:	f7ff fead 	bl	80006c8 <logUsart>
    	if (tempSlaveReceive) { // FIXME: change this to hal_i2c_slave_receive
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00b      	beq.n	800098c <main+0x17c>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // unshort to turn off jetson
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097a:	4840      	ldr	r0, [pc, #256]	; (8000a7c <main+0x26c>)
 800097c:	f002 fbb6 	bl	80030ec <HAL_GPIO_WritePin>
    		isIdle = 1;
 8000980:	4b44      	ldr	r3, [pc, #272]	; (8000a94 <main+0x284>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
    		// tempSlaveReceive = 0;
    		platformLog("IDLE: turn off Jetson\r\n");
 8000986:	4844      	ldr	r0, [pc, #272]	; (8000a98 <main+0x288>)
 8000988:	f7ff fe9e 	bl	80006c8 <logUsart>
    	}
    	demoCycle();
 800098c:	f000 fb22 	bl	8000fd4 <demoCycle>
    	HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	; 0x64
 8000992:	f002 f851 	bl	8002a38 <HAL_Delay>
 8000996:	e068      	b.n	8000a6a <main+0x25a>
    }

    else if(jetsonDone==1){
 8000998:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <main+0x278>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10f      	bne.n	80009c0 <main+0x1b0>
    	platformLog("DONE: going back to wait for scan\r\n");
 80009a0:	483e      	ldr	r0, [pc, #248]	; (8000a9c <main+0x28c>)
 80009a2:	f7ff fe91 	bl	80006c8 <logUsart>
    	jetsonDone = 0;
 80009a6:	4b38      	ldr	r3, [pc, #224]	; (8000a88 <main+0x278>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
    	haveUID=0;
 80009ac:	4b35      	ldr	r3, [pc, #212]	; (8000a84 <main+0x274>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
    	strUID=0;
 80009b2:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <main+0x27c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
    	HAL_Delay(100);
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f002 f83d 	bl	8002a38 <HAL_Delay>
 80009be:	e7c7      	b.n	8000950 <main+0x140>
    }
    else if(haveUID==1 && strUID!=0){ // got the UID and have a str UID value --> send to jetson
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <main+0x274>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d1c3      	bne.n	8000950 <main+0x140>
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <main+0x27c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0bf      	beq.n	8000950 <main+0x140>

    	printf("here\n");
 80009d0:	4833      	ldr	r0, [pc, #204]	; (8000aa0 <main+0x290>)
 80009d2:	f00f fce5 	bl	80103a0 <puts>

    	// check if device was idle
    	if (isIdle) {
 80009d6:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <main+0x284>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d008      	beq.n	80009f0 <main+0x1e0>
    		// short pins to turn jetson on
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // short to turn on jetson
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <main+0x26c>)
 80009e6:	f002 fb81 	bl	80030ec <HAL_GPIO_WritePin>
    		platformLog("jetson was idle, turning on now\r\n");
 80009ea:	482e      	ldr	r0, [pc, #184]	; (8000aa4 <main+0x294>)
 80009ec:	f7ff fe6c 	bl	80006c8 <logUsart>
    	}


		if (idx == 0){
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <main+0x1ec>
			tempBuf[0] = i2cDataBuf[0]; //start with sending the first one
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <main+0x298>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	703b      	strb	r3, [r7, #0]
		}

		platformLog("SEND: current index = %d\r\n", idx);
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	482b      	ldr	r0, [pc, #172]	; (8000aac <main+0x29c>)
 8000a00:	f7ff fe62 	bl	80006c8 <logUsart>

		// UID size is only 8
		if (idx < sizeof(i2cDataBuf)){
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d823      	bhi.n	8000a52 <main+0x242>
			if (HAL_I2C_Slave_Transmit(&hi2c1, tempBuf, 1, 2000) == HAL_OK) {
 8000a0a:	4639      	mov	r1, r7
 8000a0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a10:	2201      	movs	r2, #1
 8000a12:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <main+0x2a0>)
 8000a14:	f002 fc4e 	bl	80032b4 <HAL_I2C_Slave_Transmit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d110      	bne.n	8000a40 <main+0x230>
				HAL_Delay(100); //500
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f002 f80a 	bl	8002a38 <HAL_Delay>
				platformLog("SEND: slave transmit ok, transmitted value: 0x%x\r\n", tempBuf[0]);
 8000a24:	783b      	ldrb	r3, [r7, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <main+0x2a4>)
 8000a2a:	f7ff fe4d 	bl	80006c8 <logUsart>
				idx+=1;
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
				tempBuf[0] = i2cDataBuf[idx];
 8000a34:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <main+0x298>)
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	703b      	strb	r3, [r7, #0]
 8000a3e:	e008      	b.n	8000a52 <main+0x242>
			}
			else {
				platformLog("SEND: slave transmit ERROR\r\n");
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <main+0x2a8>)
 8000a42:	f7ff fe41 	bl	80006c8 <logUsart>
				// wait for new scan
				haveUID = 0;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <main+0x274>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
				strUID = 0;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <main+0x27c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_Delay(100); // 500
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f001 fff0 	bl	8002a38 <HAL_Delay>

		if (idx == sizeof(i2cDataBuf)){
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	2b10      	cmp	r3, #16
 8000a5c:	f47f af78 	bne.w	8000950 <main+0x140>
			jetsonDone=1;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <main+0x278>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
			idx = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
    if (haveUID==0 && jetsonDone==0 && strUID==0){ // starts polling for scan
 8000a6a:	e771      	b.n	8000950 <main+0x140>
 8000a6c:	20001024 	.word	0x20001024
 8000a70:	20001088 	.word	0x20001088
 8000a74:	08011268 	.word	0x08011268
 8000a78:	08011288 	.word	0x08011288
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	080112a4 	.word	0x080112a4
 8000a84:	200000c1 	.word	0x200000c1
 8000a88:	200000c8 	.word	0x200000c8
 8000a8c:	200000c4 	.word	0x200000c4
 8000a90:	080112c4 	.word	0x080112c4
 8000a94:	200000c9 	.word	0x200000c9
 8000a98:	080112dc 	.word	0x080112dc
 8000a9c:	080112f4 	.word	0x080112f4
 8000aa0:	08011318 	.word	0x08011318
 8000aa4:	08011320 	.word	0x08011320
 8000aa8:	20001014 	.word	0x20001014
 8000aac:	08011344 	.word	0x08011344
 8000ab0:	20000fc8 	.word	0x20000fc8
 8000ab4:	08011360 	.word	0x08011360
 8000ab8:	08011394 	.word	0x08011394

08000abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0b8      	sub	sp, #224	; 0xe0
 8000ac0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 8000ac2:	f003 fbd1 	bl	8004268 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <SystemClock_Config+0x100>)
 8000ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000acc:	4a3b      	ldr	r2, [pc, #236]	; (8000bbc <SystemClock_Config+0x100>)
 8000ace:	f023 0318 	bic.w	r3, r3, #24
 8000ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ad6:	2314      	movs	r3, #20
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000aee:	23b0      	movs	r3, #176	; 0xb0
 8000af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fc26 	bl	8004350 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <SystemClock_Config+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b0a:	f240 1129 	movw	r1, #297	; 0x129
 8000b0e:	482c      	ldr	r0, [pc, #176]	; (8000bc0 <SystemClock_Config+0x104>)
 8000b10:	f000 f9fc 	bl	8000f0c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) // FLASH_LATENCY_4
 8000b32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b36:	2102      	movs	r1, #2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 ffb9 	bl	8004ab0 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d004      	beq.n	8000b4e <SystemClock_Config+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b44:	f240 1137 	movw	r1, #311	; 0x137
 8000b48:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <SystemClock_Config+0x104>)
 8000b4a:	f000 f9df 	bl	8000f0c <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 f9dd 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <SystemClock_Config+0xb6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b68:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000b6c:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <SystemClock_Config+0x104>)
 8000b6e:	f000 f9cd 	bl	8000f0c <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b76:	f003 fb95 	bl	80042a4 <HAL_PWREx_ControlVoltageScaling>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d004      	beq.n	8000b8a <SystemClock_Config+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000b80:	f240 1147 	movw	r1, #327	; 0x147
 8000b84:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <SystemClock_Config+0x104>)
 8000b86:	f000 f9c1 	bl	8000f0c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b8a:	f004 f8fd 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <SystemClock_Config+0x108>)
 8000b92:	fba3 2302 	umull	r2, r3, r3, r2
 8000b96:	099b      	lsrs	r3, r3, #6
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 f870 	bl	8002c7e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b9e:	2004      	movs	r0, #4
 8000ba0:	f002 f87a 	bl	8002c98 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ba4:	f004 fca0 	bl	80054e8 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f002 f83b 	bl	8002c2a <HAL_NVIC_SetPriority>
}
 8000bb4:	bf00      	nop
 8000bb6:	37e0      	adds	r7, #224	; 0xe0
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	080113b4 	.word	0x080113b4
 8000bc4:	10624dd3 	.word	0x10624dd3

08000bc8 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_SPI1_Init+0x7c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000be2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bfe:	2218      	movs	r2, #24
 8000c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000c28:	f004 fe38 	bl	800589c <HAL_SPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <MX_SPI1_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c32:	f240 116f 	movw	r1, #367	; 0x16f
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_SPI1_Init+0x80>)
 8000c38:	f000 f968 	bl	8000f0c <_Error_Handler>
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20001024 	.word	0x20001024
 8000c44:	40013000 	.word	0x40013000
 8000c48:	080113b4 	.word	0x080113b4

08000c4c <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_USART2_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c6c:	220c      	movs	r2, #12
 8000c6e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c8a:	f005 fc21 	bl	80064d0 <HAL_UART_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d004      	beq.n	8000c9e <MX_USART2_UART_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c94:	f240 1183 	movw	r1, #387	; 0x183
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_USART2_UART_Init+0x60>)
 8000c9a:	f000 f937 	bl	8000f0c <_Error_Handler>
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20001088 	.word	0x20001088
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	080113b4 	.word	0x080113b4

08000cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cb6:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <MX_I2C1_Init+0x88>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cbc:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <MX_I2C1_Init+0x8c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 130; //0x41
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cc2:	2282      	movs	r2, #130	; 0x82
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000cec:	f002 fa53 	bl	8003196 <HAL_I2C_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d004      	beq.n	8000d00 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 8000cf6:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_I2C1_Init+0x90>)
 8000cfc:	f000 f906 	bl	8000f0c <_Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000d04:	f003 fa19 	bl	800413a <HAL_I2CEx_ConfigAnalogFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <MX_I2C1_Init+0x68>
  {
    Error_Handler();
 8000d0e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8000d12:	480b      	ldr	r0, [pc, #44]	; (8000d40 <MX_I2C1_Init+0x90>)
 8000d14:	f000 f8fa 	bl	8000f0c <_Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_I2C1_Init+0x84>)
 8000d1c:	f003 fa58 	bl	80041d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <MX_I2C1_Init+0x80>
  {
    Error_Handler();
 8000d26:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_I2C1_Init+0x90>)
 8000d2c:	f000 f8ee 	bl	8000f0c <_Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000fc8 	.word	0x20000fc8
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	10909cec 	.word	0x10909cec
 8000d40:	080113b4 	.word	0x080113b4

08000d44 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a69      	ldr	r2, [pc, #420]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	4b64      	ldr	r3, [pc, #400]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a63      	ldr	r2, [pc, #396]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b61      	ldr	r3, [pc, #388]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a5d      	ldr	r2, [pc, #372]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b5b      	ldr	r3, [pc, #364]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a57      	ldr	r2, [pc, #348]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a51      	ldr	r2, [pc, #324]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b4f      	ldr	r3, [pc, #316]	; (8000ef4 <MX_GPIO_Init+0x1b0>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_F_Pin|LED_B_Pin|LED_FIELD_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f002 f98e 	bl	80030ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2171      	movs	r1, #113	; 0x71
 8000dd4:	4848      	ldr	r0, [pc, #288]	; (8000ef8 <MX_GPIO_Init+0x1b4>)
 8000dd6:	f002 f989 	bl	80030ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */  // manually added for wakeup signal
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000de0:	4845      	ldr	r0, [pc, #276]	; (8000ef8 <MX_GPIO_Init+0x1b4>)
 8000de2:	f002 f983 	bl	80030ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dec:	4b43      	ldr	r3, [pc, #268]	; (8000efc <MX_GPIO_Init+0x1b8>)
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4841      	ldr	r0, [pc, #260]	; (8000f00 <MX_GPIO_Init+0x1bc>)
 8000dfc:	f001 ffb6 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000e00:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	483a      	ldr	r0, [pc, #232]	; (8000f00 <MX_GPIO_Init+0x1bc>)
 8000e16:	f001 ffa9 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_3911_Pin */
  GPIO_InitStruct.Pin = IRQ_3911_Pin;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MX_GPIO_Init+0x1c0>)
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_3911_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f001 ff9c 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_F_Pin LED_B_Pin LED_FIELD_Pin */
  GPIO_InitStruct.Pin = LED_F_Pin|LED_B_Pin|LED_FIELD_Pin;
 8000e34:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f001 ff8c 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_V_Pin LED_AP2P_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_V_Pin|LED_AP2P_Pin|SPI1_CS_Pin;
 8000e54:	2371      	movs	r3, #113	; 0x71
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <MX_GPIO_Init+0x1b4>)
 8000e6c:	f001 ff7e 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8000e70:	f649 4386 	movw	r3, #40070	; 0x9c86
 8000e74:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15						// took out pin 13 and pin 14
                          |GPIO_PIN_7;            						// took out pin 8 and pin 9
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	481c      	ldr	r0, [pc, #112]	; (8000ef8 <MX_GPIO_Init+0x1b4>)
 8000e86:	f001 ff71 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8000e8a:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8000e8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 ff63 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <MX_GPIO_Init+0x1c4>)
 8000eba:	f001 ff57 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */  // manually added for wake up signal
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000ebe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <MX_GPIO_Init+0x1b4>)
 8000ed8:	f001 ff48 	bl	8002d6c <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f001 fea2 	bl	8002c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ee6:	2006      	movs	r0, #6
 8000ee8:	f001 febb 	bl	8002c62 <HAL_NVIC_EnableIRQ>

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	10120000 	.word	0x10120000
 8000f00:	48000800 	.word	0x48000800
 8000f04:	10110000 	.word	0x10110000
 8000f08:	48000c00 	.word	0x48000c00

08000f0c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000f16:	e7fe      	b.n	8000f16 <_Error_Handler+0xa>

08000f18 <demoIni>:
 * \return true  : Initialization ok
 * \return false : Initialization failed
 *****************************************************************************
 */
bool demoIni( void )
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	ReturnCode err;

#if defined(STM32L476xx)
    if( (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0)
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <demoIni+0xa4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <demoIni+0x18>
    {
        verbose = true;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <demoIni+0xa8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    }
#endif
    
    err = rfalNfcInitialize();
 8000f30:	f007 fecc 	bl	8008ccc <rfalNfcInitialize>
 8000f34:	4603      	mov	r3, r0
 8000f36:	80fb      	strh	r3, [r7, #6]
    if( err == ERR_NONE )
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d139      	bne.n	8000fb2 <demoIni+0x9a>
    {
        discParam.compMode      = RFAL_COMPLIANCE_MODE_NFC;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <demoIni+0xac>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
        discParam.devLimit      = 1U;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <demoIni+0xac>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	719a      	strb	r2, [r3, #6]
        discParam.nfcfBR        = RFAL_BR_212;
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <demoIni+0xac>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	71da      	strb	r2, [r3, #7]
        discParam.ap2pBR        = RFAL_BR_424;
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <demoIni+0xac>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

        ST_MEMCPY( &discParam.nfcid3, NFCID3, sizeof(NFCID3) );
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <demoIni+0xac>)
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <demoIni+0xb0>)
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f60:	c303      	stmia	r3!, {r0, r1}
 8000f62:	801a      	strh	r2, [r3, #0]
        ST_MEMCPY( &discParam.GB, GB, sizeof(GB) );
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <demoIni+0xac>)
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <demoIni+0xb4>)
 8000f68:	f103 0512 	add.w	r5, r3, #18
 8000f6c:	4614      	mov	r4, r2
 8000f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f70:	6028      	str	r0, [r5, #0]
 8000f72:	6069      	str	r1, [r5, #4]
 8000f74:	60aa      	str	r2, [r5, #8]
 8000f76:	60eb      	str	r3, [r5, #12]
 8000f78:	6820      	ldr	r0, [r4, #0]
 8000f7a:	6128      	str	r0, [r5, #16]
        discParam.GBLen         = sizeof(GB);
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <demoIni+0xac>)
 8000f7e:	2214      	movs	r2, #20
 8000f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        discParam.notifyCb             = NULL;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <demoIni+0xac>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	669a      	str	r2, [r3, #104]	; 0x68
        discParam.totalDuration        = 1000U;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <demoIni+0xac>)
 8000f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f90:	809a      	strh	r2, [r3, #4]
        discParam.wakeupEnabled        = false;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <demoIni+0xac>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        discParam.wakeupConfigDefault  = true;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <demoIni+0xac>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        discParam.techs2Find           = ( RFAL_NFC_POLL_TECH_A | RFAL_NFC_POLL_TECH_B | RFAL_NFC_POLL_TECH_F | RFAL_NFC_POLL_TECH_V | RFAL_NFC_POLL_TECH_ST25TB );
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <demoIni+0xac>)
 8000fa4:	222f      	movs	r2, #47	; 0x2f
 8000fa6:	805a      	strh	r2, [r3, #2]
      
      discParam.techs2Find |= ( RFAL_NFC_LISTEN_TECH_A | RFAL_NFC_LISTEN_TECH_F );
      
#endif /* ST25R3916 */

        state = DEMO_ST_START_DISCOVERY;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <demoIni+0xb8>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
        return true;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <demoIni+0x9c>
    }
    return false;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	e000edf0 	.word	0xe000edf0
 8000fc0:	20000152 	.word	0x20000152
 8000fc4:	200000cc 	.word	0x200000cc
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	2000000c 	.word	0x2000000c
 8000fd0:	20000150 	.word	0x20000150

08000fd4 <demoCycle>:
 *****************************************************************************
 */


void demoCycle( void )
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af02      	add	r7, sp, #8
    

    rfalNfcvInventoryRes  invRes;
    uint16_t              rcvdLen;
    
    rfalNfcWorker();                                    /* Run RFAL worker periodically */
 8000fda:	f007 ff7b 	bl	8008ed4 <rfalNfcWorker>
    
    if( (ndefDemoFeature != NDEF_DEMO_READ) && (platformTimerIsExpired(timer)) )
 8000fde:	4bad      	ldr	r3, [pc, #692]	; (8001294 <demoCycle+0x2c0>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00d      	beq.n	8001002 <demoCycle+0x2e>
 8000fe6:	4bac      	ldr	r3, [pc, #688]	; (8001298 <demoCycle+0x2c4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fcd8 	bl	80029a0 <timerIsExpired>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <demoCycle+0x2e>
    {
        platformLog("Timer expired, back to Read mode...\r\n");
 8000ff6:	48a9      	ldr	r0, [pc, #676]	; (800129c <demoCycle+0x2c8>)
 8000ff8:	f7ff fb66 	bl	80006c8 <logUsart>
        ndefDemoFeature = NDEF_DEMO_READ;
 8000ffc:	4ba5      	ldr	r3, [pc, #660]	; (8001294 <demoCycle+0x2c0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    }
    
    if( ndefDemoFeature != ndefDemoPrevFeature )
 8001002:	4ba4      	ldr	r3, [pc, #656]	; (8001294 <demoCycle+0x2c0>)
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4ba6      	ldr	r3, [pc, #664]	; (80012a0 <demoCycle+0x2cc>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d00d      	beq.n	800102a <demoCycle+0x56>
    {
        ndefDemoPrevFeature = ndefDemoFeature;
 800100e:	4ba1      	ldr	r3, [pc, #644]	; (8001294 <demoCycle+0x2c0>)
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	4ba3      	ldr	r3, [pc, #652]	; (80012a0 <demoCycle+0x2cc>)
 8001014:	701a      	strb	r2, [r3, #0]
        platformLog("%s\r\n", ndefDemoFeatureDescription[ndefDemoFeature]);
 8001016:	4b9f      	ldr	r3, [pc, #636]	; (8001294 <demoCycle+0x2c0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	4ba1      	ldr	r3, [pc, #644]	; (80012a4 <demoCycle+0x2d0>)
 800101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001022:	4619      	mov	r1, r3
 8001024:	48a0      	ldr	r0, [pc, #640]	; (80012a8 <demoCycle+0x2d4>)
 8001026:	f7ff fb4f 	bl	80006c8 <logUsart>
    }
    

    switch( state )
 800102a:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <demoCycle+0x2d8>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d002      	beq.n	8001038 <demoCycle+0x64>
 8001032:	2b02      	cmp	r3, #2
 8001034:	d00a      	beq.n	800104c <demoCycle+0x78>
            break;

        /*******************************************************************************/
        case DEMO_ST_NOTINIT:
        default:
            break;
 8001036:	e128      	b.n	800128a <demoCycle+0x2b6>
            rfalNfcDeactivate( false );
 8001038:	2000      	movs	r0, #0
 800103a:	f007 fef5 	bl	8008e28 <rfalNfcDeactivate>
            rfalNfcDiscover( &discParam );
 800103e:	489c      	ldr	r0, [pc, #624]	; (80012b0 <demoCycle+0x2dc>)
 8001040:	f007 fe60 	bl	8008d04 <rfalNfcDiscover>
            state = DEMO_ST_DISCOVERY;
 8001044:	4b99      	ldr	r3, [pc, #612]	; (80012ac <demoCycle+0x2d8>)
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
            break;
 800104a:	e11e      	b.n	800128a <demoCycle+0x2b6>
            if( rfalNfcIsDevActivated(rfalNfcGetState()))
 800104c:	f007 ff0e 	bl	8008e6c <rfalNfcGetState>
 8001050:	4603      	mov	r3, r0
 8001052:	2b1d      	cmp	r3, #29
 8001054:	f240 8115 	bls.w	8001282 <demoCycle+0x2ae>
 8001058:	f007 ff08 	bl	8008e6c <rfalNfcGetState>
 800105c:	4603      	mov	r3, r0
 800105e:	2b21      	cmp	r3, #33	; 0x21
 8001060:	f200 810f 	bhi.w	8001282 <demoCycle+0x2ae>
            	platformLog("tag detected :)\r\n");
 8001064:	4893      	ldr	r0, [pc, #588]	; (80012b4 <demoCycle+0x2e0>)
 8001066:	f7ff fb2f 	bl	80006c8 <logUsart>
                rfalNfcGetActiveDevice( &nfcDevice );
 800106a:	4893      	ldr	r0, [pc, #588]	; (80012b8 <demoCycle+0x2e4>)
 800106c:	f007 ff0a 	bl	8008e84 <rfalNfcGetActiveDevice>
                platformDelay(50);
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f001 fce1 	bl	8002a38 <HAL_Delay>
                ndefDemoPrevFeature = 0xFF; /* Force the display of the prompt */
 8001076:	4b8a      	ldr	r3, [pc, #552]	; (80012a0 <demoCycle+0x2cc>)
 8001078:	22ff      	movs	r2, #255	; 0xff
 800107a:	701a      	strb	r2, [r3, #0]
                switch( nfcDevice->type )
 800107c:	4b8e      	ldr	r3, [pc, #568]	; (80012b8 <demoCycle+0x2e4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <demoCycle+0xba>
 8001086:	2b03      	cmp	r3, #3
 8001088:	f000 809c 	beq.w	80011c4 <demoCycle+0x1f0>
                        break;
 800108c:	e0ee      	b.n	800126c <demoCycle+0x298>
                        platformLedOn(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 800108e:	2201      	movs	r2, #1
 8001090:	2101      	movs	r1, #1
 8001092:	488a      	ldr	r0, [pc, #552]	; (80012bc <demoCycle+0x2e8>)
 8001094:	f002 f82a 	bl	80030ec <HAL_GPIO_WritePin>
                        switch( nfcDevice->dev.nfca.type )
 8001098:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <demoCycle+0x2e4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d111      	bne.n	80010c6 <demoCycle+0xf2>
                                platformLog("NFCA Passive ISO-DEP device found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80010a2:	4b85      	ldr	r3, [pc, #532]	; (80012b8 <demoCycle+0x2e4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	4b83      	ldr	r3, [pc, #524]	; (80012b8 <demoCycle+0x2e4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	7f1b      	ldrb	r3, [r3, #28]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4610      	mov	r0, r2
 80010b2:	f7ff fb31 	bl	8000718 <hex2Str>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4881      	ldr	r0, [pc, #516]	; (80012c0 <demoCycle+0x2ec>)
 80010bc:	f7ff fb04 	bl	80006c8 <logUsart>
                                rfalIsoDepDeselect(); 
 80010c0:	f007 f898 	bl	80081f4 <rfalIsoDepDeselect>
                                break;
 80010c4:	e011      	b.n	80010ea <demoCycle+0x116>
                                platformLog("ISO14443A/NFC-A card found. UID: %s\r\n", hex2Str( nfcDevice->nfcid, nfcDevice->nfcidLen ) );
 80010c6:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <demoCycle+0x2e4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	4b7a      	ldr	r3, [pc, #488]	; (80012b8 <demoCycle+0x2e4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	7f1b      	ldrb	r3, [r3, #28]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff fb1f 	bl	8000718 <hex2Str>
 80010da:	4603      	mov	r3, r0
 80010dc:	4619      	mov	r1, r3
 80010de:	4879      	ldr	r0, [pc, #484]	; (80012c4 <demoCycle+0x2f0>)
 80010e0:	f7ff faf2 	bl	80006c8 <logUsart>
                                rfalNfcaPollerSleep();
 80010e4:	f00b fad4 	bl	800c690 <rfalNfcaPollerSleep>
                                break;
 80010e8:	bf00      	nop
                        platformLog("Operation completed. Tag can be removed from the field\r\n\n");
 80010ea:	4877      	ldr	r0, [pc, #476]	; (80012c8 <demoCycle+0x2f4>)
 80010ec:	f7ff faec 	bl	80006c8 <logUsart>
                        platformLedOff(PLATFORM_LED_A_PORT, PLATFORM_LED_A_PIN);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2101      	movs	r1, #1
 80010f4:	4871      	ldr	r0, [pc, #452]	; (80012bc <demoCycle+0x2e8>)
 80010f6:	f001 fff9 	bl	80030ec <HAL_GPIO_WritePin>
                        strUID = hex2Str(nfcDevice->nfcid, RFAL_NFCV_UID_LEN);
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <demoCycle+0x2e4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2108      	movs	r1, #8
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fb08 	bl	8000718 <hex2Str>
 8001108:	4602      	mov	r2, r0
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <demoCycle+0x2f8>)
 800110c:	601a      	str	r2, [r3, #0]
                        haveUID = 1;
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <demoCycle+0x2fc>)
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
                    	platformLog("SCANNED: strUID = %s\r\n", strUID);
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <demoCycle+0x2f8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	486e      	ldr	r0, [pc, #440]	; (80012d4 <demoCycle+0x300>)
 800111c:	f7ff fad4 	bl	80006c8 <logUsart>
                    	for (int i=0; i<16; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001124:	e01b      	b.n	800115e <demoCycle+0x18a>
                    		if (i<8){
 8001126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001128:	2b07      	cmp	r3, #7
 800112a:	dc0a      	bgt.n	8001142 <demoCycle+0x16e>
                    			i2cDataBuf[i] = strUID[i];
 800112c:	4b67      	ldr	r3, [pc, #412]	; (80012cc <demoCycle+0x2f8>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001132:	4413      	add	r3, r2
 8001134:	7819      	ldrb	r1, [r3, #0]
 8001136:	4a68      	ldr	r2, [pc, #416]	; (80012d8 <demoCycle+0x304>)
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	4413      	add	r3, r2
 800113c:	460a      	mov	r2, r1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e00a      	b.n	8001158 <demoCycle+0x184>
                    			i2cDataBuf[i] = strUID[i-8];
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <demoCycle+0x2f8>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	3b08      	subs	r3, #8
 800114a:	4413      	add	r3, r2
 800114c:	7819      	ldrb	r1, [r3, #0]
 800114e:	4a62      	ldr	r2, [pc, #392]	; (80012d8 <demoCycle+0x304>)
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	4413      	add	r3, r2
 8001154:	460a      	mov	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
                    	for (int i=0; i<16; i++){
 8001158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115a:	3301      	adds	r3, #1
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001160:	2b0f      	cmp	r3, #15
 8001162:	dde0      	ble.n	8001126 <demoCycle+0x152>
                        rfalNfcaPollerInitialize();
 8001164:	f00a fec8 	bl	800bef8 <rfalNfcaPollerInitialize>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 8001168:	e022      	b.n	80011b0 <demoCycle+0x1dc>
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <demoCycle+0x2e4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <demoCycle+0x1ac>
 8001174:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	2b0c      	cmp	r3, #12
 800117e:	d174      	bne.n	800126a <demoCycle+0x296>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 8001180:	4b4d      	ldr	r3, [pc, #308]	; (80012b8 <demoCycle+0x2e4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	785b      	ldrb	r3, [r3, #1]
                            if( ((nfcDevice->dev.nfca.type == RFAL_NFCA_T1T) && (!rfalNfcaIsSensResT1T(&sensRes ))) ||
 8001186:	2b01      	cmp	r3, #1
 8001188:	d00d      	beq.n	80011a6 <demoCycle+0x1d2>
                                ((nfcDevice->dev.nfca.type != RFAL_NFCA_T1T) && (rfalNfcaPollerSelect(nfcDevice->dev.nfca.nfcId1, nfcDevice->dev.nfca.nfcId1Len, &selRes) != ERR_NONE)) )
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <demoCycle+0x2e4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1d98      	adds	r0, r3, #6
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <demoCycle+0x2e4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	f107 021c 	add.w	r2, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	f00b fa06 	bl	800c5ac <rfalNfcaPollerSelect>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d161      	bne.n	800126a <demoCycle+0x296>
                            rfalNfcaPollerSleep();
 80011a6:	f00b fa73 	bl	800c690 <rfalNfcaPollerSleep>
                            platformDelay(130);
 80011aa:	2082      	movs	r0, #130	; 0x82
 80011ac:	f001 fc44 	bl	8002a38 <HAL_Delay>
                        while( rfalNfcaPollerCheckPresence(RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes) == ERR_NONE )
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4619      	mov	r1, r3
 80011b6:	2052      	movs	r0, #82	; 0x52
 80011b8:	f00a fec2 	bl	800bf40 <rfalNfcaPollerCheckPresence>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0d3      	beq.n	800116a <demoCycle+0x196>
                        break;
 80011c2:	e052      	b.n	800126a <demoCycle+0x296>
                            ST_MEMCPY( devUID, nfcDevice->nfcid, nfcDevice->nfcidLen );   /* Copy the UID into local var */
 80011c4:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <demoCycle+0x2e4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6999      	ldr	r1, [r3, #24]
 80011ca:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <demoCycle+0x2e4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7f1b      	ldrb	r3, [r3, #28]
 80011d0:	461a      	mov	r2, r3
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00f f85a 	bl	801028e <memcpy>
                            REVERSE_BYTES( devUID, RFAL_NFCV_UID_LEN );                   /* Reverse the UID for display purposes */
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	3307      	adds	r3, #7
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	e00f      	b.n	8001206 <demoCycle+0x232>
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	627a      	str	r2, [r7, #36]	; 0x24
 8001200:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	429a      	cmp	r2, r3
 800120c:	d3eb      	bcc.n	80011e6 <demoCycle+0x212>
                            platformLog("ISO15693/NFC-V card found. UID: %s\r\n", hex2Str(devUID, RFAL_NFCV_UID_LEN));
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2108      	movs	r1, #8
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fa80 	bl	8000718 <hex2Str>
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	482f      	ldr	r0, [pc, #188]	; (80012dc <demoCycle+0x308>)
 800121e:	f7ff fa53 	bl	80006c8 <logUsart>
                            platformLedOn(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8001222:	2201      	movs	r2, #1
 8001224:	2110      	movs	r1, #16
 8001226:	4825      	ldr	r0, [pc, #148]	; (80012bc <demoCycle+0x2e8>)
 8001228:	f001 ff60 	bl	80030ec <HAL_GPIO_WritePin>
                            platformLog("Operation completed. Tag can be removed from the field\r\n\n");
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <demoCycle+0x2f4>)
 800122e:	f7ff fa4b 	bl	80006c8 <logUsart>
                            platformLedOff(PLATFORM_LED_V_PORT, PLATFORM_LED_V_PIN);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	4821      	ldr	r0, [pc, #132]	; (80012bc <demoCycle+0x2e8>)
 8001238:	f001 ff58 	bl	80030ec <HAL_GPIO_WritePin>
                            rfalNfcvPollerInitialize();
 800123c:	f00b ff16 	bl	800d06c <rfalNfcvPollerInitialize>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001240:	e002      	b.n	8001248 <demoCycle+0x274>
                                platformDelay(130);
 8001242:	2082      	movs	r0, #130	; 0x82
 8001244:	f001 fbf8 	bl	8002a38 <HAL_Delay>
                            while (rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, RFAL_NFCV_UID_LEN * 8U, nfcDevice->dev.nfcv.InvRes.UID, &invRes, &rcvdLen) == ERR_NONE)
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <demoCycle+0x2e4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	1cda      	adds	r2, r3, #3
 800124e:	f107 0110 	add.w	r1, r7, #16
 8001252:	f107 030e 	add.w	r3, r7, #14
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	2140      	movs	r1, #64	; 0x40
 800125c:	2020      	movs	r0, #32
 800125e:	f00b ff4a 	bl	800d0f6 <rfalNfcvPollerInventory>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ec      	beq.n	8001242 <demoCycle+0x26e>
                        break;
 8001268:	e000      	b.n	800126c <demoCycle+0x298>
                        break;
 800126a:	bf00      	nop
                rfalNfcDeactivate( false );
 800126c:	2000      	movs	r0, #0
 800126e:	f007 fddb 	bl	8008e28 <rfalNfcDeactivate>
                platformDelay( 500 );
 8001272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001276:	f001 fbdf 	bl	8002a38 <HAL_Delay>
                state = DEMO_ST_START_DISCOVERY;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <demoCycle+0x2d8>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
            break;
 8001280:	e002      	b.n	8001288 <demoCycle+0x2b4>
            	platformLog("no tag detected\r\n");
 8001282:	4817      	ldr	r0, [pc, #92]	; (80012e0 <demoCycle+0x30c>)
 8001284:	f7ff fa20 	bl	80006c8 <logUsart>
            break;
 8001288:	bf00      	nop
    }
}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000151 	.word	0x20000151
 8001298:	20000154 	.word	0x20000154
 800129c:	080113e8 	.word	0x080113e8
 80012a0:	20000024 	.word	0x20000024
 80012a4:	20000020 	.word	0x20000020
 80012a8:	08011410 	.word	0x08011410
 80012ac:	20000150 	.word	0x20000150
 80012b0:	200000cc 	.word	0x200000cc
 80012b4:	08011418 	.word	0x08011418
 80012b8:	20000158 	.word	0x20000158
 80012bc:	48000400 	.word	0x48000400
 80012c0:	0801142c 	.word	0x0801142c
 80012c4:	0801145c 	.word	0x0801145c
 80012c8:	08011484 	.word	0x08011484
 80012cc:	200000c4 	.word	0x200000c4
 80012d0:	200000c1 	.word	0x200000c1
 80012d4:	080114c0 	.word	0x080114c0
 80012d8:	20001014 	.word	0x20001014
 80012dc:	080114d8 	.word	0x080114d8
 80012e0:	08011500 	.word	0x08011500

080012e4 <spiInit>:

SPI_HandleTypeDef *pSpi = 0;


void spiInit(SPI_HandleTypeDef *hspi)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
    pSpi = hspi;
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <spiInit+0x2c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]

    /* enabling SPI block will put SCLK to output, guaranteeing proper state when spiSelect() gets called */
    __HAL_SPI_ENABLE(hspi);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001300:	601a      	str	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000224 	.word	0x20000224

08001314 <spiTxRx>:
{
   HAL_GPIO_WritePin(ssPort, ssPin, GPIO_PIN_SET);
}

HAL_StatusTypeDef spiTxRx(const uint8_t *txData, uint8_t *rxData, uint16_t length)
{  
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]
  if(pSpi == 0)
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <spiTxRx+0x70>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <spiTxRx+0x1a>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e025      	b.n	800137a <spiTxRx+0x66>
  
  if(length > SPI_BUF_LEN)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b61      	cmp	r3, #97	; 0x61
 8001332:	d901      	bls.n	8001338 <spiTxRx+0x24>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e020      	b.n	800137a <spiTxRx+0x66>
  }
  
  /* Initialize Tx data*/
  if(txData != NULL)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <spiTxRx+0x38>
  {
    memcpy(txBuf, txData, length );
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	461a      	mov	r2, r3
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	4810      	ldr	r0, [pc, #64]	; (8001388 <spiTxRx+0x74>)
 8001346:	f00e ffa2 	bl	801028e <memcpy>
 800134a:	e005      	b.n	8001358 <spiTxRx+0x44>
  }
  else
  {
    memset(txBuf, 0x00, length );
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	461a      	mov	r2, r3
 8001350:	2100      	movs	r1, #0
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <spiTxRx+0x74>)
 8001354:	f00e ffbf 	bl	80102d6 <memset>
  }

  return HAL_SPI_TransmitReceive(pSpi, txBuf, (rxData != NULL) ? rxData : rxBuf, length, SPI_TIMEOUT);
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <spiTxRx+0x70>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <spiTxRx+0x52>
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	e000      	b.n	8001368 <spiTxRx+0x54>
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <spiTxRx+0x78>)
 8001368:	88f9      	ldrh	r1, [r7, #6]
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	460b      	mov	r3, r1
 8001372:	4905      	ldr	r1, [pc, #20]	; (8001388 <spiTxRx+0x74>)
 8001374:	f004 fb1c 	bl	80059b0 <HAL_SPI_TransmitReceive>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000224 	.word	0x20000224
 8001388:	2000015c 	.word	0x2000015c
 800138c:	200001c0 	.word	0x200001c0

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b24      	ldr	r3, [pc, #144]	; (8001428 <HAL_MspInit+0x98>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139a:	4a23      	ldr	r2, [pc, #140]	; (8001428 <HAL_MspInit+0x98>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6613      	str	r3, [r2, #96]	; 0x60
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_MspInit+0x98>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_MspInit+0x98>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_MspInit+0x98>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_MspInit+0x98>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f001 fc24 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	f06f 000b 	mvn.w	r0, #11
 80013d4:	f001 fc29 	bl	8002c2a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	f06f 000a 	mvn.w	r0, #10
 80013e0:	f001 fc23 	bl	8002c2a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	f06f 0009 	mvn.w	r0, #9
 80013ec:	f001 fc1d 	bl	8002c2a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	f06f 0004 	mvn.w	r0, #4
 80013f8:	f001 fc17 	bl	8002c2a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	f06f 0003 	mvn.w	r0, #3
 8001404:	f001 fc11 	bl	8002c2a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	f06f 0001 	mvn.w	r0, #1
 8001410:	f001 fc0b 	bl	8002c2a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f001 fc05 	bl	8002c2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000

0800142c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_SPI_MspInit+0x54>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d11c      	bne.n	8001478 <HAL_SPI_MspInit+0x4c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_SPI_MspInit+0x58>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_SPI_MspInit+0x58>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001448:	6613      	str	r3, [r2, #96]	; 0x60
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_SPI_MspInit+0x58>)
 800144c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23e0      	movs	r3, #224	; 0xe0
 8001458:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001466:	2305      	movs	r3, #5
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001474:	f001 fc7a 	bl	8002d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40013000 	.word	0x40013000
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <HAL_UART_MspInit+0x54>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d11c      	bne.n	80014d4 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0x58>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_UART_MspInit+0x58>)
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_UART_MspInit+0x58>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	230c      	movs	r3, #12
 80014b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c2:	2307      	movs	r3, #7
 80014c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f001 fc4c 	bl	8002d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_I2C_MspInit+0x9c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d138      	bne.n	8001578 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_I2C_MspInit+0xa0>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_I2C_MspInit+0xa0>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_I2C_MspInit+0xa0>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001530:	2304      	movs	r3, #4
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <HAL_I2C_MspInit+0xa4>)
 800153c:	f001 fc16 	bl	8002d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_I2C_MspInit+0xa0>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_I2C_MspInit+0xa0>)
 8001546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154a:	6593      	str	r3, [r2, #88]	; 0x58
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_I2C_MspInit+0xa0>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	201f      	movs	r0, #31
 800155e:	f001 fb64 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001562:	201f      	movs	r0, #31
 8001564:	f001 fb7d 	bl	8002c62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2020      	movs	r0, #32
 800156e:	f001 fb5c 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001572:	2020      	movs	r0, #32
 8001574:	f001 fb75 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40005400 	.word	0x40005400
 8001584:	40021000 	.word	0x40021000
 8001588:	48000400 	.word	0x48000400

0800158c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f001 fa34 	bl	80029fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001594:	f001 fb9c 	bl	8002cd0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f001 fdd5 	bl	8003150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  st25r3911Isr();
 80015a6:	f001 f867 	bl	8002678 <st25r3911Isr>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <I2C1_EV_IRQHandler+0x10>)
 80015b6:	f001 ff86 	bl	80034c6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000fc8 	.word	0x20000fc8

080015c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <I2C1_ER_IRQHandler+0x10>)
 80015ca:	f001 ff96 	bl	80034fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000fc8 	.word	0x20000fc8

080015d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e00a      	b.n	8001600 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ea:	f3af 8000 	nop.w
 80015ee:	4601      	mov	r1, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf0      	blt.n	80015ea <_read+0x12>
	}

return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e009      	b.n	8001638 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf1      	blt.n	8001624 <_write+0x12>
	}
	return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_close>:

int _close(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	return -1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	605a      	str	r2, [r3, #4]
	return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_isatty>:

int _isatty(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return 1;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f00e fd9a 	bl	801021c <__errno>
 80016e8:	4602      	mov	r2, r0
 80016ea:	230c      	movs	r3, #12
 80016ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20018000 	.word	0x20018000
 8001714:	00000400 	.word	0x00000400
 8001718:	20000228 	.word	0x20000228
 800171c:	20001110 	.word	0x20001110

08001720 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <SystemInit+0x64>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a16      	ldr	r2, [pc, #88]	; (8001784 <SystemInit+0x64>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <SystemInit+0x68>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a13      	ldr	r2, [pc, #76]	; (8001788 <SystemInit+0x68>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <SystemInit+0x68>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <SystemInit+0x68>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <SystemInit+0x68>)
 800174c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001750:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001754:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <SystemInit+0x68>)
 8001758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <SystemInit+0x68>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <SystemInit+0x68>)
 8001764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001768:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <SystemInit+0x68>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <SystemInit+0x64>)
 8001772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001776:	609a      	str	r2, [r3, #8]
#endif
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	40021000 	.word	0x40021000

0800178c <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001790:	f7ff ffc6 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001794:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001796:	e003      	b.n	80017a0 <LoopCopyDataInit>

08001798 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800179a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800179c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800179e:	3104      	adds	r1, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017a8:	d3f6      	bcc.n	8001798 <CopyDataInit>
	ldr	r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017ac:	e002      	b.n	80017b4 <LoopFillZerobss>

080017ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017b0:	f842 3b04 	str.w	r3, [r2], #4

080017b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <LoopForever+0x16>)
	cmp	r2, r3
 80017b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017b8:	d3f9      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ba:	f00e fd35 	bl	8010228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7ff f827 	bl	8000810 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017c8:	080117b4 	.word	0x080117b4
	ldr	r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017d0:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 80017d4:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 80017d8:	20001110 	.word	0x20001110

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>

080017de <st25r3911TxRxOn>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

void st25r3911TxRxOn( void )
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
    st25r3911SetRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80017e2:	2148      	movs	r1, #72	; 0x48
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 fd58 	bl	800229a <st25r3911SetRegisterBits>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}

080017ee <st25r3911TxRxOff>:

void st25r3911TxRxOff( void )
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
    st25r3911ClrRegisterBits(ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_rx_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 80017f2:	2148      	movs	r1, #72	; 0x48
 80017f4:	2002      	movs	r0, #2
 80017f6:	f000 fd2d 	bl	8002254 <st25r3911ClrRegisterBits>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}

080017fe <st25r3911OscOn>:


void st25r3911OscOn( void )
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
    /* Check if oscillator is already turned on and stable                                                */        
    /* Use ST25R3911_REG_OP_CONTROL_en instead of ST25R3911_REG_AUX_DISPLAY_osc_ok to be on the safe side */    
    if( !st25r3911CheckReg( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_en, ST25R3911_REG_OP_CONTROL_en ) )
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	2002      	movs	r0, #2
 8001808:	f000 f9ba 	bl	8001b80 <st25r3911CheckReg>
 800180c:	4603      	mov	r3, r0
 800180e:	f083 0301 	eor.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d011      	beq.n	800183c <st25r3911OscOn+0x3e>
    {
        /* Clear any eventual previous oscillator IRQ */
        st25r3911GetInterrupt( ST25R3911_IRQ_MASK_OSC );
 8001818:	2080      	movs	r0, #128	; 0x80
 800181a:	f001 f831 	bl	8002880 <st25r3911GetInterrupt>
      
        /* enable oscillator frequency stable interrupt */
        st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_OSC);
 800181e:	2080      	movs	r0, #128	; 0x80
 8001820:	f001 f866 	bl	80028f0 <st25r3911EnableInterrupts>

        /* enable oscillator and regulator output */
        st25r3911ModifyRegister(ST25R3911_REG_OP_CONTROL, 0x00, ST25R3911_REG_OP_CONTROL_en);
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	2100      	movs	r1, #0
 8001828:	2002      	movs	r0, #2
 800182a:	f000 fd6a 	bl	8002302 <st25r3911ModifyRegister>

        /* wait for the oscillator interrupt */
        st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_OSC, ST25R3911_OSC_STABLE_TIMEOUT);
 800182e:	210a      	movs	r1, #10
 8001830:	2080      	movs	r0, #128	; 0x80
 8001832:	f000 ffd5 	bl	80027e0 <st25r3911WaitForInterruptsTimed>
        st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_OSC);
 8001836:	2080      	movs	r0, #128	; 0x80
 8001838:	f001 f866 	bl	8002908 <st25r3911DisableInterrupts>
    }
    
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <st25r3911Initialize>:


void st25r3911Initialize(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
    uint16_t vdd_mV;

    /* first, reset the st25r3911 */
    st25r3911ExecuteCommand(ST25R3911_CMD_SET_DEFAULT);
 8001846:	20c1      	movs	r0, #193	; 0xc1
 8001848:	f000 fe3e 	bl	80024c8 <st25r3911ExecuteCommand>

    /* Set Operation Control Register to default value */
    st25r3911WriteRegister(ST25R3911_REG_OP_CONTROL, 0x00);
 800184c:	2100      	movs	r1, #0
 800184e:	2002      	movs	r0, #2
 8001850:	f000 fcb6 	bl	80021c0 <st25r3911WriteRegister>
        
    /* enable pull downs on miso line */
    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2, 0, 
 8001854:	2218      	movs	r2, #24
 8001856:	2100      	movs	r1, #0
 8001858:	2001      	movs	r0, #1
 800185a:	f000 fd52 	bl	8002302 <st25r3911ModifyRegister>
            ST25R3911_REG_IO_CONF2_miso_pd1 |
            ST25R3911_REG_IO_CONF2_miso_pd2);

    /* after reset all interrupts are enabled. so disable them at first */
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_ALL);
 800185e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001862:	f001 f851 	bl	8002908 <st25r3911DisableInterrupts>
    /* and clear them, just to be sure... */
    st25r3911ClearInterrupts();
 8001866:	f001 f85b 	bl	8002920 <st25r3911ClearInterrupts>
    
    st25r3911OscOn();
 800186a:	f7ff ffc8 	bl	80017fe <st25r3911OscOn>
    
    /* Measure vdd and set sup3V bit accordingly */
    vdd_mV = st25r3911MeasureVoltage(ST25R3911_REG_REGULATOR_CONTROL_mpsv_vdd);
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f928 	bl	8001ac4 <st25r3911MeasureVoltage>
 8001874:	4603      	mov	r3, r0
 8001876:	80fb      	strh	r3, [r7, #6]

    st25r3911ModifyRegister(ST25R3911_REG_IO_CONF2,
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800187e:	d201      	bcs.n	8001884 <st25r3911Initialize+0x44>
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	e000      	b.n	8001886 <st25r3911Initialize+0x46>
 8001884:	2300      	movs	r3, #0
 8001886:	461a      	mov	r2, r3
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	2001      	movs	r0, #1
 800188c:	f000 fd39 	bl	8002302 <st25r3911ModifyRegister>
                         ST25R3911_REG_IO_CONF2_sup3V,
                         (uint8_t)((vdd_mV < 3600U)?ST25R3911_REG_IO_CONF2_sup3V:0U));

    /* Make sure Transmitter and Receiver are disabled */
    st25r3911TxRxOff();
 8001890:	f7ff ffad 	bl	80017ee <st25r3911TxRxOff>
    
    return;
 8001894:	bf00      	nop
}
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <st25r3911AdjustRegulators>:

    return;
}

ReturnCode st25r3911AdjustRegulators(uint16_t* result_mV)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t io_conf2;
    ReturnCode err = ERR_NONE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	81fb      	strh	r3, [r7, #14]

    /* Reset logic and set regulated voltages to be defined by result of Adjust Regulators command */
    st25r3911SetRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	202a      	movs	r0, #42	; 0x2a
 80018ac:	f000 fcf5 	bl	800229a <st25r3911SetRegisterBits>
    st25r3911ClrRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s );
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	202a      	movs	r0, #42	; 0x2a
 80018b4:	f000 fcce 	bl	8002254 <st25r3911ClrRegisterBits>

    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_ADJUST_REGULATORS,
 80018b8:	f107 030d 	add.w	r3, r7, #13
 80018bc:	2205      	movs	r2, #5
 80018be:	212b      	movs	r1, #43	; 0x2b
 80018c0:	20d6      	movs	r0, #214	; 0xd6
 80018c2:	f000 fad5 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_REGULATOR_RESULT,
                                    5,
                                    &result);
  
    st25r3911ReadRegister(ST25R3911_REG_IO_CONF2, &io_conf2);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 fb4f 	bl	8001f70 <st25r3911ReadRegister>

    result >>= ST25R3911_REG_REGULATOR_RESULT_shift_reg;
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	737b      	strb	r3, [r7, #13]
    result -= 5U;
 80018da:	7b7b      	ldrb	r3, [r7, #13]
 80018dc:	3b05      	subs	r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	737b      	strb	r3, [r7, #13]
    if (result_mV != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d02b      	beq.n	8001940 <st25r3911AdjustRegulators+0xa4>
    {
        if((io_conf2 & ST25R3911_REG_IO_CONF2_sup3V) != 0U)
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da16      	bge.n	800191e <st25r3911AdjustRegulators+0x82>
        {
            *result_mV = 2400;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80018f6:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 100U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	881a      	ldrh	r2, [r3, #0]
 80018fc:	7b7b      	ldrb	r3, [r7, #13]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	0089      	lsls	r1, r1, #2
 8001904:	440b      	add	r3, r1
 8001906:	4619      	mov	r1, r3
 8001908:	0088      	lsls	r0, r1, #2
 800190a:	4619      	mov	r1, r3
 800190c:	4603      	mov	r3, r0
 800190e:	440b      	add	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	b29b      	uxth	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	801a      	strh	r2, [r3, #0]
 800191c:	e010      	b.n	8001940 <st25r3911AdjustRegulators+0xa4>
        }
        else
        {
            *result_mV = 3900;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001924:	801a      	strh	r2, [r3, #0]
            *result_mV += (uint16_t)result * 120U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	0109      	lsls	r1, r1, #4
 8001932:	1acb      	subs	r3, r1, r3
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	b29b      	uxth	r3, r3
 8001938:	4413      	add	r3, r2
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	801a      	strh	r2, [r3, #0]
        }
    }
    return err;
 8001940:	89fb      	ldrh	r3, [r7, #14]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <st25r3911MeasureAmplitude>:

void st25r3911MeasureAmplitude(uint8_t* result)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_AMPLITUDE,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	220a      	movs	r2, #10
 8001956:	2120      	movs	r1, #32
 8001958:	20d3      	movs	r0, #211	; 0xd3
 800195a:	f000 fa89 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <st25r3911MeasurePhase>:

void st25r3911MeasurePhase(uint8_t* result)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_PHASE,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	220a      	movs	r2, #10
 8001972:	2120      	movs	r1, #32
 8001974:	20d9      	movs	r0, #217	; 0xd9
 8001976:	f000 fa7b 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <st25r3911MeasureCapacitance>:

void st25r3911MeasureCapacitance(uint8_t* result)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_MEASURE_CAPACITANCE, 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	220a      	movs	r2, #10
 800198e:	2120      	movs	r1, #32
 8001990:	20de      	movs	r0, #222	; 0xde
 8001992:	f000 fa6d 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_AD_RESULT,
                                    10,
                                    result);
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <st25r3911CalibrateAntenna>:

void st25r3911CalibrateAntenna(uint8_t* result)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
    st25r3911ExecuteCommandAndGetResult(ST25R3911_CMD_CALIBRATE_ANTENNA,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220a      	movs	r2, #10
 80019aa:	2123      	movs	r1, #35	; 0x23
 80019ac:	20d8      	movs	r0, #216	; 0xd8
 80019ae:	f000 fa5f 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>
                                    ST25R3911_REG_ANT_CAL_RESULT,
                                    10,
                                    result);
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <st25r3911CalibrateCapacitiveSensor>:
                                    result);
}


ReturnCode st25r3911CalibrateCapacitiveSensor(uint8_t* result)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    res;
    
    /* Clear Manual calibration values to enable automatic calibration mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_CAP_SENSOR_CONTROL, ST25R3916_REG_CAP_SENSOR_CONTROL_mask_cs_mcal );
 80019c2:	21f8      	movs	r1, #248	; 0xf8
 80019c4:	202e      	movs	r0, #46	; 0x2e
 80019c6:	f000 fc45 	bl	8002254 <st25r3911ClrRegisterBits>
    
    /* Execute automatic calibration */
    ret = st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_CALIBRATE_C_SENSOR, ST25R3911_REG_CAP_SENSOR_RESULT, ST25R3911_TOUT_CALIBRATE_CAP_SENSOR, &res );
 80019ca:	f107 030d 	add.w	r3, r7, #13
 80019ce:	2204      	movs	r2, #4
 80019d0:	212f      	movs	r1, #47	; 0x2f
 80019d2:	20dd      	movs	r0, #221	; 0xdd
 80019d4:	f000 fa4c 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>
 80019d8:	4603      	mov	r3, r0
 80019da:	81fb      	strh	r3, [r7, #14]
    
    /* Check wether the calibration was successull */
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	f003 0302 	and.w	r3, r3, #2
    if( ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) != ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_end) ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <st25r3911CalibrateCapacitiveSensor+0x3c>
        ((res & ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) == ST25R3911_REG_CAP_SENSOR_RESULT_cs_cal_err) || (ret != ERR_NONE) )
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <st25r3911CalibrateCapacitiveSensor+0x40>
    {
        return ERR_IO;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e008      	b.n	8001a0c <st25r3911CalibrateCapacitiveSensor+0x52>
    }
    
    if( result != NULL )
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <st25r3911CalibrateCapacitiveSensor+0x50>
    {
        (*result) = (uint8_t)(res >> ST25R3911_REG_CAP_SENSOR_CONTROL_shift_cs_mcal);
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <st25r3911SetBitrate>:


ReturnCode st25r3911SetBitrate(uint8_t txRate, uint8_t rxRate)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4613      	mov	r3, r2
 8001a22:	71bb      	strb	r3, [r7, #6]
    uint8_t reg;

    st25r3911ReadRegister(ST25R3911_REG_BIT_RATE, &reg);
 8001a24:	f107 030f 	add.w	r3, r7, #15
 8001a28:	4619      	mov	r1, r3
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f000 faa0 	bl	8001f70 <st25r3911ReadRegister>
    if (rxRate != ST25R3911_BR_DO_NOT_SET)
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d00e      	beq.n	8001a54 <st25r3911SetBitrate+0x40>
    {
        if(rxRate > ST25R3911_BR_3390)
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	2b05      	cmp	r3, #5
 8001a3a:	d901      	bls.n	8001a40 <st25r3911SetBitrate+0x2c>
        {
            return ERR_PARAM;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	e025      	b.n	8001a8c <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_rxrate);     /* MISRA 10.3 */
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	f023 030f 	bic.w	r3, r3, #15
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	73fb      	strb	r3, [r7, #15]
            reg |= rxRate << ST25R3911_REG_BIT_RATE_shift_rxrate;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (txRate != ST25R3911_BR_DO_NOT_SET)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d012      	beq.n	8001a80 <st25r3911SetBitrate+0x6c>
    {
        if(txRate > ST25R3911_BR_6780)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	d901      	bls.n	8001a64 <st25r3911SetBitrate+0x50>
        {
            return ERR_PARAM;
 8001a60:	2307      	movs	r3, #7
 8001a62:	e013      	b.n	8001a8c <st25r3911SetBitrate+0x78>
        }
        else
        {
            reg = (uint8_t)(reg & ~ST25R3911_REG_BIT_RATE_mask_txrate);     /* MISRA 10.3 */
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	73fb      	strb	r3, [r7, #15]
            reg |= txRate<<ST25R3911_REG_BIT_RATE_shift_txrate;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	73fb      	strb	r3, [r7, #15]
        }
    }
    st25r3911WriteRegister(ST25R3911_REG_BIT_RATE, reg);
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	4619      	mov	r1, r3
 8001a84:	2004      	movs	r0, #4
 8001a86:	f000 fb9b 	bl	80021c0 <st25r3911WriteRegister>
    
    return ERR_NONE;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <st25r3911MeasurePowerSupply>:

uint8_t st25r3911MeasurePowerSupply( uint8_t mpsv )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
   
    /* Set the source of direct command: Measure Power Supply Voltage */
    st25r3911ChangeRegisterBits( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_mask_mpsv, mpsv );
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2106      	movs	r1, #6
 8001aa4:	202a      	movs	r0, #42	; 0x2a
 8001aa6:	f000 fc16 	bl	80022d6 <st25r3911ChangeRegisterBits>

    /* Execute command: Measure Power Supply Voltage */
    st25r3911ExecuteCommandAndGetResult( ST25R3911_CMD_MEASURE_VDD, ST25R3911_REG_AD_RESULT, 10, &result);
 8001aaa:	f107 030f 	add.w	r3, r7, #15
 8001aae:	220a      	movs	r2, #10
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	20df      	movs	r0, #223	; 0xdf
 8001ab4:	f000 f9dc 	bl	8001e70 <st25r3911ExecuteCommandAndGetResult>

    return result;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <st25r3911MeasureVoltage>:

uint16_t st25r3911MeasureVoltage(uint8_t mpsv)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
    uint8_t result; 
    uint16_t mV;

    result = st25r3911MeasurePowerSupply( mpsv );
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ffdf 	bl	8001a94 <st25r3911MeasurePowerSupply>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]

    mV = ((uint16_t)result) * 23U;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	441a      	add	r2, r3
 8001ae4:	00d2      	lsls	r2, r2, #3
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	81bb      	strh	r3, [r7, #12]
    mV += ((((uint16_t)result) * 438U) + 500U) / 1000U;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <st25r3911MeasureVoltage+0x50>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	89bb      	ldrh	r3, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	81bb      	strh	r3, [r7, #12]

    return mV;
 8001b08:	89bb      	ldrh	r3, [r7, #12]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <st25r3911StartGPTimer_8fcs>:
{
    return st25r3911NoResponseTime_64fcs;
}

void st25r3911StartGPTimer_8fcs(uint16_t gpt_8fcs, uint8_t trigger_source)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	80fb      	strh	r3, [r7, #6]
 8001b24:	4613      	mov	r3, r2
 8001b26:	717b      	strb	r3, [r7, #5]
    st25r3911SetGPTime_8fcs(gpt_8fcs);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f811 	bl	8001b52 <st25r3911SetGPTime_8fcs>

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, 
 8001b30:	797b      	ldrb	r3, [r7, #5]
 8001b32:	461a      	mov	r2, r3
 8001b34:	21e0      	movs	r1, #224	; 0xe0
 8001b36:	2011      	movs	r0, #17
 8001b38:	f000 fbe3 	bl	8002302 <st25r3911ModifyRegister>
            ST25R3911_REG_GPT_CONTROL_gptc_mask, 
            trigger_source);
    if (trigger_source == 0U)
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <st25r3911StartGPTimer_8fcs+0x32>
    {
        st25r3911ExecuteCommand(ST25R3911_CMD_START_GP_TIMER);
 8001b42:	20e0      	movs	r0, #224	; 0xe0
 8001b44:	f000 fcc0 	bl	80024c8 <st25r3911ExecuteCommand>
    }

    return;
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
}
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <st25r3911SetGPTime_8fcs>:

void st25r3911SetGPTime_8fcs(uint16_t gpt_8fcs)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	80fb      	strh	r3, [r7, #6]
    st25r3911WriteRegister(ST25R3911_REG_GPT1, (uint8_t)(gpt_8fcs >> 8));
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4619      	mov	r1, r3
 8001b66:	2012      	movs	r0, #18
 8001b68:	f000 fb2a 	bl	80021c0 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_GPT2, (uint8_t)(gpt_8fcs & 0xffU));
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	2013      	movs	r0, #19
 8001b74:	f000 fb24 	bl	80021c0 <st25r3911WriteRegister>

    return;
 8001b78:	bf00      	nop
}
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <st25r3911CheckReg>:

bool st25r3911CheckReg( uint8_t reg, uint8_t mask, uint8_t value )
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	71bb      	strb	r3, [r7, #6]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	717b      	strb	r3, [r7, #5]
    uint8_t regVal;
    
    regVal = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( reg, &regVal );
 8001b96:	f107 020f 	add.w	r2, r7, #15
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f9e6 	bl	8001f70 <st25r3911ReadRegister>
    
    return ((regVal & mask) == value );
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	79bb      	ldrb	r3, [r7, #6]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	797a      	ldrb	r2, [r7, #5]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <st25r3911CheckChipID>:


bool st25r3911CheckChipID( uint8_t *rev )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    uint8_t ID;
    
    ID = 0;    
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
    st25r3911ReadRegister( ST25R3911_REG_IC_IDENTITY, &ID );
 8001bcc:	f107 030f 	add.w	r3, r7, #15
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	203f      	movs	r0, #63	; 0x3f
 8001bd4:	f000 f9cc 	bl	8001f70 <st25r3911ReadRegister>
    
    /* Check if IC Identity Register contains ST25R3911's IC type code */
    if( (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_type) != ST25R3911_REG_IC_IDENTITY_ic_type )
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d001      	beq.n	8001be6 <st25r3911CheckChipID+0x26>
    {
        return false;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e009      	b.n	8001bfa <st25r3911CheckChipID+0x3a>
    }
        
    if(rev != NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <st25r3911CheckChipID+0x38>
    {
        *rev = (ID & ST25R3911_REG_IC_IDENTITY_mask_ic_rev);
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	701a      	strb	r2, [r3, #0]
    }
    
    return true;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <st25r3911SetNoResponseTime_64fcs>:

ReturnCode st25r3911SetNoResponseTime_64fcs(uint32_t nrt_64fcs)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    ReturnCode err = ERR_NONE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	81fb      	strh	r3, [r7, #14]
    uint8_t nrt_step = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	737b      	strb	r3, [r7, #13]
    uint32_t noResponseTime_64fcs = nrt_64fcs;      /* MISRA 17.8: Use intermediate variable */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60bb      	str	r3, [r7, #8]

    st25r3911NoResponseTime_64fcs = noResponseTime_64fcs;
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <st25r3911SetNoResponseTime_64fcs+0x78>)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	6013      	str	r3, [r2, #0]
    if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d312      	bcc.n	8001c4c <st25r3911SetNoResponseTime_64fcs+0x48>
    {
        nrt_step = ST25R3911_REG_GPT_CONTROL_nrt_step;
 8001c26:	2301      	movs	r3, #1
 8001c28:	737b      	strb	r3, [r7, #13]
        noResponseTime_64fcs = (noResponseTime_64fcs + 63U) / 64U;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	333f      	adds	r3, #63	; 0x3f
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	60bb      	str	r3, [r7, #8]
        if (noResponseTime_64fcs > (uint32_t)0xFFFFU)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d304      	bcc.n	8001c44 <st25r3911SetNoResponseTime_64fcs+0x40>
        {
            noResponseTime_64fcs = 0xFFFFU;
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	60bb      	str	r3, [r7, #8]
            err = ERR_PARAM;
 8001c40:	2307      	movs	r3, #7
 8001c42:	81fb      	strh	r3, [r7, #14]
        }
        st25r3911NoResponseTime_64fcs = 64U * noResponseTime_64fcs;
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <st25r3911SetNoResponseTime_64fcs+0x78>)
 8001c4a:	6013      	str	r3, [r2, #0]
    }

    st25r3911ModifyRegister(ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_step, nrt_step);
 8001c4c:	7b7b      	ldrb	r3, [r7, #13]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2101      	movs	r1, #1
 8001c52:	2011      	movs	r0, #17
 8001c54:	f000 fb55 	bl	8002302 <st25r3911ModifyRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER1, (uint8_t)(noResponseTime_64fcs >> 8));
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	200f      	movs	r0, #15
 8001c62:	f000 faad 	bl	80021c0 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NO_RESPONSE_TIMER2, (uint8_t)(noResponseTime_64fcs & 0xffU));
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	2010      	movs	r0, #16
 8001c6e:	f000 faa7 	bl	80021c0 <st25r3911WriteRegister>

    return err;
 8001c72:	89fb      	ldrh	r3, [r7, #14]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000022c 	.word	0x2000022c

08001c80 <st25r3911PerformCollisionAvoidance>:
    
    return err;
}

ReturnCode st25r3911PerformCollisionAvoidance( uint8_t FieldONCmd, uint8_t pdThreshold, uint8_t caThreshold, uint8_t nTRFW )
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	4603      	mov	r3, r0
 8001c94:	71bb      	strb	r3, [r7, #6]
 8001c96:	460b      	mov	r3, r1
 8001c98:	717b      	strb	r3, [r7, #5]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	713b      	strb	r3, [r7, #4]
    uint8_t  treMask;
    uint32_t irqs;
    
    if( (FieldONCmd != ST25R3911_CMD_INITIAL_RF_COLLISION)    && 
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2bc8      	cmp	r3, #200	; 0xc8
 8001ca2:	d007      	beq.n	8001cb4 <st25r3911PerformCollisionAvoidance+0x34>
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2bca      	cmp	r3, #202	; 0xca
 8001ca8:	d004      	beq.n	8001cb4 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_0) && 
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2bc9      	cmp	r3, #201	; 0xc9
 8001cae:	d001      	beq.n	8001cb4 <st25r3911PerformCollisionAvoidance+0x34>
        (FieldONCmd != ST25R3911_CMD_RESPONSE_RF_COLLISION_N)   )
    {
        return ERR_PARAM;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	e056      	b.n	8001d62 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    /* Check if new thresholds are to be applied */
    if( (pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) || (caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET) )
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d102      	bne.n	8001cc0 <st25r3911PerformCollisionAvoidance+0x40>
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	2bff      	cmp	r3, #255	; 0xff
 8001cbe:	d01e      	beq.n	8001cfe <st25r3911PerformCollisionAvoidance+0x7e>
    {
        treMask = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
        
        if(pdThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d003      	beq.n	8001cd2 <st25r3911PerformCollisionAvoidance+0x52>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_trg;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cd0:	73fb      	strb	r3, [r7, #15]
        }
        
        if(caThreshold != ST25R3911_THRESHOLD_DO_NOT_SET)
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d003      	beq.n	8001ce0 <st25r3911PerformCollisionAvoidance+0x60>
        {
            treMask |= ST25R3911_REG_FIELD_THRESHOLD_mask_rfe;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	f043 030f 	orr.w	r3, r3, #15
 8001cde:	73fb      	strb	r3, [r7, #15]
        }
            
        /* Set Detection Threshold and|or Collision Avoidance Threshold */
        st25r3911ChangeRegisterBits( ST25R3911_REG_FIELD_THRESHOLD, treMask, (pdThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_trg) | (caThreshold & ST25R3911_REG_FIELD_THRESHOLD_mask_rfe ) );
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	797b      	ldrb	r3, [r7, #5]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	2029      	movs	r0, #41	; 0x29
 8001cfa:	f000 faec 	bl	80022d6 <st25r3911ChangeRegisterBits>
    }
    
    /* Set n x TRFW */
    st25r3911ModifyRegister(ST25R3911_REG_AUX, ST25R3911_REG_AUX_mask_nfc_n, (nTRFW & ST25R3911_REG_AUX_mask_nfc_n) );
 8001cfe:	793b      	ldrb	r3, [r7, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	2103      	movs	r1, #3
 8001d0a:	2009      	movs	r0, #9
 8001d0c:	f000 faf9 	bl	8002302 <st25r3911ModifyRegister>
    
    /* Enable and clear CA specific interrupts and execute command */
    st25r3911EnableInterrupts( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8001d10:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001d14:	f000 fdec 	bl	80028f0 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT) );
 8001d18:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001d1c:	f000 fdb0 	bl	8002880 <st25r3911GetInterrupt>
    
    st25r3911ExecuteCommand(FieldONCmd);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fbd0 	bl	80024c8 <st25r3911ExecuteCommand>
    
    irqs = st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT, ST25R3911_CA_TIMEOUT );
 8001d28:	210a      	movs	r1, #10
 8001d2a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001d2e:	f000 fd57 	bl	80027e0 <st25r3911WaitForInterruptsTimed>
 8001d32:	60b8      	str	r0, [r7, #8]
    
    /* Clear any previous External Field events and disable CA specific interrupts */
    st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_EON) );
 8001d34:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001d38:	f000 fda2 	bl	8002880 <st25r3911GetInterrupt>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_CAC | ST25R3911_IRQ_MASK_CAT);
 8001d3c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001d40:	f000 fde2 	bl	8002908 <st25r3911DisableInterrupts>
    
    
    if((ST25R3911_IRQ_MASK_CAC & irqs) != 0U)                             /* Collision occurred */
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <st25r3911PerformCollisionAvoidance+0xd2>
    {
        return ERR_RF_COLLISION;
 8001d4e:	231d      	movs	r3, #29
 8001d50:	e007      	b.n	8001d62 <st25r3911PerformCollisionAvoidance+0xe2>
    }
    
    if((ST25R3911_IRQ_MASK_CAT & irqs) != 0U)                             /* No Collision detected, Field On */
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <st25r3911PerformCollisionAvoidance+0xe0>
    {
        return ERR_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <st25r3911PerformCollisionAvoidance+0xe2>
    }

    /* No interrupt detected */
    return ERR_INTERNAL;
 8001d60:	230c      	movs	r3, #12
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}

08001d6a <st25r3911SetNumTxBits>:
    return ERR_NONE;
}


void st25r3911SetNumTxBits( uint32_t nBits )
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES2, (uint8_t)((nBits >> 0) & 0xffU)); 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	201e      	movs	r0, #30
 8001d7a:	f000 fa21 	bl	80021c0 <st25r3911WriteRegister>
    st25r3911WriteRegister(ST25R3911_REG_NUM_TX_BYTES1, (uint8_t)((nBits >> 8) & 0xffU));    
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4619      	mov	r1, r3
 8001d86:	201d      	movs	r0, #29
 8001d88:	f000 fa1a 	bl	80021c0 <st25r3911WriteRegister>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <st25r3911StreamConfigure>:
    }
    return true;
}

ReturnCode st25r3911StreamConfigure(const struct st25r3911StreamConfig *config)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    uint8_t smd = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
    uint8_t mode;

    if (config->useBPSK != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d016      	beq.n	8001dd6 <st25r3911StreamConfigure+0x42>
    {
        mode = ST25R3911_REG_MODE_om_bpsk_stream;
 8001da8:	2378      	movs	r3, #120	; 0x78
 8001daa:	73bb      	strb	r3, [r7, #14]
        if ((config->din<2U) || (config->din>4U)) /* not in fc/4 .. fc/16 */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	785b      	ldrb	r3, [r3, #1]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d903      	bls.n	8001dbc <st25r3911StreamConfigure+0x28>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	785b      	ldrb	r3, [r3, #1]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d901      	bls.n	8001dc0 <st25r3911StreamConfigure+0x2c>
        {
            return ERR_PARAM;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	e053      	b.n	8001e68 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (4U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	f1c3 0304 	rsb	r3, r3, #4
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	015b      	lsls	r3, r3, #5
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e01b      	b.n	8001e0e <st25r3911StreamConfigure+0x7a>

    }
    else
    {
        mode = ST25R3911_REG_MODE_om_subcarrier_stream;
 8001dd6:	2370      	movs	r3, #112	; 0x70
 8001dd8:	73bb      	strb	r3, [r7, #14]
        if ((config->din<3U) || (config->din>6U)) /* not in fc/8 .. fc/64 */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d903      	bls.n	8001dea <st25r3911StreamConfigure+0x56>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	785b      	ldrb	r3, [r3, #1]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d901      	bls.n	8001dee <st25r3911StreamConfigure+0x5a>
        {
            return ERR_PARAM;
 8001dea:	2307      	movs	r3, #7
 8001dec:	e03c      	b.n	8001e68 <st25r3911StreamConfigure+0xd4>
        }
        smd |= (6U - config->din) << ST25R3911_REG_STREAM_MODE_shift_scf;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	f1c3 0306 	rsb	r3, r3, #6
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	015b      	lsls	r3, r3, #5
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	73fb      	strb	r3, [r7, #15]
        if (config->report_period_length == 0U) 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	78db      	ldrb	r3, [r3, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <st25r3911StreamConfigure+0x7a>
        {
            return ERR_PARAM;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e02c      	b.n	8001e68 <st25r3911StreamConfigure+0xd4>
        }
    }

    if ((config->dout<1U) || (config->dout>7U)) /* not in fc/2 .. fc/128 */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <st25r3911StreamConfigure+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	789b      	ldrb	r3, [r3, #2]
 8001e1a:	2b07      	cmp	r3, #7
 8001e1c:	d901      	bls.n	8001e22 <st25r3911StreamConfigure+0x8e>
    {
        return ERR_PARAM;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e022      	b.n	8001e68 <st25r3911StreamConfigure+0xd4>
    }
    smd |= (7U - config->dout) << ST25R3911_REG_STREAM_MODE_shift_stx;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	789b      	ldrb	r3, [r3, #2]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	73fb      	strb	r3, [r7, #15]

    if (config->report_period_length > 3U) 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d901      	bls.n	8001e3e <st25r3911StreamConfigure+0xaa>
    {
        return ERR_PARAM;
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	e014      	b.n	8001e68 <st25r3911StreamConfigure+0xd4>
    }
    smd |= config->report_period_length << ST25R3911_REG_STREAM_MODE_shift_scp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	b25a      	sxtb	r2, r3
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	73fb      	strb	r3, [r7, #15]

    st25r3911WriteRegister(ST25R3911_REG_STREAM_MODE, smd);
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	4619      	mov	r1, r3
 8001e54:	2008      	movs	r0, #8
 8001e56:	f000 f9b3 	bl	80021c0 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, ST25R3911_REG_MODE_mask_om, mode);
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	2178      	movs	r1, #120	; 0x78
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 fa38 	bl	80022d6 <st25r3911ChangeRegisterBits>

    return ERR_NONE;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <st25r3911ExecuteCommandAndGetResult>:
 *  \param[out] result: 8 bit long result
 *
 *****************************************************************************
 */
static ReturnCode st25r3911ExecuteCommandAndGetResult(uint8_t cmd, uint8_t resreg, uint8_t sleeptime, uint8_t* result)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	71bb      	strb	r3, [r7, #6]
 8001e80:	4613      	mov	r3, r2
 8001e82:	717b      	strb	r3, [r7, #5]

    st25r3911EnableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8001e84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e88:	f000 fd32 	bl	80028f0 <st25r3911EnableInterrupts>
    st25r3911GetInterrupt(ST25R3911_IRQ_MASK_DCT);
 8001e8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e90:	f000 fcf6 	bl	8002880 <st25r3911GetInterrupt>
    st25r3911ExecuteCommand(cmd);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fb16 	bl	80024c8 <st25r3911ExecuteCommand>
    st25r3911WaitForInterruptsTimed(ST25R3911_IRQ_MASK_DCT, sleeptime);
 8001e9c:	797b      	ldrb	r3, [r7, #5]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ea6:	f000 fc9b 	bl	80027e0 <st25r3911WaitForInterruptsTimed>
    st25r3911DisableInterrupts(ST25R3911_IRQ_MASK_DCT);
 8001eaa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001eae:	f000 fd2b 	bl	8002908 <st25r3911DisableInterrupts>
    
    /* read out the result if the pointer is not NULL */
    if (result != NULL)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <st25r3911ExecuteCommandAndGetResult+0x52>
    {
        st25r3911ReadRegister(resreg, result);
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f857 	bl	8001f70 <st25r3911ReadRegister>
    }

    return ERR_NONE;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <NVIC_EnableIRQ+0x30>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <NVIC_DisableIRQ+0x30>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	3320      	adds	r3, #32
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <st25r3911CheckFieldSetLED>:
* LOCAL FUNCTION PROTOTYPES
******************************************************************************
*/

static inline void st25r3911CheckFieldSetLED(uint8_t value)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
    if ((ST25R3911_REG_OP_CONTROL_tx_en & value) != 0U)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <st25r3911CheckFieldSetLED+0x26>
    {
#ifdef PLATFORM_LED_FIELD_PIN
        platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f001 f8ca 	bl	80030ec <HAL_GPIO_WritePin>
    else
    {
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
#endif /* PLATFORM_LED_FIELD_PIN */
    }
}
 8001f58:	e006      	b.n	8001f68 <st25r3911CheckFieldSetLED+0x34>
        platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f64:	f001 f8c2 	bl	80030ec <HAL_GPIO_WritePin>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <st25r3911ReadRegister>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911ReadRegister(uint8_t reg, uint8_t* value)
{ 
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    platformProtectST25R391xComm();
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <st25r3911ReadRegister+0x8c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <st25r3911ReadRegister+0x8c>)
 8001f86:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	2006      	movs	r0, #6
 8001f8e:	f7ff ffb7 	bl	8001f00 <NVIC_DisableIRQ>
 8001f92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f96:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2140      	movs	r1, #64	; 0x40
 8001f9e:	4818      	ldr	r0, [pc, #96]	; (8002000 <st25r3911ReadRegister+0x90>)
 8001fa0:	f001 f8a4 	bl	80030ec <HAL_GPIO_WritePin>
  
    buf[0] = (reg | ST25R3911_READ_MODE);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	733b      	strb	r3, [r7, #12]
    buf[1] = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	737b      	strb	r3, [r7, #13]
  
    platformSpiTxRx(buf, buf, 2);
 8001fb2:	f107 010c 	add.w	r1, r7, #12
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	2202      	movs	r2, #2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f9a9 	bl	8001314 <spiTxRx>
  
    if(value != NULL)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <st25r3911ReadRegister+0x5e>
    {
      *value = buf[1];
 8001fc8:	7b7a      	ldrb	r2, [r7, #13]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <st25r3911ReadRegister+0x90>)
 8001fd4:	f001 f88a 	bl	80030ec <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <st25r3911ReadRegister+0x8c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <st25r3911ReadRegister+0x8c>)
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <st25r3911ReadRegister+0x8c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <st25r3911ReadRegister+0x84>
 8001fec:	2006      	movs	r0, #6
 8001fee:	f7ff ff6d 	bl	8001ecc <NVIC_EnableIRQ>

    return;
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
}
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200000c0 	.word	0x200000c0
 8002000:	48000400 	.word	0x48000400

08002004 <st25r3911ReadMultipleRegisters>:


void st25r3911ReadMultipleRegisters(uint8_t reg, uint8_t* values, uint8_t length)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	4613      	mov	r3, r2
 8002012:	71bb      	strb	r3, [r7, #6]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = (reg | ST25R3911_READ_MODE);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201a:	b2db      	uxtb	r3, r3
 800201c:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
  
    if (length > 0U)
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d034      	beq.n	800208e <st25r3911ReadMultipleRegisters+0x8a>
    {
        platformProtectST25R391xComm();
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <st25r3911ReadMultipleRegisters+0x94>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <st25r3911ReadMultipleRegisters+0x94>)
 800202e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	2006      	movs	r0, #6
 8002036:	f7ff ff63 	bl	8001f00 <NVIC_DisableIRQ>
 800203a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800203e:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 8002042:	2200      	movs	r2, #0
 8002044:	2140      	movs	r1, #64	; 0x40
 8002046:	4815      	ldr	r0, [pc, #84]	; (800209c <st25r3911ReadMultipleRegisters+0x98>)
 8002048:	f001 f850 	bl	80030ec <HAL_GPIO_WritePin>
        ST_MEMCPY( values, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) );  /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /* ST25R391X_COM_SINGLETXRX */
  
        /* Since the result comes one byte later, let's first transmit the adddress with discarding the result */
        platformSpiTxRx(&cmd, NULL, ST25R3911_CMD_LEN);
 800204c:	f107 030f 	add.w	r3, r7, #15
 8002050:	2201      	movs	r2, #1
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f95d 	bl	8001314 <spiTxRx>
        platformSpiTxRx(NULL, values, length);  
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	6839      	ldr	r1, [r7, #0]
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff f956 	bl	8001314 <spiTxRx>
  
#endif  /* ST25R391X_COM_SINGLETXRX */

        platformSpiDeselect();
 8002068:	2201      	movs	r2, #1
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <st25r3911ReadMultipleRegisters+0x98>)
 800206e:	f001 f83d 	bl	80030ec <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <st25r3911ReadMultipleRegisters+0x94>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3b01      	subs	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <st25r3911ReadMultipleRegisters+0x94>)
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <st25r3911ReadMultipleRegisters+0x94>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <st25r3911ReadMultipleRegisters+0x8a>
 8002086:	2006      	movs	r0, #6
 8002088:	f7ff ff20 	bl	8001ecc <NVIC_EnableIRQ>
    }
    
    return;
 800208c:	bf00      	nop
 800208e:	bf00      	nop
}
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200000c0 	.word	0x200000c0
 800209c:	48000400 	.word	0x48000400

080020a0 <st25r3911ReadTestRegister>:

void st25r3911ReadTestRegister(uint8_t reg, uint8_t* value)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */

    platformProtectST25R391xComm();
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <st25r3911ReadTestRegister+0x90>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <st25r3911ReadTestRegister+0x90>)
 80020b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	2006      	movs	r0, #6
 80020be:	f7ff ff1f 	bl	8001f00 <NVIC_DisableIRQ>
 80020c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020c6:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 80020ca:	2200      	movs	r2, #0
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	4819      	ldr	r0, [pc, #100]	; (8002134 <st25r3911ReadTestRegister+0x94>)
 80020d0:	f001 f80c 	bl	80030ec <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 80020d4:	23fc      	movs	r3, #252	; 0xfc
 80020d6:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_READ_MODE);
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	737b      	strb	r3, [r7, #13]
    buf[2] = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, buf, 3);
 80020e6:	f107 010c 	add.w	r1, r7, #12
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	2203      	movs	r2, #3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff f90f 	bl	8001314 <spiTxRx>
    
    if(value != NULL)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <st25r3911ReadTestRegister+0x62>
    {
      *value = buf[2];
 80020fc:	7bba      	ldrb	r2, [r7, #14]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	701a      	strb	r2, [r3, #0]
    }
    
    platformSpiDeselect();
 8002102:	2201      	movs	r2, #1
 8002104:	2140      	movs	r1, #64	; 0x40
 8002106:	480b      	ldr	r0, [pc, #44]	; (8002134 <st25r3911ReadTestRegister+0x94>)
 8002108:	f000 fff0 	bl	80030ec <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <st25r3911ReadTestRegister+0x90>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <st25r3911ReadTestRegister+0x90>)
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <st25r3911ReadTestRegister+0x90>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <st25r3911ReadTestRegister+0x88>
 8002120:	2006      	movs	r0, #6
 8002122:	f7ff fed3 	bl	8001ecc <NVIC_EnableIRQ>

    return;
 8002126:	bf00      	nop
 8002128:	bf00      	nop
}
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200000c0 	.word	0x200000c0
 8002134:	48000400 	.word	0x48000400

08002138 <st25r3911WriteTestRegister>:

void st25r3911WriteTestRegister(uint8_t reg, uint8_t value)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	460a      	mov	r2, r1
 8002142:	71fb      	strb	r3, [r7, #7]
 8002144:	4613      	mov	r3, r2
 8002146:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t  buf[3];
#endif  /* ST25R391X_COM_SINGLETXRX */
    
    platformProtectST25R391xComm();
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <st25r3911WriteTestRegister+0x80>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <st25r3911WriteTestRegister+0x80>)
 8002152:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	2006      	movs	r0, #6
 800215a:	f7ff fed1 	bl	8001f00 <NVIC_DisableIRQ>
 800215e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002162:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8002166:	2200      	movs	r2, #0
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	4814      	ldr	r0, [pc, #80]	; (80021bc <st25r3911WriteTestRegister+0x84>)
 800216c:	f000 ffbe 	bl	80030ec <HAL_GPIO_WritePin>

    buf[0] = ST25R3911_CMD_TEST_ACCESS;
 8002170:	23fc      	movs	r3, #252	; 0xfc
 8002172:	733b      	strb	r3, [r7, #12]
    buf[1] = (reg | ST25R3911_WRITE_MODE);
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	737b      	strb	r3, [r7, #13]
    buf[2] = value;
 8002178:	79bb      	ldrb	r3, [r7, #6]
 800217a:	73bb      	strb	r3, [r7, #14]
  
    platformSpiTxRx(buf, NULL, 3);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	2203      	movs	r2, #3
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f8c5 	bl	8001314 <spiTxRx>
  
    platformSpiDeselect();
 800218a:	2201      	movs	r2, #1
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	480b      	ldr	r0, [pc, #44]	; (80021bc <st25r3911WriteTestRegister+0x84>)
 8002190:	f000 ffac 	bl	80030ec <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <st25r3911WriteTestRegister+0x80>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <st25r3911WriteTestRegister+0x80>)
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <st25r3911WriteTestRegister+0x80>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <st25r3911WriteTestRegister+0x78>
 80021a8:	2006      	movs	r0, #6
 80021aa:	f7ff fe8f 	bl	8001ecc <NVIC_EnableIRQ>

    return;
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
}
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200000c0 	.word	0x200000c0
 80021bc:	48000400 	.word	0x48000400

080021c0 <st25r3911WriteRegister>:

void st25r3911WriteRegister(uint8_t reg, uint8_t value)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = comBuf;
#else  /* ST25R391X_COM_SINGLETXRX */
    uint8_t buf[2];
#endif  /* ST25R391X_COM_SINGLETXRX */
  
    if (ST25R3911_REG_OP_CONTROL == reg)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d103      	bne.n	80021de <st25r3911WriteRegister+0x1e>
    {
        st25r3911CheckFieldSetLED(value);
 80021d6:	79bb      	ldrb	r3, [r7, #6]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff feab 	bl	8001f34 <st25r3911CheckFieldSetLED>
    }    
    
    platformProtectST25R391xComm();
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <st25r3911WriteRegister+0x8c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <st25r3911WriteRegister+0x8c>)
 80021e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	2006      	movs	r0, #6
 80021f0:	f7ff fe86 	bl	8001f00 <NVIC_DisableIRQ>
 80021f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021f8:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 80021fc:	2200      	movs	r2, #0
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	4813      	ldr	r0, [pc, #76]	; (8002250 <st25r3911WriteRegister+0x90>)
 8002202:	f000 ff73 	bl	80030ec <HAL_GPIO_WritePin>

    buf[0] = reg | ST25R3911_WRITE_MODE;
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	733b      	strb	r3, [r7, #12]
    buf[1] = value;
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	737b      	strb	r3, [r7, #13]
    
    platformSpiTxRx(buf, NULL, 2);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2202      	movs	r2, #2
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f87c 	bl	8001314 <spiTxRx>
    
    platformSpiDeselect();
 800221c:	2201      	movs	r2, #1
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	480b      	ldr	r0, [pc, #44]	; (8002250 <st25r3911WriteRegister+0x90>)
 8002222:	f000 ff63 	bl	80030ec <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <st25r3911WriteRegister+0x8c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <st25r3911WriteRegister+0x8c>)
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <st25r3911WriteRegister+0x8c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d103      	bne.n	8002242 <st25r3911WriteRegister+0x82>
 800223a:	2006      	movs	r0, #6
 800223c:	f7ff fe46 	bl	8001ecc <NVIC_EnableIRQ>

    return;
 8002240:	bf00      	nop
 8002242:	bf00      	nop
}
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200000c0 	.word	0x200000c0
 8002250:	48000400 	.word	0x48000400

08002254 <st25r3911ClrRegisterBits>:

void st25r3911ClrRegisterBits( uint8_t reg, uint8_t clr_mask )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	460a      	mov	r2, r1
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	4613      	mov	r3, r2
 8002262:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8002264:	f107 020f 	add.w	r2, r7, #15
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fe7f 	bl	8001f70 <st25r3911ReadRegister>
    tmp &= ~clr_mask;
 8002272:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002276:	43db      	mvns	r3, r3
 8002278:	b25a      	sxtb	r2, r3
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	b25b      	sxtb	r3, r3
 800227e:	4013      	ands	r3, r2
 8002280:	b25b      	sxtb	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff97 	bl	80021c0 <st25r3911WriteRegister>
    
    return;
 8002292:	bf00      	nop
}
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <st25r3911SetRegisterBits>:


void st25r3911SetRegisterBits( uint8_t reg, uint8_t set_mask )
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	460a      	mov	r2, r1
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	4613      	mov	r3, r2
 80022a8:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 80022aa:	f107 020f 	add.w	r2, r7, #15
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fe5c 	bl	8001f70 <st25r3911ReadRegister>
    tmp |= set_mask;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	4313      	orrs	r3, r2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff79 	bl	80021c0 <st25r3911WriteRegister>
    
    return;
 80022ce:	bf00      	nop
}
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <st25r3911ChangeRegisterBits>:

void st25r3911ChangeRegisterBits(uint8_t reg, uint8_t valueMask, uint8_t value)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	460b      	mov	r3, r1
 80022e2:	71bb      	strb	r3, [r7, #6]
 80022e4:	4613      	mov	r3, r2
 80022e6:	717b      	strb	r3, [r7, #5]
    st25r3911ModifyRegister(reg, valueMask, (valueMask & value) );
 80022e8:	79ba      	ldrb	r2, [r7, #6]
 80022ea:	797b      	ldrb	r3, [r7, #5]
 80022ec:	4013      	ands	r3, r2
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	79b9      	ldrb	r1, [r7, #6]
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f804 	bl	8002302 <st25r3911ModifyRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <st25r3911ModifyRegister>:

void st25r3911ModifyRegister(uint8_t reg, uint8_t clr_mask, uint8_t set_mask)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	460b      	mov	r3, r1
 800230e:	71bb      	strb	r3, [r7, #6]
 8002310:	4613      	mov	r3, r2
 8002312:	717b      	strb	r3, [r7, #5]
    uint8_t tmp;

    st25r3911ReadRegister(reg, &tmp);
 8002314:	f107 020f 	add.w	r2, r7, #15
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fe27 	bl	8001f70 <st25r3911ReadRegister>

    /* mask out the bits we don't want to change */
    tmp &= ~clr_mask;
 8002322:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002326:	43db      	mvns	r3, r3
 8002328:	b25a      	sxtb	r2, r3
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	b25b      	sxtb	r3, r3
 800232e:	4013      	ands	r3, r2
 8002330:	b25b      	sxtb	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	73fb      	strb	r3, [r7, #15]
    /* set the new value */
    tmp |= set_mask;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	797b      	ldrb	r3, [r7, #5]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	73fb      	strb	r3, [r7, #15]
    st25r3911WriteRegister(reg, tmp);
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff3a 	bl	80021c0 <st25r3911WriteRegister>

    return;
 800234c:	bf00      	nop
}
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <st25r3911ChangeTestRegisterBits>:

void st25r3911ChangeTestRegisterBits( uint8_t reg, uint8_t valueMask, uint8_t value )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	460b      	mov	r3, r1
 8002360:	71bb      	strb	r3, [r7, #6]
 8002362:	4613      	mov	r3, r2
 8002364:	717b      	strb	r3, [r7, #5]
    uint8_t    rdVal;
    uint8_t    wrVal;
    
    /* Read current reg value */
    st25r3911ReadTestRegister(reg, &rdVal);
 8002366:	f107 020e 	add.w	r2, r7, #14
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fe96 	bl	80020a0 <st25r3911ReadTestRegister>
    
    /* Compute new value */
    wrVal  = (rdVal & ~valueMask);
 8002374:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002378:	43db      	mvns	r3, r3
 800237a:	b25a      	sxtb	r2, r3
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	b25b      	sxtb	r3, r3
 8002380:	4013      	ands	r3, r2
 8002382:	b25b      	sxtb	r3, r3
 8002384:	73fb      	strb	r3, [r7, #15]
    wrVal |= (value & valueMask);
 8002386:	797a      	ldrb	r2, [r7, #5]
 8002388:	79bb      	ldrb	r3, [r7, #6]
 800238a:	4013      	ands	r3, r2
 800238c:	b2da      	uxtb	r2, r3
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	4313      	orrs	r3, r2
 8002392:	73fb      	strb	r3, [r7, #15]
    
    /* Write new reg value */
    st25r3911WriteTestRegister(reg, wrVal );
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fecc 	bl	8002138 <st25r3911WriteTestRegister>
    
    return;
 80023a0:	bf00      	nop
}
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <st25r3911WriteFifo>:
    return;
}


void st25r3911WriteFifo(const uint8_t* values, uint8_t length)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_LOAD;
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */

    if (length > 0U)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d034      	beq.n	8002428 <st25r3911WriteFifo+0x80>
    {  
        platformProtectST25R391xComm();
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <st25r3911WriteFifo+0x88>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <st25r3911WriteFifo+0x88>)
 80023c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	2006      	movs	r0, #6
 80023d0:	f7ff fd96 	bl	8001f00 <NVIC_DisableIRQ>
 80023d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023d8:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 80023dc:	2200      	movs	r2, #0
 80023de:	2140      	movs	r1, #64	; 0x40
 80023e0:	4814      	ldr	r0, [pc, #80]	; (8002434 <st25r3911WriteFifo+0x8c>)
 80023e2:	f000 fe83 	bl	80030ec <HAL_GPIO_WritePin>

        platformSpiTxRx( comBuf, NULL, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 80023e6:	f107 030f 	add.w	r3, r7, #15
 80023ea:	2201      	movs	r2, #1
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe ff90 	bl	8001314 <spiTxRx>
        platformSpiTxRx( values, NULL, length );
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	2100      	movs	r1, #0
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe ff89 	bl	8001314 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiDeselect();
 8002402:	2201      	movs	r2, #1
 8002404:	2140      	movs	r1, #64	; 0x40
 8002406:	480b      	ldr	r0, [pc, #44]	; (8002434 <st25r3911WriteFifo+0x8c>)
 8002408:	f000 fe70 	bl	80030ec <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <st25r3911WriteFifo+0x88>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	3b01      	subs	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <st25r3911WriteFifo+0x88>)
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <st25r3911WriteFifo+0x88>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <st25r3911WriteFifo+0x80>
 8002420:	2006      	movs	r0, #6
 8002422:	f7ff fd53 	bl	8001ecc <NVIC_EnableIRQ>
    }

    return;
 8002426:	bf00      	nop
 8002428:	bf00      	nop
}
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200000c0 	.word	0x200000c0
 8002434:	48000400 	.word	0x48000400

08002438 <st25r3911ReadFifo>:

void st25r3911ReadFifo(uint8_t* buf, uint8_t length)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
#if !defined(ST25R391X_COM_SINGLETXRX)
    uint8_t cmd = ST25R3911_FIFO_READ;
 8002444:	23bf      	movs	r3, #191	; 0xbf
 8002446:	73fb      	strb	r3, [r7, #15]
#endif  /* !ST25R391X_COM_SINGLETXRX */
    
    if(length > 0U)
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d034      	beq.n	80024b8 <st25r3911ReadFifo+0x80>
    {
        platformProtectST25R391xComm();
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <st25r3911ReadFifo+0x88>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <st25r3911ReadFifo+0x88>)
 8002458:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	2006      	movs	r0, #6
 8002460:	f7ff fd4e 	bl	8001f00 <NVIC_DisableIRQ>
 8002464:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002468:	f3bf 8f6f 	isb	sy
        platformSpiSelect();
 800246c:	2200      	movs	r2, #0
 800246e:	2140      	movs	r1, #64	; 0x40
 8002470:	4814      	ldr	r0, [pc, #80]	; (80024c4 <st25r3911ReadFifo+0x8c>)
 8002472:	f000 fe3b 	bl	80030ec <HAL_GPIO_WritePin>
        platformSpiTxRx( comBuf, comBuf, MIN( (ST25R3911_CMD_LEN + length), ST25R3911_BUF_LEN ) );          /* Transceive as a single SPI call                        */
        ST_MEMCPY( buf, &comBuf[ST25R3911_CMD_LEN], MIN( length, ST25R3911_BUF_LEN - ST25R3911_CMD_LEN ) ); /* Copy from local buf to output buffer and skip cmd byte */
  
#else  /*ST25R391X_COM_SINGLETXRX*/
  
        platformSpiTxRx( &cmd, NULL, ST25R3911_CMD_LEN );
 8002476:	f107 030f 	add.w	r3, r7, #15
 800247a:	2201      	movs	r2, #1
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff48 	bl	8001314 <spiTxRx>
        platformSpiTxRx( NULL, buf, length );
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe ff41 	bl	8001314 <spiTxRx>
  
#endif  /*ST25R391X_COM_SINGLETXRX*/
      
        platformSpiDeselect();
 8002492:	2201      	movs	r2, #1
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	480b      	ldr	r0, [pc, #44]	; (80024c4 <st25r3911ReadFifo+0x8c>)
 8002498:	f000 fe28 	bl	80030ec <HAL_GPIO_WritePin>
        platformUnprotectST25R391xComm();
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <st25r3911ReadFifo+0x88>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <st25r3911ReadFifo+0x88>)
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <st25r3911ReadFifo+0x88>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <st25r3911ReadFifo+0x80>
 80024b0:	2006      	movs	r0, #6
 80024b2:	f7ff fd0b 	bl	8001ecc <NVIC_EnableIRQ>
    }

    return;
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
}
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200000c0 	.word	0x200000c0
 80024c4:	48000400 	.word	0x48000400

080024c8 <st25r3911ExecuteCommand>:

void st25r3911ExecuteCommand( uint8_t cmd )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
    uint8_t tmpCmd;                                    /* MISRA 17.8 */
    
#ifdef PLATFORM_LED_FIELD_PIN
    if ( (cmd >= ST25R3911_CMD_TRANSMIT_WITH_CRC) && (cmd <= ST25R3911_CMD_RESPONSE_RF_COLLISION_0))
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2bc3      	cmp	r3, #195	; 0xc3
 80024d6:	d909      	bls.n	80024ec <st25r3911ExecuteCommand+0x24>
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2bca      	cmp	r3, #202	; 0xca
 80024dc:	d806      	bhi.n	80024ec <st25r3911ExecuteCommand+0x24>
    {
        platformLedOff(PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f000 fe00 	bl	80030ec <HAL_GPIO_WritePin>
    }
#endif /* PLATFORM_LED_FIELD_PIN */
    
    tmpCmd = (cmd | ST25R3911_CMD_MODE);
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	73fb      	strb	r3, [r7, #15]

    platformProtectST25R391xComm();
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <st25r3911ExecuteCommand+0x94>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <st25r3911ExecuteCommand+0x94>)
 8002500:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	2006      	movs	r0, #6
 8002508:	f7ff fcfa 	bl	8001f00 <NVIC_DisableIRQ>
 800250c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002510:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 8002514:	2200      	movs	r2, #0
 8002516:	2140      	movs	r1, #64	; 0x40
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <st25r3911ExecuteCommand+0x98>)
 800251a:	f000 fde7 	bl	80030ec <HAL_GPIO_WritePin>
    
    platformSpiTxRx( &tmpCmd, NULL, ST25R3911_CMD_LEN );
 800251e:	f107 030f 	add.w	r3, r7, #15
 8002522:	2201      	movs	r2, #1
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fef4 	bl	8001314 <spiTxRx>
    
    platformSpiDeselect();
 800252c:	2201      	movs	r2, #1
 800252e:	2140      	movs	r1, #64	; 0x40
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <st25r3911ExecuteCommand+0x98>)
 8002532:	f000 fddb 	bl	80030ec <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <st25r3911ExecuteCommand+0x94>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	3b01      	subs	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <st25r3911ExecuteCommand+0x94>)
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <st25r3911ExecuteCommand+0x94>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d103      	bne.n	8002552 <st25r3911ExecuteCommand+0x8a>
 800254a:	2006      	movs	r0, #6
 800254c:	f7ff fcbe 	bl	8001ecc <NVIC_EnableIRQ>

    return;
 8002550:	bf00      	nop
 8002552:	bf00      	nop
}
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200000c0 	.word	0x200000c0
 8002560:	48000400 	.word	0x48000400

08002564 <st25r3911ExecuteCommands>:


void st25r3911ExecuteCommands(const uint8_t *cmds, uint8_t length)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
    platformProtectST25R391xComm();
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <st25r3911ExecuteCommands+0x70>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <st25r3911ExecuteCommands+0x70>)
 800257a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	2006      	movs	r0, #6
 8002582:	f7ff fcbd 	bl	8001f00 <NVIC_DisableIRQ>
 8002586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800258a:	f3bf 8f6f 	isb	sy
    platformSpiSelect();
 800258e:	2200      	movs	r2, #0
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	4811      	ldr	r0, [pc, #68]	; (80025d8 <st25r3911ExecuteCommands+0x74>)
 8002594:	f000 fdaa 	bl	80030ec <HAL_GPIO_WritePin>
    
    platformSpiTxRx( cmds, NULL, length );
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe feb7 	bl	8001314 <spiTxRx>
    
    platformSpiDeselect();
 80025a6:	2201      	movs	r2, #1
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <st25r3911ExecuteCommands+0x74>)
 80025ac:	f000 fd9e 	bl	80030ec <HAL_GPIO_WritePin>
    platformUnprotectST25R391xComm();
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <st25r3911ExecuteCommands+0x70>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <st25r3911ExecuteCommands+0x70>)
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <st25r3911ExecuteCommands+0x70>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <st25r3911ExecuteCommands+0x68>
 80025c4:	2006      	movs	r0, #6
 80025c6:	f7ff fc81 	bl	8001ecc <NVIC_EnableIRQ>

    return;
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
}
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	200000c0 	.word	0x200000c0
 80025d8:	48000400 	.word	0x48000400

080025dc <NVIC_EnableIRQ>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	; (800260c <NVIC_EnableIRQ+0x30>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <NVIC_DisableIRQ>:
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <NVIC_DisableIRQ+0x30>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	3320      	adds	r3, #32
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100

08002644 <st25r3911InitInterrupts>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
void st25r3911InitInterrupts( void )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
    platformIrqST25R3911PinInitialize();
    platformIrqST25R3911SetCallback( st25r3911Isr );
    
    st25r3911interrupt.callback     = NULL;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <st25r3911InitInterrupts+0x30>)
 800264a:	2200      	movs	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
    st25r3911interrupt.prevCallback = NULL;
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <st25r3911InitInterrupts+0x30>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    st25r3911interrupt.status       = ST25R3911_IRQ_MASK_NONE;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <st25r3911InitInterrupts+0x30>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
    st25r3911interrupt.mask         = ST25R3911_IRQ_MASK_NONE;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <st25r3911InitInterrupts+0x30>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
#ifdef PLATFORM_LED_RX_PIN
    platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
#endif /* PLATFORM_LED_RX_PIN */

#ifdef PLATFORM_LED_FIELD_PIN
    platformLedOff( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266a:	f000 fd3f 	bl	80030ec <HAL_GPIO_WritePin>
#endif /* PLATFORM_LED_FIELD_PIN */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000230 	.word	0x20000230

08002678 <st25r3911Isr>:

void st25r3911Isr( void )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
    st25r3911CheckForReceivedInterrupts();
 800267c:	f000 f80c 	bl	8002698 <st25r3911CheckForReceivedInterrupts>
    
    if (NULL != st25r3911interrupt.callback)
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <st25r3911Isr+0x1c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <st25r3911Isr+0x16>
    {
        st25r3911interrupt.callback();
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <st25r3911Isr+0x1c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4798      	blx	r3
    }
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000230 	.word	0x20000230

08002698 <st25r3911CheckForReceivedInterrupts>:

void st25r3911CheckForReceivedInterrupts( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
    uint8_t  iregs[ST25R3911_INT_REGS_LEN];
    uint32_t irqStatus; 

    irqStatus = ST25R3911_IRQ_MASK_NONE;
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
    ST_MEMSET( iregs, (int32_t)(ST25R3911_IRQ_MASK_ALL & 0xFFU), ST25R3911_INT_REGS_LEN );  /* MISRA 10.3 */
 80026a2:	463b      	mov	r3, r7
 80026a4:	2203      	movs	r2, #3
 80026a6:	21ff      	movs	r1, #255	; 0xff
 80026a8:	4618      	mov	r0, r3
 80026aa:	f00d fe14 	bl	80102d6 <memset>
        
    /* In case the IRQ is Edge (not Level) triggered read IRQs until done */
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80026ae:	e020      	b.n	80026f2 <st25r3911CheckForReceivedInterrupts+0x5a>
    {
        st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, sizeof(iregs));
 80026b0:	463b      	mov	r3, r7
 80026b2:	2203      	movs	r2, #3
 80026b4:	4619      	mov	r1, r3
 80026b6:	2017      	movs	r0, #23
 80026b8:	f7ff fca4 	bl	8002004 <st25r3911ReadMultipleRegisters>
       
#ifdef PLATFORM_LED_FIELD_PIN         
        if ((iregs[0] & ST25R3911_IRQ_MASK_TXE) != 0U)
 80026bc:	783b      	ldrb	r3, [r7, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <st25r3911CheckForReceivedInterrupts+0x3c>
        {
            platformLedOn( PLATFORM_LED_FIELD_PORT, PLATFORM_LED_FIELD_PIN );
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d0:	f000 fd0c 	bl	80030ec <HAL_GPIO_WritePin>
        {
            platformLedOff( PLATFORM_LED_RX_PORT, PLATFORM_LED_RX_PIN );
        }
#endif /* PLATFORM_LED_RX_PIN */
       
        irqStatus |= (uint32_t)iregs[0];
 80026d4:	783b      	ldrb	r3, [r7, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4313      	orrs	r3, r2
 80026dc:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[1]<<8;
 80026de:	787b      	ldrb	r3, [r7, #1]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	607b      	str	r3, [r7, #4]
        irqStatus |= (uint32_t)iregs[2]<<16;
 80026e8:	78bb      	ldrb	r3, [r7, #2]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	607b      	str	r3, [r7, #4]
    while( platformGpioIsHigh( ST25R391X_INT_PORT, ST25R391X_INT_PIN ) )
 80026f2:	2101      	movs	r1, #1
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f8:	f000 fce0 	bl	80030bc <HAL_GPIO_ReadPin>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d0d6      	beq.n	80026b0 <st25r3911CheckForReceivedInterrupts+0x18>
    }
    
    /* Forward all interrupts, even masked ones to application. */
    platformProtectST25R391xIrqStatus();
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <st25r3911CheckForReceivedInterrupts+0xb8>)
 800270c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	2006      	movs	r0, #6
 8002714:	f7ff ff7c 	bl	8002610 <NVIC_DisableIRQ>
 8002718:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800271c:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status |= irqStatus;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <st25r3911CheckForReceivedInterrupts+0xbc>)
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4313      	orrs	r3, r2
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <st25r3911CheckForReceivedInterrupts+0xbc>)
 800272a:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <st25r3911CheckForReceivedInterrupts+0xb8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	3b01      	subs	r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <st25r3911CheckForReceivedInterrupts+0xb8>)
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <st25r3911CheckForReceivedInterrupts+0xb8>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <st25r3911CheckForReceivedInterrupts+0xae>
 8002740:	2006      	movs	r0, #6
 8002742:	f7ff ff4b 	bl	80025dc <NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200000c0 	.word	0x200000c0
 8002754:	20000230 	.word	0x20000230

08002758 <st25r3911ModifyInterrupts>:


void st25r3911ModifyInterrupts(uint32_t clr_mask, uint32_t set_mask)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
    uint8_t i;
    uint32_t old_mask;
    uint32_t new_mask;

    old_mask = st25r3911interrupt.mask;
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <st25r3911ModifyInterrupts+0x84>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	613b      	str	r3, [r7, #16]
    new_mask = (~old_mask & set_mask) | (old_mask & clr_mask);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43da      	mvns	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	401a      	ands	r2, r3
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	400b      	ands	r3, r1
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
    st25r3911interrupt.mask &= ~clr_mask;
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <st25r3911ModifyInterrupts+0x84>)
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	43db      	mvns	r3, r3
 8002782:	4013      	ands	r3, r2
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <st25r3911ModifyInterrupts+0x84>)
 8002786:	60d3      	str	r3, [r2, #12]
    st25r3911interrupt.mask |= set_mask;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <st25r3911ModifyInterrupts+0x84>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	4a12      	ldr	r2, [pc, #72]	; (80027dc <st25r3911ModifyInterrupts+0x84>)
 8002792:	60d3      	str	r3, [r2, #12]
    for (i=0; i<3U ; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
 8002798:	e019      	b.n	80027ce <st25r3911ModifyInterrupts+0x76>
    { 
        if (((new_mask >> (i*8U)) & 0xffU) == 0U) {
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <st25r3911ModifyInterrupts+0x6e>
            continue;
        }
        st25r3911WriteRegister((ST25R3911_REG_IRQ_MASK_MAIN + i), (uint8_t)((st25r3911interrupt.mask>>(i*8U))&0xffU));
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	3314      	adds	r3, #20
 80027ae:	b2d8      	uxtb	r0, r3
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <st25r3911ModifyInterrupts+0x84>)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	4619      	mov	r1, r3
 80027c0:	f7ff fcfe 	bl	80021c0 <st25r3911WriteRegister>
 80027c4:	e000      	b.n	80027c8 <st25r3911ModifyInterrupts+0x70>
            continue;
 80027c6:	bf00      	nop
    for (i=0; i<3U ; i++)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	3301      	adds	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d9e2      	bls.n	800279a <st25r3911ModifyInterrupts+0x42>
    }
    return;
 80027d4:	bf00      	nop
}
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000230 	.word	0x20000230

080027e0 <st25r3911WaitForInterruptsTimed>:


uint32_t st25r3911WaitForInterruptsTimed(uint32_t mask, uint16_t tmo)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
    uint32_t tmr;
    uint32_t status;
   
    tmr = platformTimerCreate(tmo);
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f8c8 	bl	8002984 <timerCalculateTimer>
 80027f4:	60f8      	str	r0, [r7, #12]
    do 
    {
        status = (st25r3911interrupt.status & mask);
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <st25r3911WaitForInterruptsTimed+0x98>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
    } while( ( !platformTimerIsExpired( tmr ) || (tmo == 0U)) && (status == 0U) );
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f8cd 	bl	80029a0 <timerIsExpired>
 8002806:	4603      	mov	r3, r0
 8002808:	f083 0301 	eor.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <st25r3911WaitForInterruptsTimed+0x38>
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <st25r3911WaitForInterruptsTimed+0x3e>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0eb      	beq.n	80027f6 <st25r3911WaitForInterruptsTimed+0x16>

    status = st25r3911interrupt.status & mask;
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <st25r3911WaitForInterruptsTimed+0x98>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
    
    platformProtectST25R391xIrqStatus();
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <st25r3911WaitForInterruptsTimed+0x9c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <st25r3911WaitForInterruptsTimed+0x9c>)
 8002832:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	2006      	movs	r0, #6
 800283a:	f7ff fee9 	bl	8002610 <NVIC_DisableIRQ>
 800283e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002842:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status &= ~status;
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <st25r3911WaitForInterruptsTimed+0x98>)
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	43db      	mvns	r3, r3
 800284e:	4013      	ands	r3, r2
 8002850:	4a09      	ldr	r2, [pc, #36]	; (8002878 <st25r3911WaitForInterruptsTimed+0x98>)
 8002852:	6093      	str	r3, [r2, #8]
    platformUnprotectST25R391xIrqStatus();
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <st25r3911WaitForInterruptsTimed+0x9c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <st25r3911WaitForInterruptsTimed+0x9c>)
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <st25r3911WaitForInterruptsTimed+0x9c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <st25r3911WaitForInterruptsTimed+0x8e>
 8002868:	2006      	movs	r0, #6
 800286a:	f7ff feb7 	bl	80025dc <NVIC_EnableIRQ>
    
    return status;
 800286e:	68bb      	ldr	r3, [r7, #8]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000230 	.word	0x20000230
 800287c:	200000c0 	.word	0x200000c0

08002880 <st25r3911GetInterrupt>:

uint32_t st25r3911GetInterrupt(uint32_t mask)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    uint32_t irqs;

    irqs = (st25r3911interrupt.status & mask);
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <st25r3911GetInterrupt+0x68>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
    if (irqs != ST25R3911_IRQ_MASK_NONE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d022      	beq.n	80028de <st25r3911GetInterrupt+0x5e>
    {
        platformProtectST25R391xIrqStatus();
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <st25r3911GetInterrupt+0x6c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <st25r3911GetInterrupt+0x6c>)
 80028a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	2006      	movs	r0, #6
 80028aa:	f7ff feb1 	bl	8002610 <NVIC_DisableIRQ>
 80028ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028b2:	f3bf 8f6f 	isb	sy
        st25r3911interrupt.status &= ~irqs;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <st25r3911GetInterrupt+0x68>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4013      	ands	r3, r2
 80028c0:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <st25r3911GetInterrupt+0x68>)
 80028c2:	6093      	str	r3, [r2, #8]
        platformUnprotectST25R391xIrqStatus();
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <st25r3911GetInterrupt+0x6c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <st25r3911GetInterrupt+0x6c>)
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <st25r3911GetInterrupt+0x6c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <st25r3911GetInterrupt+0x5e>
 80028d8:	2006      	movs	r0, #6
 80028da:	f7ff fe7f 	bl	80025dc <NVIC_EnableIRQ>
    }
    return irqs;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000230 	.word	0x20000230
 80028ec:	200000c0 	.word	0x200000c0

080028f0 <st25r3911EnableInterrupts>:

void st25r3911EnableInterrupts(uint32_t mask)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(mask,0);
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff2c 	bl	8002758 <st25r3911ModifyInterrupts>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <st25r3911DisableInterrupts>:

void st25r3911DisableInterrupts(uint32_t mask)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    st25r3911ModifyInterrupts(0,mask);
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	2000      	movs	r0, #0
 8002914:	f7ff ff20 	bl	8002758 <st25r3911ModifyInterrupts>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <st25r3911ClearInterrupts>:

void st25r3911ClearInterrupts( void )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
    uint8_t iregs[3];

    st25r3911ReadMultipleRegisters(ST25R3911_REG_IRQ_MAIN, iregs, 3);
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	2203      	movs	r2, #3
 800292a:	4619      	mov	r1, r3
 800292c:	2017      	movs	r0, #23
 800292e:	f7ff fb69 	bl	8002004 <st25r3911ReadMultipleRegisters>

    platformProtectST25R391xIrqStatus();
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <st25r3911ClearInterrupts+0x5c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <st25r3911ClearInterrupts+0x5c>)
 800293c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	2006      	movs	r0, #6
 8002944:	f7ff fe64 	bl	8002610 <NVIC_DisableIRQ>
 8002948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800294c:	f3bf 8f6f 	isb	sy
    st25r3911interrupt.status = 0;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <st25r3911ClearInterrupts+0x60>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
    platformUnprotectST25R391xIrqStatus();
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <st25r3911ClearInterrupts+0x5c>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	3b01      	subs	r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <st25r3911ClearInterrupts+0x5c>)
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <st25r3911ClearInterrupts+0x5c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <st25r3911ClearInterrupts+0x52>
 800296a:	2006      	movs	r0, #6
 800296c:	f7ff fe36 	bl	80025dc <NVIC_EnableIRQ>
    return;
 8002970:	bf00      	nop
 8002972:	bf00      	nop
}
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200000c0 	.word	0x200000c0
 8002980:	20000230 	.word	0x20000230

08002984 <timerCalculateTimer>:
*/


/*******************************************************************************/
uint32_t timerCalculateTimer( uint16_t time )
{  
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	80fb      	strh	r3, [r7, #6]
  return (platformGetSysTick() + time);
 800298e:	f000 f847 	bl	8002a20 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	4413      	add	r3, r2
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <timerIsExpired>:


/*******************************************************************************/
bool timerIsExpired( uint32_t timer )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t uDiff;
  int32_t sDiff;
  
  uDiff = (timer - platformGetSysTick());   /* Calculate the diff between the timers */
 80029a8:	f000 f83a 	bl	8002a20 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  sDiff = uDiff;                            /* Convert the diff to a signed var      */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	60bb      	str	r3, [r7, #8]
   *    Signaling not expired: acceptable!
   * 2) Time roll-over case will be handled correctly: super!
   */
  
  /* Check if the given timer has expired already */
  if( sDiff < 0 )
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	da01      	bge.n	80029c2 <timerIsExpired+0x22>
  {
    return true;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <timerIsExpired+0x24>
  }
  
  return false;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f000 f91c 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fd fdcf 	bl	8000580 <HAL_InitTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	e001      	b.n	80029f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ee:	f7fe fccf 	bl	8001390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f2:	79fb      	ldrb	r3, [r7, #7]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_IncTick+0x1c>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_IncTick+0x20>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_IncTick+0x1c>)
 8002a0c:	6013      	str	r3, [r2, #0]
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	20001108 	.word	0x20001108
 8002a1c:	20000030 	.word	0x20000030

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20001108 	.word	0x20001108

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d004      	beq.n	8002a5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_Delay+0x40>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5c:	bf00      	nop
 8002a5e:	f7ff ffdf 	bl	8002a20 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d8f7      	bhi.n	8002a5e <HAL_Delay+0x26>
  {
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000030 	.word	0x20000030

08002a7c <NVIC_SetPriorityGrouping>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_GetPriorityGrouping>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <NVIC_EnableIRQ>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <NVIC_EnableIRQ+0x30>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da0b      	bge.n	8002b40 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	490c      	ldr	r1, [pc, #48]	; (8002b60 <NVIC_SetPriority+0x4c>)
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	3b04      	subs	r3, #4
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b3e:	e009      	b.n	8002b54 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <NVIC_SetPriority+0x50>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f1c3 0307 	rsb	r3, r3, #7
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	bf28      	it	cs
 8002b86:	2304      	movcs	r3, #4
 8002b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d902      	bls.n	8002b98 <NVIC_EncodePriority+0x30>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3b03      	subs	r3, #3
 8002b96:	e000      	b.n	8002b9a <NVIC_EncodePriority+0x32>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	4313      	orrs	r3, r2
         );
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	f7ff ff8e 	bl	8002b14 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff2d 	bl	8002a7c <NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff42 	bl	8002ac4 <NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff8e 	bl	8002b68 <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5d 	bl	8002b14 <NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff35 	bl	8002ae0 <NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa2 	bl	8002bd0 <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d106      	bne.n	8002cb4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002cb2:	e005      	b.n	8002cc0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002cd4:	f000 f802 	bl	8002cdc <HAL_SYSTICK_Callback>
}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d005      	beq.n	8002d0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2204      	movs	r2, #4
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	e029      	b.n	8002d62 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 020e 	bic.w	r2, r2, #14
 8002d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 021c 	and.w	r2, r3, #28
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
    }
  }
  return status;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7a:	e17f      	b.n	800307c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8171 	beq.w	8003076 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x38>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b12      	cmp	r3, #18
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	6939      	ldr	r1, [r7, #16]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d00b      	beq.n	8002e40 <HAL_GPIO_Init+0xd4>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d007      	beq.n	8002e40 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e34:	2b11      	cmp	r3, #17
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b12      	cmp	r3, #18
 8002e3e:	d130      	bne.n	8002ea2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4013      	ands	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e76:	2201      	movs	r2, #1
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0201 	and.w	r2, r3, #1
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d118      	bne.n	8002ee0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f003 0201 	and.w	r2, r3, #1
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80ac 	beq.w	8003076 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <HAL_GPIO_Init+0x32c>)
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	4a5d      	ldr	r2, [pc, #372]	; (8003098 <HAL_GPIO_Init+0x32c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6613      	str	r3, [r2, #96]	; 0x60
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <HAL_GPIO_Init+0x32c>)
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <HAL_GPIO_Init+0x330>)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f60:	d025      	beq.n	8002fae <HAL_GPIO_Init+0x242>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <HAL_GPIO_Init+0x334>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01f      	beq.n	8002faa <HAL_GPIO_Init+0x23e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_GPIO_Init+0x338>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_GPIO_Init+0x23a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <HAL_GPIO_Init+0x33c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_Init+0x236>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a4b      	ldr	r2, [pc, #300]	; (80030ac <HAL_GPIO_Init+0x340>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_Init+0x232>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <HAL_GPIO_Init+0x344>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x22e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a49      	ldr	r2, [pc, #292]	; (80030b4 <HAL_GPIO_Init+0x348>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_Init+0x22a>
 8002f92:	2306      	movs	r3, #6
 8002f94:	e00c      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e00a      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x244>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fc0:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_GPIO_Init+0x330>)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fce:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff2:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003070:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_GPIO_Init+0x34c>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	3301      	adds	r3, #1
 800307a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f ae78 	bne.w	8002d7c <HAL_GPIO_Init+0x10>
  }
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40021000 	.word	0x40021000
 800309c:	40010000 	.word	0x40010000
 80030a0:	48000400 	.word	0x48000400
 80030a4:	48000800 	.word	0x48000800
 80030a8:	48000c00 	.word	0x48000c00
 80030ac:	48001000 	.word	0x48001000
 80030b0:	48001400 	.word	0x48001400
 80030b4:	48001800 	.word	0x48001800
 80030b8:	40010400 	.word	0x40010400

080030bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e001      	b.n	80030de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	807b      	strh	r3, [r7, #2]
 80030f8:	4613      	mov	r3, r2
 80030fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030fc:	787b      	ldrb	r3, [r7, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003108:	e002      	b.n	8003110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800310a:	887a      	ldrh	r2, [r7, #2]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800313a:	e002      	b.n	8003142 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800313c:	887a      	ldrh	r2, [r7, #2]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003166:	4a05      	ldr	r2, [pc, #20]	; (800317c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f806 	bl	8003180 <HAL_GPIO_EXTI_Callback>
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40010400 	.word	0x40010400

08003180 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e081      	b.n	80032ac <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7fe f991 	bl	80014e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2224      	movs	r2, #36	; 0x24
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d107      	bne.n	8003210 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	e006      	b.n	800321e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800321c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d104      	bne.n	8003230 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800322e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003252:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69d9      	ldr	r1, [r3, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	f040 80f5 	bne.w	80034bc <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_I2C_Slave_Transmit+0x2a>
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0e9      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_I2C_Slave_Transmit+0x44>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0e2      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003300:	f7ff fb8e 	bl	8002a20 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800333c:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	2108      	movs	r1, #8
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fd6f 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003362:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0aa      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2208      	movs	r2, #8
 800336e:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d118      	bne.n	80033aa <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	2108      	movs	r1, #8
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fd52 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339c:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e08d      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2208      	movs	r2, #8
 80033a8:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fd38 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d02d      	beq.n	800341e <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033d0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e073      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fd66 	bl	8003eac <I2C_WaitOnTXISFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f4:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e061      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1d6      	bne.n	80033d6 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fd7d 	bl	8003f2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d011      	beq.n	800345c <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003446:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b04      	cmp	r3, #4
 800344e:	d103      	bne.n	8003458 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
 8003456:	e001      	b.n	800345c <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e030      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2220      	movs	r2, #32
 8003462:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fcdb 	bl	8003e2c <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e016      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800349e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
  }
}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	0a1b      	lsrs	r3, r3, #8
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <HAL_I2C_ER_IRQHandler+0x46>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	09db      	lsrs	r3, r3, #7
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800353e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	0a9b      	lsrs	r3, r3, #10
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <HAL_I2C_ER_IRQHandler+0x74>
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	09db      	lsrs	r3, r3, #7
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0208 	orr.w	r2, r3, #8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	0a5b      	lsrs	r3, r3, #9
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d010      	beq.n	800359c <HAL_I2C_ER_IRQHandler+0xa2>
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	09db      	lsrs	r3, r3, #7
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 030b 	and.w	r3, r3, #11
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80035ac:	68f9      	ldr	r1, [r7, #12]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb34 	bl	8003c1c <I2C_ITError>
  }
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
 80035f0:	4613      	mov	r3, r2
 80035f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <I2C_Slave_ISR_IT+0x24>
 800365c:	2302      	movs	r3, #2
 800365e:	e0f0      	b.n	8003842 <I2C_Slave_ISR_IT+0x206>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d04d      	beq.n	8003710 <I2C_Slave_ISR_IT+0xd4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d047      	beq.n	8003710 <I2C_Slave_ISR_IT+0xd4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d128      	bne.n	80036dc <I2C_Slave_ISR_IT+0xa0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b28      	cmp	r3, #40	; 0x28
 8003694:	d108      	bne.n	80036a8 <I2C_Slave_ISR_IT+0x6c>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369c:	d104      	bne.n	80036a8 <I2C_Slave_ISR_IT+0x6c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fa67 	bl	8003b74 <I2C_ITListenCplt>
 80036a6:	e032      	b.n	800370e <I2C_Slave_ISR_IT+0xd2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b29      	cmp	r3, #41	; 0x29
 80036b2:	d10e      	bne.n	80036d2 <I2C_Slave_ISR_IT+0x96>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ba:	d00a      	beq.n	80036d2 <I2C_Slave_ISR_IT+0x96>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2210      	movs	r2, #16
 80036c2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb69 	bl	8003d9c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f93f 	bl	800394e <I2C_ITSlaveSeqCplt>
 80036d0:	e01d      	b.n	800370e <I2C_Slave_ISR_IT+0xd2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2210      	movs	r2, #16
 80036d8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80036da:	e09a      	b.n	8003812 <I2C_Slave_ISR_IT+0x1d6>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2210      	movs	r2, #16
 80036e2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <I2C_Slave_ISR_IT+0xc4>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fc:	f040 8089 	bne.w	8003812 <I2C_Slave_ISR_IT+0x1d6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	4619      	mov	r1, r3
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fa88 	bl	8003c1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800370c:	e081      	b.n	8003812 <I2C_Slave_ISR_IT+0x1d6>
 800370e:	e080      	b.n	8003812 <I2C_Slave_ISR_IT+0x1d6>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d034      	beq.n	8003786 <I2C_Slave_ISR_IT+0x14a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02e      	beq.n	8003786 <I2C_Slave_ISR_IT+0x14a>
  {
    if (hi2c->XferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01c      	beq.n	800376c <I2C_Slave_ISR_IT+0x130>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d14f      	bne.n	8003816 <I2C_Slave_ISR_IT+0x1da>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800377c:	d04b      	beq.n	8003816 <I2C_Slave_ISR_IT+0x1da>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f8e5 	bl	800394e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003784:	e047      	b.n	8003816 <I2C_Slave_ISR_IT+0x1da>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x16c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	08db      	lsrs	r3, r3, #3
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x16c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f852 	bl	800384a <I2C_ITAddrCplt>
 80037a6:	e037      	b.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d031      	beq.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02b      	beq.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <I2C_Slave_ISR_IT+0x1c0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	; 0x28
 80037fa:	e00d      	b.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003802:	d002      	beq.n	800380a <I2C_Slave_ISR_IT+0x1ce>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f89f 	bl	800394e <I2C_ITSlaveSeqCplt>
 8003810:	e002      	b.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
    if (hi2c->XferCount == 0U)
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
    if ((hi2c->XferCount == 0U) && \
 8003816:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d009      	beq.n	8003838 <I2C_Slave_ISR_IT+0x1fc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_Slave_ISR_IT+0x1fc>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003830:	6979      	ldr	r1, [r7, #20]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f8c8 	bl	80039c8 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003860:	2b28      	cmp	r3, #40	; 0x28
 8003862:	d168      	bne.n	8003936 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b29b      	uxth	r3, r3
 800387e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003882:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003890:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800389e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d137      	bne.n	8003918 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	09db      	lsrs	r3, r3, #7
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	89bb      	ldrh	r3, [r7, #12]
 80038b0:	4053      	eors	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f003 0306 	and.w	r3, r3, #6
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11c      	bne.n	80038f6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80038bc:	897b      	ldrh	r3, [r7, #10]
 80038be:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d139      	bne.n	8003946 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038e8:	89ba      	ldrh	r2, [r7, #12]
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fe78 	bl	80035e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038f4:	e027      	b.n	8003946 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 80038f6:	893b      	ldrh	r3, [r7, #8]
 80038f8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038fa:	2104      	movs	r1, #4
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fbb7 	bl	8004070 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800390a:	89ba      	ldrh	r2, [r7, #12]
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fe67 	bl	80035e4 <HAL_I2C_AddrCallback>
}
 8003916:	e016      	b.n	8003946 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003918:	2104      	movs	r1, #4
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fba8 	bl	8004070 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003928:	89ba      	ldrh	r2, [r7, #12]
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fe58 	bl	80035e4 <HAL_I2C_AddrCallback>
}
 8003934:	e007      	b.n	8003946 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2208      	movs	r2, #8
 800393c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b29      	cmp	r3, #41	; 0x29
 8003968:	d112      	bne.n	8003990 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2228      	movs	r2, #40	; 0x28
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003978:	2101      	movs	r1, #1
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fb78 	bl	8004070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fe17 	bl	80035bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800398e:	e017      	b.n	80039c0 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b2a      	cmp	r3, #42	; 0x2a
 800399a:	d111      	bne.n	80039c0 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2228      	movs	r2, #40	; 0x28
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2222      	movs	r2, #34	; 0x22
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039aa:	2102      	movs	r1, #2
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fb5f 	bl	8004070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fe08 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2220      	movs	r2, #32
 80039e4:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80039e6:	2107      	movs	r1, #7
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb41 	bl	8004070 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <I2C_ITSlaveCplt+0x1a4>)
 8003a0a:	400b      	ands	r3, r1
 8003a0c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9c4 	bl	8003d9c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	0b9b      	lsrs	r3, r3, #14
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d018      	beq.n	8003a5a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a36:	e010      	b.n	8003a5a <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	0bdb      	lsrs	r3, r3, #15
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d020      	beq.n	8003aa8 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f89b 	bl	8003c1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b28      	cmp	r3, #40	; 0x28
 8003af0:	d138      	bne.n	8003b64 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f83d 	bl	8003b74 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003afa:	e033      	b.n	8003b64 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b04:	d011      	beq.n	8003b2a <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ff21 	bl	800394e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a18      	ldr	r2, [pc, #96]	; (8003b70 <I2C_ITSlaveCplt+0x1a8>)
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fd6c 	bl	8003600 <HAL_I2C_ListenCpltCallback>
}
 8003b28:	e01c      	b.n	8003b64 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b22      	cmp	r3, #34	; 0x22
 8003b34:	d10b      	bne.n	8003b4e <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fd42 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b4c:	e00a      	b.n	8003b64 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fd2c 	bl	80035bc <HAL_I2C_SlaveTxCpltCallback>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	fe00e800 	.word	0xfe00e800
 8003b70:	ffff0000 	.word	0xffff0000

08003b74 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <I2C_ITListenCplt+0xa4>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d022      	beq.n	8003bf2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d012      	beq.n	8003bf2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bf2:	2107      	movs	r1, #7
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fa3b 	bl	8004070 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2210      	movs	r2, #16
 8003c00:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fcf8 	bl	8003600 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	ffff0000 	.word	0xffff0000

08003c1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a55      	ldr	r2, [pc, #340]	; (8003d90 <I2C_ITError+0x174>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b28      	cmp	r3, #40	; 0x28
 8003c52:	d005      	beq.n	8003c60 <I2C_ITError+0x44>
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b29      	cmp	r3, #41	; 0x29
 8003c58:	d002      	beq.n	8003c60 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c5e:	d10e      	bne.n	8003c7e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c60:	2103      	movs	r1, #3
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa04 	bl	8004070 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2228      	movs	r2, #40	; 0x28
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a46      	ldr	r2, [pc, #280]	; (8003d94 <I2C_ITError+0x178>)
 8003c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c7c:	e013      	b.n	8003ca6 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c7e:	2107      	movs	r1, #7
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f9f5 	bl	8004070 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b60      	cmp	r3, #96	; 0x60
 8003c90:	d003      	beq.n	8003c9a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb4:	d123      	bne.n	8003cfe <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cc4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d05c      	beq.n	8003d88 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	4a31      	ldr	r2, [pc, #196]	; (8003d98 <I2C_ITError+0x17c>)
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f801 	bl	8002cea <HAL_DMA_Abort_IT>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04c      	beq.n	8003d88 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cfc:	e044      	b.n	8003d88 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0c:	d123      	bne.n	8003d56 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d1c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d030      	beq.n	8003d88 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <I2C_ITError+0x17c>)
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe ffd5 	bl	8002cea <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d50:	4610      	mov	r0, r2
 8003d52:	4798      	blx	r3
}
 8003d54:	e018      	b.n	8003d88 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b60      	cmp	r3, #96	; 0x60
 8003d60:	d10b      	bne.n	8003d7a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fc58 	bl	8003628 <HAL_I2C_AbortCpltCallback>
}
 8003d78:	e006      	b.n	8003d88 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fc46 	bl	8003614 <HAL_I2C_ErrorCallback>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	ffff0000 	.word	0xffff0000
 8003d94:	0800363d 	.word	0x0800363d
 8003d98:	08003de5 	.word	0x08003de5

08003d9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d103      	bne.n	8003dba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d007      	beq.n	8003dd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	619a      	str	r2, [r3, #24]
  }
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	2200      	movs	r2, #0
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2200      	movs	r2, #0
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b60      	cmp	r3, #96	; 0x60
 8003e0c:	d107      	bne.n	8003e1e <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff fc06 	bl	8003628 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e1c:	e002      	b.n	8003e24 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7ff fbf8 	bl	8003614 <HAL_I2C_ErrorCallback>
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	e022      	b.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d01e      	beq.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe fdeb 	bl	8002a20 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e00f      	b.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d0cd      	beq.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb8:	e02c      	b.n	8003f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f870 	bl	8003fa4 <I2C_IsAcknowledgeFailed>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02a      	b.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d01e      	beq.n	8003f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fda3 	bl	8002a20 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d113      	bne.n	8003f14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e007      	b.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d1cb      	bne.n	8003eba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f38:	e028      	b.n	8003f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f830 	bl	8003fa4 <I2C_IsAcknowledgeFailed>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e026      	b.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f4e:	f7fe fd67 	bl	8002a20 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d302      	bcc.n	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d113      	bne.n	8003f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e007      	b.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d1cf      	bne.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d151      	bne.n	8004062 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fbe:	e022      	b.n	8004006 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d01e      	beq.n	8004006 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc8:	f7fe fd2a 	bl	8002a20 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <I2C_IsAcknowledgeFailed+0x3a>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d113      	bne.n	8004006 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e02e      	b.n	8004064 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d1d5      	bne.n	8003fc0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2210      	movs	r2, #16
 800401a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2220      	movs	r2, #32
 8004022:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff feb9 	bl	8003d9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <I2C_IsAcknowledgeFailed+0xc8>)
 8004036:	400b      	ands	r3, r1
 8004038:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f043 0204 	orr.w	r2, r3, #4
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	fe00e800 	.word	0xfe00e800

08004070 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004090:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800409e:	2b28      	cmp	r3, #40	; 0x28
 80040a0:	d003      	beq.n	80040aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00f      	beq.n	80040d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80040ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c8:	2b28      	cmp	r3, #40	; 0x28
 80040ca:	d003      	beq.n	80040d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	f003 0311 	and.w	r3, r3, #17
 80040ec:	2b11      	cmp	r3, #17
 80040ee:	d103      	bne.n	80040f8 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80040f6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80040f8:	887b      	ldrh	r3, [r7, #2]
 80040fa:	f003 0312 	and.w	r3, r3, #18
 80040fe:	2b12      	cmp	r3, #18
 8004100:	d103      	bne.n	800410a <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f043 0320 	orr.w	r3, r3, #32
 8004108:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	f003 0312 	and.w	r3, r3, #18
 8004110:	2b12      	cmp	r3, #18
 8004112:	d103      	bne.n	800411c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	43da      	mvns	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	400a      	ands	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b20      	cmp	r3, #32
 800414e:	d138      	bne.n	80041c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800415a:	2302      	movs	r3, #2
 800415c:	e032      	b.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2224      	movs	r2, #36	; 0x24
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800418c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d139      	bne.n	800425a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e033      	b.n	800425c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004222:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40007000 	.word	0x40007000

080042a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b2:	d130      	bne.n	8004316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b4:	4b23      	ldr	r3, [pc, #140]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d038      	beq.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2232      	movs	r2, #50	; 0x32
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0c9b      	lsrs	r3, r3, #18
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e8:	e002      	b.n	80042f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fc:	d102      	bne.n	8004304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f2      	bne.n	80042ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d110      	bne.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e00f      	b.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d007      	beq.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432c:	4a05      	ldr	r2, [pc, #20]	; (8004344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40007000 	.word	0x40007000
 8004348:	20000028 	.word	0x20000028
 800434c:	431bde83 	.word	0x431bde83

08004350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e39d      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4ba4      	ldr	r3, [pc, #656]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436c:	4ba1      	ldr	r3, [pc, #644]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80e1 	beq.w	8004546 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_RCC_OscConfig+0x4a>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	f040 8088 	bne.w	80044a2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b01      	cmp	r3, #1
 8004396:	f040 8084 	bne.w	80044a2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800439a:	4b96      	ldr	r3, [pc, #600]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e375      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <HAL_RCC_OscConfig+0x7c>
 80043c2:	4b8c      	ldr	r3, [pc, #560]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ca:	e005      	b.n	80043d8 <HAL_RCC_OscConfig+0x88>
 80043cc:	4b89      	ldr	r3, [pc, #548]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d8:	4293      	cmp	r3, r2
 80043da:	d223      	bcs.n	8004424 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fd3b 	bl	8004e5c <RCC_SetFlashLatencyFromMSIRange>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e356      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043f0:	4b80      	ldr	r3, [pc, #512]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7f      	ldr	r2, [pc, #508]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80043f6:	f043 0308 	orr.w	r3, r3, #8
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b7d      	ldr	r3, [pc, #500]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	497a      	ldr	r1, [pc, #488]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440e:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	4975      	ldr	r1, [pc, #468]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
 8004422:	e022      	b.n	800446a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004424:	4b73      	ldr	r3, [pc, #460]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a72      	ldr	r2, [pc, #456]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800442a:	f043 0308 	orr.w	r3, r3, #8
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b70      	ldr	r3, [pc, #448]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	496d      	ldr	r1, [pc, #436]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004442:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	4968      	ldr	r1, [pc, #416]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fcfe 	bl	8004e5c <RCC_SetFlashLatencyFromMSIRange>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e319      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446a:	f000 fc03 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 800446e:	4601      	mov	r1, r0
 8004470:	4b60      	ldr	r3, [pc, #384]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	4a5f      	ldr	r2, [pc, #380]	; (80045f8 <HAL_RCC_OscConfig+0x2a8>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	fa21 f303 	lsr.w	r3, r1, r3
 8004486:	4a5d      	ldr	r2, [pc, #372]	; (80045fc <HAL_RCC_OscConfig+0x2ac>)
 8004488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800448a:	4b5d      	ldr	r3, [pc, #372]	; (8004600 <HAL_RCC_OscConfig+0x2b0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fc f876 	bl	8000580 <HAL_InitTick>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d052      	beq.n	8004544 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	e2fd      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d032      	beq.n	8004510 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044aa:	4b52      	ldr	r3, [pc, #328]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a51      	ldr	r2, [pc, #324]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b6:	f7fe fab3 	bl	8002a20 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044be:	f7fe faaf 	bl	8002a20 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e2e6      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d0:	4b48      	ldr	r3, [pc, #288]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044dc:	4b45      	ldr	r3, [pc, #276]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a44      	ldr	r2, [pc, #272]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044e2:	f043 0308 	orr.w	r3, r3, #8
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	493f      	ldr	r1, [pc, #252]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	493a      	ldr	r1, [pc, #232]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	604b      	str	r3, [r1, #4]
 800450e:	e01a      	b.n	8004546 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800451c:	f7fe fa80 	bl	8002a20 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004524:	f7fe fa7c 	bl	8002a20 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e2b3      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1d4>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d074      	beq.n	800463c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x214>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d10e      	bne.n	800457c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d10b      	bne.n	800457c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d064      	beq.n	800463a <HAL_RCC_OscConfig+0x2ea>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d160      	bne.n	800463a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e290      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004584:	d106      	bne.n	8004594 <HAL_RCC_OscConfig+0x244>
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e01d      	b.n	80045d0 <HAL_RCC_OscConfig+0x280>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x268>
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e00b      	b.n	80045d0 <HAL_RCC_OscConfig+0x280>
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <HAL_RCC_OscConfig+0x2a4>)
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe fa22 	bl	8002a20 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045de:	e011      	b.n	8004604 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fe fa1e 	bl	8002a20 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d90a      	bls.n	8004604 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e255      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
 80045f8:	08011520 	.word	0x08011520
 80045fc:	20000028 	.word	0x20000028
 8004600:	2000002c 	.word	0x2000002c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	4bae      	ldr	r3, [pc, #696]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0e7      	beq.n	80045e0 <HAL_RCC_OscConfig+0x290>
 8004610:	e014      	b.n	800463c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7fe fa05 	bl	8002a20 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461a:	f7fe fa01 	bl	8002a20 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b64      	cmp	r3, #100	; 0x64
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e238      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462c:	4ba4      	ldr	r3, [pc, #656]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x2ca>
 8004638:	e000      	b.n	800463c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d060      	beq.n	800470a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b04      	cmp	r3, #4
 800464c:	d005      	beq.n	800465a <HAL_RCC_OscConfig+0x30a>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	2b0c      	cmp	r3, #12
 8004652:	d119      	bne.n	8004688 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d116      	bne.n	8004688 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800465a:	4b99      	ldr	r3, [pc, #612]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_RCC_OscConfig+0x322>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e215      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004672:	4b93      	ldr	r3, [pc, #588]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	498f      	ldr	r1, [pc, #572]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004686:	e040      	b.n	800470a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d023      	beq.n	80046d8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004690:	4b8b      	ldr	r3, [pc, #556]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a8a      	ldr	r2, [pc, #552]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fe f9c0 	bl	8002a20 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fe f9bc 	bl	8002a20 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e1f3      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b6:	4b82      	ldr	r3, [pc, #520]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b7f      	ldr	r3, [pc, #508]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	497b      	ldr	r1, [pc, #492]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
 80046d6:	e018      	b.n	800470a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d8:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a78      	ldr	r2, [pc, #480]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80046de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe f99c 	bl	8002a20 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ec:	f7fe f998 	bl	8002a20 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1cf      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046fe:	4b70      	ldr	r3, [pc, #448]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d03c      	beq.n	8004790 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01c      	beq.n	8004758 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471e:	4b68      	ldr	r3, [pc, #416]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004724:	4a66      	ldr	r2, [pc, #408]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe f977 	bl	8002a20 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004736:	f7fe f973 	bl	8002a20 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1aa      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004748:	4b5d      	ldr	r3, [pc, #372]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800474a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ef      	beq.n	8004736 <HAL_RCC_OscConfig+0x3e6>
 8004756:	e01b      	b.n	8004790 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475e:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fe f95a 	bl	8002a20 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004770:	f7fe f956 	bl	8002a20 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e18d      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004782:	4b4f      	ldr	r3, [pc, #316]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ef      	bne.n	8004770 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a5 	beq.w	80048e8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a43      	ldr	r2, [pc, #268]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80047b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ca:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <HAL_RCC_OscConfig+0x574>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d118      	bne.n	8004808 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCC_OscConfig+0x574>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3a      	ldr	r2, [pc, #232]	; (80048c4 <HAL_RCC_OscConfig+0x574>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e2:	f7fe f91d 	bl	8002a20 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fe f919 	bl	8002a20 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e150      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047fc:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <HAL_RCC_OscConfig+0x574>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0f0      	beq.n	80047ea <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d108      	bne.n	8004822 <HAL_RCC_OscConfig+0x4d2>
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004820:	e024      	b.n	800486c <HAL_RCC_OscConfig+0x51c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d110      	bne.n	800484c <HAL_RCC_OscConfig+0x4fc>
 800482a:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483a:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800484a:	e00f      	b.n	800486c <HAL_RCC_OscConfig+0x51c>
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004864:	f023 0304 	bic.w	r3, r3, #4
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d016      	beq.n	80048a2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fe f8d4 	bl	8002a20 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487a:	e00a      	b.n	8004892 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fe f8d0 	bl	8002a20 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e105      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_OscConfig+0x570>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ed      	beq.n	800487c <HAL_RCC_OscConfig+0x52c>
 80048a0:	e019      	b.n	80048d6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fe f8bd 	bl	8002a20 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a8:	e00e      	b.n	80048c8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fe f8b9 	bl	8002a20 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d905      	bls.n	80048c8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0ee      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048c8:	4b77      	ldr	r3, [pc, #476]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e9      	bne.n	80048aa <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d6:	7ffb      	ldrb	r3, [r7, #31]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	4a71      	ldr	r2, [pc, #452]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80d5 	beq.w	8004a9c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	f000 808e 	beq.w	8004a16 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d15b      	bne.n	80049ba <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7fe f887 	bl	8002a20 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004916:	f7fe f883 	bl	8002a20 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0ba      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004928:	4b5f      	ldr	r3, [pc, #380]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004934:	4b5c      	ldr	r3, [pc, #368]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	4b5c      	ldr	r3, [pc, #368]	; (8004aac <HAL_RCC_OscConfig+0x75c>)
 800493a:	4013      	ands	r3, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004944:	3a01      	subs	r2, #1
 8004946:	0112      	lsls	r2, r2, #4
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800494e:	0212      	lsls	r2, r2, #8
 8004950:	4311      	orrs	r1, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0552      	lsls	r2, r2, #21
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004962:	0852      	lsrs	r2, r2, #1
 8004964:	3a01      	subs	r2, #1
 8004966:	0652      	lsls	r2, r2, #25
 8004968:	4311      	orrs	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800496e:	0912      	lsrs	r2, r2, #4
 8004970:	0452      	lsls	r2, r2, #17
 8004972:	430a      	orrs	r2, r1
 8004974:	494c      	ldr	r1, [pc, #304]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004976:	4313      	orrs	r3, r2
 8004978:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800497a:	4b4b      	ldr	r3, [pc, #300]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a4a      	ldr	r2, [pc, #296]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004984:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004986:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4a47      	ldr	r2, [pc, #284]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 800498c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004990:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fe f845 	bl	8002a20 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fe f841 	bl	8002a20 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e078      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ac:	4b3e      	ldr	r3, [pc, #248]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x64a>
 80049b8:	e070      	b.n	8004a9c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b3b      	ldr	r3, [pc, #236]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a3a      	ldr	r2, [pc, #232]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80049d2:	4b35      	ldr	r3, [pc, #212]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049d8:	f023 0303 	bic.w	r3, r3, #3
 80049dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049de:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a31      	ldr	r2, [pc, #196]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 80049e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fe f817 	bl	8002a20 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fe f813 	bl	8002a20 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e04a      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x6a6>
 8004a14:	e042      	b.n	8004a9c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e03d      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_RCC_OscConfig+0x758>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0203 	and.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d130      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	3b01      	subs	r3, #1
 8004a42:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d127      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a52:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d11f      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a62:	2a07      	cmp	r2, #7
 8004a64:	bf14      	ite	ne
 8004a66:	2201      	movne	r2, #1
 8004a68:	2200      	moveq	r2, #0
 8004a6a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d113      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	3b01      	subs	r3, #1
 8004a92:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	f99d808c 	.word	0xf99d808c

08004ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0c8      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b66      	ldr	r3, [pc, #408]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d910      	bls.n	8004af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b63      	ldr	r3, [pc, #396]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 0207 	bic.w	r2, r3, #7
 8004ada:	4961      	ldr	r1, [pc, #388]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d001      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0b0      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d04c      	beq.n	8004b9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b08:	4b56      	ldr	r3, [pc, #344]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d121      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e09e      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b20:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d115      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e092      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b38:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e086      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e07e      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b58:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 0203 	bic.w	r2, r3, #3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	493f      	ldr	r1, [pc, #252]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fd ff59 	bl	8002a20 <HAL_GetTick>
 8004b6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b72:	f7fd ff55 	bl	8002a20 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e066      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b88:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 020c 	and.w	r2, r3, #12
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d1eb      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	492c      	ldr	r1, [pc, #176]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d210      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 0207 	bic.w	r2, r3, #7
 8004bce:	4924      	ldr	r1, [pc, #144]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e036      	b.n	8004c56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4918      	ldr	r1, [pc, #96]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4910      	ldr	r1, [pc, #64]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c26:	f000 f825 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <HAL_RCC_ClockConfig+0x1b4>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	4a0c      	ldr	r2, [pc, #48]	; (8004c68 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	5cd3      	ldrb	r3, [r2, r3]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc98 	bl	8000580 <HAL_InitTick>
 8004c50:	4603      	mov	r3, r0
 8004c52:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c54:	7afb      	ldrb	r3, [r7, #11]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40022000 	.word	0x40022000
 8004c64:	40021000 	.word	0x40021000
 8004c68:	08011520 	.word	0x08011520
 8004c6c:	20000028 	.word	0x20000028
 8004c70:	2000002c 	.word	0x2000002c

08004c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c82:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c8c:	4b3a      	ldr	r3, [pc, #232]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d121      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d11e      	bne.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ca8:	4b33      	ldr	r3, [pc, #204]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cb4:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e005      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cc4:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cd0:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cec:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	e004      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cf8:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d133      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0xa4>
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0xaa>
 8004d16:	e005      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d1a:	617b      	str	r3, [r7, #20]
      break;
 8004d1c:	e005      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d1e:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d20:	617b      	str	r3, [r7, #20]
      break;
 8004d22:	e002      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	617b      	str	r3, [r7, #20]
      break;
 8004d28:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	3301      	adds	r3, #1
 8004d36:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	fb02 f203 	mul.w	r2, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	0e5b      	lsrs	r3, r3, #25
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3724      	adds	r7, #36	; 0x24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	08011538 	.word	0x08011538
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d8c:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000028 	.word	0x20000028

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004da4:	f7ff fff0 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004da8:	4601      	mov	r1, r0
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	08011530 	.word	0x08011530

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dd0:	f7ff ffda 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0adb      	lsrs	r3, r3, #11
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000
 8004df4:	08011530 	.word	0x08011530

08004df8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	220f      	movs	r2, #15
 8004e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e08:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0203 	and.w	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCC_GetClockConfig+0x5c>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	08db      	lsrs	r3, r3, #3
 8004e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <HAL_RCC_GetClockConfig+0x60>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0207 	and.w	r2, r3, #7
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40022000 	.word	0x40022000

08004e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e68:	4b2a      	ldr	r3, [pc, #168]	; (8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e74:	f7ff fa08 	bl	8004288 <HAL_PWREx_GetVoltageRange>
 8004e78:	6178      	str	r0, [r7, #20]
 8004e7a:	e014      	b.n	8004ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
 8004e88:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e94:	f7ff f9f8 	bl	8004288 <HAL_PWREx_GetVoltageRange>
 8004e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eac:	d10b      	bne.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d919      	bls.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2ba0      	cmp	r3, #160	; 0xa0
 8004eb8:	d902      	bls.n	8004ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eba:	2302      	movs	r3, #2
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	e013      	b.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	e010      	b.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d902      	bls.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ecc:	2303      	movs	r3, #3
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	e00a      	b.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d102      	bne.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ed8:	2302      	movs	r3, #2
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	e004      	b.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b70      	cmp	r3, #112	; 0x70
 8004ee2:	d101      	bne.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 0207 	bic.w	r2, r3, #7
 8004ef0:	4909      	ldr	r1, [pc, #36]	; (8004f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e000      	b.n	8004f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40022000 	.word	0x40022000

08004f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f24:	2300      	movs	r3, #0
 8004f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f28:	2300      	movs	r3, #0
 8004f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d03f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f40:	d01c      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f46:	d802      	bhi.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004f4c:	e01f      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f58:	d01c      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004f5a:	e018      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f5c:	4b85      	ldr	r3, [pc, #532]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4a84      	ldr	r2, [pc, #528]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f68:	e015      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fac9 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3320      	adds	r3, #32
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fbb0 	bl	80056e8 <RCCEx_PLLSAI2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	74fb      	strb	r3, [r7, #19]
      break;
 8004f92:	e000      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f9c:	4b75      	ldr	r3, [pc, #468]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004faa:	4972      	ldr	r1, [pc, #456]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fb2:	e001      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d03f      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fcc:	d01c      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fd2:	d802      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004fd8:	e01f      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004fe4:	d01c      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004fe6:	e018      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fe8:	4b62      	ldr	r3, [pc, #392]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4a61      	ldr	r2, [pc, #388]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ff4:	e015      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fa83 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005006:	e00c      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3320      	adds	r3, #32
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fb6a 	bl	80056e8 <RCCEx_PLLSAI2_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005018:	e003      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	74fb      	strb	r3, [r7, #19]
      break;
 800501e:	e000      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005028:	4b52      	ldr	r3, [pc, #328]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005036:	494f      	ldr	r1, [pc, #316]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800503e:	e001      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80a0 	beq.w	8005192 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005066:	2300      	movs	r3, #0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506c:	4b41      	ldr	r3, [pc, #260]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	4a40      	ldr	r2, [pc, #256]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005076:	6593      	str	r3, [r2, #88]	; 0x58
 8005078:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005084:	2301      	movs	r3, #1
 8005086:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005088:	4b3b      	ldr	r3, [pc, #236]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3a      	ldr	r2, [pc, #232]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800508e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005094:	f7fd fcc4 	bl	8002a20 <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800509a:	e009      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fd fcc0 	bl	8002a20 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d902      	bls.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	74fb      	strb	r3, [r7, #19]
        break;
 80050ae:	e005      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050b0:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ef      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d15c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050c2:	4b2c      	ldr	r3, [pc, #176]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01f      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d019      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050e0:	4b24      	ldr	r3, [pc, #144]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	4a20      	ldr	r2, [pc, #128]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800510c:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fd fc7f 	bl	8002a20 <HAL_GetTick>
 8005122:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005124:	e00b      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005126:	f7fd fc7b 	bl	8002a20 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d902      	bls.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	74fb      	strb	r3, [r7, #19]
            break;
 800513c:	e006      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ec      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10c      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005162:	4904      	ldr	r1, [pc, #16]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800516a:	e009      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
 8005170:	e006      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005180:	7c7b      	ldrb	r3, [r7, #17]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d105      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005186:	4b9e      	ldr	r3, [pc, #632]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	4a9d      	ldr	r2, [pc, #628]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800518c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005190:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800519e:	4b98      	ldr	r3, [pc, #608]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	f023 0203 	bic.w	r2, r3, #3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	4994      	ldr	r1, [pc, #592]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051c0:	4b8f      	ldr	r3, [pc, #572]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	f023 020c 	bic.w	r2, r3, #12
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	498c      	ldr	r1, [pc, #560]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051e2:	4b87      	ldr	r3, [pc, #540]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	4983      	ldr	r1, [pc, #524]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005204:	4b7e      	ldr	r3, [pc, #504]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	497b      	ldr	r1, [pc, #492]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005234:	4972      	ldr	r1, [pc, #456]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005248:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005256:	496a      	ldr	r1, [pc, #424]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800526a:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005278:	4961      	ldr	r1, [pc, #388]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800528c:	4b5c      	ldr	r3, [pc, #368]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529a:	4959      	ldr	r1, [pc, #356]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ae:	4b54      	ldr	r3, [pc, #336]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052bc:	4950      	ldr	r1, [pc, #320]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052d0:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	4948      	ldr	r1, [pc, #288]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f2:	4b43      	ldr	r3, [pc, #268]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	493f      	ldr	r1, [pc, #252]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d028      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005314:	4b3a      	ldr	r3, [pc, #232]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005322:	4937      	ldr	r1, [pc, #220]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005332:	d106      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a31      	ldr	r2, [pc, #196]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533e:	60d3      	str	r3, [r2, #12]
 8005340:	e011      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005346:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800534a:	d10c      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	2101      	movs	r1, #1
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f8d8 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d028      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005372:	4b23      	ldr	r3, [pc, #140]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	491f      	ldr	r1, [pc, #124]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005390:	d106      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800539c:	60d3      	str	r3, [r2, #12]
 800539e:	e011      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	2101      	movs	r1, #1
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f8a9 	bl	8005508 <RCCEx_PLLSAI1_Config>
 80053b6:	4603      	mov	r3, r0
 80053b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
 80053c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	4908      	ldr	r1, [pc, #32]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ee:	d109      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a02      	ldr	r2, [pc, #8]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053fa:	60d3      	str	r3, [r2, #12]
 80053fc:	e014      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800540c:	d10c      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	2101      	movs	r1, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f877 	bl	8005508 <RCCEx_PLLSAI1_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800541e:	7cfb      	ldrb	r3, [r7, #19]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d02f      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005434:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005442:	4928      	ldr	r1, [pc, #160]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800544e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005452:	d10d      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2102      	movs	r1, #2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f854 	bl	8005508 <RCCEx_PLLSAI1_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d014      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	74bb      	strb	r3, [r7, #18]
 800546e:	e011      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005478:	d10c      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3320      	adds	r3, #32
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f931 	bl	80056e8 <RCCEx_PLLSAI2_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005490:	7cfb      	ldrb	r3, [r7, #19]
 8005492:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054a0:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054ae:	490d      	ldr	r1, [pc, #52]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d2:	4904      	ldr	r1, [pc, #16]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054da:	7cbb      	ldrb	r3, [r7, #18]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000

080054e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054f2:	f043 0304 	orr.w	r3, r3, #4
 80054f6:	6013      	str	r3, [r2, #0]
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000

08005508 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005516:	4b73      	ldr	r3, [pc, #460]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d018      	beq.n	8005554 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005522:	4b70      	ldr	r3, [pc, #448]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0203 	and.w	r2, r3, #3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d10d      	bne.n	800554e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
       ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800553a:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
       ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d044      	beq.n	80055d8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e041      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d00c      	beq.n	8005576 <RCCEx_PLLSAI1_Config+0x6e>
 800555c:	2b03      	cmp	r3, #3
 800555e:	d013      	beq.n	8005588 <RCCEx_PLLSAI1_Config+0x80>
 8005560:	2b01      	cmp	r3, #1
 8005562:	d120      	bne.n	80055a6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005564:	4b5f      	ldr	r3, [pc, #380]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d11d      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005574:	e01a      	b.n	80055ac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005576:	4b5b      	ldr	r3, [pc, #364]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557e:	2b00      	cmp	r3, #0
 8005580:	d116      	bne.n	80055b0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005586:	e013      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005588:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055a4:	e006      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      break;
 80055aa:	e004      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055ac:	bf00      	nop
 80055ae:	e002      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10d      	bne.n	80055d8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055bc:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6819      	ldr	r1, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	430b      	orrs	r3, r1
 80055d2:	4944      	ldr	r1, [pc, #272]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d17d      	bne.n	80056da <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055de:	4b41      	ldr	r3, [pc, #260]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a40      	ldr	r2, [pc, #256]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ea:	f7fd fa19 	bl	8002a20 <HAL_GetTick>
 80055ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055f0:	e009      	b.n	8005606 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f2:	f7fd fa15 	bl	8002a20 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d902      	bls.n	8005606 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	73fb      	strb	r3, [r7, #15]
        break;
 8005604:	e005      	b.n	8005612 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005606:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1ef      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d160      	bne.n	80056da <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d111      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6892      	ldr	r2, [r2, #8]
 800562e:	0211      	lsls	r1, r2, #8
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68d2      	ldr	r2, [r2, #12]
 8005634:	0912      	lsrs	r2, r2, #4
 8005636:	0452      	lsls	r2, r2, #17
 8005638:	430a      	orrs	r2, r1
 800563a:	492a      	ldr	r1, [pc, #168]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	610b      	str	r3, [r1, #16]
 8005640:	e027      	b.n	8005692 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d112      	bne.n	800566e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005648:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005650:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6892      	ldr	r2, [r2, #8]
 8005658:	0211      	lsls	r1, r2, #8
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6912      	ldr	r2, [r2, #16]
 800565e:	0852      	lsrs	r2, r2, #1
 8005660:	3a01      	subs	r2, #1
 8005662:	0552      	lsls	r2, r2, #21
 8005664:	430a      	orrs	r2, r1
 8005666:	491f      	ldr	r1, [pc, #124]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	610b      	str	r3, [r1, #16]
 800566c:	e011      	b.n	8005692 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005676:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6892      	ldr	r2, [r2, #8]
 800567e:	0211      	lsls	r1, r2, #8
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6952      	ldr	r2, [r2, #20]
 8005684:	0852      	lsrs	r2, r2, #1
 8005686:	3a01      	subs	r2, #1
 8005688:	0652      	lsls	r2, r2, #25
 800568a:	430a      	orrs	r2, r1
 800568c:	4915      	ldr	r1, [pc, #84]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005692:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005698:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800569c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fd f9bf 	bl	8002a20 <HAL_GetTick>
 80056a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056a4:	e009      	b.n	80056ba <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056a6:	f7fd f9bb 	bl	8002a20 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d902      	bls.n	80056ba <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	73fb      	strb	r3, [r7, #15]
          break;
 80056b8:	e005      	b.n	80056c6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ef      	beq.n	80056a6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	4903      	ldr	r1, [pc, #12]	; (80056e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000

080056e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056f6:	4b68      	ldr	r3, [pc, #416]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d018      	beq.n	8005734 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0203 	and.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d10d      	bne.n	800572e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
       ||
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800571a:	4b5f      	ldr	r3, [pc, #380]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
       ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d044      	beq.n	80057b8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
 8005732:	e041      	b.n	80057b8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b02      	cmp	r3, #2
 800573a:	d00c      	beq.n	8005756 <RCCEx_PLLSAI2_Config+0x6e>
 800573c:	2b03      	cmp	r3, #3
 800573e:	d013      	beq.n	8005768 <RCCEx_PLLSAI2_Config+0x80>
 8005740:	2b01      	cmp	r3, #1
 8005742:	d120      	bne.n	8005786 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005744:	4b54      	ldr	r3, [pc, #336]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11d      	bne.n	800578c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005754:	e01a      	b.n	800578c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005756:	4b50      	ldr	r3, [pc, #320]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575e:	2b00      	cmp	r3, #0
 8005760:	d116      	bne.n	8005790 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005766:	e013      	b.n	8005790 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10f      	bne.n	8005794 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005774:	4b48      	ldr	r3, [pc, #288]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005784:	e006      	b.n	8005794 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
      break;
 800578a:	e004      	b.n	8005796 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800578c:	bf00      	nop
 800578e:	e002      	b.n	8005796 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005790:	bf00      	nop
 8005792:	e000      	b.n	8005796 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005794:	bf00      	nop
    }

    if(status == HAL_OK)
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800579c:	4b3e      	ldr	r3, [pc, #248]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6819      	ldr	r1, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	430b      	orrs	r3, r1
 80057b2:	4939      	ldr	r1, [pc, #228]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d167      	bne.n	800588e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a35      	ldr	r2, [pc, #212]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ca:	f7fd f929 	bl	8002a20 <HAL_GetTick>
 80057ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057d0:	e009      	b.n	80057e6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057d2:	f7fd f925 	bl	8002a20 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d902      	bls.n	80057e6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	73fb      	strb	r3, [r7, #15]
        break;
 80057e4:	e005      	b.n	80057f2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057e6:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ef      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d14a      	bne.n	800588e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d111      	bne.n	8005822 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	0211      	lsls	r1, r2, #8
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68d2      	ldr	r2, [r2, #12]
 8005814:	0912      	lsrs	r2, r2, #4
 8005816:	0452      	lsls	r2, r2, #17
 8005818:	430a      	orrs	r2, r1
 800581a:	491f      	ldr	r1, [pc, #124]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	614b      	str	r3, [r1, #20]
 8005820:	e011      	b.n	8005846 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005822:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800582a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6892      	ldr	r2, [r2, #8]
 8005832:	0211      	lsls	r1, r2, #8
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6912      	ldr	r2, [r2, #16]
 8005838:	0852      	lsrs	r2, r2, #1
 800583a:	3a01      	subs	r2, #1
 800583c:	0652      	lsls	r2, r2, #25
 800583e:	430a      	orrs	r2, r1
 8005840:	4915      	ldr	r1, [pc, #84]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005842:	4313      	orrs	r3, r2
 8005844:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fd f8e5 	bl	8002a20 <HAL_GetTick>
 8005856:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005858:	e009      	b.n	800586e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800585a:	f7fd f8e1 	bl	8002a20 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d902      	bls.n	800586e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	73fb      	strb	r3, [r7, #15]
          break;
 800586c:	e005      	b.n	800587a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ef      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	4903      	ldr	r1, [pc, #12]	; (8005898 <RCCEx_PLLSAI2_Config+0x1b0>)
 800588a:	4313      	orrs	r3, r2
 800588c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40021000 	.word	0x40021000

0800589c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e07c      	b.n	80059a8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fb fdaf 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058ee:	d902      	bls.n	80058f6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005904:	d007      	beq.n	8005916 <HAL_SPI_Init+0x7a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10b      	bne.n	8005936 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005926:	d903      	bls.n	8005930 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
 800592e:	e002      	b.n	8005936 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	ea42 0103 	orr.w	r1, r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	f003 0204 	and.w	r2, r3, #4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	ea42 0103 	orr.w	r1, r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08a      	sub	sp, #40	; 0x28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059be:	2301      	movs	r3, #1
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x26>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e1fb      	b.n	8005dce <HAL_SPI_TransmitReceive+0x41e>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059de:	f7fd f81f 	bl	8002a20 <HAL_GetTick>
 80059e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059f2:	887b      	ldrh	r3, [r7, #2]
 80059f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80059f6:	887b      	ldrh	r3, [r7, #2]
 80059f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059fa:	7efb      	ldrb	r3, [r7, #27]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d00e      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x6e>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a06:	d106      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x66>
 8005a10:	7efb      	ldrb	r3, [r7, #27]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d003      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a1c:	e1cd      	b.n	8005dba <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x80>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x80>
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005a36:	e1c0      	b.n	8005dba <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d003      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2205      	movs	r2, #5
 8005a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	887a      	ldrh	r2, [r7, #2]
 8005a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	887a      	ldrh	r2, [r7, #2]
 8005a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	887a      	ldrh	r2, [r7, #2]
 8005a78:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8e:	d802      	bhi.n	8005a96 <HAL_SPI_TransmitReceive+0xe6>
 8005a90:	8a3b      	ldrh	r3, [r7, #16]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d908      	bls.n	8005aa8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e007      	b.n	8005ab8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d007      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ade:	d97c      	bls.n	8005bda <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x13e>
 8005ae8:	8a7b      	ldrh	r3, [r7, #18]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d169      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	1c9a      	adds	r2, r3, #2
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b12:	e056      	b.n	8005bc2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d11b      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x1aa>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d016      	beq.n	8005b5a <HAL_SPI_TransmitReceive+0x1aa>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d113      	bne.n	8005b5a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	881a      	ldrh	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	1c9a      	adds	r2, r3, #2
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d11c      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x1f2>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ba2:	f7fc ff3d 	bl	8002a20 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d807      	bhi.n	8005bc2 <HAL_SPI_TransmitReceive+0x212>
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d003      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005bc0:	e0fb      	b.n	8005dba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1a3      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x164>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d19d      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x164>
 8005bd8:	e0df      	b.n	8005d9a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_SPI_TransmitReceive+0x23a>
 8005be2:	8a7b      	ldrh	r3, [r7, #18]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 80cb 	bne.w	8005d80 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d912      	bls.n	8005c1a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	881a      	ldrh	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b02      	subs	r3, #2
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c18:	e0b2      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c40:	e09e      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d134      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x30a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02f      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x30a>
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d12c      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d912      	bls.n	8005c90 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	881a      	ldrh	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b02      	subs	r3, #2
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c8e:	e012      	b.n	8005cb6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d148      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x3aa>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d042      	beq.n	8005d5a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d923      	bls.n	8005d28 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	b292      	uxth	r2, r2
 8005cec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	1c9a      	adds	r2, r3, #2
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b02      	subs	r3, #2
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d81f      	bhi.n	8005d56 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e016      	b.n	8005d56 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f103 020c 	add.w	r2, r3, #12
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d56:	2301      	movs	r3, #1
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d5a:	f7fc fe61 	bl	8002a20 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d803      	bhi.n	8005d72 <HAL_SPI_TransmitReceive+0x3c2>
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x3c8>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d7e:	e01c      	b.n	8005dba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f47f af5b 	bne.w	8005c42 <HAL_SPI_TransmitReceive+0x292>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f47f af54 	bne.w	8005c42 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 f8f0 	bl	8005f84 <SPI_EndRxTxTransaction>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d006      	beq.n	8005db8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	661a      	str	r2, [r3, #96]	; 0x60
 8005db6:	e000      	b.n	8005dba <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005db8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3728      	adds	r7, #40	; 0x28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005de6:	e04c      	b.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d048      	beq.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005df0:	f7fc fe16 	bl	8002a20 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d902      	bls.n	8005e06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d13d      	bne.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1e:	d111      	bne.n	8005e44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	d004      	beq.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e32:	d107      	bne.n	8005e44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4c:	d10f      	bne.n	8005e6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e00f      	b.n	8005ea2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1a3      	bne.n	8005de8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005eb8:	e057      	b.n	8005f6a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ec0:	d106      	bne.n	8005ed0 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d048      	beq.n	8005f6a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ed8:	f7fc fda2 	bl	8002a20 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d902      	bls.n	8005eee <SPI_WaitFifoStateUntilTimeout+0x44>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d13d      	bne.n	8005f6a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f06:	d111      	bne.n	8005f2c <SPI_WaitFifoStateUntilTimeout+0x82>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f10:	d004      	beq.n	8005f1c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1a:	d107      	bne.n	8005f2c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f34:	d10f      	bne.n	8005f56 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e008      	b.n	8005f7c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4013      	ands	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d19f      	bne.n	8005eba <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff ff84 	bl	8005eaa <SPI_WaitFifoStateUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e027      	b.n	8006008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff ff07 	bl	8005dd6 <SPI_WaitFlagStateUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e014      	b.n	8006008 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff ff5d 	bl	8005eaa <SPI_WaitFifoStateUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	f043 0220 	orr.w	r2, r3, #32
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e000      	b.n	8006008 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e01d      	b.n	800605e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f815 	bl	8006066 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 f986 	bl	8006360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <HAL_TIM_Base_Start_IT+0x50>)
 800609c:	4013      	ands	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b06      	cmp	r3, #6
 80060a4:	d00b      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x42>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ac:	d007      	beq.n	80060be <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0201 	orr.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	00010007 	.word	0x00010007

080060d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d122      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0202 	mvn.w	r2, #2
 80060fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f905 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8f7 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f908 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d122      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d11b      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0204 	mvn.w	r2, #4
 8006150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8db 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8cd 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8de 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b08      	cmp	r3, #8
 800618c:	d122      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b08      	cmp	r3, #8
 800619a:	d11b      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8b1 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8a3 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8b4 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d122      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d11b      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0210 	mvn.w	r2, #16
 80061f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2208      	movs	r2, #8
 80061fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f887 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f879 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f88a 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10e      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0201 	mvn.w	r2, #1
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fa f9fa 	bl	8000648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b80      	cmp	r3, #128	; 0x80
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f914 	bl	80064a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628e:	d10e      	bne.n	80062ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d107      	bne.n	80062ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f907 	bl	80064bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b40      	cmp	r3, #64	; 0x40
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f838 	bl	800634a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0220 	mvn.w	r2, #32
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8c7 	bl	8006494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a40      	ldr	r2, [pc, #256]	; (8006474 <TIM_Base_SetConfig+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a3d      	ldr	r2, [pc, #244]	; (8006478 <TIM_Base_SetConfig+0x118>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a3c      	ldr	r2, [pc, #240]	; (800647c <TIM_Base_SetConfig+0x11c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3b      	ldr	r2, [pc, #236]	; (8006480 <TIM_Base_SetConfig+0x120>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3a      	ldr	r2, [pc, #232]	; (8006484 <TIM_Base_SetConfig+0x124>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2f      	ldr	r2, [pc, #188]	; (8006474 <TIM_Base_SetConfig+0x114>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01f      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d01b      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <TIM_Base_SetConfig+0x118>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d017      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2b      	ldr	r2, [pc, #172]	; (800647c <TIM_Base_SetConfig+0x11c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2a      	ldr	r2, [pc, #168]	; (8006480 <TIM_Base_SetConfig+0x120>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00f      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a29      	ldr	r2, [pc, #164]	; (8006484 <TIM_Base_SetConfig+0x124>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a28      	ldr	r2, [pc, #160]	; (8006488 <TIM_Base_SetConfig+0x128>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a27      	ldr	r2, [pc, #156]	; (800648c <TIM_Base_SetConfig+0x12c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a26      	ldr	r2, [pc, #152]	; (8006490 <TIM_Base_SetConfig+0x130>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a10      	ldr	r2, [pc, #64]	; (8006474 <TIM_Base_SetConfig+0x114>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a12      	ldr	r2, [pc, #72]	; (8006484 <TIM_Base_SetConfig+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a11      	ldr	r2, [pc, #68]	; (8006488 <TIM_Base_SetConfig+0x128>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a10      	ldr	r2, [pc, #64]	; (800648c <TIM_Base_SetConfig+0x12c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <TIM_Base_SetConfig+0x130>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d103      	bne.n	8006460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	615a      	str	r2, [r3, #20]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e040      	b.n	8006564 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fa ffc8 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	; 0x24
 80064fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8c0 	bl	8006694 <UART_SetConfig>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e022      	b.n	8006564 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fbfc 	bl	8006d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800653a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800654a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fc83 	bl	8006e68 <UART_CheckIdleState>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	; 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006580:	2b20      	cmp	r3, #32
 8006582:	f040 8081 	bne.w	8006688 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_UART_Transmit+0x26>
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e079      	b.n	800668a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_UART_Transmit+0x38>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e072      	b.n	800668a <HAL_UART_Transmit+0x11e>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2221      	movs	r2, #33	; 0x21
 80065b6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80065b8:	f7fc fa32 	bl	8002a20 <HAL_GetTick>
 80065bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	d108      	bne.n	80065ea <HAL_UART_Transmit+0x7e>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e003      	b.n	80065f2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065f2:	e02d      	b.n	8006650 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2180      	movs	r1, #128	; 0x80
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fc77 	bl	8006ef2 <UART_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e03d      	b.n	800668a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	881a      	ldrh	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006620:	b292      	uxth	r2, r2
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	3302      	adds	r3, #2
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	e008      	b.n	800663e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	781a      	ldrb	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	b292      	uxth	r2, r2
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	3301      	adds	r3, #1
 800663c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006656:	b29b      	uxth	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1cb      	bne.n	80065f4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	2140      	movs	r1, #64	; 0x40
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 fc43 	bl	8006ef2 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e009      	b.n	800668a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	e000      	b.n	800668a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006698:	b088      	sub	sp, #32
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4bac      	ldr	r3, [pc, #688]	; (800697c <UART_SetConfig+0x2e8>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6812      	ldr	r2, [r2, #0]
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	430b      	orrs	r3, r1
 80066d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4aa2      	ldr	r2, [pc, #648]	; (8006980 <UART_SetConfig+0x2ec>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	4313      	orrs	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	430a      	orrs	r2, r1
 8006718:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a99      	ldr	r2, [pc, #612]	; (8006984 <UART_SetConfig+0x2f0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d121      	bne.n	8006768 <UART_SetConfig+0xd4>
 8006724:	4b98      	ldr	r3, [pc, #608]	; (8006988 <UART_SetConfig+0x2f4>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b03      	cmp	r3, #3
 8006730:	d816      	bhi.n	8006760 <UART_SetConfig+0xcc>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0xa4>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	08006749 	.word	0x08006749
 800673c:	08006755 	.word	0x08006755
 8006740:	0800674f 	.word	0x0800674f
 8006744:	0800675b 	.word	0x0800675b
 8006748:	2301      	movs	r3, #1
 800674a:	76fb      	strb	r3, [r7, #27]
 800674c:	e0e8      	b.n	8006920 <UART_SetConfig+0x28c>
 800674e:	2302      	movs	r3, #2
 8006750:	76fb      	strb	r3, [r7, #27]
 8006752:	e0e5      	b.n	8006920 <UART_SetConfig+0x28c>
 8006754:	2304      	movs	r3, #4
 8006756:	76fb      	strb	r3, [r7, #27]
 8006758:	e0e2      	b.n	8006920 <UART_SetConfig+0x28c>
 800675a:	2308      	movs	r3, #8
 800675c:	76fb      	strb	r3, [r7, #27]
 800675e:	e0df      	b.n	8006920 <UART_SetConfig+0x28c>
 8006760:	2310      	movs	r3, #16
 8006762:	76fb      	strb	r3, [r7, #27]
 8006764:	bf00      	nop
 8006766:	e0db      	b.n	8006920 <UART_SetConfig+0x28c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a87      	ldr	r2, [pc, #540]	; (800698c <UART_SetConfig+0x2f8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d134      	bne.n	80067dc <UART_SetConfig+0x148>
 8006772:	4b85      	ldr	r3, [pc, #532]	; (8006988 <UART_SetConfig+0x2f4>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f003 030c 	and.w	r3, r3, #12
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d829      	bhi.n	80067d4 <UART_SetConfig+0x140>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0xf4>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067bd 	.word	0x080067bd
 800678c:	080067d5 	.word	0x080067d5
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067c9 	.word	0x080067c9
 800679c:	080067d5 	.word	0x080067d5
 80067a0:	080067d5 	.word	0x080067d5
 80067a4:	080067d5 	.word	0x080067d5
 80067a8:	080067c3 	.word	0x080067c3
 80067ac:	080067d5 	.word	0x080067d5
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067cf 	.word	0x080067cf
 80067bc:	2300      	movs	r3, #0
 80067be:	76fb      	strb	r3, [r7, #27]
 80067c0:	e0ae      	b.n	8006920 <UART_SetConfig+0x28c>
 80067c2:	2302      	movs	r3, #2
 80067c4:	76fb      	strb	r3, [r7, #27]
 80067c6:	e0ab      	b.n	8006920 <UART_SetConfig+0x28c>
 80067c8:	2304      	movs	r3, #4
 80067ca:	76fb      	strb	r3, [r7, #27]
 80067cc:	e0a8      	b.n	8006920 <UART_SetConfig+0x28c>
 80067ce:	2308      	movs	r3, #8
 80067d0:	76fb      	strb	r3, [r7, #27]
 80067d2:	e0a5      	b.n	8006920 <UART_SetConfig+0x28c>
 80067d4:	2310      	movs	r3, #16
 80067d6:	76fb      	strb	r3, [r7, #27]
 80067d8:	bf00      	nop
 80067da:	e0a1      	b.n	8006920 <UART_SetConfig+0x28c>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a6b      	ldr	r2, [pc, #428]	; (8006990 <UART_SetConfig+0x2fc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d120      	bne.n	8006828 <UART_SetConfig+0x194>
 80067e6:	4b68      	ldr	r3, [pc, #416]	; (8006988 <UART_SetConfig+0x2f4>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d00f      	beq.n	8006814 <UART_SetConfig+0x180>
 80067f4:	2b10      	cmp	r3, #16
 80067f6:	d802      	bhi.n	80067fe <UART_SetConfig+0x16a>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <UART_SetConfig+0x174>
 80067fc:	e010      	b.n	8006820 <UART_SetConfig+0x18c>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d005      	beq.n	800680e <UART_SetConfig+0x17a>
 8006802:	2b30      	cmp	r3, #48	; 0x30
 8006804:	d009      	beq.n	800681a <UART_SetConfig+0x186>
 8006806:	e00b      	b.n	8006820 <UART_SetConfig+0x18c>
 8006808:	2300      	movs	r3, #0
 800680a:	76fb      	strb	r3, [r7, #27]
 800680c:	e088      	b.n	8006920 <UART_SetConfig+0x28c>
 800680e:	2302      	movs	r3, #2
 8006810:	76fb      	strb	r3, [r7, #27]
 8006812:	e085      	b.n	8006920 <UART_SetConfig+0x28c>
 8006814:	2304      	movs	r3, #4
 8006816:	76fb      	strb	r3, [r7, #27]
 8006818:	e082      	b.n	8006920 <UART_SetConfig+0x28c>
 800681a:	2308      	movs	r3, #8
 800681c:	76fb      	strb	r3, [r7, #27]
 800681e:	e07f      	b.n	8006920 <UART_SetConfig+0x28c>
 8006820:	2310      	movs	r3, #16
 8006822:	76fb      	strb	r3, [r7, #27]
 8006824:	bf00      	nop
 8006826:	e07b      	b.n	8006920 <UART_SetConfig+0x28c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a59      	ldr	r2, [pc, #356]	; (8006994 <UART_SetConfig+0x300>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d120      	bne.n	8006874 <UART_SetConfig+0x1e0>
 8006832:	4b55      	ldr	r3, [pc, #340]	; (8006988 <UART_SetConfig+0x2f4>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d00f      	beq.n	8006860 <UART_SetConfig+0x1cc>
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d802      	bhi.n	800684a <UART_SetConfig+0x1b6>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <UART_SetConfig+0x1c0>
 8006848:	e010      	b.n	800686c <UART_SetConfig+0x1d8>
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d005      	beq.n	800685a <UART_SetConfig+0x1c6>
 800684e:	2bc0      	cmp	r3, #192	; 0xc0
 8006850:	d009      	beq.n	8006866 <UART_SetConfig+0x1d2>
 8006852:	e00b      	b.n	800686c <UART_SetConfig+0x1d8>
 8006854:	2300      	movs	r3, #0
 8006856:	76fb      	strb	r3, [r7, #27]
 8006858:	e062      	b.n	8006920 <UART_SetConfig+0x28c>
 800685a:	2302      	movs	r3, #2
 800685c:	76fb      	strb	r3, [r7, #27]
 800685e:	e05f      	b.n	8006920 <UART_SetConfig+0x28c>
 8006860:	2304      	movs	r3, #4
 8006862:	76fb      	strb	r3, [r7, #27]
 8006864:	e05c      	b.n	8006920 <UART_SetConfig+0x28c>
 8006866:	2308      	movs	r3, #8
 8006868:	76fb      	strb	r3, [r7, #27]
 800686a:	e059      	b.n	8006920 <UART_SetConfig+0x28c>
 800686c:	2310      	movs	r3, #16
 800686e:	76fb      	strb	r3, [r7, #27]
 8006870:	bf00      	nop
 8006872:	e055      	b.n	8006920 <UART_SetConfig+0x28c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a47      	ldr	r2, [pc, #284]	; (8006998 <UART_SetConfig+0x304>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d124      	bne.n	80068c8 <UART_SetConfig+0x234>
 800687e:	4b42      	ldr	r3, [pc, #264]	; (8006988 <UART_SetConfig+0x2f4>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688c:	d012      	beq.n	80068b4 <UART_SetConfig+0x220>
 800688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006892:	d802      	bhi.n	800689a <UART_SetConfig+0x206>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <UART_SetConfig+0x214>
 8006898:	e012      	b.n	80068c0 <UART_SetConfig+0x22c>
 800689a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689e:	d006      	beq.n	80068ae <UART_SetConfig+0x21a>
 80068a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068a4:	d009      	beq.n	80068ba <UART_SetConfig+0x226>
 80068a6:	e00b      	b.n	80068c0 <UART_SetConfig+0x22c>
 80068a8:	2300      	movs	r3, #0
 80068aa:	76fb      	strb	r3, [r7, #27]
 80068ac:	e038      	b.n	8006920 <UART_SetConfig+0x28c>
 80068ae:	2302      	movs	r3, #2
 80068b0:	76fb      	strb	r3, [r7, #27]
 80068b2:	e035      	b.n	8006920 <UART_SetConfig+0x28c>
 80068b4:	2304      	movs	r3, #4
 80068b6:	76fb      	strb	r3, [r7, #27]
 80068b8:	e032      	b.n	8006920 <UART_SetConfig+0x28c>
 80068ba:	2308      	movs	r3, #8
 80068bc:	76fb      	strb	r3, [r7, #27]
 80068be:	e02f      	b.n	8006920 <UART_SetConfig+0x28c>
 80068c0:	2310      	movs	r3, #16
 80068c2:	76fb      	strb	r3, [r7, #27]
 80068c4:	bf00      	nop
 80068c6:	e02b      	b.n	8006920 <UART_SetConfig+0x28c>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2c      	ldr	r2, [pc, #176]	; (8006980 <UART_SetConfig+0x2ec>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d124      	bne.n	800691c <UART_SetConfig+0x288>
 80068d2:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <UART_SetConfig+0x2f4>)
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e0:	d012      	beq.n	8006908 <UART_SetConfig+0x274>
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e6:	d802      	bhi.n	80068ee <UART_SetConfig+0x25a>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d007      	beq.n	80068fc <UART_SetConfig+0x268>
 80068ec:	e012      	b.n	8006914 <UART_SetConfig+0x280>
 80068ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f2:	d006      	beq.n	8006902 <UART_SetConfig+0x26e>
 80068f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068f8:	d009      	beq.n	800690e <UART_SetConfig+0x27a>
 80068fa:	e00b      	b.n	8006914 <UART_SetConfig+0x280>
 80068fc:	2300      	movs	r3, #0
 80068fe:	76fb      	strb	r3, [r7, #27]
 8006900:	e00e      	b.n	8006920 <UART_SetConfig+0x28c>
 8006902:	2302      	movs	r3, #2
 8006904:	76fb      	strb	r3, [r7, #27]
 8006906:	e00b      	b.n	8006920 <UART_SetConfig+0x28c>
 8006908:	2304      	movs	r3, #4
 800690a:	76fb      	strb	r3, [r7, #27]
 800690c:	e008      	b.n	8006920 <UART_SetConfig+0x28c>
 800690e:	2308      	movs	r3, #8
 8006910:	76fb      	strb	r3, [r7, #27]
 8006912:	e005      	b.n	8006920 <UART_SetConfig+0x28c>
 8006914:	2310      	movs	r3, #16
 8006916:	76fb      	strb	r3, [r7, #27]
 8006918:	bf00      	nop
 800691a:	e001      	b.n	8006920 <UART_SetConfig+0x28c>
 800691c:	2310      	movs	r3, #16
 800691e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a16      	ldr	r2, [pc, #88]	; (8006980 <UART_SetConfig+0x2ec>)
 8006926:	4293      	cmp	r3, r2
 8006928:	f040 80fa 	bne.w	8006b20 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800692c:	7efb      	ldrb	r3, [r7, #27]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d836      	bhi.n	80069a0 <UART_SetConfig+0x30c>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x2a4>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800695d 	.word	0x0800695d
 800693c:	080069a1 	.word	0x080069a1
 8006940:	08006965 	.word	0x08006965
 8006944:	080069a1 	.word	0x080069a1
 8006948:	0800696b 	.word	0x0800696b
 800694c:	080069a1 	.word	0x080069a1
 8006950:	080069a1 	.word	0x080069a1
 8006954:	080069a1 	.word	0x080069a1
 8006958:	08006973 	.word	0x08006973
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fe fa20 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8006960:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006962:	e020      	b.n	80069a6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006964:	4b0d      	ldr	r3, [pc, #52]	; (800699c <UART_SetConfig+0x308>)
 8006966:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006968:	e01d      	b.n	80069a6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800696a:	f7fe f983 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 800696e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006970:	e019      	b.n	80069a6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006976:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006978:	e015      	b.n	80069a6 <UART_SetConfig+0x312>
 800697a:	bf00      	nop
 800697c:	efff69f3 	.word	0xefff69f3
 8006980:	40008000 	.word	0x40008000
 8006984:	40013800 	.word	0x40013800
 8006988:	40021000 	.word	0x40021000
 800698c:	40004400 	.word	0x40004400
 8006990:	40004800 	.word	0x40004800
 8006994:	40004c00 	.word	0x40004c00
 8006998:	40005000 	.word	0x40005000
 800699c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	74fb      	strb	r3, [r7, #19]
        break;
 80069a4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 81ac 	beq.w	8006d06 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d305      	bcc.n	80069ca <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d902      	bls.n	80069d0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	74fb      	strb	r3, [r7, #19]
 80069ce:	e19a      	b.n	8006d06 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80069d0:	7efb      	ldrb	r3, [r7, #27]
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	f200 8091 	bhi.w	8006afa <UART_SetConfig+0x466>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <UART_SetConfig+0x34c>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006afb 	.word	0x08006afb
 80069e8:	08006a51 	.word	0x08006a51
 80069ec:	08006afb 	.word	0x08006afb
 80069f0:	08006a85 	.word	0x08006a85
 80069f4:	08006afb 	.word	0x08006afb
 80069f8:	08006afb 	.word	0x08006afb
 80069fc:	08006afb 	.word	0x08006afb
 8006a00:	08006ad1 	.word	0x08006ad1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006a04:	f7fe f9cc 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	f04f 0400 	mov.w	r4, #0
 8006a18:	0214      	lsls	r4, r2, #8
 8006a1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a1e:	020b      	lsls	r3, r1, #8
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6852      	ldr	r2, [r2, #4]
 8006a24:	0852      	lsrs	r2, r2, #1
 8006a26:	4611      	mov	r1, r2
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	eb13 0b01 	adds.w	fp, r3, r1
 8006a30:	eb44 0c02 	adc.w	ip, r4, r2
 8006a34:	4658      	mov	r0, fp
 8006a36:	4661      	mov	r1, ip
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f04f 0400 	mov.w	r4, #0
 8006a40:	461a      	mov	r2, r3
 8006a42:	4623      	mov	r3, r4
 8006a44:	f7f9 fc1c 	bl	8000280 <__aeabi_uldivmod>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a4e:	e057      	b.n	8006b00 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	085b      	lsrs	r3, r3, #1
 8006a56:	f04f 0400 	mov.w	r4, #0
 8006a5a:	49b1      	ldr	r1, [pc, #708]	; (8006d20 <UART_SetConfig+0x68c>)
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	eb13 0b01 	adds.w	fp, r3, r1
 8006a64:	eb44 0c02 	adc.w	ip, r4, r2
 8006a68:	4658      	mov	r0, fp
 8006a6a:	4661      	mov	r1, ip
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f04f 0400 	mov.w	r4, #0
 8006a74:	461a      	mov	r2, r3
 8006a76:	4623      	mov	r3, r4
 8006a78:	f7f9 fc02 	bl	8000280 <__aeabi_uldivmod>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a82:	e03d      	b.n	8006b00 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006a84:	f7fe f8f6 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	f04f 0400 	mov.w	r4, #0
 8006a98:	0214      	lsls	r4, r2, #8
 8006a9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a9e:	020b      	lsls	r3, r1, #8
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6852      	ldr	r2, [r2, #4]
 8006aa4:	0852      	lsrs	r2, r2, #1
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	eb13 0b01 	adds.w	fp, r3, r1
 8006ab0:	eb44 0c02 	adc.w	ip, r4, r2
 8006ab4:	4658      	mov	r0, fp
 8006ab6:	4661      	mov	r1, ip
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f04f 0400 	mov.w	r4, #0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	f7f9 fbdc 	bl	8000280 <__aeabi_uldivmod>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006ace:	e017      	b.n	8006b00 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	f04f 0400 	mov.w	r4, #0
 8006ada:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006ade:	f144 0100 	adc.w	r1, r4, #0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f04f 0400 	mov.w	r4, #0
 8006aea:	461a      	mov	r2, r3
 8006aec:	4623      	mov	r3, r4
 8006aee:	f7f9 fbc7 	bl	8000280 <__aeabi_uldivmod>
 8006af2:	4603      	mov	r3, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006af8:	e002      	b.n	8006b00 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	74fb      	strb	r3, [r7, #19]
            break;
 8006afe:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d308      	bcc.n	8006b1a <UART_SetConfig+0x486>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0e:	d204      	bcs.n	8006b1a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e0f5      	b.n	8006d06 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	74fb      	strb	r3, [r7, #19]
 8006b1e:	e0f2      	b.n	8006d06 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	d17f      	bne.n	8006c2a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006b2a:	7efb      	ldrb	r3, [r7, #27]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d85c      	bhi.n	8006bea <UART_SetConfig+0x556>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x4a4>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b7b 	.word	0x08006b7b
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006beb 	.word	0x08006beb
 8006b48:	08006bb5 	.word	0x08006bb5
 8006b4c:	08006beb 	.word	0x08006beb
 8006b50:	08006beb 	.word	0x08006beb
 8006b54:	08006beb 	.word	0x08006beb
 8006b58:	08006bd3 	.word	0x08006bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006b5c:	f7fe f920 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8006b60:	4603      	mov	r3, r0
 8006b62:	005a      	lsls	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	441a      	add	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b78:	e03a      	b.n	8006bf0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006b7a:	f7fe f927 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	005a      	lsls	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	441a      	add	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b96:	e02b      	b.n	8006bf0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006ba2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6852      	ldr	r2, [r2, #4]
 8006baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bb2:	e01d      	b.n	8006bf0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006bb4:	f7fe f85e 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	005a      	lsls	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	441a      	add	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bd0:	e00e      	b.n	8006bf0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006be8:	e002      	b.n	8006bf0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	74fb      	strb	r3, [r7, #19]
        break;
 8006bee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b0f      	cmp	r3, #15
 8006bf4:	d916      	bls.n	8006c24 <UART_SetConfig+0x590>
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfc:	d212      	bcs.n	8006c24 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f023 030f 	bic.w	r3, r3, #15
 8006c06:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	897b      	ldrh	r3, [r7, #10]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	897a      	ldrh	r2, [r7, #10]
 8006c20:	60da      	str	r2, [r3, #12]
 8006c22:	e070      	b.n	8006d06 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	74fb      	strb	r3, [r7, #19]
 8006c28:	e06d      	b.n	8006d06 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8006c2a:	7efb      	ldrb	r3, [r7, #27]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d859      	bhi.n	8006ce4 <UART_SetConfig+0x650>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x5a4>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c79 	.word	0x08006c79
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006ce5 	.word	0x08006ce5
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006ce5 	.word	0x08006ce5
 8006c50:	08006ce5 	.word	0x08006ce5
 8006c54:	08006ce5 	.word	0x08006ce5
 8006c58:	08006ccd 	.word	0x08006ccd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006c5c:	f7fe f8a0 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	441a      	add	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c76:	e038      	b.n	8006cea <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c78:	f7fe f8a8 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	441a      	add	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c92:	e02a      	b.n	8006cea <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006c9e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6852      	ldr	r2, [r2, #4]
 8006ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cae:	e01c      	b.n	8006cea <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006cb0:	f7fd ffe0 	bl	8004c74 <HAL_RCC_GetSysClockFreq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	441a      	add	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006cca:	e00e      	b.n	8006cea <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ce2:	e002      	b.n	8006cea <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	74fb      	strb	r3, [r7, #19]
        break;
 8006ce8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b0f      	cmp	r3, #15
 8006cee:	d908      	bls.n	8006d02 <UART_SetConfig+0x66e>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf6:	d204      	bcs.n	8006d02 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	60da      	str	r2, [r3, #12]
 8006d00:	e001      	b.n	8006d06 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006d1e:	bf00      	nop
 8006d20:	f4240000 	.word	0xf4240000

08006d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01a      	beq.n	8006e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e22:	d10a      	bne.n	8006e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e76:	f7fb fdd3 	bl	8002a20 <HAL_GetTick>
 8006e7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d10e      	bne.n	8006ea8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f82a 	bl	8006ef2 <UART_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e020      	b.n	8006eea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0304 	and.w	r3, r3, #4
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d10e      	bne.n	8006ed4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f814 	bl	8006ef2 <UART_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e00a      	b.n	8006eea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	4613      	mov	r3, r2
 8006f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f02:	e02a      	b.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d026      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0c:	f7fb fd88 	bl	8002a20 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d302      	bcc.n	8006f22 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11b      	bne.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e00f      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d0c5      	beq.n	8006f04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <rfalAnalogConfigInitialize>:
 * GLOBAL FUNCTIONS
 ******************************************************************************
 */

void rfalAnalogConfigInitialize( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
/* Check whether the Default Analog settings are to be used or custom ones */  
#ifdef RFAL_ANALOG_CONFIG_CUSTOM
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigCustomSettings;
    gRfalAnalogConfigMgmt.configTblSize          = rfalAnalogConfigCustomSettingsLength;
#else  
    gRfalAnalogConfigMgmt.currentAnalogConfigTbl = (const uint8_t *)&rfalAnalogConfigDefaultSettings;
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <rfalAnalogConfigInitialize+0x24>)
 8006f8a:	4a08      	ldr	r2, [pc, #32]	; (8006fac <rfalAnalogConfigInitialize+0x28>)
 8006f8c:	601a      	str	r2, [r3, #0]
    gRfalAnalogConfigMgmt.configTblSize          = sizeof(rfalAnalogConfigDefaultSettings);
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <rfalAnalogConfigInitialize+0x24>)
 8006f90:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8006f94:	809a      	strh	r2, [r3, #4]
#endif
  
  gRfalAnalogConfigMgmt.ready = true;
 8006f96:	4b04      	ldr	r3, [pc, #16]	; (8006fa8 <rfalAnalogConfigInitialize+0x24>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	719a      	strb	r2, [r3, #6]
} /* rfalAnalogConfigInitialize() */
 8006f9c:	bf00      	nop
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000240 	.word	0x20000240
 8006fac:	08011568 	.word	0x08011568

08006fb0 <rfalSetAnalogConfig>:
    return ERR_NONE;
} /* rfalAnalogConfigListRead() */


ReturnCode rfalSetAnalogConfig( rfalAnalogConfigId configId )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigOffset configOffset = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	81fb      	strh	r3, [r7, #14]
    rfalAnalogConfigNum numConfigSet;
    rfalAnalogConfigRegAddrMaskVal *configTbl;
    ReturnCode retCode = ERR_NONE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	82fb      	strh	r3, [r7, #22]
    rfalAnalogConfigNum i;
    
    if (true != gRfalAnalogConfigMgmt.ready)
 8006fc2:	4b4b      	ldr	r3, [pc, #300]	; (80070f0 <rfalSetAnalogConfig+0x140>)
 8006fc4:	799b      	ldrb	r3, [r3, #6]
 8006fc6:	f083 0301 	eor.w	r3, r3, #1
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <rfalSetAnalogConfig+0x24>
    {
        return ERR_REQUEST;
 8006fd0:	2305      	movs	r3, #5
 8006fd2:	e089      	b.n	80070e8 <rfalSetAnalogConfig+0x138>
    }
    
    /* Search LUT for the specific Configuration ID. */
    while(true)
    {
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 8006fd4:	f107 020e 	add.w	r2, r7, #14
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 f889 	bl	80070f4 <rfalAnalogConfigSearch>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	753b      	strb	r3, [r7, #20]
        if( RFAL_ANALOG_CONFIG_LUT_NOT_FOUND == numConfigSet )
 8006fe6:	7d3b      	ldrb	r3, [r7, #20]
 8006fe8:	2bff      	cmp	r3, #255	; 0xff
 8006fea:	d07b      	beq.n	80070e4 <rfalSetAnalogConfig+0x134>
        {
            break;
        }
        
        configTbl = (rfalAnalogConfigRegAddrMaskVal *)( (uint32_t)gRfalAnalogConfigMgmt.currentAnalogConfigTbl + (uint32_t)configOffset); 
 8006fec:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <rfalSetAnalogConfig+0x140>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
        /* Increment the offset to the next index to search from. */
        configOffset += (uint16_t)(numConfigSet * sizeof(rfalAnalogConfigRegAddrMaskVal)); 
 8006ff8:	7d3b      	ldrb	r3, [r7, #20]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	4413      	add	r3, r2
 8007004:	b29b      	uxth	r3, r3
 8007006:	81fb      	strh	r3, [r7, #14]
        
        if ((gRfalAnalogConfigMgmt.configTblSize + 1U) < configOffset)
 8007008:	4b39      	ldr	r3, [pc, #228]	; (80070f0 <rfalSetAnalogConfig+0x140>)
 800700a:	889b      	ldrh	r3, [r3, #4]
 800700c:	3301      	adds	r3, #1
 800700e:	89fa      	ldrh	r2, [r7, #14]
 8007010:	4293      	cmp	r3, r2
 8007012:	d201      	bcs.n	8007018 <rfalSetAnalogConfig+0x68>
        {   /* Error check make sure that the we do not access outside the configuration Table Size */
            return ERR_NOMEM;
 8007014:	2301      	movs	r3, #1
 8007016:	e067      	b.n	80070e8 <rfalSetAnalogConfig+0x138>
        }
        
        for ( i = 0; i < numConfigSet; i++)
 8007018:	2300      	movs	r3, #0
 800701a:	757b      	strb	r3, [r7, #21]
 800701c:	e05d      	b.n	80070da <rfalSetAnalogConfig+0x12a>
        {
            if( (GETU16(configTbl[i].addr) & RFAL_TEST_REG) != 0U )
 800701e:	7d7b      	ldrb	r3, [r7, #21]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	7d7a      	ldrb	r2, [r7, #21]
 800702c:	0092      	lsls	r2, r2, #2
 800702e:	6939      	ldr	r1, [r7, #16]
 8007030:	440a      	add	r2, r1
 8007032:	7852      	ldrb	r2, [r2, #1]
 8007034:	4313      	orrs	r3, r2
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d026      	beq.n	800708c <rfalSetAnalogConfig+0xdc>
            {
                EXIT_ON_ERR(retCode, rfalChipChangeTestRegBits( (GETU16(configTbl[i].addr) & ~RFAL_TEST_REG), configTbl[i].mask, configTbl[i].val) );
 800703e:	7d7b      	ldrb	r3, [r7, #21]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	b21a      	sxth	r2, r3
 800704c:	7d7b      	ldrb	r3, [r7, #21]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	6939      	ldr	r1, [r7, #16]
 8007052:	440b      	add	r3, r1
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	b21b      	sxth	r3, r3
 8007058:	4313      	orrs	r3, r2
 800705a:	b21b      	sxth	r3, r3
 800705c:	b29b      	uxth	r3, r3
 800705e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007062:	b298      	uxth	r0, r3
 8007064:	7d7b      	ldrb	r3, [r7, #21]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	7899      	ldrb	r1, [r3, #2]
 800706e:	7d7b      	ldrb	r3, [r7, #21]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4413      	add	r3, r2
 8007076:	78db      	ldrb	r3, [r3, #3]
 8007078:	461a      	mov	r2, r3
 800707a:	f008 fe66 	bl	800fd4a <rfalChipChangeTestRegBits>
 800707e:	4603      	mov	r3, r0
 8007080:	82fb      	strh	r3, [r7, #22]
 8007082:	8afb      	ldrh	r3, [r7, #22]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d025      	beq.n	80070d4 <rfalSetAnalogConfig+0x124>
 8007088:	8afb      	ldrh	r3, [r7, #22]
 800708a:	e02d      	b.n	80070e8 <rfalSetAnalogConfig+0x138>
            }
            else
            {
                EXIT_ON_ERR(retCode, rfalChipChangeRegBits( GETU16(configTbl[i].addr), configTbl[i].mask, configTbl[i].val) );
 800708c:	7d7b      	ldrb	r3, [r7, #21]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	b21a      	sxth	r2, r3
 800709a:	7d7b      	ldrb	r3, [r7, #21]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	6939      	ldr	r1, [r7, #16]
 80070a0:	440b      	add	r3, r1
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	b21b      	sxth	r3, r3
 80070a6:	4313      	orrs	r3, r2
 80070a8:	b21b      	sxth	r3, r3
 80070aa:	b298      	uxth	r0, r3
 80070ac:	7d7b      	ldrb	r3, [r7, #21]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4413      	add	r3, r2
 80070b4:	7899      	ldrb	r1, [r3, #2]
 80070b6:	7d7b      	ldrb	r3, [r7, #21]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4413      	add	r3, r2
 80070be:	78db      	ldrb	r3, [r3, #3]
 80070c0:	461a      	mov	r2, r3
 80070c2:	f008 fe2d 	bl	800fd20 <rfalChipChangeRegBits>
 80070c6:	4603      	mov	r3, r0
 80070c8:	82fb      	strh	r3, [r7, #22]
 80070ca:	8afb      	ldrh	r3, [r7, #22]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <rfalSetAnalogConfig+0x124>
 80070d0:	8afb      	ldrh	r3, [r7, #22]
 80070d2:	e009      	b.n	80070e8 <rfalSetAnalogConfig+0x138>
        for ( i = 0; i < numConfigSet; i++)
 80070d4:	7d7b      	ldrb	r3, [r7, #21]
 80070d6:	3301      	adds	r3, #1
 80070d8:	757b      	strb	r3, [r7, #21]
 80070da:	7d7a      	ldrb	r2, [r7, #21]
 80070dc:	7d3b      	ldrb	r3, [r7, #20]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d39d      	bcc.n	800701e <rfalSetAnalogConfig+0x6e>
        numConfigSet = rfalAnalogConfigSearch(configId, &configOffset);
 80070e2:	e777      	b.n	8006fd4 <rfalSetAnalogConfig+0x24>
            break;
 80070e4:	bf00      	nop
            }
        }
        
    } /* while(found Analog Config Id) */
    
    return retCode;
 80070e6:	8afb      	ldrh	r3, [r7, #22]
    
} /* rfalSetAnalogConfig() */
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000240 	.word	0x20000240

080070f4 <rfalAnalogConfigSearch>:
 * \return number of Configuration Sets
 * \return #RFAL_ANALOG_CONFIG_LUT_NOT_FOUND in case Configuration ID is not found.
 *****************************************************************************
 */
static rfalAnalogConfigNum rfalAnalogConfigSearch( rfalAnalogConfigId configId, uint16_t *configOffset )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b089      	sub	sp, #36	; 0x24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	80fb      	strh	r3, [r7, #6]
    rfalAnalogConfigId configIdMaskVal;
    const uint8_t *configTbl;
    const uint8_t *currentConfigTbl;
    uint16_t i;
    
    currentConfigTbl = gRfalAnalogConfigMgmt.currentAnalogConfigTbl;
 8007100:	4b2d      	ldr	r3, [pc, #180]	; (80071b8 <rfalAnalogConfigSearch+0xc4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	61bb      	str	r3, [r7, #24]
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
                       |((RFAL_ANALOG_CONFIG_TECH_CHIP == RFAL_ANALOG_CONFIG_ID_GET_TECH(configId)) ? (RFAL_ANALOG_CONFIG_TECH_MASK | RFAL_ANALOG_CONFIG_CHIP_SPECIFIC_MASK) : configId)
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800710c:	b29b      	uxth	r3, r3
                       |((RFAL_ANALOG_CONFIG_NO_DIRECTION == RFAL_ANALOG_CONFIG_ID_GET_DIRECTION(configId)) ? RFAL_ANALOG_CONFIG_DIRECTION_MASK : configId)
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <rfalAnalogConfigSearch+0x34>
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007120:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8007124:	b29a      	uxth	r2, r3
 8007126:	e001      	b.n	800712c <rfalAnalogConfigSearch+0x38>
 8007128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <rfalAnalogConfigSearch+0x48>
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	e000      	b.n	800713e <rfalAnalogConfigSearch+0x4a>
 800713c:	2303      	movs	r3, #3
    configIdMaskVal  = ((RFAL_ANALOG_CONFIG_POLL_LISTEN_MODE_MASK | RFAL_ANALOG_CONFIG_BITRATE_MASK) 
 800713e:	4313      	orrs	r3, r2
 8007140:	82fb      	strh	r3, [r7, #22]
                       );
    
    i = *configOffset;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 8007148:	e029      	b.n	800719e <rfalAnalogConfigSearch+0xaa>
    {
        configTbl = &currentConfigTbl[i];
 800714a:	8bfb      	ldrh	r3, [r7, #30]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4413      	add	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
        foundConfigId = GETU16(configTbl);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	b21a      	sxth	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3301      	adds	r3, #1
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	b21b      	sxth	r3, r3
 8007162:	4313      	orrs	r3, r2
 8007164:	b21b      	sxth	r3, r3
 8007166:	81fb      	strh	r3, [r7, #14]
        if (configId == (foundConfigId & configIdMaskVal))
 8007168:	89fa      	ldrh	r2, [r7, #14]
 800716a:	8afb      	ldrh	r3, [r7, #22]
 800716c:	4013      	ands	r3, r2
 800716e:	b29b      	uxth	r3, r3
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	429a      	cmp	r2, r3
 8007174:	d108      	bne.n	8007188 <rfalAnalogConfigSearch+0x94>
        {
            *configOffset = (uint16_t)(i + sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum));
 8007176:	8bfb      	ldrh	r3, [r7, #30]
 8007178:	3303      	adds	r3, #3
 800717a:	b29a      	uxth	r2, r3
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	801a      	strh	r2, [r3, #0]
            return configTbl[sizeof(rfalAnalogConfigId)];
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	3302      	adds	r3, #2
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	e010      	b.n	80071aa <rfalAnalogConfigSearch+0xb6>
        }
        
        /* If Config Id does not match, increment to next Configuration Id */
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
                        + (configTbl[sizeof(rfalAnalogConfigId)] * sizeof(rfalAnalogConfigRegAddrMaskVal) )
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3302      	adds	r3, #2
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	b29a      	uxth	r2, r3
        i += (uint16_t)( sizeof(rfalAnalogConfigId) + sizeof(rfalAnalogConfigNum) 
 8007194:	8bfb      	ldrh	r3, [r7, #30]
 8007196:	4413      	add	r3, r2
 8007198:	b29b      	uxth	r3, r3
 800719a:	3303      	adds	r3, #3
 800719c:	83fb      	strh	r3, [r7, #30]
    while (i < gRfalAnalogConfigMgmt.configTblSize)
 800719e:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <rfalAnalogConfigSearch+0xc4>)
 80071a0:	889b      	ldrh	r3, [r3, #4]
 80071a2:	8bfa      	ldrh	r2, [r7, #30]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d3d0      	bcc.n	800714a <rfalAnalogConfigSearch+0x56>
                        );
    } /* for */
    
    return RFAL_ANALOG_CONFIG_LUT_NOT_FOUND;
 80071a8:	23ff      	movs	r3, #255	; 0xff
} /* rfalAnalogConfigSearch() */
 80071aa:	4618      	mov	r0, r3
 80071ac:	3724      	adds	r7, #36	; 0x24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000240 	.word	0x20000240

080071bc <rfalCrcCalculateCcitt>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
uint16_t rfalCrcCalculateCcitt(uint16_t preloadValue, const uint8_t* buf, uint16_t length)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	80fb      	strh	r3, [r7, #6]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80bb      	strh	r3, [r7, #4]
    uint16_t crc = preloadValue;
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	81fb      	strh	r3, [r7, #14]
    uint16_t index;

    for (index = 0; index < length; index++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	81bb      	strh	r3, [r7, #12]
 80071d4:	e00d      	b.n	80071f2 <rfalCrcCalculateCcitt+0x36>
    {
        crc = rfalCrcUpdateCcitt(crc, buf[index]);
 80071d6:	89bb      	ldrh	r3, [r7, #12]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	4413      	add	r3, r2
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	89fb      	ldrh	r3, [r7, #14]
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f80e 	bl	8007204 <rfalCrcUpdateCcitt>
 80071e8:	4603      	mov	r3, r0
 80071ea:	81fb      	strh	r3, [r7, #14]
    for (index = 0; index < length; index++)
 80071ec:	89bb      	ldrh	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	81bb      	strh	r3, [r7, #12]
 80071f2:	89ba      	ldrh	r2, [r7, #12]
 80071f4:	88bb      	ldrh	r3, [r7, #4]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d3ed      	bcc.n	80071d6 <rfalCrcCalculateCcitt+0x1a>
    }

    return crc;
 80071fa:	89fb      	ldrh	r3, [r7, #14]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <rfalCrcUpdateCcitt>:
******************************************************************************
* LOCAL FUNCTIONS
******************************************************************************
*/
static uint16_t rfalCrcUpdateCcitt(uint16_t crcSeed, uint8_t dataByte)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	460a      	mov	r2, r1
 800720e:	80fb      	strh	r3, [r7, #6]
 8007210:	4613      	mov	r3, r2
 8007212:	717b      	strb	r3, [r7, #5]
    uint16_t crc = crcSeed;
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	81fb      	strh	r3, [r7, #14]
    uint8_t  dat = dataByte;
 8007218:	797b      	ldrb	r3, [r7, #5]
 800721a:	737b      	strb	r3, [r7, #13]
    
    dat ^= (uint8_t)(crc & 0xFFU);
 800721c:	89fb      	ldrh	r3, [r7, #14]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	7b7b      	ldrb	r3, [r7, #13]
 8007222:	4053      	eors	r3, r2
 8007224:	737b      	strb	r3, [r7, #13]
    dat ^= (dat << 4);
 8007226:	7b7b      	ldrb	r3, [r7, #13]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	b25a      	sxtb	r2, r3
 800722c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007230:	4053      	eors	r3, r2
 8007232:	b25b      	sxtb	r3, r3
 8007234:	737b      	strb	r3, [r7, #13]

    crc = (crc >> 8)^(((uint16_t) dat) << 8)^(((uint16_t) dat) << 3)^(((uint16_t) dat) >> 4);
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	b29b      	uxth	r3, r3
 800723c:	b21a      	sxth	r2, r3
 800723e:	7b7b      	ldrb	r3, [r7, #13]
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	b21b      	sxth	r3, r3
 8007244:	4053      	eors	r3, r2
 8007246:	b21a      	sxth	r2, r3
 8007248:	7b7b      	ldrb	r3, [r7, #13]
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	b21b      	sxth	r3, r3
 800724e:	4053      	eors	r3, r2
 8007250:	b21a      	sxth	r2, r3
 8007252:	7b7b      	ldrb	r3, [r7, #13]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	b2db      	uxtb	r3, r3
 8007258:	b21b      	sxth	r3, r3
 800725a:	4053      	eors	r3, r2
 800725c:	b21b      	sxth	r3, r3
 800725e:	81fb      	strh	r3, [r7, #14]

    return crc;
 8007260:	89fb      	ldrh	r3, [r7, #14]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <iso15693PhyConfigure>:
******************************************************************************
* GLOBAL FUNCTIONS
******************************************************************************
*/
ReturnCode iso15693PhyConfigure(const iso15693PhyConfig_t* config, const struct iso15693StreamConfig ** needed_stream_config  )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
        .report_period_length = 3, /*!< 8=2^3 the length of the reporting period */
    };
    
    
    /* make a copy of the configuration */
    ST_MEMCPY( (uint8_t*)&iso15693PhyConfig, (const uint8_t*)config, sizeof(iso15693PhyConfig_t));
 800727a:	2208      	movs	r2, #8
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	480d      	ldr	r0, [pc, #52]	; (80072b4 <iso15693PhyConfigure+0x44>)
 8007280:	f009 f805 	bl	801028e <memcpy>
    
    if ( config->speedMode <= 3U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d808      	bhi.n	800729e <iso15693PhyConfigure+0x2e>
    { /* If valid speed mode adjust report period accordingly */
        stream_config.report_period_length = (3U - (uint8_t)config->speedMode);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f1c3 0303 	rsb	r3, r3, #3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <iso15693PhyConfigure+0x48>)
 800729a:	70da      	strb	r2, [r3, #3]
 800729c:	e002      	b.n	80072a4 <iso15693PhyConfigure+0x34>
    }
    else
    { /* If invalid default to normal (high) speed */
        stream_config.report_period_length = 3;
 800729e:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <iso15693PhyConfigure+0x48>)
 80072a0:	2203      	movs	r2, #3
 80072a2:	70da      	strb	r2, [r3, #3]
    }

    *needed_stream_config = &stream_config;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <iso15693PhyConfigure+0x48>)
 80072a8:	601a      	str	r2, [r3, #0]

    return ERR_NONE;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000248 	.word	0x20000248
 80072b8:	20000034 	.word	0x20000034

080072bc <iso15693VCDCode>:
}

ReturnCode iso15693VCDCode(uint8_t* buffer, uint16_t length, bool sendCrc, bool sendFlags, bool picopassMode,
                   uint16_t *subbit_total_length, uint16_t *offset,
                   uint8_t* outbuf, uint16_t outBufSize, uint16_t* actOutBufSize)
{
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b08b      	sub	sp, #44	; 0x2c
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	461a      	mov	r2, r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	807b      	strh	r3, [r7, #2]
 80072ce:	460b      	mov	r3, r1
 80072d0:	707b      	strb	r3, [r7, #1]
 80072d2:	4613      	mov	r3, r2
 80072d4:	703b      	strb	r3, [r7, #0]
    ReturnCode err = ERR_NONE;
 80072d6:	2300      	movs	r3, #0
 80072d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t eof, sof;
    uint8_t transbuf[2];
    uint16_t crc = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	847b      	strh	r3, [r7, #34]	; 0x22
    ReturnCode (*txFunc)(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen);
    uint8_t crc_len;
    uint8_t* outputBuf;
    uint16_t outputBufSize;

    crc_len = (uint8_t)((sendCrc)?2:0);
 80072de:	787b      	ldrb	r3, [r7, #1]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <iso15693VCDCode+0x2c>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e000      	b.n	80072ea <iso15693VCDCode+0x2e>
 80072e8:	2300      	movs	r3, #0
 80072ea:	757b      	strb	r3, [r7, #21]

    *actOutBufSize = 0;
 80072ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ee:	2200      	movs	r2, #0
 80072f0:	801a      	strh	r2, [r3, #0]

    if (ISO15693_VCD_CODING_1_4 == iso15693PhyConfig.coding)
 80072f2:	4b94      	ldr	r3, [pc, #592]	; (8007544 <iso15693VCDCode+0x288>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d117      	bne.n	800732a <iso15693VCDCode+0x6e>
    {
        sof = ISO15693_DAT_SOF_1_4;
 80072fa:	2321      	movs	r3, #33	; 0x21
 80072fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_4;
 8007300:	2304      	movs	r3, #4
 8007302:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of4;
 8007306:	4b90      	ldr	r3, [pc, #576]	; (8007548 <iso15693VCDCode+0x28c>)
 8007308:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 4U)
 800730a:	887a      	ldrh	r2, [r7, #2]
 800730c:	7d7b      	ldrb	r3, [r7, #21]
 800730e:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8007310:	b29b      	uxth	r3, r3
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	b29b      	uxth	r3, r3
 8007316:	3302      	adds	r3, #2
 8007318:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800731a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731c:	801a      	strh	r2, [r3, #0]
                );
        if (outBufSize < 5U) { /* 5 should be safe: enough for sof + 1byte data in 1of4 */
 800731e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007322:	2b04      	cmp	r3, #4
 8007324:	d823      	bhi.n	800736e <iso15693VCDCode+0xb2>
            return ERR_NOMEM;
 8007326:	2301      	movs	r3, #1
 8007328:	e13a      	b.n	80075a0 <iso15693VCDCode+0x2e4>
        }
    }
    else
    {
        sof = ISO15693_DAT_SOF_1_256;
 800732a:	2381      	movs	r3, #129	; 0x81
 800732c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        eof = ISO15693_DAT_EOF_1_256;
 8007330:	2304      	movs	r3, #4
 8007332:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        txFunc = iso15693PhyVCDCode1Of256;
 8007336:	4b85      	ldr	r3, [pc, #532]	; (800754c <iso15693VCDCode+0x290>)
 8007338:	61fb      	str	r3, [r7, #28]
        *subbit_total_length = (
                ( 1U  /* SOF */
                  + ((length + (uint16_t)crc_len) * 64U) 
 800733a:	887a      	ldrh	r2, [r7, #2]
 800733c:	7d7b      	ldrb	r3, [r7, #21]
 800733e:	4413      	add	r3, r2
                  + 1U) /* EOF */
 8007340:	b29b      	uxth	r3, r3
 8007342:	019b      	lsls	r3, r3, #6
 8007344:	b29b      	uxth	r3, r3
 8007346:	3302      	adds	r3, #2
 8007348:	b29a      	uxth	r2, r3
        *subbit_total_length = (
 800734a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734c:	801a      	strh	r2, [r3, #0]
                );

        if (*offset != 0U)
 800734e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <iso15693VCDCode+0xa6>
        {
            if (outBufSize < 64U) { /* 64 should be safe: enough a single byte data in 1of256 */
 8007356:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800735a:	2b3f      	cmp	r3, #63	; 0x3f
 800735c:	d807      	bhi.n	800736e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800735e:	2301      	movs	r3, #1
 8007360:	e11e      	b.n	80075a0 <iso15693VCDCode+0x2e4>
            }
        }
        else
        {
            if (outBufSize < 65U) { /* At beginning of a frame we need at least 65 bytes to start: enough for sof + 1byte data in 1of256 */
 8007362:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d801      	bhi.n	800736e <iso15693VCDCode+0xb2>
                return ERR_NOMEM;
 800736a:	2301      	movs	r3, #1
 800736c:	e118      	b.n	80075a0 <iso15693VCDCode+0x2e4>
            }
        }
    }

    if (length == 0U)
 800736e:	887b      	ldrh	r3, [r7, #2]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <iso15693VCDCode+0xbe>
    {
        *subbit_total_length = 1;
 8007374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007376:	2201      	movs	r2, #1
 8007378:	801a      	strh	r2, [r3, #0]
    }

    if ((length != 0U) && (0U == *offset) && sendFlags && !picopassMode)
 800737a:	887b      	ldrh	r3, [r7, #2]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <iso15693VCDCode+0xfc>
 8007380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d117      	bne.n	80073b8 <iso15693VCDCode+0xfc>
 8007388:	783b      	ldrb	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d014      	beq.n	80073b8 <iso15693VCDCode+0xfc>
 800738e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007392:	f083 0301 	eor.w	r3, r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <iso15693VCDCode+0xfc>
    {
        /* set high datarate flag */
        buffer[0] |= (uint8_t)ISO15693_REQ_FLAG_HIGH_DATARATE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f043 0302 	orr.w	r3, r3, #2
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	701a      	strb	r2, [r3, #0]
        /* clear sub-carrier flag - we only support single sub-carrier */
        buffer[0] = (uint8_t)(buffer[0] & ~ISO15693_REQ_FLAG_TWO_SUBCARRIERS);  /* MISRA 10.3 */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	701a      	strb	r2, [r3, #0]
    }

    outputBuf = outbuf;             /* MISRA 17.8: Use intermediate variable */
 80073b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ba:	61bb      	str	r3, [r7, #24]
    outputBufSize = outBufSize;     /* MISRA 17.8: Use intermediate variable */
 80073bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80073c0:	82fb      	strh	r3, [r7, #22]

    /* Send SOF if at 0 offset */
    if ((length != 0U) && (0U == *offset))
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d03b      	beq.n	8007440 <iso15693VCDCode+0x184>
 80073c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d137      	bne.n	8007440 <iso15693VCDCode+0x184>
    {
        *outputBuf = sof; 
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80073d6:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 80073d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	3301      	adds	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e2:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 80073e4:	8afb      	ldrh	r3, [r7, #22]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	3301      	adds	r3, #1
 80073ee:	61bb      	str	r3, [r7, #24]
    }

    while ((*offset < length) && (err == ERR_NONE))
 80073f0:	e026      	b.n	8007440 <iso15693VCDCode+0x184>
    {
        uint16_t filled_size;
        /* send data */
        err = txFunc(buffer[*offset], outputBuf, outputBufSize, &filled_size);
 80073f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	7818      	ldrb	r0, [r3, #0]
 80073fe:	f107 030e 	add.w	r3, r7, #14
 8007402:	8afa      	ldrh	r2, [r7, #22]
 8007404:	69fc      	ldr	r4, [r7, #28]
 8007406:	69b9      	ldr	r1, [r7, #24]
 8007408:	47a0      	blx	r4
 800740a:	4603      	mov	r3, r0
 800740c:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 800740e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007410:	881a      	ldrh	r2, [r3, #0]
 8007412:	89fb      	ldrh	r3, [r7, #14]
 8007414:	4413      	add	r3, r2
 8007416:	b29a      	uxth	r2, r3
 8007418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741a:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	461a      	mov	r2, r3
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	4413      	add	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8007426:	89fb      	ldrh	r3, [r7, #14]
 8007428:	8afa      	ldrh	r2, [r7, #22]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800742e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007430:	2b00      	cmp	r3, #0
 8007432:	d105      	bne.n	8007440 <iso15693VCDCode+0x184>
            (*offset)++;
 8007434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743e:	801a      	strh	r2, [r3, #0]
    while ((*offset < length) && (err == ERR_NONE))
 8007440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	887a      	ldrh	r2, [r7, #2]
 8007446:	429a      	cmp	r2, r3
 8007448:	d902      	bls.n	8007450 <iso15693VCDCode+0x194>
 800744a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0d0      	beq.n	80073f2 <iso15693VCDCode+0x136>
        }
    }
    if (err != ERR_NONE) {
 8007450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007452:	2b00      	cmp	r3, #0
 8007454:	d063      	beq.n	800751e <iso15693VCDCode+0x262>
        return ERR_AGAIN;
 8007456:	230d      	movs	r3, #13
 8007458:	e0a2      	b.n	80075a0 <iso15693VCDCode+0x2e4>
    }

    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
    {
        uint16_t filled_size;
        if (0U==crc)
 800745a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800745c:	2b00      	cmp	r3, #0
 800745e:	d12b      	bne.n	80074b8 <iso15693VCDCode+0x1fc>
        {
            crc = rfalCrcCalculateCcitt( (uint16_t) ((picopassMode) ? 0xE012U : 0xFFFFU),        /* In PicoPass Mode a different Preset Value is used   */
 8007460:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <iso15693VCDCode+0x1b2>
 8007468:	f24e 0012 	movw	r0, #57362	; 0xe012
 800746c:	e001      	b.n	8007472 <iso15693VCDCode+0x1b6>
 800746e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007472:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <iso15693VCDCode+0x1c4>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3301      	adds	r3, #1
 800747e:	e000      	b.n	8007482 <iso15693VCDCode+0x1c6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007486:	2a00      	cmp	r2, #0
 8007488:	d003      	beq.n	8007492 <iso15693VCDCode+0x1d6>
 800748a:	887a      	ldrh	r2, [r7, #2]
 800748c:	3a01      	subs	r2, #1
 800748e:	b292      	uxth	r2, r2
 8007490:	e000      	b.n	8007494 <iso15693VCDCode+0x1d8>
 8007492:	887a      	ldrh	r2, [r7, #2]
 8007494:	4619      	mov	r1, r3
 8007496:	f7ff fe91 	bl	80071bc <rfalCrcCalculateCcitt>
 800749a:	4603      	mov	r3, r0
 800749c:	847b      	strh	r3, [r7, #34]	; 0x22
                                                    ((picopassMode) ? (buffer + 1U) : buffer),   /* CMD byte is not taken into account in PicoPass mode */
                                                    ((picopassMode) ? (length - 1U) : length));  /* CMD byte is not taken into account in PicoPass mode */
            
            crc = (uint16_t)((picopassMode) ? crc : ~crc);
 800749e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80074a2:	f083 0301 	eor.w	r3, r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <iso15693VCDCode+0x1f8>
 80074ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ae:	43db      	mvns	r3, r3
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	e000      	b.n	80074b6 <iso15693VCDCode+0x1fa>
 80074b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074b6:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        /* send crc */
        transbuf[0] = (uint8_t)(crc & 0xffU);
 80074b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	743b      	strb	r3, [r7, #16]
        transbuf[1] = (uint8_t)((crc >> 8) & 0xffU);
 80074be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	747b      	strb	r3, [r7, #17]
        err = txFunc(transbuf[*offset - length], outputBuf, outputBufSize, &filled_size);
 80074c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	887b      	ldrh	r3, [r7, #2]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074d6:	4413      	add	r3, r2
 80074d8:	f813 0c18 	ldrb.w	r0, [r3, #-24]
 80074dc:	f107 030c 	add.w	r3, r7, #12
 80074e0:	8afa      	ldrh	r2, [r7, #22]
 80074e2:	69fc      	ldr	r4, [r7, #28]
 80074e4:	69b9      	ldr	r1, [r7, #24]
 80074e6:	47a0      	blx	r4
 80074e8:	4603      	mov	r3, r0
 80074ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        (*actOutBufSize) += filled_size;
 80074ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	89bb      	ldrh	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f8:	801a      	strh	r2, [r3, #0]
        outputBuf = &outputBuf[filled_size];	/* MISRA 18.4: Avoid pointer arithmetic */
 80074fa:	89bb      	ldrh	r3, [r7, #12]
 80074fc:	461a      	mov	r2, r3
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	4413      	add	r3, r2
 8007502:	61bb      	str	r3, [r7, #24]
        outputBufSize -= filled_size;
 8007504:	89bb      	ldrh	r3, [r7, #12]
 8007506:	8afa      	ldrh	r2, [r7, #22]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	82fb      	strh	r3, [r7, #22]
        if (err == ERR_NONE) {
 800750c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <iso15693VCDCode+0x262>
            (*offset)++;
 8007512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751c:	801a      	strh	r2, [r3, #0]
    while ((err == ERR_NONE) && sendCrc && (*offset < (length + 2U)))
 800751e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <iso15693VCDCode+0x27c>
 8007524:	787b      	ldrb	r3, [r7, #1]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <iso15693VCDCode+0x27c>
 800752a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	887b      	ldrh	r3, [r7, #2]
 8007532:	3302      	adds	r3, #2
 8007534:	429a      	cmp	r2, r3
 8007536:	d390      	bcc.n	800745a <iso15693VCDCode+0x19e>
        }
    }
    if (err != ERR_NONE) {
 8007538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <iso15693VCDCode+0x294>
        return ERR_AGAIN;
 800753e:	230d      	movs	r3, #13
 8007540:	e02e      	b.n	80075a0 <iso15693VCDCode+0x2e4>
 8007542:	bf00      	nop
 8007544:	20000248 	.word	0x20000248
 8007548:	080077e5 	.word	0x080077e5
 800754c:	0800788d 	.word	0x0800788d
    }

    if ((!sendCrc && (*offset == length))
 8007550:	787b      	ldrb	r3, [r7, #1]
 8007552:	f083 0301 	eor.w	r3, r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <iso15693VCDCode+0x2aa>
 800755c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	887a      	ldrh	r2, [r7, #2]
 8007562:	429a      	cmp	r2, r3
 8007564:	d009      	beq.n	800757a <iso15693VCDCode+0x2be>
            || (sendCrc && (*offset == (length + 2U))))
 8007566:	787b      	ldrb	r3, [r7, #1]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d018      	beq.n	800759e <iso15693VCDCode+0x2e2>
 800756c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	3302      	adds	r3, #2
 8007576:	429a      	cmp	r2, r3
 8007578:	d111      	bne.n	800759e <iso15693VCDCode+0x2e2>
    {
        *outputBuf = eof; 
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007580:	701a      	strb	r2, [r3, #0]
        (*actOutBufSize)++;
 8007582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758c:	801a      	strh	r2, [r3, #0]
        outputBufSize--;
 800758e:	8afb      	ldrh	r3, [r7, #22]
 8007590:	3b01      	subs	r3, #1
 8007592:	82fb      	strh	r3, [r7, #22]
        outputBuf++;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	3301      	adds	r3, #1
 8007598:	61bb      	str	r3, [r7, #24]
    else
    {
        return ERR_AGAIN;
    }

    return err;
 800759a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800759c:	e000      	b.n	80075a0 <iso15693VCDCode+0x2e4>
        return ERR_AGAIN;
 800759e:	230d      	movs	r3, #13
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	372c      	adds	r7, #44	; 0x2c
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd90      	pop	{r4, r7, pc}

080075a8 <iso15693VICCDecode>:
                      uint16_t outBufLen,
                      uint16_t* outBufPos,
                      uint16_t* bitsBeforeCol,
                      uint16_t ignoreBits,
                      bool picopassMode )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	461a      	mov	r2, r3
 80075b4:	460b      	mov	r3, r1
 80075b6:	817b      	strh	r3, [r7, #10]
 80075b8:	4613      	mov	r3, r2
 80075ba:	813b      	strh	r3, [r7, #8]
    ReturnCode err = ERR_NONE;
 80075bc:	2300      	movs	r3, #0
 80075be:	83fb      	strh	r3, [r7, #30]
    uint16_t crc;
    uint16_t mp; /* Current bit position in manchester bit inBuf*/
    uint16_t bp; /* Current bit position in outBuf */

    *bitsBeforeCol = 0;
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2200      	movs	r2, #0
 80075c4:	801a      	strh	r2, [r3, #0]
    *outBufPos = 0;
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	2200      	movs	r2, #0
 80075ca:	801a      	strh	r2, [r3, #0]

    /* first check for valid SOF. Since it starts with 3 unmodulated pulses it is 0x17. */
    if ((inBuf[0] & 0x1fU) != 0x17U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2b17      	cmp	r3, #23
 80075d6:	d001      	beq.n	80075dc <iso15693VICCDecode+0x34>
    {
		ISO_15693_DEBUG("0x%x\n", iso15693PhyBitBuffer[0]);
		return ERR_FRAMING;
 80075d8:	2309      	movs	r3, #9
 80075da:	e0ff      	b.n	80077dc <iso15693VICCDecode+0x234>
    }
    ISO_15693_DEBUG("SOF\n");

    if (outBufLen == 0U)
 80075dc:	893b      	ldrh	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <iso15693VICCDecode+0x3e>
    {
        return ERR_NONE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e0fa      	b.n	80077dc <iso15693VICCDecode+0x234>
    }

    mp = 5; /* 5 bits were SOF, now manchester starts: 2 bits per payload bit */
 80075e6:	2305      	movs	r3, #5
 80075e8:	83bb      	strh	r3, [r7, #28]
    bp = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	837b      	strh	r3, [r7, #26]

    ST_MEMSET(outBuf,0,outBufLen);
 80075ee:	893b      	ldrh	r3, [r7, #8]
 80075f0:	461a      	mov	r2, r3
 80075f2:	2100      	movs	r1, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f008 fe6e 	bl	80102d6 <memset>

    if (inBufLen == 0U)
 80075fa:	897b      	ldrh	r3, [r7, #10]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 808e 	bne.w	800771e <iso15693VICCDecode+0x176>
    {
        return ERR_CRC;
 8007602:	2315      	movs	r3, #21
 8007604:	e0ea      	b.n	80077dc <iso15693VICCDecode+0x234>
    }

    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
    {
        bool isEOF = false;
 8007606:	2300      	movs	r3, #0
 8007608:	767b      	strb	r3, [r7, #25]
        
        uint8_t man;
        man  = (inBuf[mp/8U] >> (mp%8U)) & 0x1U;
 800760a:	8bbb      	ldrh	r3, [r7, #28]
 800760c:	08db      	lsrs	r3, r3, #3
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	8bbb      	ldrh	r3, [r7, #28]
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	fa42 f303 	asr.w	r3, r2, r3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	763b      	strb	r3, [r7, #24]
        man |= ((inBuf[(mp+1U)/8U] >> ((mp+1U)%8U)) & 0x1U) << 1;
 800762c:	8bbb      	ldrh	r3, [r7, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	08db      	lsrs	r3, r3, #3
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	8bbb      	ldrh	r3, [r7, #28]
 800763c:	3301      	adds	r3, #1
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	fa42 f303 	asr.w	r3, r2, r3
 8007646:	b2db      	uxtb	r3, r3
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	b2db      	uxtb	r3, r3
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	b2da      	uxtb	r2, r3
 8007652:	7e3b      	ldrb	r3, [r7, #24]
 8007654:	4313      	orrs	r3, r2
 8007656:	763b      	strb	r3, [r7, #24]
        if (1U == man)
 8007658:	7e3b      	ldrb	r3, [r7, #24]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d102      	bne.n	8007664 <iso15693VICCDecode+0xbc>
        {
            bp++;
 800765e:	8b7b      	ldrh	r3, [r7, #26]
 8007660:	3301      	adds	r3, #1
 8007662:	837b      	strh	r3, [r7, #26]
        }
        if (2U == man)
 8007664:	7e3b      	ldrb	r3, [r7, #24]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d119      	bne.n	800769e <iso15693VICCDecode+0xf6>
        {
            outBuf[bp/8U] = (uint8_t)(outBuf[bp/8U] | (1U <<(bp%8U)));  /* MISRA 10.3 */
 800766a:	8b7b      	ldrh	r3, [r7, #26]
 800766c:	08db      	lsrs	r3, r3, #3
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	7819      	ldrb	r1, [r3, #0]
 8007678:	8b7b      	ldrh	r3, [r7, #26]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	2201      	movs	r2, #1
 8007680:	fa02 f303 	lsl.w	r3, r2, r3
 8007684:	b2da      	uxtb	r2, r3
 8007686:	8b7b      	ldrh	r3, [r7, #26]
 8007688:	08db      	lsrs	r3, r3, #3
 800768a:	b29b      	uxth	r3, r3
 800768c:	4618      	mov	r0, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4403      	add	r3, r0
 8007692:	430a      	orrs	r2, r1
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	701a      	strb	r2, [r3, #0]
            bp++;
 8007698:	8b7b      	ldrh	r3, [r7, #26]
 800769a:	3301      	adds	r3, #1
 800769c:	837b      	strh	r3, [r7, #26]
        }
        if ((bp%8U) == 0U)
 800769e:	8b7b      	ldrh	r3, [r7, #26]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d115      	bne.n	80076d6 <iso15693VICCDecode+0x12e>
        { /* Check for EOF */
            ISO_15693_DEBUG("ceof %hhx %hhx\n", inBuf[mp/8U], inBuf[mp/8+1]);
            if ( ((inBuf[mp/8U]   & 0xe0U) == 0xa0U)
 80076aa:	8bbb      	ldrh	r3, [r7, #28]
 80076ac:	08db      	lsrs	r3, r3, #3
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80076bc:	2ba0      	cmp	r3, #160	; 0xa0
 80076be:	d10a      	bne.n	80076d6 <iso15693VICCDecode+0x12e>
               &&(inBuf[(mp/8U)+1U] == 0x03U))
 80076c0:	8bbb      	ldrh	r3, [r7, #28]
 80076c2:	08db      	lsrs	r3, r3, #3
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3301      	adds	r3, #1
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d101      	bne.n	80076d6 <iso15693VICCDecode+0x12e>
            { /* Now we know that it was 10111000 = EOF */
                ISO_15693_DEBUG("EOF\n");
                isEOF = true;
 80076d2:	2301      	movs	r3, #1
 80076d4:	767b      	strb	r3, [r7, #25]
            }
        }
        if ( ((0U == man) || (3U == man)) && !isEOF )
 80076d6:	7e3b      	ldrb	r3, [r7, #24]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <iso15693VICCDecode+0x13a>
 80076dc:	7e3b      	ldrb	r3, [r7, #24]
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d10f      	bne.n	8007702 <iso15693VICCDecode+0x15a>
 80076e2:	7e7b      	ldrb	r3, [r7, #25]
 80076e4:	f083 0301 	eor.w	r3, r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d009      	beq.n	8007702 <iso15693VICCDecode+0x15a>
        {  
            if (bp >= ignoreBits)
 80076ee:	8b7a      	ldrh	r2, [r7, #26]
 80076f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d302      	bcc.n	80076fc <iso15693VICCDecode+0x154>
            {
                err = ERR_RF_COLLISION;
 80076f6:	231d      	movs	r3, #29
 80076f8:	83fb      	strh	r3, [r7, #30]
 80076fa:	e002      	b.n	8007702 <iso15693VICCDecode+0x15a>
            }
            else
            {
                /* ignored collision: leave as 0 */
                bp++;
 80076fc:	8b7b      	ldrh	r3, [r7, #26]
 80076fe:	3301      	adds	r3, #1
 8007700:	837b      	strh	r3, [r7, #26]
            }
        }
        if ( (bp >= (outBufLen * 8U)) || (err == ERR_RF_COLLISION) || isEOF )        
 8007702:	8b7a      	ldrh	r2, [r7, #26]
 8007704:	893b      	ldrh	r3, [r7, #8]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	429a      	cmp	r2, r3
 800770a:	d20f      	bcs.n	800772c <iso15693VICCDecode+0x184>
 800770c:	8bfb      	ldrh	r3, [r7, #30]
 800770e:	2b1d      	cmp	r3, #29
 8007710:	d00c      	beq.n	800772c <iso15693VICCDecode+0x184>
 8007712:	7e7b      	ldrb	r3, [r7, #25]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <iso15693VICCDecode+0x184>
    for ( ; mp < ((inBufLen * 8U) - 2U); mp+=2U )
 8007718:	8bbb      	ldrh	r3, [r7, #28]
 800771a:	3302      	adds	r3, #2
 800771c:	83bb      	strh	r3, [r7, #28]
 800771e:	8bba      	ldrh	r2, [r7, #28]
 8007720:	897b      	ldrh	r3, [r7, #10]
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	3b02      	subs	r3, #2
 8007726:	429a      	cmp	r2, r3
 8007728:	f4ff af6d 	bcc.w	8007606 <iso15693VICCDecode+0x5e>
        { /* Don't write beyond the end */
            break;
        }
    }

    *outBufPos = (bp / 8U);
 800772c:	8b7b      	ldrh	r3, [r7, #26]
 800772e:	08db      	lsrs	r3, r3, #3
 8007730:	b29a      	uxth	r2, r3
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	801a      	strh	r2, [r3, #0]
    *bitsBeforeCol = bp;
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	8b7a      	ldrh	r2, [r7, #26]
 800773a:	801a      	strh	r2, [r3, #0]

    if (err != ERR_NONE) 
 800773c:	8bfb      	ldrh	r3, [r7, #30]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <iso15693VICCDecode+0x19e>
    {
        return err;
 8007742:	8bfb      	ldrh	r3, [r7, #30]
 8007744:	e04a      	b.n	80077dc <iso15693VICCDecode+0x234>
    }

    if ((bp%8U) != 0U)
 8007746:	8b7b      	ldrh	r3, [r7, #26]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <iso15693VICCDecode+0x1ae>
    {
        return ERR_CRC;
 8007752:	2315      	movs	r3, #21
 8007754:	e042      	b.n	80077dc <iso15693VICCDecode+0x234>
    }

    if (*outBufPos > 2U)
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d93b      	bls.n	80077d6 <iso15693VICCDecode+0x22e>
    {
        /* finally, check crc */
        ISO_15693_DEBUG("Calculate CRC, val: 0x%x, outBufLen: ", *outBuf);
        ISO_15693_DEBUG("0x%x ", *outBufPos - 2);
        
        crc = rfalCrcCalculateCcitt(((picopassMode) ? 0xE012U : 0xFFFFU), outBuf, *outBufPos - 2U);
 800775e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <iso15693VICCDecode+0x1c4>
 8007766:	f24e 0012 	movw	r0, #57362	; 0xe012
 800776a:	e001      	b.n	8007770 <iso15693VICCDecode+0x1c8>
 800776c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	3b02      	subs	r3, #2
 8007776:	b29b      	uxth	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	f7ff fd1e 	bl	80071bc <rfalCrcCalculateCcitt>
 8007780:	4603      	mov	r3, r0
 8007782:	82fb      	strh	r3, [r7, #22]
        crc = (uint16_t)((picopassMode) ? crc : ~crc);
 8007784:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007788:	f083 0301 	eor.w	r3, r3, #1
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <iso15693VICCDecode+0x1f2>
 8007792:	8afb      	ldrh	r3, [r7, #22]
 8007794:	43db      	mvns	r3, r3
 8007796:	b29b      	uxth	r3, r3
 8007798:	e000      	b.n	800779c <iso15693VICCDecode+0x1f4>
 800779a:	8afb      	ldrh	r3, [r7, #22]
 800779c:	82fb      	strh	r3, [r7, #22]
        
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 800779e:	8afb      	ldrh	r3, [r7, #22]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a4:	8812      	ldrh	r2, [r2, #0]
 80077a6:	3a02      	subs	r2, #2
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	440a      	add	r2, r1
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d10e      	bne.n	80077d0 <iso15693VICCDecode+0x228>
                (((crc >> 8U) & 0xffU) == outBuf[*outBufPos-1U]))
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077bc:	8812      	ldrh	r2, [r2, #0]
 80077be:	3a01      	subs	r2, #1
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	440a      	add	r2, r1
 80077c4:	7812      	ldrb	r2, [r2, #0]
        if (((crc & 0xffU) == outBuf[*outBufPos-2U]) &&
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d102      	bne.n	80077d0 <iso15693VICCDecode+0x228>
        {
            err = ERR_NONE;
 80077ca:	2300      	movs	r3, #0
 80077cc:	83fb      	strh	r3, [r7, #30]
 80077ce:	e004      	b.n	80077da <iso15693VICCDecode+0x232>
        }
        else
        {
            ISO_15693_DEBUG("error! Expected: 0x%x, got ", crc);
            ISO_15693_DEBUG("0x%hhx 0x%hhx\n", outBuf[*outBufPos-2], outBuf[*outBufPos-1]);
            err = ERR_CRC;
 80077d0:	2315      	movs	r3, #21
 80077d2:	83fb      	strh	r3, [r7, #30]
 80077d4:	e001      	b.n	80077da <iso15693VICCDecode+0x232>
        }
    }
    else
    {
        err = ERR_CRC;
 80077d6:	2315      	movs	r3, #21
 80077d8:	83fb      	strh	r3, [r7, #30]
    }

    return err;
 80077da:	8bfb      	ldrh	r3, [r7, #30]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <iso15693PhyVCDCode1Of4>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of4(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b089      	sub	sp, #36	; 0x24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607b      	str	r3, [r7, #4]
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]
 80077f2:	4613      	mov	r3, r2
 80077f4:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 4U) {
 8007804:	89bb      	ldrh	r3, [r7, #12]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d801      	bhi.n	800780e <iso15693PhyVCDCode1Of4+0x2a>
        return ERR_NOMEM;
 800780a:	2301      	movs	r3, #1
 800780c:	e038      	b.n	8007880 <iso15693PhyVCDCode1Of4+0x9c>
    }

    tmp = data;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8007812:	2300      	movs	r3, #0
 8007814:	83bb      	strh	r3, [r7, #28]
 8007816:	e02f      	b.n	8007878 <iso15693PhyVCDCode1Of4+0x94>
    {
        switch (tmp & 0x3U)
 8007818:	7ffb      	ldrb	r3, [r7, #31]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d81a      	bhi.n	8007858 <iso15693PhyVCDCode1Of4+0x74>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <iso15693PhyVCDCode1Of4+0x44>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007839 	.word	0x08007839
 800782c:	08007841 	.word	0x08007841
 8007830:	08007849 	.word	0x08007849
 8007834:	08007851 	.word	0x08007851
        {
            case 0:
                *outbuf = ISO15693_DAT_00_1_4;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2202      	movs	r2, #2
 800783c:	701a      	strb	r2, [r3, #0]
                break;
 800783e:	e00c      	b.n	800785a <iso15693PhyVCDCode1Of4+0x76>
            case 1:
                *outbuf = ISO15693_DAT_01_1_4;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	2208      	movs	r2, #8
 8007844:	701a      	strb	r2, [r3, #0]
                break;
 8007846:	e008      	b.n	800785a <iso15693PhyVCDCode1Of4+0x76>
            case 2:
                *outbuf = ISO15693_DAT_10_1_4;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2220      	movs	r2, #32
 800784c:	701a      	strb	r2, [r3, #0]
                break;
 800784e:	e004      	b.n	800785a <iso15693PhyVCDCode1Of4+0x76>
            case 3:
                *outbuf = ISO15693_DAT_11_1_4;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	2280      	movs	r2, #128	; 0x80
 8007854:	701a      	strb	r2, [r3, #0]
                break;
 8007856:	e000      	b.n	800785a <iso15693PhyVCDCode1Of4+0x76>
            default:
                /* MISRA 16.4: mandatory default statement */
                break;
 8007858:	bf00      	nop
        }
        outbuf++;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3301      	adds	r3, #1
 800785e:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	801a      	strh	r2, [r3, #0]
        tmp >>= 2;
 800786c:	7ffb      	ldrb	r3, [r7, #31]
 800786e:	089b      	lsrs	r3, r3, #2
 8007870:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 4U; a++)
 8007872:	8bbb      	ldrh	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	83bb      	strh	r3, [r7, #28]
 8007878:	8bbb      	ldrh	r3, [r7, #28]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d9cc      	bls.n	8007818 <iso15693PhyVCDCode1Of4+0x34>
    }
    return err;
 800787e:	8afb      	ldrh	r3, [r7, #22]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3724      	adds	r7, #36	; 0x24
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <iso15693PhyVCDCode1Of256>:
 *  \return ERR_NONE : No error.
 *
 *****************************************************************************
 */
static ReturnCode iso15693PhyVCDCode1Of256(const uint8_t data, uint8_t* outbuffer, uint16_t maxOutBufLen, uint16_t* outBufLen)
{
 800788c:	b480      	push	{r7}
 800788e:	b089      	sub	sp, #36	; 0x24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607b      	str	r3, [r7, #4]
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]
 800789a:	4613      	mov	r3, r2
 800789c:	81bb      	strh	r3, [r7, #12]
    uint8_t tmp;
    ReturnCode err = ERR_NONE;
 800789e:	2300      	movs	r3, #0
 80078a0:	82fb      	strh	r3, [r7, #22]
    uint16_t a;
    uint8_t* outbuf = outbuffer;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	61bb      	str	r3, [r7, #24]

    *outBufLen = 0;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	801a      	strh	r2, [r3, #0]

    if (maxOutBufLen < 64U) {
 80078ac:	89bb      	ldrh	r3, [r7, #12]
 80078ae:	2b3f      	cmp	r3, #63	; 0x3f
 80078b0:	d801      	bhi.n	80078b6 <iso15693PhyVCDCode1Of256+0x2a>
        return ERR_NOMEM;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e039      	b.n	800792a <iso15693PhyVCDCode1Of256+0x9e>
    }

    tmp = data;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 80078ba:	2300      	movs	r3, #0
 80078bc:	83bb      	strh	r3, [r7, #28]
 80078be:	e030      	b.n	8007922 <iso15693PhyVCDCode1Of256+0x96>
    {
        switch (tmp)
 80078c0:	7ffb      	ldrb	r3, [r7, #31]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d81a      	bhi.n	80078fc <iso15693PhyVCDCode1Of256+0x70>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <iso15693PhyVCDCode1Of256+0x40>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078dd 	.word	0x080078dd
 80078d0:	080078e5 	.word	0x080078e5
 80078d4:	080078ed 	.word	0x080078ed
 80078d8:	080078f5 	.word	0x080078f5
        {
            case 0:
                *outbuf = ISO15693_DAT_SLOT0_1_256;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
                break;
 80078e2:	e00f      	b.n	8007904 <iso15693PhyVCDCode1Of256+0x78>
            case 1:
                *outbuf = ISO15693_DAT_SLOT1_1_256;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	2208      	movs	r2, #8
 80078e8:	701a      	strb	r2, [r3, #0]
                break;
 80078ea:	e00b      	b.n	8007904 <iso15693PhyVCDCode1Of256+0x78>
            case 2:
                *outbuf = ISO15693_DAT_SLOT2_1_256;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2220      	movs	r2, #32
 80078f0:	701a      	strb	r2, [r3, #0]
                break;
 80078f2:	e007      	b.n	8007904 <iso15693PhyVCDCode1Of256+0x78>
            case 3:
                *outbuf = ISO15693_DAT_SLOT3_1_256;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	701a      	strb	r2, [r3, #0]
                break;
 80078fa:	e003      	b.n	8007904 <iso15693PhyVCDCode1Of256+0x78>
            default:
                *outbuf = 0;
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
                break;               
 8007902:	bf00      	nop
        }
        outbuf++;
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	3301      	adds	r3, #1
 8007908:	61bb      	str	r3, [r7, #24]
        (*outBufLen)++;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	3301      	adds	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	801a      	strh	r2, [r3, #0]
        tmp -= 4U;
 8007916:	7ffb      	ldrb	r3, [r7, #31]
 8007918:	3b04      	subs	r3, #4
 800791a:	77fb      	strb	r3, [r7, #31]
    for (a = 0; a < 64U; a++)
 800791c:	8bbb      	ldrh	r3, [r7, #28]
 800791e:	3301      	adds	r3, #1
 8007920:	83bb      	strh	r3, [r7, #28]
 8007922:	8bbb      	ldrh	r3, [r7, #28]
 8007924:	2b3f      	cmp	r3, #63	; 0x3f
 8007926:	d9cb      	bls.n	80078c0 <iso15693PhyVCDCode1Of256+0x34>
    }

    return err;
 8007928:	8afb      	ldrh	r3, [r7, #22]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3724      	adds	r7, #36	; 0x24
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop

08007938 <isoDepClearCounters>:
 ******************************************************************************
 */

/*******************************************************************************/
static void isoDepClearCounters( void )
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
    gIsoDep.cntIRetrys   = 0;
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <isoDepClearCounters+0x20>)
 800793e:	2200      	movs	r2, #0
 8007940:	715a      	strb	r2, [r3, #5]
    gIsoDep.cntRRetrys   = 0;
 8007942:	4b05      	ldr	r3, [pc, #20]	; (8007958 <isoDepClearCounters+0x20>)
 8007944:	2200      	movs	r2, #0
 8007946:	719a      	strb	r2, [r3, #6]
    gIsoDep.cntSRetrys   = 0;
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <isoDepClearCounters+0x20>)
 800794a:	2200      	movs	r2, #0
 800794c:	71da      	strb	r2, [r3, #7]
}
 800794e:	bf00      	nop
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	20000250 	.word	0x20000250

0800795c <isoDepTx>:

/*******************************************************************************/
static ReturnCode isoDepTx( uint8_t pcb, const uint8_t* txBuf, uint8_t *infBuf, uint16_t infLen, uint32_t fwt )
{
 800795c:	b590      	push	{r4, r7, lr}
 800795e:	b08b      	sub	sp, #44	; 0x2c
 8007960:	af04      	add	r7, sp, #16
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	461a      	mov	r2, r3
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
 800796c:	4613      	mov	r3, r2
 800796e:	81bb      	strh	r3, [r7, #12]
    uint8_t    *txBlock;
    uint16_t   txBufLen;
    uint8_t    computedPcb;

    
    txBlock         = infBuf;                      /* Point to beginning of the INF, and go backwards     */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	617b      	str	r3, [r7, #20]
    gIsoDep.lastPCB = pcb;                         /* Store the last PCB sent                             */
 8007974:	4a44      	ldr	r2, [pc, #272]	; (8007a88 <isoDepTx+0x12c>)
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    
    
    if ( infLen > 0U )
 800797c:	89bb      	ldrh	r3, [r7, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <isoDepTx+0x3a>
    {
        if ( ((uint32_t)infBuf - (uint32_t)txBuf) < gIsoDep.hdrLen ) /* Check that we can fit the header in the given space */
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	4a3f      	ldr	r2, [pc, #252]	; (8007a88 <isoDepTx+0x12c>)
 800798a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800798e:	4293      	cmp	r3, r2
 8007990:	d201      	bcs.n	8007996 <isoDepTx+0x3a>
        {
            return ERR_NOMEM;
 8007992:	2301      	movs	r3, #1
 8007994:	e074      	b.n	8007a80 <isoDepTx+0x124>
    }
    
    
    /*******************************************************************************/
    /* Compute optional PCB bits */
    computedPcb = pcb;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) {   computedPcb |= ISODEP_PCB_DID_BIT;            }
 800799a:	4b3b      	ldr	r3, [pc, #236]	; (8007a88 <isoDepTx+0x12c>)
 800799c:	78db      	ldrb	r3, [r3, #3]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d108      	bne.n	80079b4 <isoDepTx+0x58>
 80079a2:	4b39      	ldr	r3, [pc, #228]	; (8007a88 <isoDepTx+0x12c>)
 80079a4:	78db      	ldrb	r3, [r3, #3]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d108      	bne.n	80079bc <isoDepTx+0x60>
 80079aa:	4b37      	ldr	r3, [pc, #220]	; (8007a88 <isoDepTx+0x12c>)
 80079ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <isoDepTx+0x60>
 80079b4:	7cfb      	ldrb	r3, [r7, #19]
 80079b6:	f043 0308 	orr.w	r3, r3, #8
 80079ba:	74fb      	strb	r3, [r7, #19]
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)                                                                  {   computedPcb |= ISODEP_PCB_NAD_BIT;            }
 80079bc:	4b32      	ldr	r3, [pc, #200]	; (8007a88 <isoDepTx+0x12c>)
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	2bff      	cmp	r3, #255	; 0xff
 80079c2:	d003      	beq.n	80079cc <isoDepTx+0x70>
 80079c4:	7cfb      	ldrb	r3, [r7, #19]
 80079c6:	f043 0304 	orr.w	r3, r3, #4
 80079ca:	74fb      	strb	r3, [r7, #19]
    if ((gIsoDep.isTxChaining) && (isoDep_PCBisIBlock(computedPcb)) )                                       {   computedPcb |= ISODEP_PCB_CHAINING_BIT;       } 
 80079cc:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <isoDepTx+0x12c>)
 80079ce:	7c9b      	ldrb	r3, [r3, #18]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <isoDepTx+0x8a>
 80079d4:	7cfb      	ldrb	r3, [r7, #19]
 80079d6:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d103      	bne.n	80079e6 <isoDepTx+0x8a>
 80079de:	7cfb      	ldrb	r3, [r7, #19]
 80079e0:	f043 0310 	orr.w	r3, r3, #16
 80079e4:	74fb      	strb	r3, [r7, #19]

    
    /*******************************************************************************/
    /* Compute Payload on the given txBuf, start by the PCB | DID | NAD | before INF */
    
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD) 
 80079e6:	4b28      	ldr	r3, [pc, #160]	; (8007a88 <isoDepTx+0x12c>)
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	2bff      	cmp	r3, #255	; 0xff
 80079ec:	d006      	beq.n	80079fc <isoDepTx+0xa0>
    {
        *(--txBlock) = gIsoDep.nad;                /* NAD is optional */
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <isoDepTx+0x12c>)
 80079f6:	791a      	ldrb	r2, [r3, #4]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	701a      	strb	r2, [r3, #0]
    }
    
    if ( (gIsoDep.did != RFAL_ISODEP_NO_DID) || ((gIsoDep.did == RFAL_ISODEP_DID_00) && gIsoDep.lastDID00) ) 
 80079fc:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <isoDepTx+0x12c>)
 80079fe:	78db      	ldrb	r3, [r3, #3]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <isoDepTx+0xba>
 8007a04:	4b20      	ldr	r3, [pc, #128]	; (8007a88 <isoDepTx+0x12c>)
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10b      	bne.n	8007a24 <isoDepTx+0xc8>
 8007a0c:	4b1e      	ldr	r3, [pc, #120]	; (8007a88 <isoDepTx+0x12c>)
 8007a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d006      	beq.n	8007a24 <isoDepTx+0xc8>
    {
        *(--txBlock)  = gIsoDep.did;               /* DID is optional */
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
 8007a1c:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <isoDepTx+0x12c>)
 8007a1e:	78da      	ldrb	r2, [r3, #3]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	701a      	strb	r2, [r3, #0]
    }
    
    *(--txBlock)      = computedPcb;               /* PCB always present */
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	7cfa      	ldrb	r2, [r7, #19]
 8007a2e:	701a      	strb	r2, [r3, #0]
    
    txBufLen = (infLen + (uint16_t)((uint32_t)infBuf - (uint32_t)txBlock)); /* Calculate overall buffer size */
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	89bb      	ldrh	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	823b      	strh	r3, [r7, #16]
    
    if ( txBufLen > (gIsoDep.fsx - ISODEP_CRC_LEN) )                        /* Check if msg length violates the maximum frame size FSC */
 8007a3e:	8a3a      	ldrh	r2, [r7, #16]
 8007a40:	4b11      	ldr	r3, [pc, #68]	; (8007a88 <isoDepTx+0x12c>)
 8007a42:	8a1b      	ldrh	r3, [r3, #16]
 8007a44:	3b02      	subs	r3, #2
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d901      	bls.n	8007a4e <isoDepTx+0xf2>
    {
        return ERR_NOTSUPP;
 8007a4a:	2318      	movs	r3, #24
 8007a4c:	e018      	b.n	8007a80 <isoDepTx+0x124>
    }
        
    return rfalTransceiveBlockingTx( txBlock, txBufLen, gIsoDep.rxBuf, gIsoDep.rxBufLen, gIsoDep.rxLen, RFAL_TXRX_FLAGS_DEFAULT, ((gIsoDep.role == ISODEP_ROLE_PICC) ? RFAL_FWT_NONE : fwt ) );
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <isoDepTx+0x12c>)
 8007a50:	6998      	ldr	r0, [r3, #24]
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <isoDepTx+0x12c>)
 8007a54:	8bdc      	ldrh	r4, [r3, #30]
 8007a56:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <isoDepTx+0x12c>)
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	4b0b      	ldr	r3, [pc, #44]	; (8007a88 <isoDepTx+0x12c>)
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d001      	beq.n	8007a66 <isoDepTx+0x10a>
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	e001      	b.n	8007a6a <isoDepTx+0x10e>
 8007a66:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6a:	8a39      	ldrh	r1, [r7, #16]
 8007a6c:	9302      	str	r3, [sp, #8]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	9200      	str	r2, [sp, #0]
 8007a74:	4623      	mov	r3, r4
 8007a76:	4602      	mov	r2, r0
 8007a78:	6978      	ldr	r0, [r7, #20]
 8007a7a:	f006 fbb3 	bl	800e1e4 <rfalTransceiveBlockingTx>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd90      	pop	{r4, r7, pc}
 8007a88:	20000250 	.word	0x20000250

08007a8c <isoDepHandleControlMsg>:

/*******************************************************************************/
static ReturnCode isoDepHandleControlMsg( rfalIsoDepControlMsg controlMsg, uint8_t param )
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b089      	sub	sp, #36	; 0x24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	4603      	mov	r3, r0
 8007a94:	460a      	mov	r2, r1
 8007a96:	71fb      	strb	r3, [r7, #7]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	71bb      	strb	r3, [r7, #6]
    uint8_t  pcb;   
    uint8_t  ctrlMsgBuf[ISODEP_CONTROLMSG_BUF_LEN];
    uint8_t  infLen;
    uint32_t fwtTemp;
    
    infLen  = 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	75bb      	strb	r3, [r7, #22]
    fwtTemp = (gIsoDep.fwt + gIsoDep.dFwt);
 8007aa0:	4b56      	ldr	r3, [pc, #344]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	4b55      	ldr	r3, [pc, #340]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
    ST_MEMSET( ctrlMsgBuf, 0x00, ISODEP_CONTROLMSG_BUF_LEN );
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f008 fc0e 	bl	80102d6 <memset>
    
    switch( controlMsg )
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	f200 8089 	bhi.w	8007bd4 <isoDepHandleControlMsg+0x148>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <isoDepHandleControlMsg+0x3c>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007b05 	.word	0x08007b05
 8007ad0:	08007b31 	.word	0x08007b31
 8007ad4:	08007ba1 	.word	0x08007ba1
    {
        /*******************************************************************************/
        case ISODEP_R_ACK:
            
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8007ad8:	4b48      	ldr	r3, [pc, #288]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007ada:	799b      	ldrb	r3, [r3, #6]
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	b2d1      	uxtb	r1, r2
 8007ae0:	4a46      	ldr	r2, [pc, #280]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007ae2:	7191      	strb	r1, [r2, #6]
 8007ae4:	4a45      	ldr	r2, [pc, #276]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007ae6:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d901      	bls.n	8007af2 <isoDepHandleControlMsg+0x66>
            {
                return ERR_PROTO;
 8007aee:	230b      	movs	r3, #11
 8007af0:	e080      	b.n	8007bf4 <isoDepHandleControlMsg+0x168>
            }
            
            pcb = isoDep_PCBRACK( gIsoDep.blockNumber );
 8007af2:	4b42      	ldr	r3, [pc, #264]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007af4:	789b      	ldrb	r3, [r3, #2]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f063 035d 	orn	r3, r3, #93	; 0x5d
 8007b00:	75fb      	strb	r3, [r7, #23]
            break;
 8007b02:	e069      	b.n	8007bd8 <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_R_NAK:
            if( gIsoDep.cntRRetrys++ > gIsoDep.maxRetriesR )
 8007b04:	4b3d      	ldr	r3, [pc, #244]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b06:	799b      	ldrb	r3, [r3, #6]
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	b2d1      	uxtb	r1, r2
 8007b0c:	4a3b      	ldr	r2, [pc, #236]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b0e:	7191      	strb	r1, [r2, #6]
 8007b10:	4a3a      	ldr	r2, [pc, #232]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b12:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d901      	bls.n	8007b1e <isoDepHandleControlMsg+0x92>
            {
                return ERR_TIMEOUT;
 8007b1a:	2304      	movs	r3, #4
 8007b1c:	e06a      	b.n	8007bf4 <isoDepHandleControlMsg+0x168>
            }
            
            pcb = isoDep_PCBRNAK( gIsoDep.blockNumber );            
 8007b1e:	4b37      	ldr	r3, [pc, #220]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b20:	789b      	ldrb	r3, [r3, #2]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	f063 034d 	orn	r3, r3, #77	; 0x4d
 8007b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8007b2e:	e053      	b.n	8007bd8 <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_S_WTX:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8007b30:	4b32      	ldr	r3, [pc, #200]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b32:	79db      	ldrb	r3, [r3, #7]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	b2d1      	uxtb	r1, r2
 8007b38:	4a30      	ldr	r2, [pc, #192]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b3a:	71d1      	strb	r1, [r2, #7]
 8007b3c:	4a2f      	ldr	r2, [pc, #188]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b3e:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d901      	bls.n	8007b4a <isoDepHandleControlMsg+0xbe>
            {
                return ERR_PROTO;
 8007b46:	230b      	movs	r3, #11
 8007b48:	e054      	b.n	8007bf4 <isoDepHandleControlMsg+0x168>
            }
            
            /* Check if WTXM is valid */
            if( ! isoDep_isWTXMValid(param) )
 8007b4a:	79bb      	ldrb	r3, [r7, #6]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <isoDepHandleControlMsg+0xca>
 8007b50:	79bb      	ldrb	r3, [r7, #6]
 8007b52:	2b3b      	cmp	r3, #59	; 0x3b
 8007b54:	d901      	bls.n	8007b5a <isoDepHandleControlMsg+0xce>
            {
                return ERR_PROTO;
 8007b56:	230b      	movs	r3, #11
 8007b58:	e04c      	b.n	8007bf4 <isoDepHandleControlMsg+0x168>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8007b5a:	4b28      	ldr	r3, [pc, #160]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d111      	bne.n	8007b86 <isoDepHandleControlMsg+0xfa>
            {
                /* Calculate temp Wait Time eXtension */ 
                fwtTemp = (gIsoDep.fwt * param);
 8007b62:	4b26      	ldr	r3, [pc, #152]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	79ba      	ldrb	r2, [r7, #6]
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	613b      	str	r3, [r7, #16]
                fwtTemp = MIN( RFAL_ISODEP_MAX_FWT, fwtTemp );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b74:	bf28      	it	cs
 8007b76:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 8007b7a:	613b      	str	r3, [r7, #16]
                fwtTemp += gIsoDep.dFwt;
 8007b7c:	4b1f      	ldr	r3, [pc, #124]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	4413      	add	r3, r2
 8007b84:	613b      	str	r3, [r7, #16]
            }
            
            pcb = ISODEP_PCB_SWTX;
 8007b86:	23f2      	movs	r3, #242	; 0xf2
 8007b88:	75fb      	strb	r3, [r7, #23]
            ctrlMsgBuf[ RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN + infLen++] = param;
 8007b8a:	7dbb      	ldrb	r3, [r7, #22]
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	75ba      	strb	r2, [r7, #22]
 8007b90:	3302      	adds	r3, #2
 8007b92:	f107 0218 	add.w	r2, r7, #24
 8007b96:	4413      	add	r3, r2
 8007b98:	79ba      	ldrb	r2, [r7, #6]
 8007b9a:	f803 2c0c 	strb.w	r2, [r3, #-12]
            break;
 8007b9e:	e01b      	b.n	8007bd8 <isoDepHandleControlMsg+0x14c>
            
        /*******************************************************************************/
        case ISODEP_S_DSL:
            if( gIsoDep.cntSRetrys++ > gIsoDep.maxRetriesS )
 8007ba0:	4b16      	ldr	r3, [pc, #88]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007ba2:	79db      	ldrb	r3, [r3, #7]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	b2d1      	uxtb	r1, r2
 8007ba8:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007baa:	71d1      	strb	r1, [r2, #7]
 8007bac:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007bae:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d901      	bls.n	8007bba <isoDepHandleControlMsg+0x12e>
            {
                return ERR_PROTO;
 8007bb6:	230b      	movs	r3, #11
 8007bb8:	e01c      	b.n	8007bf4 <isoDepHandleControlMsg+0x168>
            }
            
            if( gIsoDep.role == ISODEP_ROLE_PCD )
 8007bba:	4b10      	ldr	r3, [pc, #64]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <isoDepHandleControlMsg+0x142>
            {
                /* Digital 1.0 - 13.2.7.3 Poller must wait fwtDEACTIVATION */
                fwtTemp = ISODEP_FWT_DEACTIVATION;
 8007bc2:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 8007bc6:	613b      	str	r3, [r7, #16]
                gIsoDep.state = ISODEP_ST_PCD_WAIT_DSL;
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <isoDepHandleControlMsg+0x170>)
 8007bca:	2203      	movs	r2, #3
 8007bcc:	701a      	strb	r2, [r3, #0]
            }
            pcb = ISODEP_PCB_SDSL;
 8007bce:	23c2      	movs	r3, #194	; 0xc2
 8007bd0:	75fb      	strb	r3, [r7, #23]
            break;
 8007bd2:	e001      	b.n	8007bd8 <isoDepHandleControlMsg+0x14c>
        
        /*******************************************************************************/
        default:
            return ERR_INTERNAL;
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	e00d      	b.n	8007bf4 <isoDepHandleControlMsg+0x168>
    }
    
    return isoDepTx( pcb, ctrlMsgBuf, &ctrlMsgBuf[RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN], infLen, fwtTemp );
 8007bd8:	7dbb      	ldrb	r3, [r7, #22]
 8007bda:	b29c      	uxth	r4, r3
 8007bdc:	f107 030c 	add.w	r3, r7, #12
 8007be0:	1c9a      	adds	r2, r3, #2
 8007be2:	f107 010c 	add.w	r1, r7, #12
 8007be6:	7df8      	ldrb	r0, [r7, #23]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	4623      	mov	r3, r4
 8007bee:	f7ff feb5 	bl	800795c <isoDepTx>
 8007bf2:	4603      	mov	r3, r0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd90      	pop	{r4, r7, pc}
 8007bfc:	20000250 	.word	0x20000250

08007c00 <rfalIsoDepInitialize>:
 */


/*******************************************************************************/
void rfalIsoDepInitialize( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
    gIsoDep.state        = ISODEP_ST_IDLE;
 8007c04:	4b26      	ldr	r3, [pc, #152]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	701a      	strb	r2, [r3, #0]
    gIsoDep.role         = ISODEP_ROLE_PCD;
 8007c0a:	4b25      	ldr	r3, [pc, #148]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	705a      	strb	r2, [r3, #1]
    gIsoDep.did          = RFAL_ISODEP_NO_DID;
 8007c10:	4b23      	ldr	r3, [pc, #140]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	70da      	strb	r2, [r3, #3]
    gIsoDep.nad          = RFAL_ISODEP_NO_NAD;
 8007c16:	4b22      	ldr	r3, [pc, #136]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c18:	22ff      	movs	r2, #255	; 0xff
 8007c1a:	711a      	strb	r2, [r3, #4]
    gIsoDep.blockNumber  = 0;
 8007c1c:	4b20      	ldr	r3, [pc, #128]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	709a      	strb	r2, [r3, #2]
    gIsoDep.isTxChaining = false;
 8007c22:	4b1f      	ldr	r3, [pc, #124]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	749a      	strb	r2, [r3, #18]
    gIsoDep.isRxChaining = false;
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	74da      	strb	r2, [r3, #19]
    gIsoDep.lastDID00    = false;
 8007c2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    gIsoDep.lastPCB      = ISODEP_PCB_INVALID;
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c38:	2240      	movs	r2, #64	; 0x40
 8007c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    gIsoDep.fsx          = (uint16_t)RFAL_ISODEP_FSX_16;
 8007c3e:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c40:	2210      	movs	r2, #16
 8007c42:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx       = (uint16_t)RFAL_ISODEP_FSX_16;
 8007c44:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c46:	2210      	movs	r2, #16
 8007c48:	845a      	strh	r2, [r3, #34]	; 0x22
    gIsoDep.hdrLen       = RFAL_ISODEP_PCB_LEN;
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    gIsoDep.rxLen        = NULL;
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	62da      	str	r2, [r3, #44]	; 0x2c
    gIsoDep.rxBuf        = NULL;
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	619a      	str	r2, [r3, #24]
    
    gIsoDep.isTxPending  = false;
 8007c5e:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    gIsoDep.isWait4WTX   = false;
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    gIsoDep.compMode       = RFAL_COMPLIANCE_MODE_NFC;
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gIsoDep.maxRetriesR    = RFAL_ISODEP_MAX_R_RETRYS;
 8007c76:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c78:	2203      	movs	r2, #3
 8007c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    gIsoDep.maxRetriesS    = RFAL_ISODEP_MAX_S_RETRYS;
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c80:	2203      	movs	r2, #3
 8007c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    gIsoDep.maxRetriesI    = RFAL_ISODEP_MAX_I_RETRYS;
 8007c86:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    gIsoDep.maxRetriesRATS = RFAL_ISODEP_RATS_RETRIES;
 8007c8e:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <rfalIsoDepInitialize+0xa0>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    
    isoDepClearCounters();
 8007c96:	f7ff fe4f 	bl	8007938 <isoDepClearCounters>
}
 8007c9a:	bf00      	nop
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000250 	.word	0x20000250

08007ca4 <isoDepDataExchangePCD>:


#if RFAL_FEATURE_ISO_DEP_POLL
/*******************************************************************************/
static ReturnCode isoDepDataExchangePCD( uint16_t *outActRxLen, bool *outIsChaining )
{
 8007ca4:	b5b0      	push	{r4, r5, r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    uint8_t    rxPCB;
    
    /* Check out parameters */
    if( (outActRxLen == NULL) || (outIsChaining == NULL) )
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <isoDepDataExchangePCD+0x16>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <isoDepDataExchangePCD+0x1a>
    {
        return ERR_PARAM;
 8007cba:	2307      	movs	r3, #7
 8007cbc:	e294      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
    }    
    
    *outIsChaining = false;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
        
    /* Calculate header required and check if the buffers InfPositions are suitable */    
    gIsoDep.hdrLen = RFAL_ISODEP_PCB_LEN;
 8007cc4:	4bb6      	ldr	r3, [pc, #728]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.did != RFAL_ISODEP_NO_DID)  { gIsoDep.hdrLen  += RFAL_ISODEP_DID_LEN;  }
 8007ccc:	4bb4      	ldr	r3, [pc, #720]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007cce:	78db      	ldrb	r3, [r3, #3]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <isoDepDataExchangePCD+0x40>
 8007cd4:	4bb2      	ldr	r3, [pc, #712]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007cd6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	4bb0      	ldr	r3, [pc, #704]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007ce0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if (gIsoDep.nad != RFAL_ISODEP_NO_NAD)  { gIsoDep.hdrLen  += RFAL_ISODEP_NAD_LEN;  }
 8007ce4:	4bae      	ldr	r3, [pc, #696]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007ce6:	791b      	ldrb	r3, [r3, #4]
 8007ce8:	2bff      	cmp	r3, #255	; 0xff
 8007cea:	d007      	beq.n	8007cfc <isoDepDataExchangePCD+0x58>
 8007cec:	4bac      	ldr	r3, [pc, #688]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007cee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	4baa      	ldr	r3, [pc, #680]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007cf8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    
    /* check if there is enough space before the infPos to append ISO-DEP headers on rx and tx */
    if( (gIsoDep.rxBufInfPos < gIsoDep.hdrLen) || (gIsoDep.txBufInfPos < gIsoDep.hdrLen) )
 8007cfc:	4ba8      	ldr	r3, [pc, #672]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007cfe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007d02:	4ba7      	ldr	r3, [pc, #668]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d04:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d307      	bcc.n	8007d1c <isoDepDataExchangePCD+0x78>
 8007d0c:	4ba4      	ldr	r3, [pc, #656]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d0e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007d12:	4ba3      	ldr	r3, [pc, #652]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d14:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d201      	bcs.n	8007d20 <isoDepDataExchangePCD+0x7c>
    {
        return ERR_PARAM;
 8007d1c:	2307      	movs	r3, #7
 8007d1e:	e263      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
    }
    
    /*******************************************************************************/
    /* Wait until SFGT has been fulfilled (as a PCD) */
    if(gIsoDep.SFGTTimer != 0U)
 8007d20:	4b9f      	ldr	r3, [pc, #636]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00c      	beq.n	8007d42 <isoDepDataExchangePCD+0x9e>
    {
        if( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) )
 8007d28:	4b9d      	ldr	r3, [pc, #628]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fa fe37 	bl	80029a0 <timerIsExpired>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f083 0301 	eor.w	r3, r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <isoDepDataExchangePCD+0x9e>
        {
            return ERR_BUSY;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	e252      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
        }
    }
    /* Once done, clear SFGT timer */
    gIsoDep.SFGTTimer = 0;
 8007d42:	4b97      	ldr	r3, [pc, #604]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	63da      	str	r2, [r3, #60]	; 0x3c
    
    
    /*******************************************************************************/
    switch( gIsoDep.state )
 8007d48:	4b95      	ldr	r3, [pc, #596]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	f200 8249 	bhi.w	80081e4 <isoDepDataExchangePCD+0x540>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <isoDepDataExchangePCD+0xb4>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d6d 	.word	0x08007d6d
 8007d60:	08007dbb 	.word	0x08007dbb
 8007d64:	08007dbb 	.word	0x08007dbb
    {
        /*******************************************************************************/
        case ISODEP_ST_IDLE:
            return ERR_NONE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e23d      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
        
        /*******************************************************************************/
        case ISODEP_ST_PCD_TX:
            ret = isoDepTx( isoDep_PCBIBlock( gIsoDep.blockNumber ), gIsoDep.txBuf, &gIsoDep.txBuf[gIsoDep.txBufInfPos], gIsoDep.txBufLen, (gIsoDep.fwt + gIsoDep.dFwt) );
 8007d6c:	4b8c      	ldr	r3, [pc, #560]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f043 0302 	orr.w	r3, r3, #2
 8007d7a:	b2d8      	uxtb	r0, r3
 8007d7c:	4b88      	ldr	r3, [pc, #544]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d7e:	6959      	ldr	r1, [r3, #20]
 8007d80:	4b87      	ldr	r3, [pc, #540]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	4a86      	ldr	r2, [pc, #536]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d8a:	189c      	adds	r4, r3, r2
 8007d8c:	4b84      	ldr	r3, [pc, #528]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d8e:	8b9d      	ldrh	r5, [r3, #28]
 8007d90:	4b83      	ldr	r3, [pc, #524]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	4b82      	ldr	r3, [pc, #520]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4413      	add	r3, r2
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	4622      	mov	r2, r4
 8007da0:	f7ff fddc 	bl	800795c <isoDepTx>
 8007da4:	4603      	mov	r3, r0
 8007da6:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8007da8:	89fb      	ldrh	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <isoDepDataExchangePCD+0x112>
            {
              case ERR_NONE:
                  gIsoDep.state = ISODEP_ST_PCD_RX;
 8007dae:	4b7c      	ldr	r3, [pc, #496]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007db0:	2202      	movs	r2, #2
 8007db2:	701a      	strb	r2, [r3, #0]
                  break;
 8007db4:	e001      	b.n	8007dba <isoDepDataExchangePCD+0x116>
              
              default:
                  return ret;
 8007db6:	89fb      	ldrh	r3, [r7, #14]
 8007db8:	e216      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
          
        /*******************************************************************************/
        case ISODEP_ST_PCD_WAIT_DSL:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        case ISODEP_ST_PCD_RX:
                      
            ret = rfalGetTransceiveStatus();
 8007dba:	f006 fac9 	bl	800e350 <rfalGetTransceiveStatus>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	81fb      	strh	r3, [r7, #14]
            switch( ret )
 8007dc2:	89fb      	ldrh	r3, [r7, #14]
 8007dc4:	2b28      	cmp	r3, #40	; 0x28
 8007dc6:	f200 8082 	bhi.w	8007ece <isoDepDataExchangePCD+0x22a>
 8007dca:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <isoDepDataExchangePCD+0x12c>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007ed3 	.word	0x08007ed3
 8007dd4:	08007ecf 	.word	0x08007ecf
 8007dd8:	08007ecb 	.word	0x08007ecb
 8007ddc:	08007ecf 	.word	0x08007ecf
 8007de0:	08007e75 	.word	0x08007e75
 8007de4:	08007ecf 	.word	0x08007ecf
 8007de8:	08007ecf 	.word	0x08007ecf
 8007dec:	08007ecf 	.word	0x08007ecf
 8007df0:	08007ecf 	.word	0x08007ecf
 8007df4:	08007e75 	.word	0x08007e75
 8007df8:	08007ecf 	.word	0x08007ecf
 8007dfc:	08007ecf 	.word	0x08007ecf
 8007e00:	08007ecf 	.word	0x08007ecf
 8007e04:	08007ecf 	.word	0x08007ecf
 8007e08:	08007ecf 	.word	0x08007ecf
 8007e0c:	08007ecf 	.word	0x08007ecf
 8007e10:	08007ecf 	.word	0x08007ecf
 8007e14:	08007ecf 	.word	0x08007ecf
 8007e18:	08007ecf 	.word	0x08007ecf
 8007e1c:	08007ecf 	.word	0x08007ecf
 8007e20:	08007ecf 	.word	0x08007ecf
 8007e24:	08007e75 	.word	0x08007e75
 8007e28:	08007ecf 	.word	0x08007ecf
 8007e2c:	08007ecf 	.word	0x08007ecf
 8007e30:	08007ecf 	.word	0x08007ecf
 8007e34:	08007ecf 	.word	0x08007ecf
 8007e38:	08007ecf 	.word	0x08007ecf
 8007e3c:	08007e75 	.word	0x08007e75
 8007e40:	08007ecf 	.word	0x08007ecf
 8007e44:	08007ecf 	.word	0x08007ecf
 8007e48:	08007ecf 	.word	0x08007ecf
 8007e4c:	08007ecf 	.word	0x08007ecf
 8007e50:	08007ecf 	.word	0x08007ecf
 8007e54:	08007ecf 	.word	0x08007ecf
 8007e58:	08007ecf 	.word	0x08007ecf
 8007e5c:	08007ecf 	.word	0x08007ecf
 8007e60:	08007ecf 	.word	0x08007ecf
 8007e64:	08007ecf 	.word	0x08007ecf
 8007e68:	08007ecf 	.word	0x08007ecf
 8007e6c:	08007ecf 	.word	0x08007ecf
 8007e70:	08007e75 	.word	0x08007e75
                case ERR_CRC:
                case ERR_PAR:
                case ERR_FRAMING:          /* added to handle test cases scenario TC_POL_NFCB_T4AT_BI_82_x_y & TC_POL_NFCB_T4BT_BI_82_x_y */
                case ERR_INCOMPLETE_BYTE:  /* added to handle test cases scenario TC_POL_NFCB_T4AT_BI_82_x_y & TC_POL_NFCB_T4BT_BI_82_x_y  */
                    
                    if( gIsoDep.isRxChaining )
 8007e74:	4b4a      	ldr	r3, [pc, #296]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007e76:	7cdb      	ldrb	r3, [r3, #19]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <isoDepDataExchangePCD+0x1ee>
                    {   /* Rule 5 - In PICC chaining when a invalid/timeout occurs -> R-ACK */                        
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f7ff fe04 	bl	8007a8c <isoDepHandleControlMsg>
 8007e84:	4603      	mov	r3, r0
 8007e86:	81fb      	strh	r3, [r7, #14]
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d01b      	beq.n	8007ec6 <isoDepDataExchangePCD+0x222>
 8007e8e:	89fb      	ldrh	r3, [r7, #14]
 8007e90:	e1aa      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                    else if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8007e92:	4b43      	ldr	r3, [pc, #268]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d10a      	bne.n	8007eb0 <isoDepDataExchangePCD+0x20c>
                    {   /* Rule 8 - If s-Deselect response fails MAY retransmit */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ) );
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	2003      	movs	r0, #3
 8007e9e:	f7ff fdf5 	bl	8007a8c <isoDepHandleControlMsg>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	81fb      	strh	r3, [r7, #14]
 8007ea6:	89fb      	ldrh	r3, [r7, #14]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00c      	beq.n	8007ec6 <isoDepDataExchangePCD+0x222>
 8007eac:	89fb      	ldrh	r3, [r7, #14]
 8007eae:	e19b      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {   /* Rule 4 - When a invalid block or timeout occurs -> R-NACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	f7ff fdea 	bl	8007a8c <isoDepHandleControlMsg>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	81fb      	strh	r3, [r7, #14]
 8007ebc:	89fb      	ldrh	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <isoDepDataExchangePCD+0x222>
 8007ec2:	89fb      	ldrh	r3, [r7, #14]
 8007ec4:	e190      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                    return ERR_BUSY;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e18e      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    
                case ERR_NONE:
                    break;
                    
                case ERR_BUSY:
                    return ERR_BUSY;  /* Debug purposes */
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e18c      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    
                default:
                    return ret;
 8007ece:	89fb      	ldrh	r3, [r7, #14]
 8007ed0:	e18a      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    break;
 8007ed2:	bf00      	nop
            
            /*******************************************************************************/
            /* No error, process incoming msg                                              */
            /*******************************************************************************/
            
            (*outActRxLen) = rfalConvBitsToBytes( *outActRxLen );
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	3307      	adds	r3, #7
 8007eda:	08db      	lsrs	r3, r3, #3
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	801a      	strh	r2, [r3, #0]
            
            
            /* Check rcvd msg length, cannot be less then the expected header */
            if( ((*outActRxLen) < gIsoDep.hdrLen) || ((*outActRxLen) >= gIsoDep.ourFsx) )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	881a      	ldrh	r2, [r3, #0]
 8007ee6:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007ee8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d305      	bcc.n	8007efe <isoDepDataExchangePCD+0x25a>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	4b2a      	ldr	r3, [pc, #168]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007ef8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d301      	bcc.n	8007f02 <isoDepDataExchangePCD+0x25e>
            {
                return ERR_PROTO;
 8007efe:	230b      	movs	r3, #11
 8007f00:	e172      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
            }
            
            /* Grab rcvd PCB */
            rxPCB = gIsoDep.rxBuf[ ISODEP_PCB_POS ];
 8007f02:	4b27      	ldr	r3, [pc, #156]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	737b      	strb	r3, [r7, #13]
            
            
            /* EMVCo doesn't allow usage of for CID or NAD   EMVCo 2.6 TAble 10.2 */
            if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && ( isoDep_PCBhasDID(rxPCB) || isoDep_PCBhasNAD(rxPCB)) )
 8007f0a:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d10b      	bne.n	8007f2c <isoDepDataExchangePCD+0x288>
 8007f14:	7b7b      	ldrb	r3, [r7, #13]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d104      	bne.n	8007f28 <isoDepDataExchangePCD+0x284>
 8007f1e:	7b7b      	ldrb	r3, [r7, #13]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <isoDepDataExchangePCD+0x288>
            {
                return ERR_PROTO;
 8007f28:	230b      	movs	r3, #11
 8007f2a:	e15d      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
            }
            
            /* If we are expecting DID, check if PCB signals its presence and if device ID match*/
            if( (gIsoDep.did != RFAL_ISODEP_NO_DID) && ( !isoDep_PCBhasDID(rxPCB) || (gIsoDep.did != gIsoDep.rxBuf[ ISODEP_DID_POS ])) )
 8007f2c:	4b1c      	ldr	r3, [pc, #112]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f2e:	78db      	ldrb	r3, [r3, #3]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <isoDepDataExchangePCD+0x2ae>
 8007f34:	7b7b      	ldrb	r3, [r7, #13]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d007      	beq.n	8007f4e <isoDepDataExchangePCD+0x2aa>
 8007f3e:	4b18      	ldr	r3, [pc, #96]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f40:	78da      	ldrb	r2, [r3, #3]
 8007f42:	4b17      	ldr	r3, [pc, #92]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	3301      	adds	r3, #1
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d001      	beq.n	8007f52 <isoDepDataExchangePCD+0x2ae>
            {
                return ERR_PROTO;
 8007f4e:	230b      	movs	r3, #11
 8007f50:	e14a      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
            
            
            /*******************************************************************************/
            /* Process S-Block                                                             */
            /*******************************************************************************/
            if( isoDep_PCBisSBlock(rxPCB) )
 8007f52:	7b7b      	ldrb	r3, [r7, #13]
 8007f54:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8007f58:	2bc2      	cmp	r3, #194	; 0xc2
 8007f5a:	d137      	bne.n	8007fcc <isoDepDataExchangePCD+0x328>
            {
                /* Check if is a Wait Time eXtension */
                if( isoDep_PCBisSWTX(rxPCB) )
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
 8007f5e:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8007f62:	2bc2      	cmp	r3, #194	; 0xc2
 8007f64:	d11e      	bne.n	8007fa4 <isoDepDataExchangePCD+0x300>
 8007f66:	7b7b      	ldrb	r3, [r7, #13]
 8007f68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f6c:	2b30      	cmp	r3, #48	; 0x30
 8007f6e:	d119      	bne.n	8007fa4 <isoDepDataExchangePCD+0x300>
                {
                    /* Rule 3 - respond to S-block: get 1st INF byte S(STW): Power + WTXM */
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_WTX, isoDep_GetWTXM(gIsoDep.rxBuf[gIsoDep.hdrLen]) ) );                    
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	4a0a      	ldr	r2, [pc, #40]	; (8007fa0 <isoDepDataExchangePCD+0x2fc>)
 8007f76:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007f7a:	4413      	add	r3, r2
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	4619      	mov	r1, r3
 8007f86:	2002      	movs	r0, #2
 8007f88:	f7ff fd80 	bl	8007a8c <isoDepHandleControlMsg>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	81fb      	strh	r3, [r7, #14]
 8007f90:	89fb      	ldrh	r3, [r7, #14]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <isoDepDataExchangePCD+0x2f6>
 8007f96:	89fb      	ldrh	r3, [r7, #14]
 8007f98:	e126      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    return ERR_BUSY;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e124      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
 8007f9e:	bf00      	nop
 8007fa0:	20000250 	.word	0x20000250
                }
                
                /* Check if is a deselect response */
                if( isoDep_PCBisSDeselect(rxPCB) )
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8007faa:	2bc2      	cmp	r3, #194	; 0xc2
 8007fac:	d10c      	bne.n	8007fc8 <isoDepDataExchangePCD+0x324>
 8007fae:	7b7b      	ldrb	r3, [r7, #13]
 8007fb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d107      	bne.n	8007fc8 <isoDepDataExchangePCD+0x324>
                {
                    if( gIsoDep.state == ISODEP_ST_PCD_WAIT_DSL )
 8007fb8:	4b8d      	ldr	r3, [pc, #564]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d103      	bne.n	8007fc8 <isoDepDataExchangePCD+0x324>
                    {
                        rfalIsoDepInitialize();         /* Session finished reInit vars */
 8007fc0:	f7ff fe1e 	bl	8007c00 <rfalIsoDepInitialize>
                        return ERR_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e10f      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    
                    /* Deselect response not expected  */
                    /* fall through to PROTO error */
                }
                /* Unexpected S-Block */
                return ERR_PROTO;
 8007fc8:	230b      	movs	r3, #11
 8007fca:	e10d      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
            }
            
            /*******************************************************************************/
            /* Process R-Block                                                             */
            /*******************************************************************************/
            else if( isoDep_PCBisRBlock(rxPCB) )
 8007fcc:	7b7b      	ldrb	r3, [r7, #13]
 8007fce:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8007fd2:	2ba2      	cmp	r3, #162	; 0xa2
 8007fd4:	d141      	bne.n	800805a <isoDepDataExchangePCD+0x3b6>
            {
                if( isoDep_PCBisRACK(rxPCB) )                            /* Check if is a R-ACK */
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	f003 03e6 	and.w	r3, r3, #230	; 0xe6
 8007fdc:	2ba2      	cmp	r3, #162	; 0xa2
 8007fde:	d13a      	bne.n	8008056 <isoDepDataExchangePCD+0x3b2>
 8007fe0:	7b7b      	ldrb	r3, [r7, #13]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d135      	bne.n	8008056 <isoDepDataExchangePCD+0x3b2>
                {
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )     /* Expected block number  */
 8007fea:	7b7b      	ldrb	r3, [r7, #13]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	4a7f      	ldr	r2, [pc, #508]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8007ff2:	7892      	ldrb	r2, [r2, #2]
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d119      	bne.n	800802c <isoDepDataExchangePCD+0x388>
                    {
                        /* Rule B - ACK with expected bn -> Increment block number */
                        gIsoDep.blockNumber = isoDep_PCBNextBN( gIsoDep.blockNumber );
 8007ff8:	4b7d      	ldr	r3, [pc, #500]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8007ffa:	789b      	ldrb	r3, [r3, #2]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	bf0c      	ite	eq
 8008006:	2301      	moveq	r3, #1
 8008008:	2300      	movne	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	4b78      	ldr	r3, [pc, #480]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008010:	709a      	strb	r2, [r3, #2]
                                                
                        /* R-ACK only allowed when PCD chaining */
                        if( !gIsoDep.isTxChaining )
 8008012:	4b77      	ldr	r3, [pc, #476]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008014:	7c9b      	ldrb	r3, [r3, #18]
 8008016:	f083 0301 	eor.w	r3, r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <isoDepDataExchangePCD+0x380>
                        {
                            return ERR_PROTO;
 8008020:	230b      	movs	r3, #11
 8008022:	e0e1      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                        }
                        
                        /* Rule 7 - Chaining transaction done, continue chaining */
                        isoDepClearCounters();
 8008024:	f7ff fc88 	bl	8007938 <isoDepClearCounters>
                        return ERR_NONE;  /* This block has been transmitted */
 8008028:	2300      	movs	r3, #0
 800802a:	e0dd      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {
                        /* Rule 6 - R-ACK with wrong block number retransmit */
                        if( gIsoDep.cntIRetrys++ < gIsoDep.maxRetriesI )
 800802c:	4b70      	ldr	r3, [pc, #448]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800802e:	795b      	ldrb	r3, [r3, #5]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	b2d1      	uxtb	r1, r2
 8008034:	4a6e      	ldr	r2, [pc, #440]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008036:	7151      	strb	r1, [r2, #5]
 8008038:	4a6d      	ldr	r2, [pc, #436]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800803a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800803e:	4293      	cmp	r3, r2
 8008040:	d207      	bcs.n	8008052 <isoDepDataExchangePCD+0x3ae>
                        {
                            gIsoDep.cntRRetrys = 0;            /* Clear R counter only */
 8008042:	4b6b      	ldr	r3, [pc, #428]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008044:	2200      	movs	r2, #0
 8008046:	719a      	strb	r2, [r3, #6]
                            gIsoDep.state = ISODEP_ST_PCD_TX;
 8008048:	4b69      	ldr	r3, [pc, #420]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
                            return ERR_BUSY;
 800804e:	2302      	movs	r3, #2
 8008050:	e0ca      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                        }
                        return ERR_PROTO;
 8008052:	230b      	movs	r3, #11
 8008054:	e0c8      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                }
                else  /* Unexcpected R-Block */
                {
                    return ERR_PROTO;
 8008056:	230b      	movs	r3, #11
 8008058:	e0c6      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
            }
            
            /*******************************************************************************/
            /* Process I-Block                                                             */
            /*******************************************************************************/
            else if( isoDep_PCBisIBlock(rxPCB) )
 800805a:	7b7b      	ldrb	r3, [r7, #13]
 800805c:	f003 03e2 	and.w	r3, r3, #226	; 0xe2
 8008060:	2b02      	cmp	r3, #2
 8008062:	f040 80bd 	bne.w	80081e0 <isoDepDataExchangePCD+0x53c>
            {
                /*******************************************************************************/
                /* is PICC performing chaining                                                 */
                if( isoDep_PCBisChaining(rxPCB) )
 8008066:	7b7b      	ldrb	r3, [r7, #13]
 8008068:	f003 0310 	and.w	r3, r3, #16
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05e      	beq.n	800812e <isoDepDataExchangePCD+0x48a>
                {
                    gIsoDep.isRxChaining = true;
 8008070:	4b5f      	ldr	r3, [pc, #380]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008072:	2201      	movs	r2, #1
 8008074:	74da      	strb	r2, [r3, #19]
                    *outIsChaining       = true;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	701a      	strb	r2, [r3, #0]
                    
                    if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 800807c:	7b7b      	ldrb	r3, [r7, #13]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	4a5b      	ldr	r2, [pc, #364]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008084:	7892      	ldrb	r2, [r2, #2]
 8008086:	4293      	cmp	r3, r2
 8008088:	d144      	bne.n	8008114 <isoDepDataExchangePCD+0x470>
                    {
                        /* Rule B - ACK with correct block number -> Increase Block number */
                        isoDep_ToggleBN( gIsoDep.blockNumber );
 800808a:	4b59      	ldr	r3, [pc, #356]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800808c:	789b      	ldrb	r3, [r3, #2]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	4b53      	ldr	r3, [pc, #332]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080a2:	709a      	strb	r2, [r3, #2]
                        
                        isoDepClearCounters();  /* Clear counters in case R counter is already at max */
 80080a4:	f7ff fc48 	bl	8007938 <isoDepClearCounters>
                        
                        /* Rule 2 - Send ACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );
 80080a8:	2100      	movs	r1, #0
 80080aa:	2000      	movs	r0, #0
 80080ac:	f7ff fcee 	bl	8007a8c <isoDepHandleControlMsg>
 80080b0:	4603      	mov	r3, r0
 80080b2:	81fb      	strh	r3, [r7, #14]
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <isoDepDataExchangePCD+0x41a>
 80080ba:	89fb      	ldrh	r3, [r7, #14]
 80080bc:	e094      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                        
                        /* Received I-Block with chaining, send current data to DH */
                        
                        /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
                        *outActRxLen -= gIsoDep.hdrLen;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	881a      	ldrh	r2, [r3, #0]
 80080c2:	4b4b      	ldr	r3, [pc, #300]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	801a      	strh	r2, [r3, #0]
                        if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 80080d2:	4b47      	ldr	r3, [pc, #284]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080d4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80080d8:	4b45      	ldr	r3, [pc, #276]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080de:	429a      	cmp	r2, r3
 80080e0:	d014      	beq.n	800810c <isoDepDataExchangePCD+0x468>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d010      	beq.n	800810c <isoDepDataExchangePCD+0x468>
                        {
                            ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 80080ea:	4b41      	ldr	r3, [pc, #260]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	4a40      	ldr	r2, [pc, #256]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080f0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80080f4:	1898      	adds	r0, r3, r2
 80080f6:	4b3e      	ldr	r3, [pc, #248]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	4a3d      	ldr	r2, [pc, #244]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80080fc:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008100:	1899      	adds	r1, r3, r2
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f008 f8cc 	bl	80102a4 <memmove>
                        }
                        
                        isoDepClearCounters();
 800810c:	f7ff fc14 	bl	8007938 <isoDepClearCounters>
                        return ERR_AGAIN;       /* Send Again signalling to run again, but some chaining data has arrived */
 8008110:	230d      	movs	r3, #13
 8008112:	e069      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                    else
                    {
                        /* Rule 5 - PICC chaining invalid I-Block -> R-ACK */
                        EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_ACK, RFAL_ISODEP_NO_PARAM ) );                        
 8008114:	2100      	movs	r1, #0
 8008116:	2000      	movs	r0, #0
 8008118:	f7ff fcb8 	bl	8007a8c <isoDepHandleControlMsg>
 800811c:	4603      	mov	r3, r0
 800811e:	81fb      	strh	r3, [r7, #14]
 8008120:	89fb      	ldrh	r3, [r7, #14]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <isoDepDataExchangePCD+0x486>
 8008126:	89fb      	ldrh	r3, [r7, #14]
 8008128:	e05e      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }
                    return ERR_BUSY;
 800812a:	2302      	movs	r3, #2
 800812c:	e05c      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                }
                
                gIsoDep.isRxChaining = false; /* clear PICC chaining flag */                
 800812e:	4b30      	ldr	r3, [pc, #192]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008130:	2200      	movs	r2, #0
 8008132:	74da      	strb	r2, [r3, #19]
                
                if( isoDep_GetBN(rxPCB) == gIsoDep.blockNumber )
 8008134:	7b7b      	ldrb	r3, [r7, #13]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	4a2d      	ldr	r2, [pc, #180]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800813c:	7892      	ldrb	r2, [r2, #2]
 800813e:	4293      	cmp	r3, r2
 8008140:	d13a      	bne.n	80081b8 <isoDepDataExchangePCD+0x514>
                {
                    /* Rule B - I-Block with correct block number -> Increase Block number */
                    isoDep_ToggleBN( gIsoDep.blockNumber );
 8008142:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008144:	789b      	ldrb	r3, [r3, #2]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf0c      	ite	eq
 8008150:	2301      	moveq	r3, #1
 8008152:	2300      	movne	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800815a:	709a      	strb	r2, [r3, #2]
                    
                    /* I-Block transaction done successfully */
                    
                    /* remove ISO DEP header, check is necessary to move the INF data on the buffer */
                    *outActRxLen -= gIsoDep.hdrLen;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	881a      	ldrh	r2, [r3, #0]
 8008160:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008162:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008166:	b29b      	uxth	r3, r3
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	801a      	strh	r2, [r3, #0]
                    if( (gIsoDep.hdrLen != gIsoDep.rxBufInfPos) && (*outActRxLen > 0U) )
 8008170:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008172:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008176:	4b1e      	ldr	r3, [pc, #120]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008178:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800817c:	429a      	cmp	r2, r3
 800817e:	d014      	beq.n	80081aa <isoDepDataExchangePCD+0x506>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d010      	beq.n	80081aa <isoDepDataExchangePCD+0x506>
                    {
                        ST_MEMMOVE( &gIsoDep.rxBuf[gIsoDep.rxBufInfPos], &gIsoDep.rxBuf[gIsoDep.hdrLen], *outActRxLen );
 8008188:	4b19      	ldr	r3, [pc, #100]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	4a18      	ldr	r2, [pc, #96]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800818e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008192:	1898      	adds	r0, r3, r2
 8008194:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	4a15      	ldr	r2, [pc, #84]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 800819a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800819e:	1899      	adds	r1, r3, r2
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f008 f87d 	bl	80102a4 <memmove>
                    }
                    
                    gIsoDep.state = ISODEP_ST_IDLE;
 80081aa:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
                    isoDepClearCounters();
 80081b0:	f7ff fbc2 	bl	8007938 <isoDepClearCounters>
                    return ERR_NONE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e017      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                }
                else
                {
                    if( (gIsoDep.compMode != RFAL_COMPLIANCE_MODE_ISO) )
 80081b8:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <isoDepDataExchangePCD+0x54c>)
 80081ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d001      	beq.n	80081c6 <isoDepDataExchangePCD+0x522>
                    {
                        /* Invalid Block (not chaining) -> Raise error   Digital 1.1  15.2.6.4   EMVCo 2.6  10.3.5.4 */
                        return ERR_PROTO;
 80081c2:	230b      	movs	r3, #11
 80081c4:	e010      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    }

                    /* Rule 4 - Invalid Block -> R-NAK */
                    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_R_NAK, RFAL_ISODEP_NO_PARAM ) );
 80081c6:	2100      	movs	r1, #0
 80081c8:	2001      	movs	r0, #1
 80081ca:	f7ff fc5f 	bl	8007a8c <isoDepHandleControlMsg>
 80081ce:	4603      	mov	r3, r0
 80081d0:	81fb      	strh	r3, [r7, #14]
 80081d2:	89fb      	ldrh	r3, [r7, #14]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <isoDepDataExchangePCD+0x538>
 80081d8:	89fb      	ldrh	r3, [r7, #14]
 80081da:	e005      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                    return ERR_BUSY;
 80081dc:	2302      	movs	r3, #2
 80081de:	e003      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
                }
            }
            else /* not S/R/I - Block */
            {
                return ERR_PROTO;
 80081e0:	230b      	movs	r3, #11
 80081e2:	e001      	b.n	80081e8 <isoDepDataExchangePCD+0x544>
            /* fall through */
          
        /*******************************************************************************/
        default:               /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            /* MISRA 16.4: no empty default (comment will suffice) */
            break;
 80081e4:	bf00      	nop
    }
    
    return ERR_INTERNAL;
 80081e6:	230c      	movs	r3, #12
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bdb0      	pop	{r4, r5, r7, pc}
 80081f0:	20000250 	.word	0x20000250

080081f4 <rfalIsoDepDeselect>:

/*******************************************************************************/
ReturnCode rfalIsoDepDeselect( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
    bool       dummyB;
    
    /*******************************************************************************/
    /* Check if  rx parameters have been set before, otherwise use global variable *
     * To cope with a Deselect after RATS\ATTRIB without any I-Block exchanged     */
    if( (gIsoDep.rxLen == NULL) || (gIsoDep.rxBuf == NULL) )
 80081fa:	4b23      	ldr	r3, [pc, #140]	; (8008288 <rfalIsoDepDeselect+0x94>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <rfalIsoDepDeselect+0x16>
 8008202:	4b21      	ldr	r3, [pc, #132]	; (8008288 <rfalIsoDepDeselect+0x94>)
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d110      	bne.n	800822c <rfalIsoDepDeselect+0x38>
    {
        /* Using local vars would be safe as rfalIsoDepInitialize will clear the   *
         * reference to local vars before exiting (no EXIT_ON_ERR),                *
         * but MISRA 18.6 3217 would be still be flagged. Using static variables   */
        gIsoDep.rxLen       = &gIsoDep.ctrlRxLen;
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <rfalIsoDepDeselect+0x94>)
 800820c:	4a1f      	ldr	r2, [pc, #124]	; (800828c <rfalIsoDepDeselect+0x98>)
 800820e:	62da      	str	r2, [r3, #44]	; 0x2c
        gIsoDep.rxBuf       = gIsoDep.ctrlRxBuf;
 8008210:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <rfalIsoDepDeselect+0x94>)
 8008212:	4a1f      	ldr	r2, [pc, #124]	; (8008290 <rfalIsoDepDeselect+0x9c>)
 8008214:	619a      	str	r2, [r3, #24]
        
        gIsoDep.rxBufLen    = ISODEP_CONTROLMSG_BUF_LEN;
 8008216:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <rfalIsoDepDeselect+0x94>)
 8008218:	2204      	movs	r2, #4
 800821a:	83da      	strh	r2, [r3, #30]
        gIsoDep.rxBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <rfalIsoDepDeselect+0x94>)
 800821e:	2202      	movs	r2, #2
 8008220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gIsoDep.txBufInfPos = (RFAL_ISODEP_PCB_LEN + RFAL_ISODEP_DID_LEN);
 8008224:	4b18      	ldr	r3, [pc, #96]	; (8008288 <rfalIsoDepDeselect+0x94>)
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2020 	strb.w	r2, [r3, #32]
    
    
    /*******************************************************************************/
    /* The Deselect process is being done blocking, Digital 1.0 - 13.2.7.1 MUST wait response and retry*/
    /* Set the maximum reruns while we will wait for a response */
    cntRerun = ISODEP_MAX_RERUNS;
 800822c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008230:	607b      	str	r3, [r7, #4]
    
    /* Send DSL request and run protocol until get a response, error or "timeout" */    
    EXIT_ON_ERR( ret, isoDepHandleControlMsg( ISODEP_S_DSL, RFAL_ISODEP_NO_PARAM ));
 8008232:	2100      	movs	r1, #0
 8008234:	2003      	movs	r0, #3
 8008236:	f7ff fc29 	bl	8007a8c <isoDepHandleControlMsg>
 800823a:	4603      	mov	r3, r0
 800823c:	807b      	strh	r3, [r7, #2]
 800823e:	887b      	ldrh	r3, [r7, #2]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <rfalIsoDepDeselect+0x54>
 8008244:	887b      	ldrh	r3, [r7, #2]
 8008246:	e01a      	b.n	800827e <rfalIsoDepDeselect+0x8a>
    do{
        ret = isoDepDataExchangePCD( gIsoDep.rxLen, &dummyB );
 8008248:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <rfalIsoDepDeselect+0x94>)
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	1c7a      	adds	r2, r7, #1
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fd27 	bl	8007ca4 <isoDepDataExchangePCD>
 8008256:	4603      	mov	r3, r0
 8008258:	807b      	strh	r3, [r7, #2]
        rfalWorker();
 800825a:	f006 f88b 	bl	800e374 <rfalWorker>
    }
    while( ((cntRerun--) != 0U) && (ret == ERR_BUSY) );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	1e5a      	subs	r2, r3, #1
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <rfalIsoDepDeselect+0x7a>
 8008268:	887b      	ldrh	r3, [r7, #2]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d0ec      	beq.n	8008248 <rfalIsoDepDeselect+0x54>
        
    rfalIsoDepInitialize();
 800826e:	f7ff fcc7 	bl	8007c00 <rfalIsoDepInitialize>
    return ((cntRerun == 0U) ? ERR_TIMEOUT : ret);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <rfalIsoDepDeselect+0x88>
 8008278:	887b      	ldrh	r3, [r7, #2]
 800827a:	e000      	b.n	800827e <rfalIsoDepDeselect+0x8a>
 800827c:	2304      	movs	r3, #4
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000250 	.word	0x20000250
 800828c:	2000029a 	.word	0x2000029a
 8008290:	20000295 	.word	0x20000295

08008294 <rfalIsoDepFWI2FWT>:
#endif /* RFAL_FEATURE_ISO_DEP_POLL */


/*******************************************************************************/
uint32_t rfalIsoDepFWI2FWT( uint8_t fwi )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	71fb      	strb	r3, [r7, #7]
    uint32_t result;
    uint8_t  tmpFWI;
    
    tmpFWI = fwi;
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	73fb      	strb	r3, [r7, #15]
    
    /* RFU values -> take the default value  
     * Digital 1.0  11.6.2.17  FWI[1,14]
     * Digital 1.1  7.6.2.22   FWI[0,14]
     * EMVCo 2.6    Table A.5  FWI[0,14] */
    if( tmpFWI > ISODEP_FWI_MAX )
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b0e      	cmp	r3, #14
 80082a6:	d901      	bls.n	80082ac <rfalIsoDepFWI2FWT+0x18>
    {
        tmpFWI = RFAL_ISODEP_FWI_DEFAULT;
 80082a8:	2304      	movs	r3, #4
 80082aa:	73fb      	strb	r3, [r7, #15]
    }

    /* FWT = (256 x 16/fC) x 2^FWI => 2^(FWI+12)  Digital 1.1  13.8.1 & 7.9.1 */
    
    result = ((uint32_t)1U << (tmpFWI + 12U));
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	330c      	adds	r3, #12
 80082b0:	2201      	movs	r2, #1
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	60bb      	str	r3, [r7, #8]
    result = MIN( RFAL_ISODEP_MAX_FWT, result);  /* Maximum Frame Waiting Time must be fulfilled */
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082be:	bf28      	it	cs
 80082c0:	f04f 6380 	movcs.w	r3, #67108864	; 0x4000000
 80082c4:	60bb      	str	r3, [r7, #8]
    
    return result;
 80082c6:	68bb      	ldr	r3, [r7, #8]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <rfalIsoDepFSxI2FSx>:


/*******************************************************************************/
uint16_t rfalIsoDepFSxI2FSx( uint8_t FSxI )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
    uint16_t fsx;
    uint8_t  fsi;
    
    /* Enforce maximum FSxI/FSx allowed - NFC Forum and EMVCo differ */
    fsi = (( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV ) ? MIN( FSxI, RFAL_ISODEP_FSDI_MAX_EMV ) : MIN( FSxI, RFAL_ISODEP_FSDI_MAX_NFC ));
 80082de:	4b34      	ldr	r3, [pc, #208]	; (80083b0 <rfalIsoDepFSxI2FSx+0xdc>)
 80082e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d105      	bne.n	80082f4 <rfalIsoDepFSxI2FSx+0x20>
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	2b0c      	cmp	r3, #12
 80082ec:	bf28      	it	cs
 80082ee:	230c      	movcs	r3, #12
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	e004      	b.n	80082fe <rfalIsoDepFSxI2FSx+0x2a>
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	bf28      	it	cs
 80082fa:	2308      	movcs	r3, #8
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	737b      	strb	r3, [r7, #13]
    
    switch( fsi )
 8008300:	7b7b      	ldrb	r3, [r7, #13]
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d848      	bhi.n	8008398 <rfalIsoDepFSxI2FSx+0xc4>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <rfalIsoDepFSxI2FSx+0x38>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008341 	.word	0x08008341
 8008310:	08008347 	.word	0x08008347
 8008314:	0800834d 	.word	0x0800834d
 8008318:	08008353 	.word	0x08008353
 800831c:	08008359 	.word	0x08008359
 8008320:	0800835f 	.word	0x0800835f
 8008324:	08008365 	.word	0x08008365
 8008328:	0800836b 	.word	0x0800836b
 800832c:	08008371 	.word	0x08008371
 8008330:	08008379 	.word	0x08008379
 8008334:	08008381 	.word	0x08008381
 8008338:	08008389 	.word	0x08008389
 800833c:	08008391 	.word	0x08008391
    {
        case (uint8_t)RFAL_ISODEP_FSXI_16:           fsx = (uint16_t)RFAL_ISODEP_FSX_16;   break;
 8008340:	2310      	movs	r3, #16
 8008342:	81fb      	strh	r3, [r7, #14]
 8008344:	e02c      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_24:           fsx = (uint16_t)RFAL_ISODEP_FSX_24;   break;
 8008346:	2318      	movs	r3, #24
 8008348:	81fb      	strh	r3, [r7, #14]
 800834a:	e029      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_32:           fsx = (uint16_t)RFAL_ISODEP_FSX_32;   break;
 800834c:	2320      	movs	r3, #32
 800834e:	81fb      	strh	r3, [r7, #14]
 8008350:	e026      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_40:           fsx = (uint16_t)RFAL_ISODEP_FSX_40;   break;
 8008352:	2328      	movs	r3, #40	; 0x28
 8008354:	81fb      	strh	r3, [r7, #14]
 8008356:	e023      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_48:           fsx = (uint16_t)RFAL_ISODEP_FSX_48;   break;
 8008358:	2330      	movs	r3, #48	; 0x30
 800835a:	81fb      	strh	r3, [r7, #14]
 800835c:	e020      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_64:           fsx = (uint16_t)RFAL_ISODEP_FSX_64;   break;
 800835e:	2340      	movs	r3, #64	; 0x40
 8008360:	81fb      	strh	r3, [r7, #14]
 8008362:	e01d      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_96:           fsx = (uint16_t)RFAL_ISODEP_FSX_96;   break;
 8008364:	2360      	movs	r3, #96	; 0x60
 8008366:	81fb      	strh	r3, [r7, #14]
 8008368:	e01a      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_128:          fsx = (uint16_t)RFAL_ISODEP_FSX_128;  break;
 800836a:	2380      	movs	r3, #128	; 0x80
 800836c:	81fb      	strh	r3, [r7, #14]
 800836e:	e017      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_256:          fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8008370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008374:	81fb      	strh	r3, [r7, #14]
 8008376:	e013      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_512:          fsx = (uint16_t)RFAL_ISODEP_FSX_512;  break;
 8008378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800837c:	81fb      	strh	r3, [r7, #14]
 800837e:	e00f      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_1024:         fsx = (uint16_t)RFAL_ISODEP_FSX_1024; break;
 8008380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008384:	81fb      	strh	r3, [r7, #14]
 8008386:	e00b      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_2048:         fsx = (uint16_t)RFAL_ISODEP_FSX_2048; break;
 8008388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800838c:	81fb      	strh	r3, [r7, #14]
 800838e:	e007      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        case (uint8_t)RFAL_ISODEP_FSXI_4096:         fsx = (uint16_t)RFAL_ISODEP_FSX_4096; break;
 8008390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008394:	81fb      	strh	r3, [r7, #14]
 8008396:	e003      	b.n	80083a0 <rfalIsoDepFSxI2FSx+0xcc>
        default:                                     fsx = (uint16_t)RFAL_ISODEP_FSX_256;  break;
 8008398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800839c:	81fb      	strh	r3, [r7, #14]
 800839e:	bf00      	nop
    }
    return fsx;
 80083a0:	89fb      	ldrh	r3, [r7, #14]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000250 	.word	0x20000250

080083b4 <rfalIsoDepGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalIsoDepGetTransceiveStatus( void )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
    if( gIsoDep.role == ISODEP_ROLE_PICC)
 80083b8:	4b08      	ldr	r3, [pc, #32]	; (80083dc <rfalIsoDepGetTransceiveStatus+0x28>)
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <rfalIsoDepGetTransceiveStatus+0x10>
    {
#if RFAL_FEATURE_ISO_DEP_LISTEN
        return isoDepDataExchangePICC();
#else
        return ERR_NOTSUPP;
 80083c0:	2318      	movs	r3, #24
 80083c2:	e008      	b.n	80083d6 <rfalIsoDepGetTransceiveStatus+0x22>
#endif /* RFAL_FEATURE_ISO_DEP_LISTEN */
    }
    else
    {
#if RFAL_FEATURE_ISO_DEP_POLL
        return isoDepDataExchangePCD( gIsoDep.rxLen, gIsoDep.rxChaining );
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <rfalIsoDepGetTransceiveStatus+0x28>)
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c8:	4b04      	ldr	r3, [pc, #16]	; (80083dc <rfalIsoDepGetTransceiveStatus+0x28>)
 80083ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f7ff fc68 	bl	8007ca4 <isoDepDataExchangePCD>
 80083d4:	4603      	mov	r3, r0
#else
        return ERR_NOTSUPP;
#endif /* RFAL_FEATURE_ISO_DEP_POLL */
    }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000250 	.word	0x20000250

080083e0 <rfalIsoDepRATS>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepRATS( rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts *ats , uint8_t *atsLen)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08a      	sub	sp, #40	; 0x28
 80083e4:	af04      	add	r7, sp, #16
 80083e6:	60ba      	str	r2, [r7, #8]
 80083e8:	607b      	str	r3, [r7, #4]
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]
 80083ee:	460b      	mov	r3, r1
 80083f0:	73bb      	strb	r3, [r7, #14]
    uint16_t       rcvLen;
    ReturnCode     ret;
    rfalIsoDepRats ratsReq;
    
    if( ats == NULL )
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <rfalIsoDepRATS+0x1c>
    {
        return ERR_PARAM;
 80083f8:	2307      	movs	r3, #7
 80083fa:	e03c      	b.n	8008476 <rfalIsoDepRATS+0x96>
    }
    
    /*******************************************************************************/
    /* Compose RATS */
    ratsReq.CMD   = RFAL_ISODEP_CMD_RATS;
 80083fc:	23e0      	movs	r3, #224	; 0xe0
 80083fe:	743b      	strb	r3, [r7, #16]
    ratsReq.PARAM = (((uint8_t)FSDI << RFAL_ISODEP_RATS_PARAM_FSDI_SHIFT) & RFAL_ISODEP_RATS_PARAM_FSDI_MASK) | (DID & RFAL_ISODEP_RATS_PARAM_DID_MASK);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	b2da      	uxtb	r2, r3
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	f003 030f 	and.w	r3, r3, #15
 800840c:	b2db      	uxtb	r3, r3
 800840e:	4313      	orrs	r3, r2
 8008410:	b2db      	uxtb	r3, r3
 8008412:	747b      	strb	r3, [r7, #17]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ratsReq, sizeof(rfalIsoDepRats), (uint8_t*)ats, sizeof(rfalIsoDepAts), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 8008414:	f107 0010 	add.w	r0, r7, #16
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <rfalIsoDepRATS+0xa0>)
 800841a:	9302      	str	r3, [sp, #8]
 800841c:	2300      	movs	r3, #0
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	f107 0314 	add.w	r3, r7, #20
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	2314      	movs	r3, #20
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	2102      	movs	r1, #2
 800842c:	f005 ff3c 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 8008430:	4603      	mov	r3, r0
 8008432:	82fb      	strh	r3, [r7, #22]
    
    if( ret == ERR_NONE )
 8008434:	8afb      	ldrh	r3, [r7, #22]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d115      	bne.n	8008466 <rfalIsoDepRATS+0x86>
    {
        /* Check for valid ATS length  Digital 1.1  13.6.2.1 & 13.6.2.3 */
        if( (rcvLen < RFAL_ISODEP_ATS_MIN_LEN) || (rcvLen > RFAL_ISODEP_ATS_MAX_LEN) || (ats->TL != rcvLen) )
 800843a:	8abb      	ldrh	r3, [r7, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <rfalIsoDepRATS+0x72>
 8008440:	8abb      	ldrh	r3, [r7, #20]
 8008442:	2b14      	cmp	r3, #20
 8008444:	d805      	bhi.n	8008452 <rfalIsoDepRATS+0x72>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b29a      	uxth	r2, r3
 800844c:	8abb      	ldrh	r3, [r7, #20]
 800844e:	429a      	cmp	r2, r3
 8008450:	d001      	beq.n	8008456 <rfalIsoDepRATS+0x76>
        {
            return ERR_PROTO;
 8008452:	230b      	movs	r3, #11
 8008454:	e00f      	b.n	8008476 <rfalIsoDepRATS+0x96>
        }
        
        /* Assign our FSx, in case the a Deselect is send without Transceive */
        gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ff3b 	bl	80082d4 <rfalIsoDepFSxI2FSx>
 800845e:	4603      	mov	r3, r0
 8008460:	461a      	mov	r2, r3
 8008462:	4b08      	ldr	r3, [pc, #32]	; (8008484 <rfalIsoDepRATS+0xa4>)
 8008464:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    
    /* Check and assign if ATS length was requested (length also available on TL) */
    if( atsLen != NULL )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <rfalIsoDepRATS+0x94>
    {
        *atsLen = (uint8_t)rcvLen;
 800846c:	8abb      	ldrh	r3, [r7, #20]
 800846e:	b2da      	uxtb	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 8008474:	8afb      	ldrh	r3, [r7, #22]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	00046780 	.word	0x00046780
 8008484:	20000250 	.word	0x20000250

08008488 <rfalIsoDepPPS>:


/*******************************************************************************/
ReturnCode rfalIsoDepPPS( uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes *ppsRes )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af04      	add	r7, sp, #16
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	4603      	mov	r3, r0
 8008492:	71fb      	strb	r3, [r7, #7]
 8008494:	460b      	mov	r3, r1
 8008496:	71bb      	strb	r3, [r7, #6]
 8008498:	4613      	mov	r3, r2
 800849a:	717b      	strb	r3, [r7, #5]
    uint16_t         rcvLen;
    ReturnCode       ret;
    rfalIsoDepPpsReq ppsReq;
    
    if( (ppsRes == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d008      	beq.n	80084b4 <rfalIsoDepPPS+0x2c>
 80084a2:	79bb      	ldrb	r3, [r7, #6]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d805      	bhi.n	80084b4 <rfalIsoDepPPS+0x2c>
 80084a8:	797b      	ldrb	r3, [r7, #5]
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d802      	bhi.n	80084b4 <rfalIsoDepPPS+0x2c>
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	2b0e      	cmp	r3, #14
 80084b2:	d901      	bls.n	80084b8 <rfalIsoDepPPS+0x30>
    {
        return ERR_PARAM;
 80084b4:	2307      	movs	r3, #7
 80084b6:	e033      	b.n	8008520 <rfalIsoDepPPS+0x98>
    }
    
    /*******************************************************************************/
    /* Compose PPS Request */
    ppsReq.PPSS = (RFAL_ISODEP_PPS_SB | (DID & RFAL_ISODEP_PPS_SB_DID_MASK));
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	723b      	strb	r3, [r7, #8]
    ppsReq.PPS0 = RFAL_ISODEP_PPS_PPS0_PPS1_PRESENT;
 80084c8:	2311      	movs	r3, #17
 80084ca:	727b      	strb	r3, [r7, #9]
    ppsReq.PPS1 = (RFAL_ISODEP_PPS_PPS1 | ((((uint8_t)DSI<<RFAL_ISODEP_PPS_PPS1_DSI_SHIFT) | (uint8_t)DRI) & RFAL_ISODEP_PPS_PPS1_DXI_MASK)); 
 80084cc:	79bb      	ldrb	r3, [r7, #6]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	b25a      	sxtb	r2, r3
 80084d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b25b      	sxtb	r3, r3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	72bb      	strb	r3, [r7, #10]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&ppsReq, sizeof(rfalIsoDepPpsReq), (uint8_t*)ppsRes, sizeof(rfalIsoDepPpsRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ISODEP_T4T_FWT_ACTIVATION );
 80084e4:	f107 0008 	add.w	r0, r7, #8
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <rfalIsoDepPPS+0xa0>)
 80084ea:	9302      	str	r3, [sp, #8]
 80084ec:	2300      	movs	r3, #0
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	f107 030c 	add.w	r3, r7, #12
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	2301      	movs	r3, #1
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	2103      	movs	r1, #3
 80084fc:	f005 fed4 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 8008500:	4603      	mov	r3, r0
 8008502:	81fb      	strh	r3, [r7, #14]
    
    if( ret == ERR_NONE )
 8008504:	89fb      	ldrh	r3, [r7, #14]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <rfalIsoDepPPS+0x96>
    {
        /* Check for valid PPS Response   */
        if( (rcvLen != RFAL_ISODEP_PPS_RES_LEN) || (ppsRes->PPSS != ppsReq.PPSS) )
 800850a:	89bb      	ldrh	r3, [r7, #12]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d104      	bne.n	800851a <rfalIsoDepPPS+0x92>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	7a3b      	ldrb	r3, [r7, #8]
 8008516:	429a      	cmp	r2, r3
 8008518:	d001      	beq.n	800851e <rfalIsoDepPPS+0x96>
        {
            return ERR_PROTO;
 800851a:	230b      	movs	r3, #11
 800851c:	e000      	b.n	8008520 <rfalIsoDepPPS+0x98>
        }
    }
    return ret;
 800851e:	89fb      	ldrh	r3, [r7, #14]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	00046780 	.word	0x00046780

0800852c <rfalIsoDepATTRIB>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepATTRIB( const uint8_t* nfcid0, uint8_t PARAM1, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepFSxI FSDI, uint8_t PARAM3, uint8_t DID, const uint8_t* HLInfo, uint8_t HLInfoLen, uint32_t fwt, rfalIsoDepAttribRes *attribRes, uint8_t *attribResLen )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b092      	sub	sp, #72	; 0x48
 8008530:	af04      	add	r7, sp, #16
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	461a      	mov	r2, r3
 800853a:	4603      	mov	r3, r0
 800853c:	70fb      	strb	r3, [r7, #3]
 800853e:	460b      	mov	r3, r1
 8008540:	70bb      	strb	r3, [r7, #2]
 8008542:	4613      	mov	r3, r2
 8008544:	707b      	strb	r3, [r7, #1]
    uint16_t            rcvLen;
    ReturnCode          ret;
    rfalIsoDepAttribCmd attribCmd;
    
    
    if( (attribRes == NULL) || (attribResLen == NULL) || (DSI > RFAL_BR_848) || (DRI > RFAL_BR_848) || (DID > RFAL_ISODEP_DID_MAX) )
 8008546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00c      	beq.n	8008566 <rfalIsoDepATTRIB+0x3a>
 800854c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <rfalIsoDepATTRIB+0x3a>
 8008552:	78bb      	ldrb	r3, [r7, #2]
 8008554:	2b03      	cmp	r3, #3
 8008556:	d806      	bhi.n	8008566 <rfalIsoDepATTRIB+0x3a>
 8008558:	787b      	ldrb	r3, [r7, #1]
 800855a:	2b03      	cmp	r3, #3
 800855c:	d803      	bhi.n	8008566 <rfalIsoDepATTRIB+0x3a>
 800855e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008562:	2b0e      	cmp	r3, #14
 8008564:	d901      	bls.n	800856a <rfalIsoDepATTRIB+0x3e>
    {
        return ERR_NONE;
 8008566:	2300      	movs	r3, #0
 8008568:	e066      	b.n	8008638 <rfalIsoDepATTRIB+0x10c>
    }
    
    /*******************************************************************************/
    /* Compose ATTRIB command */
    attribCmd.cmd          = RFAL_ISODEP_CMD_ATTRIB;
 800856a:	231d      	movs	r3, #29
 800856c:	723b      	strb	r3, [r7, #8]
    attribCmd.Param.PARAM1 = PARAM1;
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	737b      	strb	r3, [r7, #13]
    attribCmd.Param.PARAM2 = ( ((((uint8_t)DSI<<RFAL_ISODEP_ATTRIB_PARAM2_DSI_SHIFT) | ((uint8_t)DRI<<RFAL_ISODEP_ATTRIB_PARAM2_DRI_SHIFT)) & RFAL_ISODEP_ATTRIB_PARAM2_DXI_MASK) | ((uint8_t)FSDI & RFAL_ISODEP_ATTRIB_PARAM2_FSDI_MASK) );
 8008572:	78bb      	ldrb	r3, [r7, #2]
 8008574:	019b      	lsls	r3, r3, #6
 8008576:	b25a      	sxtb	r2, r3
 8008578:	787b      	ldrb	r3, [r7, #1]
 800857a:	011b      	lsls	r3, r3, #4
 800857c:	b25b      	sxtb	r3, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	b25b      	sxtb	r3, r3
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f023 030f 	bic.w	r3, r3, #15
 8008588:	b2da      	uxtb	r2, r3
 800858a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	b2db      	uxtb	r3, r3
 8008594:	4313      	orrs	r3, r2
 8008596:	b2db      	uxtb	r3, r3
 8008598:	73bb      	strb	r3, [r7, #14]
    attribCmd.Param.PARAM3 = PARAM3;
 800859a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800859e:	73fb      	strb	r3, [r7, #15]
    attribCmd.Param.PARAM4 = (DID & RFAL_ISODEP_ATTRIB_PARAM4_DID_MASK);
 80085a0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	743b      	strb	r3, [r7, #16]
    ST_MEMCPY(attribCmd.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f8c7 3009 	str.w	r3, [r7, #9]
    
    /* Append the Higher layer Info if provided */
    if( (HLInfo != NULL) && (HLInfoLen > 0U) )
 80085b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d011      	beq.n	80085de <rfalIsoDepATTRIB+0xb2>
 80085ba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00d      	beq.n	80085de <rfalIsoDepATTRIB+0xb2>
    {
        ST_MEMCPY(attribCmd.HLInfo, HLInfo, MIN(HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN) );
 80085c2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	bf28      	it	cs
 80085ca:	2320      	movcs	r3, #32
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	3309      	adds	r3, #9
 80085d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80085d8:	4618      	mov	r0, r3
 80085da:	f007 fe58 	bl	801028e <memcpy>
    }
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&attribCmd, (RFAL_ISODEP_ATTRIB_HDR_LEN + MIN((uint16_t)HLInfoLen, RFAL_ISODEP_ATTRIB_HLINFO_LEN)), (uint8_t*)attribRes, sizeof(rfalIsoDepAttribRes), &rcvLen, RFAL_TXRX_FLAGS_DEFAULT, fwt );
 80085de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	bf28      	it	cs
 80085e6:	2320      	movcs	r3, #32
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3309      	adds	r3, #9
 80085ee:	b299      	uxth	r1, r3
 80085f0:	f107 0008 	add.w	r0, r7, #8
 80085f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	2300      	movs	r3, #0
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	2321      	movs	r3, #33	; 0x21
 8008604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008606:	f005 fe4f 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800860a:	4603      	mov	r3, r0
 800860c:	86fb      	strh	r3, [r7, #54]	; 0x36
       
    *attribResLen = (uint8_t)rcvLen;
 800860e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008610:	b2da      	uxtb	r2, r3
 8008612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008614:	701a      	strb	r2, [r3, #0]
    
    if( ret == ERR_NONE )
 8008616:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10c      	bne.n	8008636 <rfalIsoDepATTRIB+0x10a>
    {
        /* Check a for valid ATTRIB Response   Digital 1.1  15.6.2.1 */
        if( (rcvLen < RFAL_ISODEP_ATTRIB_RES_HDR_LEN) || ((attribRes->mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID) )
 800861c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800861e:	2b00      	cmp	r3, #0
 8008620:	d007      	beq.n	8008632 <rfalIsoDepATTRIB+0x106>
 8008622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 020f 	and.w	r2, r3, #15
 800862a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800862e:	429a      	cmp	r2, r3
 8008630:	d001      	beq.n	8008636 <rfalIsoDepATTRIB+0x10a>
        {
           return ERR_PROTO;
 8008632:	230b      	movs	r3, #11
 8008634:	e000      	b.n	8008638 <rfalIsoDepATTRIB+0x10c>
        }
    }
   
   return ret;
 8008636:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8008638:	4618      	mov	r0, r3
 800863a:	3738      	adds	r7, #56	; 0x38
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <rfalIsoDepPollAHandleActivation>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalIsoDepPollAHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, rfalIsoDepDevice *isoDepDev )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	603b      	str	r3, [r7, #0]
 8008648:	4603      	mov	r3, r0
 800864a:	71fb      	strb	r3, [r7, #7]
 800864c:	460b      	mov	r3, r1
 800864e:	71bb      	strb	r3, [r7, #6]
 8008650:	4613      	mov	r3, r2
 8008652:	717b      	strb	r3, [r7, #5]
    uint8_t          RATSretries;
    uint8_t          msgIt;
    ReturnCode       ret;
    rfalIsoDepPpsRes ppsRes;
    
    if( isoDepDev == NULL )
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <rfalIsoDepPollAHandleActivation+0x1e>
    {
        return ERR_PARAM;
 800865a:	2307      	movs	r3, #7
 800865c:	e143      	b.n	80088e6 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /* Enable EMD handling according   Digital 1.1  4.1.1.1 ; EMVCo 2.6  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800865e:	2002      	movs	r0, #2
 8008660:	f005 fb88 	bl	800dd74 <rfalSetErrorHandling>
    
    RATSretries = gIsoDep.maxRetriesRATS;
 8008664:	4ba2      	ldr	r3, [pc, #648]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8008666:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800866a:	73fb      	strb	r3, [r7, #15]
    /***************************************************************************/
    /* Send RATS                                                               */
    do
    {
        /* Digital 1.1 13.7.1.1 and ISO 14443-4 5.6.1.1 - Upon a failed RATS it may be retransmited [0,1] */
        ret = rfalIsoDepRATS( FSDI, DID, &isoDepDev->activation.A.Listener.ATS, &isoDepDev->activation.A.Listener.ATSLen );
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	3314      	adds	r3, #20
 8008672:	79b9      	ldrb	r1, [r7, #6]
 8008674:	79f8      	ldrb	r0, [r7, #7]
 8008676:	f7ff feb3 	bl	80083e0 <rfalIsoDepRATS>
 800867a:	4603      	mov	r3, r0
 800867c:	81bb      	strh	r3, [r7, #12]
        
        /* EMVCo 2.6  9.6.1.1 & 9.6.1.2  If a timeout error is detected retransmit, on transmission error abort */
        if( (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) && (ret != ERR_NONE) && (ret != ERR_TIMEOUT) )
 800867e:	4b9c      	ldr	r3, [pc, #624]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 8008680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008684:	2b01      	cmp	r3, #1
 8008686:	d105      	bne.n	8008694 <rfalIsoDepPollAHandleActivation+0x54>
 8008688:	89bb      	ldrh	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <rfalIsoDepPollAHandleActivation+0x54>
 800868e:	89bb      	ldrh	r3, [r7, #12]
 8008690:	2b04      	cmp	r3, #4
 8008692:	d10b      	bne.n	80086ac <rfalIsoDepPollAHandleActivation+0x6c>
        {
            break;
        }
        
        platformDelay(1);
 8008694:	2001      	movs	r0, #1
 8008696:	f7fa f9cf 	bl	8002a38 <HAL_Delay>
    }
    while( ((RATSretries--) != 0U) && (ret != ERR_NONE) );
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	1e5a      	subs	r2, r3, #1
 800869e:	73fa      	strb	r2, [r7, #15]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <rfalIsoDepPollAHandleActivation+0x6e>
 80086a4:	89bb      	ldrh	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e0      	bne.n	800866c <rfalIsoDepPollAHandleActivation+0x2c>
 80086aa:	e000      	b.n	80086ae <rfalIsoDepPollAHandleActivation+0x6e>
            break;
 80086ac:	bf00      	nop
    
    
    /* Switch between NFC Forum and ISO14443-4 behaviour #595
     *   ISO14443-4  5.6.1  If RATS fails, a Deactivation sequence should be performed as defined on clause 8  
     *   Activity 1.1  9.6  Device Deactivation Activity is to be only performed when there's an active device */
    if( ret != ERR_NONE )
 80086ae:	89bb      	ldrh	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <rfalIsoDepPollAHandleActivation+0x86>
    {
        if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_ISO )
 80086b4:	4b8e      	ldr	r3, [pc, #568]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80086b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d101      	bne.n	80086c2 <rfalIsoDepPollAHandleActivation+0x82>
        {
            rfalIsoDepDeselect();
 80086be:	f7ff fd99 	bl	80081f4 <rfalIsoDepDeselect>
        }
        return ret;
 80086c2:	89bb      	ldrh	r3, [r7, #12]
 80086c4:	e10f      	b.n	80088e6 <rfalIsoDepPollAHandleActivation+0x2a6>
    }
    
    /*******************************************************************************/
    /* Process ATS Response                                                        */
    isoDepDev->info.FWI  = RFAL_ISODEP_FWI_DEFAULT; /* Default value   EMVCo 2.6  5.7.2.6  */
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2204      	movs	r2, #4
 80086ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.SFGI = 0;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2200      	movs	r2, #0
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.MBL  = 0;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2200      	movs	r2, #0
 80086d8:	645a      	str	r2, [r3, #68]	; 0x44
    isoDepDev->info.DSI  = RFAL_BR_106;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    isoDepDev->info.DRI  = RFAL_BR_106;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    isoDepDev->info.FSxI = (uint8_t)RFAL_ISODEP_FSXI_32;     /* FSC default value is 32 bytes  ISO14443-A  5.2.3 */
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2202      	movs	r2, #2
 80086ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    
    /*******************************************************************************/
    /* Check for ATS optional fields                                               */
    if( isoDepDev->activation.A.Listener.ATS.TL > RFAL_ISODEP_ATS_MIN_LEN )
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d973      	bls.n	80087e2 <rfalIsoDepPollAHandleActivation+0x1a2>
    {
        msgIt = RFAL_ISODEP_ATS_MIN_LEN;
 80086fa:	2301      	movs	r3, #1
 80086fc:	73bb      	strb	r3, [r7, #14]
        
        /* Format byte T0 is optional, if present assign FSDI */
        isoDepDev->info.FSxI = (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_FSCI_MASK);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        /* T0 has already been processed, always the same position */
        msgIt++; 
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	3301      	adds	r3, #1
 8008712:	73bb      	strb	r3, [r7, #14]
        
        /* Check if TA is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK) != 0U )
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	785b      	ldrb	r3, [r3, #1]
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00d      	beq.n	800873c <rfalIsoDepPollAHandleActivation+0xfc>
        {
            rfalIsoDepCalcBitRate( maxBR, ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++], &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	1c59      	adds	r1, r3, #1
 8008726:	73b9      	strb	r1, [r7, #14]
 8008728:	4413      	add	r3, r2
 800872a:	7819      	ldrb	r1, [r3, #0]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	3349      	adds	r3, #73	; 0x49
 8008736:	7978      	ldrb	r0, [r7, #5]
 8008738:	f000 f9f8 	bl	8008b2c <rfalIsoDepCalcBitRate>
        }
        
        /* Check if TB is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK) != 0U )
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d018      	beq.n	800877a <rfalIsoDepPollAHandleActivation+0x13a>
        {
            isoDepDev->info.SFGI  = ((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++];
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	1c59      	adds	r1, r3, #1
 800874e:	73b9      	strb	r1, [r7, #14]
 8008750:	4413      	add	r3, r2
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
            isoDepDev->info.FWI   = (uint8_t)((isoDepDev->info.SFGI >> RFAL_ISODEP_ATS_TB_FWI_SHIFT) & RFAL_ISODEP_ATS_FWI_MASK);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            isoDepDev->info.SFGI &= RFAL_ISODEP_ATS_TB_SFGI_MASK;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	f003 020f 	and.w	r2, r3, #15
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
        }
        
        /* Check if TC is present */
        if( (isoDepDev->activation.A.Listener.ATS.T0 & RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK) != 0U )
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	785b      	ldrb	r3, [r3, #1]
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d02d      	beq.n	80087e2 <rfalIsoDepPollAHandleActivation+0x1a2>
        {
            /* Check for Protocol features support */
            /* Advanced protocol features defined on Digital 1.0 Table 69, removed after */
            isoDepDev->info.supAdFt = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_ADV_FEAT) != 0U)  ? true : false);
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	4413      	add	r3, r2
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	091b      	lsrs	r3, r3, #4
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf14      	ite	ne
 8008798:	2301      	movne	r3, #1
 800879a:	2300      	moveq	r3, #0
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            isoDepDev->info.supDID  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt]   & RFAL_ISODEP_ATS_TC_DID)      != 0U)  ? true : false);
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	4413      	add	r3, r2
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	085b      	lsrs	r3, r3, #1
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bf14      	ite	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	2300      	moveq	r3, #0
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            isoDepDev->info.supNAD  = (((((uint8_t*)&isoDepDev->activation.A.Listener.ATS)[msgIt++] & RFAL_ISODEP_ATS_TC_NAD)      != 0U)  ? true : false);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	1c59      	adds	r1, r3, #1
 80087c8:	73b9      	strb	r1, [r7, #14]
 80087ca:	4413      	add	r3, r2
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	2300      	moveq	r3, #0
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        }
    }
    
    isoDepDev->info.FSx  = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fd73 	bl	80082d4 <rfalIsoDepFSxI2FSx>
 80087ee:	4603      	mov	r3, r0
 80087f0:	461a      	mov	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    isoDepDev->info.SFGT = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fa38 	bl	8008c74 <rfalIsoDepSFGI2SFGT>
 8008804:	4602      	mov	r2, r0
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880e:	b29b      	uxth	r3, r3
 8008810:	4618      	mov	r0, r3
 8008812:	f7fa f8b7 	bl	8002984 <timerCalculateTimer>
 8008816:	4602      	mov	r2, r0
 8008818:	4b35      	ldr	r3, [pc, #212]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800881a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    isoDepDev->info.FWT  = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fd36 	bl	8008294 <rfalIsoDepFWI2FWT>
 8008828:	4602      	mov	r2, r0
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT = RFAL_ISODEP_DFWT_20;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008834:	635a      	str	r2, [r3, #52]	; 0x34
    
    isoDepDev->info.DID = ( (isoDepDev->info.supDID) ? DID : RFAL_ISODEP_NO_DID);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <rfalIsoDepPollAHandleActivation+0x204>
 8008840:	79ba      	ldrb	r2, [r7, #6]
 8008842:	e000      	b.n	8008846 <rfalIsoDepPollAHandleActivation+0x206>
 8008844:	2200      	movs	r2, #0
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.NAD = RFAL_ISODEP_NO_NAD;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	22ff      	movs	r2, #255	; 0xff
 8008850:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    
    
    /*******************************************************************************/
    /* If higher bit rates are supported by both devices, send PPS                 */
    if( (isoDepDev->info.DSI != RFAL_BR_106) || (isoDepDev->info.DRI != RFAL_BR_106) )
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <rfalIsoDepPollAHandleActivation+0x228>
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008864:	2b00      	cmp	r3, #0
 8008866:	d030      	beq.n	80088ca <rfalIsoDepPollAHandleActivation+0x28a>
    {
        /* Wait until SFGT has been fulfilled */
        while( !isoDepTimerisExpired( gIsoDep.SFGTTimer ) ) { /* MISRA 15.6: mandatory brackets */ };
 8008868:	bf00      	nop
 800886a:	4b21      	ldr	r3, [pc, #132]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 800886c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886e:	4618      	mov	r0, r3
 8008870:	f7fa f896 	bl	80029a0 <timerIsExpired>
 8008874:	4603      	mov	r3, r0
 8008876:	f083 0301 	eor.w	r3, r3, #1
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f4      	bne.n	800886a <rfalIsoDepPollAHandleActivation+0x22a>
        
        ret = rfalIsoDepPPS( isoDepDev->info.DID, isoDepDev->info.DSI, isoDepDev->info.DRI, &ppsRes );
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8008892:	f107 0308 	add.w	r3, r7, #8
 8008896:	f7ff fdf7 	bl	8008488 <rfalIsoDepPPS>
 800889a:	4603      	mov	r3, r0
 800889c:	81bb      	strh	r3, [r7, #12]
        
        if( ret == ERR_NONE )
 800889e:	89bb      	ldrh	r3, [r7, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <rfalIsoDepPollAHandleActivation+0x27a>
        {
            /* DSI code the divisor from PICC to PCD */
            /* DRI code the divisor from PCD to PICC */
            rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f004 ffd6 	bl	800d864 <rfalSetBitRate>
 80088b8:	e007      	b.n	80088ca <rfalIsoDepPollAHandleActivation+0x28a>
        }
        else
        {
            isoDepDev->info.DSI = RFAL_BR_106;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            isoDepDev->info.DRI = RFAL_BR_106;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        }
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80088d2:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fcfc 	bl	80082d4 <rfalIsoDepFSxI2FSx>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <rfalIsoDepPollAHandleActivation+0x2b0>)
 80088e2:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ERR_NONE;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000250 	.word	0x20000250

080088f4 <rfalIsoDepPollBHandleActivation>:

#if RFAL_FEATURE_NFCB

/*******************************************************************************/
ReturnCode rfalIsoDepPollBHandleActivation( rfalIsoDepFSxI FSDI, uint8_t DID, rfalBitRate maxBR, uint8_t PARAM1, const rfalNfcbListenDevice *nfcbDev, const uint8_t* HLInfo, uint8_t HLInfoLen, rfalIsoDepDevice *isoDepDev )
{
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	b08d      	sub	sp, #52	; 0x34
 80088f8:	af08      	add	r7, sp, #32
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	4611      	mov	r1, r2
 8008900:	461a      	mov	r2, r3
 8008902:	4623      	mov	r3, r4
 8008904:	71fb      	strb	r3, [r7, #7]
 8008906:	4603      	mov	r3, r0
 8008908:	71bb      	strb	r3, [r7, #6]
 800890a:	460b      	mov	r3, r1
 800890c:	717b      	strb	r3, [r7, #5]
 800890e:	4613      	mov	r3, r2
 8008910:	713b      	strb	r3, [r7, #4]
    ReturnCode ret;
    uint8_t    mbli;
    
    /***************************************************************************/
    /* Initialize ISO-DEP Device with info from SENSB_RES                      */
    isoDepDev->info.FWI     = ((nfcbDev->sensbRes.protInfo.FwiAdcFo >> RFAL_NFCB_SENSB_RES_FWI_SHIFT) & RFAL_NFCB_SENSB_RES_FWI_MASK);
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	7b1b      	ldrb	r3, [r3, #12]
 8008916:	091b      	lsrs	r3, r3, #4
 8008918:	b2da      	uxtb	r2, r3
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    isoDepDev->info.FWT     = rfalIsoDepFWI2FWT( isoDepDev->info.FWI );
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fcb4 	bl	8008294 <rfalIsoDepFWI2FWT>
 800892c:	4602      	mov	r2, r0
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	631a      	str	r2, [r3, #48]	; 0x30
    isoDepDev->info.dFWT    = RFAL_NFCB_DFWT;
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008938:	635a      	str	r2, [r3, #52]	; 0x34
    isoDepDev->info.SFGI    = (((uint32_t)nfcbDev->sensbRes.protInfo.SFGI >> RFAL_NFCB_SENSB_RES_SFGI_SHIFT) & RFAL_NFCB_SENSB_RES_SFGI_MASK);
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	7b5b      	ldrb	r3, [r3, #13]
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	b2db      	uxtb	r3, r3
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
    isoDepDev->info.SFGT    = rfalIsoDepSFGI2SFGT( (uint8_t)isoDepDev->info.SFGI );
 800894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f98f 	bl	8008c74 <rfalIsoDepSFGI2SFGT>
 8008956:	4602      	mov	r2, r0
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	63da      	str	r2, [r3, #60]	; 0x3c
    isoDepDev->info.FSxI    = ((nfcbDev->sensbRes.protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK);
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	7adb      	ldrb	r3, [r3, #11]
 8008960:	091b      	lsrs	r3, r3, #4
 8008962:	b2da      	uxtb	r2, r3
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    isoDepDev->info.FSx     = rfalIsoDepFSxI2FSx(isoDepDev->info.FSxI);
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008970:	4618      	mov	r0, r3
 8008972:	f7ff fcaf 	bl	80082d4 <rfalIsoDepFSxI2FSx>
 8008976:	4603      	mov	r3, r0
 8008978:	461a      	mov	r2, r3
 800897a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    isoDepDev->info.DID     = DID;
 8008980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008982:	79ba      	ldrb	r2, [r7, #6]
 8008984:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    isoDepDev->info.supDID  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_DID_MASK ) != 0U) ? true : false);
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	7b1b      	ldrb	r3, [r3, #12]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	bf14      	ite	ne
 8008994:	2301      	movne	r3, #1
 8008996:	2300      	moveq	r3, #0
 8008998:	b2da      	uxtb	r2, r3
 800899a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    isoDepDev->info.supNAD  = ((( nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_FO_NAD_MASK ) != 0U) ? true : false);
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	7b1b      	ldrb	r3, [r3, #12]
 80089a4:	085b      	lsrs	r3, r3, #1
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bf14      	ite	ne
 80089ae:	2301      	movne	r3, #1
 80089b0:	2300      	moveq	r3, #0
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    
    
    /* Check if DID requested is supported by PICC */
    if( (DID != RFAL_ISODEP_NO_DID) && (!isoDepDev->info.supDID) )
 80089ba:	79bb      	ldrb	r3, [r7, #6]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <rfalIsoDepPollBHandleActivation+0xe0>
 80089c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80089c6:	f083 0301 	eor.w	r3, r3, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <rfalIsoDepPollBHandleActivation+0xe0>
    {
        return ERR_PARAM;
 80089d0:	2307      	movs	r3, #7
 80089d2:	e0a4      	b.n	8008b1e <rfalIsoDepPollBHandleActivation+0x22a>
    }
    
    /* Enable EMD handling according   Digital 2.1  4.1.1.1 ; EMVCo 3.0  4.9.2 */
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 80089d4:	2002      	movs	r0, #2
 80089d6:	f005 f9cd 	bl	800dd74 <rfalSetErrorHandling>
    
    /***************************************************************************/
    /* Set FDT Poll to be used on upcoming communications                      */
    if( gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV )
 80089da:	4b53      	ldr	r3, [pc, #332]	; (8008b28 <rfalIsoDepPollBHandleActivation+0x234>)
 80089dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d104      	bne.n	80089ee <rfalIsoDepPollBHandleActivation+0xfa>
    {
        /* Disregard Minimum TR2 returned by PICC, always use FDTb MIN   EMVCo 3.0  6.3.2.10  */
        rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 80089e4:	f641 207c 	movw	r0, #6780	; 0x1a7c
 80089e8:	f005 f9d4 	bl	800dd94 <rfalSetFDTPoll>
 80089ec:	e00d      	b.n	8008a0a <rfalIsoDepPollBHandleActivation+0x116>
    }
    else
    {
        /* Apply minimum TR2 from SENSB_RES   Digital 2.1  7.6.2.23 */
        rfalSetFDTPoll( rfalNfcbTR2ToFDT(((nfcbDev->sensbRes.protInfo.FsciProType >>RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK)) );
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	7adb      	ldrb	r3, [r3, #11]
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4618      	mov	r0, r3
 80089fe:	f004 f937 	bl	800cc70 <rfalNfcbTR2ToFDT>
 8008a02:	4603      	mov	r3, r0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f005 f9c5 	bl	800dd94 <rfalSetFDTPoll>
    }
    
    
    /* Calculate max Bit Rate */
    rfalIsoDepCalcBitRate( maxBR, nfcbDev->sensbRes.protInfo.BRC, &isoDepDev->info.DSI, &isoDepDev->info.DRI );
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	7a99      	ldrb	r1, [r3, #10]
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	3349      	adds	r3, #73	; 0x49
 8008a18:	7978      	ldrb	r0, [r7, #5]
 8008a1a:	f000 f887 	bl	8008b2c <rfalIsoDepCalcBitRate>
    
    /***************************************************************************/
    /* Send ATTRIB Command                                                     */
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a20:	1c9d      	adds	r5, r3, #2
                           (((nfcbDev->sensbRes.protInfo.FwiAdcFo & RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK) != 0U) ? PARAM1 : RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT),
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	7b1b      	ldrb	r3, [r3, #12]
 8008a26:	f003 0308 	and.w	r3, r3, #8
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <rfalIsoDepPollBHandleActivation+0x13e>
 8008a2e:	793c      	ldrb	r4, [r7, #4]
 8008a30:	e000      	b.n	8008a34 <rfalIsoDepPollBHandleActivation+0x140>
 8008a32:	2400      	movs	r4, #0
 8008a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a36:	f893 6048 	ldrb.w	r6, [r3, #72]	; 0x48
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	f893 c049 	ldrb.w	ip, [r3, #73]	; 0x49
                           isoDepDev->info.DSI,
                           isoDepDev->info.DRI,
                           FSDI,
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8008a40:	4b39      	ldr	r3, [pc, #228]	; (8008b28 <rfalIsoDepPollBHandleActivation+0x234>)
 8008a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d005      	beq.n	8008a56 <rfalIsoDepPollBHandleActivation+0x162>
                           (gIsoDep.compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK : (nfcbDev->sensbRes.protInfo.FsciProType & ( (RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK<<RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT) | RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK)),  /* EMVCo 2.6 6.4.1.9 */
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	7adb      	ldrb	r3, [r3, #11]
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	e000      	b.n	8008a58 <rfalIsoDepPollBHandleActivation+0x164>
 8008a56:	2301      	movs	r3, #1
                           DID,
                           HLInfo,
                           HLInfoLen,
                           (isoDepDev->info.FWT + isoDepDev->info.dFWT),
 8008a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
    ret = rfalIsoDepATTRIB( (const uint8_t*)&nfcbDev->sensbRes.nfcid0,
 8008a60:	440a      	add	r2, r1
 8008a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008a66:	3021      	adds	r0, #33	; 0x21
 8008a68:	9007      	str	r0, [sp, #28]
 8008a6a:	9106      	str	r1, [sp, #24]
 8008a6c:	9205      	str	r2, [sp, #20]
 8008a6e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008a72:	9204      	str	r2, [sp, #16]
 8008a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a76:	9203      	str	r2, [sp, #12]
 8008a78:	79ba      	ldrb	r2, [r7, #6]
 8008a7a:	9202      	str	r2, [sp, #8]
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	4663      	mov	r3, ip
 8008a84:	4632      	mov	r2, r6
 8008a86:	4621      	mov	r1, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f7ff fd4f 	bl	800852c <rfalIsoDepATTRIB>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	81fb      	strh	r3, [r7, #14]
                           &isoDepDev->activation.B.Listener.ATTRIB_RESLen
                         );
    
    /***************************************************************************/
    /* Process ATTRIB Response                                                 */
    if( ret == ERR_NONE )
 8008a92:	89fb      	ldrh	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d12c      	bne.n	8008af2 <rfalIsoDepPollBHandleActivation+0x1fe>
    {
        /* Digital 1.1 14.6.2.3 - Check if received DID match */
        if( (isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid & RFAL_ISODEP_ATTRIB_RES_DID_MASK) != DID )
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	f003 020f 	and.w	r2, r3, #15
 8008aa0:	79bb      	ldrb	r3, [r7, #6]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d001      	beq.n	8008aaa <rfalIsoDepPollBHandleActivation+0x1b6>
        {
            return ERR_PROTO;
 8008aa6:	230b      	movs	r3, #11
 8008aa8:	e039      	b.n	8008b1e <rfalIsoDepPollBHandleActivation+0x22a>
        }
                
        /* Retrieve MBLI and calculate new FDS/MBL (Maximum Buffer Length) */
        mbli = ((isoDepDev->activation.B.Listener.ATTRIB_RES.mbliDid >> RFAL_ISODEP_ATTRIB_RES_MBLI_SHIFT) & RFAL_ISODEP_ATTRIB_RES_MBLI_MASK);
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	091b      	lsrs	r3, r3, #4
 8008ab0:	737b      	strb	r3, [r7, #13]
        if( mbli > 0U)
 8008ab2:	7b7b      	ldrb	r3, [r7, #13]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d008      	beq.n	8008aca <rfalIsoDepPollBHandleActivation+0x1d6>
        {
            /* Digital 1.1  14.6.2  Calculate Maximum Buffer Length MBL = FSC x 2^(MBLI-1) */
            isoDepDev->info.MBL = (isoDepDev->info.FSx * ((uint32_t)1U<<(mbli-1U)));
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8008abe:	461a      	mov	r2, r3
 8008ac0:	7b7b      	ldrb	r3, [r7, #13]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	409a      	lsls	r2, r3
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* DSI code the divisor from PICC to PCD */
        /* DRI code the divisor from PCD to PICC */
        rfalSetBitRate( isoDepDev->info.DRI, isoDepDev->info.DSI );
 8008aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008acc:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4610      	mov	r0, r2
 8008ada:	f004 fec3 	bl	800d864 <rfalSetBitRate>
        {
            /* REMARK: SoF EoF TR0 and TR1 are not passed on to RF layer */
        }
        
        /* Start the SFGT timer */
        isoDepTimerStart( gIsoDep.SFGTTimer, isoDepDev->info.SFGT );
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f9 ff4d 	bl	8002984 <timerCalculateTimer>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <rfalIsoDepPollBHandleActivation+0x234>)
 8008aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8008af0:	e007      	b.n	8008b02 <rfalIsoDepPollBHandleActivation+0x20e>
    }
    else
    {
        isoDepDev->info.DSI = RFAL_BR_106;
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        isoDepDev->info.DRI = RFAL_BR_106;
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
    
    /*******************************************************************************/
    /* Store already FS info,  rfalIsoDepGetMaxInfLen() may be called before setting TxRx params */
    gIsoDep.fsx    = isoDepDev->info.FSx;
 8008b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b04:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8008b08:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <rfalIsoDepPollBHandleActivation+0x234>)
 8008b0a:	821a      	strh	r2, [r3, #16]
    gIsoDep.ourFsx = rfalIsoDepFSxI2FSx( (uint8_t)FSDI );
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fbe0 	bl	80082d4 <rfalIsoDepFSxI2FSx>
 8008b14:	4603      	mov	r3, r0
 8008b16:	461a      	mov	r2, r3
 8008b18:	4b03      	ldr	r3, [pc, #12]	; (8008b28 <rfalIsoDepPollBHandleActivation+0x234>)
 8008b1a:	845a      	strh	r2, [r3, #34]	; 0x22
    
    return ret;
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000250 	.word	0x20000250

08008b2c <rfalIsoDepCalcBitRate>:
}


/*******************************************************************************/
static void rfalIsoDepCalcBitRate( rfalBitRate maxAllowedBR, uint8_t piccBRCapability, rfalBitRate *dsi, rfalBitRate *dri )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60ba      	str	r2, [r7, #8]
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	73bb      	strb	r3, [r7, #14]
    uint8_t     dsiMask;
    int8_t      i;
    bool        bitrateFound;
    rfalBitRate curMaxBR;
    
    curMaxBR = maxAllowedBR;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	757b      	strb	r3, [r7, #21]
    
    do
    {
        bitrateFound = true;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75bb      	strb	r3, [r7, #22]
        
        (*dsi) = RFAL_BR_106;
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
        (*dri) = RFAL_BR_106;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
        
        /* Digital 1.0  5.6.2.5 & 11.6.2.14: A received RFU value of b4 = 1b MUST be interpreted as if b7 to b1 ? 0000000b (only 106 kbits/s in both direction) */
        if( ((RFAL_ISODEP_BITRATE_RFU_MASK & piccBRCapability) != 0U) || (curMaxBR > RFAL_BR_848) )
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	f003 0308 	and.w	r3, r3, #8
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 8083 	bne.w	8008c66 <rfalIsoDepCalcBitRate+0x13a>
 8008b60:	7d7b      	ldrb	r3, [r7, #21]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d87f      	bhi.n	8008c66 <rfalIsoDepCalcBitRate+0x13a>
            return;
        }
        
        /***************************************************************************/
        /* Determine Listen->Poll bit rate */
        dsiMask = (piccBRCapability & RFAL_ISODEP_BSI_MASK);
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b6c:	753b      	strb	r3, [r7, #20]
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8008b6e:	2302      	movs	r3, #2
 8008b70:	75fb      	strb	r3, [r7, #23]
 8008b72:	e019      	b.n	8008ba8 <rfalIsoDepCalcBitRate+0x7c>
        {
            if (((dsiMask & (0x10U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8008b74:	7d3a      	ldrb	r2, [r7, #20]
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	408b      	lsls	r3, r1
 8008b7e:	4013      	ands	r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <rfalIsoDepCalcBitRate+0x70>
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	7d7b      	ldrb	r3, [r7, #21]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d806      	bhi.n	8008b9c <rfalIsoDepCalcBitRate+0x70>
            {
                uint8_t newdsi = ((uint8_t) i) + 1U;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	3301      	adds	r3, #1
 8008b92:	74fb      	strb	r3, [r7, #19]
                (*dsi) = (rfalBitRate)newdsi; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	7cfa      	ldrb	r2, [r7, #19]
 8008b98:	701a      	strb	r2, [r3, #0]
                break;
 8008b9a:	e009      	b.n	8008bb0 <rfalIsoDepCalcBitRate+0x84>
        for( i = 2; i >= 0; i-- )  // Check supported bit rate from the highest 
 8008b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	75fb      	strb	r3, [r7, #23]
 8008ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dae1      	bge.n	8008b74 <rfalIsoDepCalcBitRate+0x48>
            }
        }
        
        /***************************************************************************/
        /* Determine Poll->Listen bit rate */ 
        driMask = (piccBRCapability & RFAL_ISODEP_BRI_MASK);
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	74bb      	strb	r3, [r7, #18]
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 8008bb8:	2302      	movs	r3, #2
 8008bba:	75fb      	strb	r3, [r7, #23]
 8008bbc:	e018      	b.n	8008bf0 <rfalIsoDepCalcBitRate+0xc4>
        {
            if (((driMask & (0x01U << (uint8_t)i)) != 0U) && (((uint8_t)i+1U) <= (uint8_t)curMaxBR))
 8008bbe:	7cbb      	ldrb	r3, [r7, #18]
 8008bc0:	7dfa      	ldrb	r2, [r7, #23]
 8008bc2:	40d3      	lsrs	r3, r2
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <rfalIsoDepCalcBitRate+0xb8>
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	7d7b      	ldrb	r3, [r7, #21]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d806      	bhi.n	8008be4 <rfalIsoDepCalcBitRate+0xb8>
            {
                uint8_t newdri = ((uint8_t) i) + 1U;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	747b      	strb	r3, [r7, #17]
                (*dri) = (rfalBitRate)newdri; /* PRQA S 4342 # MISRA 10.5 - Layout of enum rfalBitRate and range of loop variable guarantee no invalid enum values to be created */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	7c7a      	ldrb	r2, [r7, #17]
 8008be0:	701a      	strb	r2, [r3, #0]
                break;
 8008be2:	e009      	b.n	8008bf8 <rfalIsoDepCalcBitRate+0xcc>
        for( i = 2; i >= 0; i-- )  /* Check supported bit rate from the highest */ 
 8008be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	75fb      	strb	r3, [r7, #23]
 8008bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dae2      	bge.n	8008bbe <rfalIsoDepCalcBitRate+0x92>
        
        /***************************************************************************/
        /* Check if different bit rate is supported */
        
        /* Digital 1.0 Table 67: if b8=1b, then only the same bit rate divisor for both directions is supported */
        if( (piccBRCapability & RFAL_ISODEP_SAME_BITRATE_MASK) != 0U )
 8008bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da2a      	bge.n	8008c56 <rfalIsoDepCalcBitRate+0x12a>
        {   
            (*dsi) = MIN((*dsi), (*dri));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	bf28      	it	cs
 8008c0c:	4613      	movcs	r3, r2
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	701a      	strb	r2, [r3, #0]
            (*dri) = (*dsi);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	701a      	strb	r2, [r3, #0]
            /* Check that the baudrate is supported */
            if(  (RFAL_BR_106 != (*dsi)) && ( !(((dsiMask & (0x10U << ((uint8_t)(*dsi) - 1U))) != 0U) && ((driMask & (0x01U << ((uint8_t)(*dri) - 1U))) != 0U)) )  )
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d018      	beq.n	8008c56 <rfalIsoDepCalcBitRate+0x12a>
 8008c24:	7d3a      	ldrb	r2, [r7, #20]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	2110      	movs	r1, #16
 8008c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c32:	4013      	ands	r3, r2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d009      	beq.n	8008c4c <rfalIsoDepCalcBitRate+0x120>
 8008c38:	7cba      	ldrb	r2, [r7, #18]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	fa22 f303 	lsr.w	r3, r2, r3
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <rfalIsoDepCalcBitRate+0x12a>
            {
                bitrateFound = false;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	75bb      	strb	r3, [r7, #22]
                curMaxBR     = (*dsi); /* set allowed bitrate to be lowest and determine bit rate again */
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	757b      	strb	r3, [r7, #21]
            }
        }
    } while (!(bitrateFound));
 8008c56:	7dbb      	ldrb	r3, [r7, #22]
 8008c58:	f083 0301 	eor.w	r3, r3, #1
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f47f af6f 	bne.w	8008b42 <rfalIsoDepCalcBitRate+0x16>
 8008c64:	e000      	b.n	8008c68 <rfalIsoDepCalcBitRate+0x13c>
            return;
 8008c66:	bf00      	nop
    
}
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <rfalIsoDepSFGI2SFGT>:

/*******************************************************************************/
static uint32_t rfalIsoDepSFGI2SFGT( uint8_t sfgi )
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]
    uint32_t sfgt;
    uint8_t tmpSFGI;
    
    tmpSFGI = sfgi;
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	72fb      	strb	r3, [r7, #11]
 
    if (tmpSFGI > ISODEP_SFGI_MAX)
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	2b0e      	cmp	r3, #14
 8008c86:	d901      	bls.n	8008c8c <rfalIsoDepSFGI2SFGT+0x18>
    {
        tmpSFGI = ISODEP_SFGI_MIN;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	72fb      	strb	r3, [r7, #11]
    }
        
    if (tmpSFGI != ISODEP_SFGI_MIN)
 8008c8c:	7afb      	ldrb	r3, [r7, #11]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <rfalIsoDepSFGI2SFGT+0x36>
    {
        /* If sfgi != 0 wait SFGT + dSFGT   Digital 1.1  13.8.2.1 */
        sfgt  = isoDepCalcSGFT(sfgi) + isoDepCalcdSGFT(sfgi);
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c98:	409a      	lsls	r2, r3
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e002      	b.n	8008cb0 <rfalIsoDepSFGI2SFGT+0x3c>
    }
    /* Otherwise use FDTPoll min Digital  1.1  13.8.2.3*/
    else
    {
        sfgt = RFAL_FDT_POLL_NFCA_POLLER;
 8008caa:	f641 237c 	movw	r3, #6780	; 0x1a7c
 8008cae:	60fb      	str	r3, [r7, #12]
    }

    /* Convert carrier cycles to milli seconds */
    return (rfalConv1fcToMs(sfgt) + 1U);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a05      	ldr	r2, [pc, #20]	; (8008cc8 <rfalIsoDepSFGI2SFGT+0x54>)
 8008cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb8:	0b1b      	lsrs	r3, r3, #12
 8008cba:	3301      	adds	r3, #1
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	4d542005 	.word	0x4d542005

08008ccc <rfalNfcInitialize>:
#endif /* RFAL_FEATURE_LISTEN_MODE*/


/*******************************************************************************/
ReturnCode rfalNfcInitialize( void )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
    ReturnCode err;
    
    gNfcDev.state = RFAL_NFC_STATE_NOTINIT;
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <rfalNfcInitialize+0x34>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	701a      	strb	r2, [r3, #0]
    
    rfalAnalogConfigInitialize();              /* Initialize RFAL's Analog Configs */
 8008cd8:	f7fe f954 	bl	8006f84 <rfalAnalogConfigInitialize>
    EXIT_ON_ERR( err, rfalInitialize() );      /* Initialize RFAL */
 8008cdc:	f004 fc14 	bl	800d508 <rfalInitialize>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	80fb      	strh	r3, [r7, #6]
 8008ce4:	88fb      	ldrh	r3, [r7, #6]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <rfalNfcInitialize+0x22>
 8008cea:	88fb      	ldrh	r3, [r7, #6]
 8008cec:	e003      	b.n	8008cf6 <rfalNfcInitialize+0x2a>

    gNfcDev.state = RFAL_NFC_STATE_IDLE;         /* Go to initialized */
 8008cee:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <rfalNfcInitialize+0x34>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	701a      	strb	r2, [r3, #0]
    return ERR_NONE;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200002d8 	.word	0x200002d8

08008d04 <rfalNfcDiscover>:

/*******************************************************************************/
ReturnCode rfalNfcDiscover( const rfalNfcDiscoverParam *disParams )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
    /* Check if initialization has been performed */
    if( gNfcDev.state != RFAL_NFC_STATE_IDLE )
 8008d0c:	4b45      	ldr	r3, [pc, #276]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d001      	beq.n	8008d18 <rfalNfcDiscover+0x14>
    {
        return ERR_WRONG_STATE;
 8008d14:	2321      	movs	r3, #33	; 0x21
 8008d16:	e081      	b.n	8008e1c <rfalNfcDiscover+0x118>
    }
    
    /* Check valid parameters */
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d025      	beq.n	8008d6a <rfalNfcDiscover+0x66>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	799b      	ldrb	r3, [r3, #6]
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d821      	bhi.n	8008d6a <rfalNfcDiscover+0x66>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	799b      	ldrb	r3, [r3, #6]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01d      	beq.n	8008d6a <rfalNfcDiscover+0x66>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	885b      	ldrh	r3, [r3, #2]
 8008d32:	f003 0304 	and.w	r3, r3, #4
    if( (disParams == NULL) || (disParams->devLimit > RFAL_NFC_MAX_DEVICES) || (disParams->devLimit == 0U)                                                ||
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d007      	beq.n	8008d4a <rfalNfcDiscover+0x46>
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	79db      	ldrb	r3, [r3, #7]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d003      	beq.n	8008d4a <rfalNfcDiscover+0x46>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	79db      	ldrb	r3, [r3, #7]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d10f      	bne.n	8008d6a <rfalNfcDiscover+0x66>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	885b      	ldrh	r3, [r3, #2]
 8008d4e:	f003 0310 	and.w	r3, r3, #16
        ( ((disParams->techs2Find & RFAL_NFC_POLL_TECH_F) != 0U)     && (disParams->nfcfBR != RFAL_BR_212) && (disParams->nfcfBR != RFAL_BR_424) )        ||
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <rfalNfcDiscover+0x5c>
        ( (((disParams->techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && (disParams->ap2pBR > RFAL_BR_424)) || (disParams->GBLen > RFAL_NFCDEP_GB_MAX_LEN)) )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d804      	bhi.n	8008d6a <rfalNfcDiscover+0x66>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d66:	2b30      	cmp	r3, #48	; 0x30
 8008d68:	d901      	bls.n	8008d6e <rfalNfcDiscover+0x6a>
    {
        return ERR_PARAM;
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	e056      	b.n	8008e1c <rfalNfcDiscover+0x118>
    {
        return ERR_DISABLED;   /*  PRQA S  2880 # MISRA 2.1 - Unreachable code due to configuration option being set/unset  */ 
    }
    
    /* Initialize context for discovery */
    gNfcDev.activeDev       = NULL;
 8008d6e:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	609a      	str	r2, [r3, #8]
    gNfcDev.techsFound      = RFAL_NFC_TECH_NONE;
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	805a      	strh	r2, [r3, #2]
    gNfcDev.devCnt          = 0;
 8008d7a:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
    gNfcDev.discRestart     = true;
 8008d82:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
    gNfcDev.disc            = *disParams;
 8008d8a:	4b26      	ldr	r3, [pc, #152]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	4611      	mov	r1, r2
 8008d92:	2284      	movs	r2, #132	; 0x84
 8008d94:	4618      	mov	r0, r3
 8008d96:	f007 fa7a 	bl	801028e <memcpy>
    
    
    /* Calculate Listen Mask */
    gNfcDev.lmMask  = 0U;
 8008d9a:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_A) != 0U) ? RFAL_LM_MASK_NFCA : 0U);
 8008da2:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008da4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8008da8:	4b1e      	ldr	r3, [pc, #120]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008daa:	89db      	ldrh	r3, [r3, #14]
 8008dac:	089b      	lsrs	r3, r3, #2
 8008dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db2:	4313      	orrs	r3, r2
 8008db4:	4a1b      	ldr	r2, [pc, #108]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008db6:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_B) != 0U) ? RFAL_LM_MASK_NFCB : 0U);
 8008dba:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008dbc:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8008dc0:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008dc2:	89db      	ldrh	r3, [r3, #14]
 8008dc4:	089b      	lsrs	r3, r3, #2
 8008dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008dce:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_F) != 0U) ? RFAL_LM_MASK_NFCF : 0U);
 8008dd2:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008dd4:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8008dd8:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008dda:	89db      	ldrh	r3, [r3, #14]
 8008ddc:	089b      	lsrs	r3, r3, #2
 8008dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008de2:	4313      	orrs	r3, r2
 8008de4:	4a0f      	ldr	r2, [pc, #60]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008de6:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    gNfcDev.lmMask |= (((gNfcDev.disc.techs2Find & RFAL_NFC_LISTEN_TECH_AP2P) != 0U) ? RFAL_LM_MASK_ACTIVE_P2P : 0U);
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008dec:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008df2:	89db      	ldrh	r3, [r3, #14]
 8008df4:	b21b      	sxth	r3, r3
 8008df6:	109b      	asrs	r3, r3, #2
 8008df8:	b21b      	sxth	r3, r3
 8008dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	4a08      	ldr	r2, [pc, #32]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008e02:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
    
#if !RFAL_FEATURE_LISTEN_MODE
    /* Check if Listen Mode is supported/Enabled */
    if( gNfcDev.lmMask != 0U )
 8008e06:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008e08:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <rfalNfcDiscover+0x110>
    {
        return ERR_NOTSUPP;
 8008e10:	2318      	movs	r3, #24
 8008e12:	e003      	b.n	8008e1c <rfalNfcDiscover+0x118>
    }
#endif
    
    gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <rfalNfcDiscover+0x120>)
 8008e16:	2202      	movs	r2, #2
 8008e18:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	200002d8 	.word	0x200002d8

08008e28 <rfalNfcDeactivate>:

/*******************************************************************************/
ReturnCode rfalNfcDeactivate( bool discovery )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	71fb      	strb	r3, [r7, #7]
    /* Check for valid state */
    if( gNfcDev.state <= RFAL_NFC_STATE_IDLE )
 8008e32:	4b0d      	ldr	r3, [pc, #52]	; (8008e68 <rfalNfcDeactivate+0x40>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d801      	bhi.n	8008e3e <rfalNfcDeactivate+0x16>
    {
        return ERR_WRONG_STATE;
 8008e3a:	2321      	movs	r3, #33	; 0x21
 8008e3c:	e010      	b.n	8008e60 <rfalNfcDeactivate+0x38>
    }
    
    /* Check if discovery is to continue afterwards */
    if( discovery == true )
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <rfalNfcDeactivate+0x2c>
    {
        /* If so let the state machine continue*/
        gNfcDev.discRestart = discovery;
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <rfalNfcDeactivate+0x40>)
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	f882 32f2 	strb.w	r3, [r2, #754]	; 0x2f2
        gNfcDev.state       = RFAL_NFC_STATE_DEACTIVATION;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <rfalNfcDeactivate+0x40>)
 8008e4e:	2222      	movs	r2, #34	; 0x22
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e004      	b.n	8008e5e <rfalNfcDeactivate+0x36>
    }
    else
    {
        /* Otherwise deactivate immediately and go to IDLE */
        rfalNfcDeactivation();
 8008e54:	f001 f96a 	bl	800a12c <rfalNfcDeactivation>
        gNfcDev.state = RFAL_NFC_STATE_IDLE;
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <rfalNfcDeactivate+0x40>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200002d8 	.word	0x200002d8

08008e6c <rfalNfcGetState>:
    return ERR_NONE;
}

/*******************************************************************************/
rfalNfcState rfalNfcGetState( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
    return gNfcDev.state;
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <rfalNfcGetState+0x14>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	200002d8 	.word	0x200002d8

08008e84 <rfalNfcGetActiveDevice>:
    return ERR_NONE;
}

/*******************************************************************************/
ReturnCode rfalNfcGetActiveDevice( rfalNfcDevice **dev )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
    /* Check for valid state */
    if( gNfcDev.state < RFAL_NFC_STATE_ACTIVATED )
 8008e8c:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <rfalNfcGetActiveDevice+0x4c>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b1d      	cmp	r3, #29
 8008e92:	d801      	bhi.n	8008e98 <rfalNfcGetActiveDevice+0x14>
    {
        return ERR_WRONG_STATE;
 8008e94:	2321      	movs	r3, #33	; 0x21
 8008e96:	e014      	b.n	8008ec2 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check valid parameter */
    if( dev == NULL )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <rfalNfcGetActiveDevice+0x1e>
    {
        return ERR_PARAM;
 8008e9e:	2307      	movs	r3, #7
 8008ea0:	e00f      	b.n	8008ec2 <rfalNfcGetActiveDevice+0x3e>
    }
    
    /* Check for valid state */
    if( (gNfcDev.devCnt == 0U) || (gNfcDev.activeDev == NULL)  )
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <rfalNfcGetActiveDevice+0x4c>)
 8008ea4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <rfalNfcGetActiveDevice+0x30>
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <rfalNfcGetActiveDevice+0x4c>)
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <rfalNfcGetActiveDevice+0x34>
    {
        return ERR_REQUEST;
 8008eb4:	2305      	movs	r3, #5
 8008eb6:	e004      	b.n	8008ec2 <rfalNfcGetActiveDevice+0x3e>
    }
    
    *dev = gNfcDev.activeDev;
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <rfalNfcGetActiveDevice+0x4c>)
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	601a      	str	r2, [r3, #0]
    return ERR_NONE;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	200002d8 	.word	0x200002d8

08008ed4 <rfalNfcWorker>:

/*******************************************************************************/
void rfalNfcWorker( void )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
    ReturnCode err;
   
    rfalWorker();                                                                     /* Execute RFAL process  */
 8008eda:	f005 fa4b 	bl	800e374 <rfalWorker>
    
    switch( gNfcDev.state )
 8008ede:	4bb6      	ldr	r3, [pc, #728]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b22      	cmp	r3, #34	; 0x22
 8008ee4:	f200 8153 	bhi.w	800918e <rfalNfcWorker+0x2ba>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <rfalNfcWorker+0x1c>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	0800918f 	.word	0x0800918f
 8008ef4:	0800918f 	.word	0x0800918f
 8008ef8:	08008f7d 	.word	0x08008f7d
 8008efc:	08008feb 	.word	0x08008feb
 8008f00:	0800918f 	.word	0x0800918f
 8008f04:	0800918f 	.word	0x0800918f
 8008f08:	0800918f 	.word	0x0800918f
 8008f0c:	0800918f 	.word	0x0800918f
 8008f10:	0800918f 	.word	0x0800918f
 8008f14:	0800918f 	.word	0x0800918f
 8008f18:	08009019 	.word	0x08009019
 8008f1c:	08009065 	.word	0x08009065
 8008f20:	0800918f 	.word	0x0800918f
 8008f24:	080090c1 	.word	0x080090c1
 8008f28:	0800918f 	.word	0x0800918f
 8008f2c:	0800918f 	.word	0x0800918f
 8008f30:	0800918f 	.word	0x0800918f
 8008f34:	0800918f 	.word	0x0800918f
 8008f38:	0800918f 	.word	0x0800918f
 8008f3c:	0800918f 	.word	0x0800918f
 8008f40:	08009171 	.word	0x08009171
 8008f44:	0800918f 	.word	0x0800918f
 8008f48:	0800918f 	.word	0x0800918f
 8008f4c:	0800918f 	.word	0x0800918f
 8008f50:	0800918f 	.word	0x0800918f
 8008f54:	0800918f 	.word	0x0800918f
 8008f58:	0800918f 	.word	0x0800918f
 8008f5c:	0800918f 	.word	0x0800918f
 8008f60:	0800918f 	.word	0x0800918f
 8008f64:	0800918f 	.word	0x0800918f
 8008f68:	0800918f 	.word	0x0800918f
 8008f6c:	080090f5 	.word	0x080090f5
 8008f70:	0800918f 	.word	0x0800918f
 8008f74:	0800918f 	.word	0x0800918f
 8008f78:	08009143 	.word	0x08009143
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_START_DISCOVERY:
        
            /* Initialize context for discovery cycle */
            gNfcDev.devCnt      = 0;
 8008f7c:	4b8e      	ldr	r3, [pc, #568]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            gNfcDev.selDevIdx   = 0;
 8008f84:	4b8c      	ldr	r3, [pc, #560]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	71da      	strb	r2, [r3, #7]
            gNfcDev.techsFound  = RFAL_NFC_TECH_NONE;
 8008f8a:	4b8b      	ldr	r3, [pc, #556]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	805a      	strh	r2, [r3, #2]
            gNfcDev.techs2do    = gNfcDev.disc.techs2Find;
 8008f90:	4b89      	ldr	r3, [pc, #548]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008f92:	89da      	ldrh	r2, [r3, #14]
 8008f94:	4b88      	ldr	r3, [pc, #544]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008f96:	809a      	strh	r2, [r3, #4]
            gNfcDev.state       = RFAL_NFC_STATE_POLL_TECHDETECT;
 8008f98:	4b87      	ldr	r3, [pc, #540]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008f9a:	220a      	movs	r2, #10
 8008f9c:	701a      	strb	r2, [r3, #0]
        
        #if RFAL_FEATURE_WAKEUP_MODE    
            /* Check if Low power Wake-Up is to be performed */
            if( gNfcDev.disc.wakeupEnabled )
 8008f9e:	4b86      	ldr	r3, [pc, #536]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008fa0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f000 80f4 	beq.w	8009192 <rfalNfcWorker+0x2be>
            {
                /* Initialize Low power Wake-up mode and wait */
                err = rfalWakeUpModeStart( (gNfcDev.disc.wakeupConfigDefault ? NULL : &gNfcDev.disc.wakeupConfig) );
 8008faa:	4b83      	ldr	r3, [pc, #524]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008fac:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <rfalNfcWorker+0xe4>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	e000      	b.n	8008fba <rfalNfcWorker+0xe6>
 8008fb8:	4b80      	ldr	r3, [pc, #512]	; (80091bc <rfalNfcWorker+0x2e8>)
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f006 fc6e 	bl	800f89c <rfalWakeUpModeStart>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	80fb      	strh	r3, [r7, #6]
                if( err == ERR_NONE )
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f040 80e3 	bne.w	8009192 <rfalNfcWorker+0x2be>
                {
                    gNfcDev.state = RFAL_NFC_STATE_WAKEUP_MODE;
 8008fcc:	4b7a      	ldr	r3, [pc, #488]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008fce:	2203      	movs	r2, #3
 8008fd0:	701a      	strb	r2, [r3, #0]
                    rfalNfcNfcNotify( gNfcDev.state );                                /* Notify caller that WU was started */
 8008fd2:	4b79      	ldr	r3, [pc, #484]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 80db 	beq.w	8009192 <rfalNfcWorker+0x2be>
 8008fdc:	4b76      	ldr	r3, [pc, #472]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe0:	4a75      	ldr	r2, [pc, #468]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
                }
            }
        #endif /* RFAL_FEATURE_WAKEUP_MODE */
            break;
 8008fe8:	e0d3      	b.n	8009192 <rfalNfcWorker+0x2be>
        /*******************************************************************************/
        case RFAL_NFC_STATE_WAKEUP_MODE:
            
    #if RFAL_FEATURE_WAKEUP_MODE
            /* Check if the Wake-up mode has woke */
            if( rfalWakeUpModeHasWoke() )
 8008fea:	f006 fe25 	bl	800fc38 <rfalWakeUpModeHasWoke>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80d0 	beq.w	8009196 <rfalNfcWorker+0x2c2>
            {
                rfalWakeUpModeStop();                                                 /* Disable Wake-up mode           */
 8008ff6:	f006 fe6f 	bl	800fcd8 <rfalWakeUpModeStop>
                gNfcDev.state = RFAL_NFC_STATE_POLL_TECHDETECT;                       /* Go to Technology detection     */
 8008ffa:	4b6f      	ldr	r3, [pc, #444]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8008ffc:	220a      	movs	r2, #10
 8008ffe:	701a      	strb	r2, [r3, #0]
                
                rfalNfcNfcNotify( gNfcDev.state );                                    /* Notify caller that WU has woke */
 8009000:	4b6d      	ldr	r3, [pc, #436]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 80c6 	beq.w	8009196 <rfalNfcWorker+0x2c2>
 800900a:	4b6b      	ldr	r3, [pc, #428]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800900c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800900e:	4a6a      	ldr	r2, [pc, #424]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009010:	7812      	ldrb	r2, [r2, #0]
 8009012:	4610      	mov	r0, r2
 8009014:	4798      	blx	r3
            }
    #endif /* RFAL_FEATURE_WAKEUP_MODE */

            break;
 8009016:	e0be      	b.n	8009196 <rfalNfcWorker+0x2c2>
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_TECHDETECT:
            
            /* Start total duration timer */
            gNfcDev.discTmr = (uint32_t)platformTimerCreate( gNfcDev.disc.totalDuration );
 8009018:	4b67      	ldr	r3, [pc, #412]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800901a:	8a1b      	ldrh	r3, [r3, #16]
 800901c:	4618      	mov	r0, r3
 800901e:	f7f9 fcb1 	bl	8002984 <timerCalculateTimer>
 8009022:	4602      	mov	r2, r0
 8009024:	4b64      	ldr	r3, [pc, #400]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009026:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
        
            err = rfalNfcPollTechDetetection();                                       /* Perform Technology Detection                         */
 800902a:	f000 f929 	bl	8009280 <rfalNfcPollTechDetetection>
 800902e:	4603      	mov	r3, r0
 8009030:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 8009032:	88fb      	ldrh	r3, [r7, #6]
 8009034:	2b02      	cmp	r3, #2
 8009036:	f000 80b0 	beq.w	800919a <rfalNfcWorker+0x2c6>
            {
                if( ( err != ERR_NONE) || (gNfcDev.techsFound == RFAL_NFC_TECH_NONE) )/* Check if any error occurred or no techs were found   */
 800903a:	88fb      	ldrh	r3, [r7, #6]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d103      	bne.n	8009048 <rfalNfcWorker+0x174>
 8009040:	4b5d      	ldr	r3, [pc, #372]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009042:	885b      	ldrh	r3, [r3, #2]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d105      	bne.n	8009054 <rfalNfcWorker+0x180>
                {
                    rfalFieldOff();
 8009048:	f004 ff5e 	bl	800df08 <rfalFieldOff>
                    gNfcDev.state = RFAL_NFC_STATE_LISTEN_TECHDETECT;                 /* Nothing found as poller, go to listener */
 800904c:	4b5a      	ldr	r3, [pc, #360]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800904e:	2214      	movs	r2, #20
 8009050:	701a      	strb	r2, [r3, #0]
                    break;
 8009052:	e0ad      	b.n	80091b0 <rfalNfcWorker+0x2dc>
                }
                
                gNfcDev.techs2do = gNfcDev.techsFound;                                /* Store the found technologies for collision resolution */
 8009054:	4b58      	ldr	r3, [pc, #352]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009056:	885a      	ldrh	r2, [r3, #2]
 8009058:	4b57      	ldr	r3, [pc, #348]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800905a:	809a      	strh	r2, [r3, #4]
                gNfcDev.state    = RFAL_NFC_STATE_POLL_COLAVOIDANCE;                  /* One or more devices found, go to Collision Avoidance  */
 800905c:	4b56      	ldr	r3, [pc, #344]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800905e:	220b      	movs	r2, #11
 8009060:	701a      	strb	r2, [r3, #0]
            }
            break;
 8009062:	e09a      	b.n	800919a <rfalNfcWorker+0x2c6>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_COLAVOIDANCE:
        
            err = rfalNfcPollCollResolution();                                        /* Resolve any eventual collision                       */
 8009064:	f000 fa9a 	bl	800959c <rfalNfcPollCollResolution>
 8009068:	4603      	mov	r3, r0
 800906a:	80fb      	strh	r3, [r7, #6]
            if( err != ERR_BUSY )                                                     /* Wait until all technologies are performed            */
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	2b02      	cmp	r3, #2
 8009070:	f000 8095 	beq.w	800919e <rfalNfcWorker+0x2ca>
            {
                if( (err != ERR_NONE) || (gNfcDev.devCnt == 0U) )                     /* Check if any error occurred or no devices were found */
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d104      	bne.n	8009084 <rfalNfcWorker+0x1b0>
 800907a:	4b4f      	ldr	r3, [pc, #316]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800907c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <rfalNfcWorker+0x1b8>
                {
                    gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;
 8009084:	4b4c      	ldr	r3, [pc, #304]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009086:	2222      	movs	r2, #34	; 0x22
 8009088:	701a      	strb	r2, [r3, #0]
                    break;                                                            /* Unable to retrieve any device, restart loop          */
 800908a:	e091      	b.n	80091b0 <rfalNfcWorker+0x2dc>
                }
                
                /* Check if more than one device has been found */
                if( gNfcDev.devCnt > 1U )
 800908c:	4b4a      	ldr	r3, [pc, #296]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800908e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009092:	2b01      	cmp	r3, #1
 8009094:	d90d      	bls.n	80090b2 <rfalNfcWorker+0x1de>
                {
                    /* If more than one device was found inform upper layer to choose which one to activate */
                    if( gNfcDev.disc.notifyCb != NULL )
 8009096:	4b48      	ldr	r3, [pc, #288]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909a:	2b00      	cmp	r3, #0
 800909c:	d009      	beq.n	80090b2 <rfalNfcWorker+0x1de>
                    {
                        gNfcDev.state = RFAL_NFC_STATE_POLL_SELECT;
 800909e:	4b46      	ldr	r3, [pc, #280]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090a0:	220c      	movs	r2, #12
 80090a2:	701a      	strb	r2, [r3, #0]
                        gNfcDev.disc.notifyCb( gNfcDev.state );
 80090a4:	4b44      	ldr	r3, [pc, #272]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090a8:	4a43      	ldr	r2, [pc, #268]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	4610      	mov	r0, r2
 80090ae:	4798      	blx	r3
                        break;
 80090b0:	e07e      	b.n	80091b0 <rfalNfcWorker+0x2dc>
                    }
                }
                
                /* If only one device or no callback has been set, activate the first device found */
                gNfcDev.selDevIdx = 0U;
 80090b2:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	71da      	strb	r2, [r3, #7]
                gNfcDev.state = RFAL_NFC_STATE_POLL_ACTIVATION;
 80090b8:	4b3f      	ldr	r3, [pc, #252]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090ba:	220d      	movs	r2, #13
 80090bc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80090be:	e06e      	b.n	800919e <rfalNfcWorker+0x2ca>
        
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_POLL_ACTIVATION:
            
            if( rfalNfcPollActivation( gNfcDev.selDevIdx ) != ERR_NONE )              /* Activate selected device           */
 80090c0:	4b3d      	ldr	r3, [pc, #244]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090c2:	79db      	ldrb	r3, [r3, #7]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 fd3b 	bl	8009b40 <rfalNfcPollActivation>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <rfalNfcWorker+0x204>
            {
                gNfcDev.state = RFAL_NFC_STATE_DEACTIVATION;                          /* If Activation failed, restart loop */
 80090d0:	4b39      	ldr	r3, [pc, #228]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090d2:	2222      	movs	r2, #34	; 0x22
 80090d4:	701a      	strb	r2, [r3, #0]
                break;
 80090d6:	e06b      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            }
            
            gNfcDev.state = RFAL_NFC_STATE_ACTIVATED;                                 /* Device has been properly activated */
 80090d8:	4b37      	ldr	r3, [pc, #220]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090da:	221e      	movs	r2, #30
 80090dc:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Inform upper layer that a device has been activated */
 80090de:	4b36      	ldr	r3, [pc, #216]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d05d      	beq.n	80091a2 <rfalNfcWorker+0x2ce>
 80090e6:	4b34      	ldr	r3, [pc, #208]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ea:	4a33      	ldr	r2, [pc, #204]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090ec:	7812      	ldrb	r2, [r2, #0]
 80090ee:	4610      	mov	r0, r2
 80090f0:	4798      	blx	r3
            break;
 80090f2:	e056      	b.n	80091a2 <rfalNfcWorker+0x2ce>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DATAEXCHANGE:

            rfalNfcDataExchangeGetStatus();                                           /* Run the internal state machine */
 80090f4:	f000 f864 	bl	80091c0 <rfalNfcDataExchangeGetStatus>
            
            if( gNfcDev.dataExErr != ERR_BUSY )                                       /* If Dataexchange has terminated */
 80090f8:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <rfalNfcWorker+0x2e4>)
 80090fa:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d00c      	beq.n	800911c <rfalNfcWorker+0x248>
            {
                gNfcDev.state = RFAL_NFC_STATE_DATAEXCHANGE_DONE;                     /* Go to done state               */
 8009102:	4b2d      	ldr	r3, [pc, #180]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009104:	2221      	movs	r2, #33	; 0x21
 8009106:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 8009108:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800910a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <rfalNfcWorker+0x248>
 8009110:	4b29      	ldr	r3, [pc, #164]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009114:	4a28      	ldr	r2, [pc, #160]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
            }
            if( gNfcDev.dataExErr == ERR_SLEEP_REQ )                                  /* Check if Listen mode has to go to Sleep */
 800911c:	4b26      	ldr	r3, [pc, #152]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800911e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8009122:	2b20      	cmp	r3, #32
 8009124:	d13f      	bne.n	80091a6 <rfalNfcWorker+0x2d2>
            {
                gNfcDev.state = RFAL_NFC_STATE_LISTEN_SLEEP;                          /* Go to Listen Sleep state       */
 8009126:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009128:	2217      	movs	r2, #23
 800912a:	701a      	strb	r2, [r3, #0]
                rfalNfcNfcNotify( gNfcDev.state );                                    /* And notify caller              */
 800912c:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800912e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009130:	2b00      	cmp	r3, #0
 8009132:	d038      	beq.n	80091a6 <rfalNfcWorker+0x2d2>
 8009134:	4b20      	ldr	r3, [pc, #128]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009138:	4a1f      	ldr	r2, [pc, #124]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800913a:	7812      	ldrb	r2, [r2, #0]
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
            }
            break;
 8009140:	e031      	b.n	80091a6 <rfalNfcWorker+0x2d2>
            
            
        /*******************************************************************************/
        case RFAL_NFC_STATE_DEACTIVATION:
            
            rfalNfcDeactivation();                                                    /* Deactivate current device */
 8009142:	f000 fff3 	bl	800a12c <rfalNfcDeactivation>
        
            gNfcDev.state = ((gNfcDev.discRestart) ? RFAL_NFC_STATE_START_DISCOVERY : RFAL_NFC_STATE_IDLE);
 8009146:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009148:	f893 32f2 	ldrb.w	r3, [r3, #754]	; 0x2f2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <rfalNfcWorker+0x280>
 8009150:	2202      	movs	r2, #2
 8009152:	e000      	b.n	8009156 <rfalNfcWorker+0x282>
 8009154:	2201      	movs	r2, #1
 8009156:	4b18      	ldr	r3, [pc, #96]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009158:	701a      	strb	r2, [r3, #0]
            rfalNfcNfcNotify( gNfcDev.state );                                        /* Notify caller             */
 800915a:	4b17      	ldr	r3, [pc, #92]	; (80091b8 <rfalNfcWorker+0x2e4>)
 800915c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915e:	2b00      	cmp	r3, #0
 8009160:	d023      	beq.n	80091aa <rfalNfcWorker+0x2d6>
 8009162:	4b15      	ldr	r3, [pc, #84]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009166:	4a14      	ldr	r2, [pc, #80]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009168:	7812      	ldrb	r2, [r2, #0]
 800916a:	4610      	mov	r0, r2
 800916c:	4798      	blx	r3
            break;
 800916e:	e01c      	b.n	80091aa <rfalNfcWorker+0x2d6>
        
        /*******************************************************************************/
        case RFAL_NFC_STATE_LISTEN_TECHDETECT:
            
            if( platformTimerIsExpired( gNfcDev.discTmr ) )
 8009170:	4b11      	ldr	r3, [pc, #68]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009172:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009176:	4618      	mov	r0, r3
 8009178:	f7f9 fc12 	bl	80029a0 <timerIsExpired>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d015      	beq.n	80091ae <rfalNfcWorker+0x2da>
            {
                #if RFAL_FEATURE_LISTEN_MODE
                    rfalListenStop();
                #else
                    rfalFieldOff();
 8009182:	f004 fec1 	bl	800df08 <rfalFieldOff>
                #endif /* RFAL_FEATURE_LISTEN_MODE */
                
                gNfcDev.state = RFAL_NFC_STATE_START_DISCOVERY;                       /* Restart the discovery loop */
 8009186:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <rfalNfcWorker+0x2e4>)
 8009188:	2202      	movs	r2, #2
 800918a:	701a      	strb	r2, [r3, #0]
                break;
 800918c:	e010      	b.n	80091b0 <rfalNfcWorker+0x2dc>
        /*******************************************************************************/
        case RFAL_NFC_STATE_ACTIVATED:
        case RFAL_NFC_STATE_POLL_SELECT:
        case RFAL_NFC_STATE_DATAEXCHANGE_DONE:
        default:
            return;
 800918e:	bf00      	nop
 8009190:	e00e      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 8009192:	bf00      	nop
 8009194:	e00c      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 8009196:	bf00      	nop
 8009198:	e00a      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 800919a:	bf00      	nop
 800919c:	e008      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 800919e:	bf00      	nop
 80091a0:	e006      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 80091a2:	bf00      	nop
 80091a4:	e004      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 80091a6:	bf00      	nop
 80091a8:	e002      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 80091aa:	bf00      	nop
 80091ac:	e000      	b.n	80091b0 <rfalNfcWorker+0x2dc>
            break;
 80091ae:	bf00      	nop
    }
}
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	200002d8 	.word	0x200002d8
 80091bc:	20000352 	.word	0x20000352

080091c0 <rfalNfcDataExchangeGetStatus>:
}


/*******************************************************************************/
ReturnCode rfalNfcDataExchangeGetStatus( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Check if it's the first frame received in Listen mode */
    if( gNfcDev.state == RFAL_NFC_STATE_ACTIVATED )
 80091c4:	4b2d      	ldr	r3, [pc, #180]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b1e      	cmp	r3, #30
 80091ca:	d114      	bne.n	80091f6 <rfalNfcDataExchangeGetStatus+0x36>
    {
        /* Continue data exchange as normal */
        gNfcDev.dataExErr = ERR_BUSY;
 80091cc:	4b2b      	ldr	r3, [pc, #172]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091ce:	2202      	movs	r2, #2
 80091d0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
        gNfcDev.state     = RFAL_NFC_STATE_DATAEXCHANGE;
 80091d4:	4b29      	ldr	r3, [pc, #164]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091d6:	221f      	movs	r2, #31
 80091d8:	701a      	strb	r2, [r3, #0]
        
        /* Check if we performing in T3T CE */
        if( (gNfcDev.activeDev->type == RFAL_NFC_POLL_TYPE_NFCF) && (gNfcDev.activeDev->rfInterface == RFAL_NFC_INTERFACE_RF) )
 80091da:	4b28      	ldr	r3, [pc, #160]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b0c      	cmp	r3, #12
 80091e2:	d108      	bne.n	80091f6 <rfalNfcDataExchangeGetStatus+0x36>
 80091e4:	4b25      	ldr	r3, [pc, #148]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	7f5b      	ldrb	r3, [r3, #29]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d103      	bne.n	80091f6 <rfalNfcDataExchangeGetStatus+0x36>
        {
            /* The first frame has been retrieved by rfalListenMode, flag data immediately                  */
            /* Can only call rfalGetTransceiveStatus() after starting a transceive with rfalStartTransceive */
            gNfcDev.dataExErr = ERR_NONE;
 80091ee:	4b23      	ldr	r3, [pc, #140]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    }
    
    
    /*******************************************************************************/
    /* Check if we are in we have been placed to sleep, and return last error     */
    if( gNfcDev.state == RFAL_NFC_STATE_LISTEN_SLEEP )
 80091f6:	4b21      	ldr	r3, [pc, #132]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b17      	cmp	r3, #23
 80091fc:	d103      	bne.n	8009206 <rfalNfcDataExchangeGetStatus+0x46>
    {
        return gNfcDev.dataExErr;                                /* ERR_SLEEP_REQ */
 80091fe:	4b1f      	ldr	r3, [pc, #124]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009200:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8009204:	e038      	b.n	8009278 <rfalNfcDataExchangeGetStatus+0xb8>
    }

    
    /*******************************************************************************/    
    /* Check if Data exchange has been started */
    if( (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE) && (gNfcDev.state != RFAL_NFC_STATE_DATAEXCHANGE_DONE)  )
 8009206:	4b1d      	ldr	r3, [pc, #116]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b1f      	cmp	r3, #31
 800920c:	d005      	beq.n	800921a <rfalNfcDataExchangeGetStatus+0x5a>
 800920e:	4b1b      	ldr	r3, [pc, #108]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b21      	cmp	r3, #33	; 0x21
 8009214:	d001      	beq.n	800921a <rfalNfcDataExchangeGetStatus+0x5a>
    {
        return ERR_WRONG_STATE;
 8009216:	2321      	movs	r3, #33	; 0x21
 8009218:	e02e      	b.n	8009278 <rfalNfcDataExchangeGetStatus+0xb8>
    }
    
    /* Check if Data exchange is still ongoing */
    if( gNfcDev.dataExErr == ERR_BUSY )
 800921a:	4b18      	ldr	r3, [pc, #96]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 800921c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8009220:	2b02      	cmp	r3, #2
 8009222:	d125      	bne.n	8009270 <rfalNfcDataExchangeGetStatus+0xb0>
    {
        switch( gNfcDev.activeDev->rfInterface )
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	7f5b      	ldrb	r3, [r3, #29]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d00b      	beq.n	8009246 <rfalNfcDataExchangeGetStatus+0x86>
 800922e:	2b02      	cmp	r3, #2
 8009230:	d011      	beq.n	8009256 <rfalNfcDataExchangeGetStatus+0x96>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d117      	bne.n	8009266 <rfalNfcDataExchangeGetStatus+0xa6>
        {
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_RF:
                gNfcDev.dataExErr = rfalGetTransceiveStatus();
 8009236:	f005 f88b 	bl	800e350 <rfalGetTransceiveStatus>
 800923a:	4603      	mov	r3, r0
 800923c:	461a      	mov	r2, r3
 800923e:	4b0f      	ldr	r3, [pc, #60]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009240:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8009244:	e015      	b.n	8009272 <rfalNfcDataExchangeGetStatus+0xb2>
        
        #if RFAL_FEATURE_ISO_DEP
            /*******************************************************************************/
            case RFAL_NFC_INTERFACE_ISODEP:
                gNfcDev.dataExErr = rfalIsoDepGetTransceiveStatus();
 8009246:	f7ff f8b5 	bl	80083b4 <rfalIsoDepGetTransceiveStatus>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	4b0b      	ldr	r3, [pc, #44]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009250:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8009254:	e00d      	b.n	8009272 <rfalNfcDataExchangeGetStatus+0xb2>
        #endif /* RFAL_FEATURE_ISO_DEP */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                gNfcDev.dataExErr = rfalNfcDepGetTransceiveStatus();
 8009256:	f002 fe1f 	bl	800be98 <rfalNfcDepGetTransceiveStatus>
 800925a:	4603      	mov	r3, r0
 800925c:	461a      	mov	r2, r3
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009260:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 8009264:	e005      	b.n	8009272 <rfalNfcDataExchangeGetStatus+0xb2>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            /*******************************************************************************/
            default:
                gNfcDev.dataExErr = ERR_PARAM;
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009268:	2207      	movs	r2, #7
 800926a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
                break;
 800926e:	e000      	b.n	8009272 <rfalNfcDataExchangeGetStatus+0xb2>
            /* If set Sleep was succesfull keep restore the Sleep request signal */
            gNfcDev.dataExErr = ERR_SLEEP_REQ;
        }
    #endif /* RFAL_FEATURE_LISTEN_MODE */
        
    }
 8009270:	bf00      	nop
    
    return gNfcDev.dataExErr;
 8009272:	4b02      	ldr	r3, [pc, #8]	; (800927c <rfalNfcDataExchangeGetStatus+0xbc>)
 8009274:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
}
 8009278:	4618      	mov	r0, r3
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200002d8 	.word	0x200002d8

08009280 <rfalNfcPollTechDetetection>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollTechDetetection( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08a      	sub	sp, #40	; 0x28
 8009284:	af00      	add	r7, sp, #0
    ReturnCode           err;
    
    err = ERR_NONE;
 8009286:	2300      	movs	r3, #0
 8009288:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    
    /*******************************************************************************/
    /* AP2P Technology Detection                                                   */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_AP2P) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_AP2P) != 0U) )
 800928a:	4ba3      	ldr	r3, [pc, #652]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800928c:	89db      	ldrh	r3, [r3, #14]
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	2b00      	cmp	r3, #0
 8009294:	d05a      	beq.n	800934c <rfalNfcPollTechDetetection+0xcc>
 8009296:	4ba0      	ldr	r3, [pc, #640]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d054      	beq.n	800934c <rfalNfcPollTechDetetection+0xcc>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_AP2P;
 80092a2:	4b9d      	ldr	r3, [pc, #628]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80092a4:	889b      	ldrh	r3, [r3, #4]
 80092a6:	f023 0310 	bic.w	r3, r3, #16
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	4b9a      	ldr	r3, [pc, #616]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80092ae:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFC_DEP
    
        EXIT_ON_ERR( err, rfalSetMode( RFAL_MODE_POLL_ACTIVE_P2P, gNfcDev.disc.ap2pBR, gNfcDev.disc.ap2pBR ) );
 80092b0:	4b99      	ldr	r3, [pc, #612]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80092b2:	f893 104f 	ldrb.w	r1, [r3, #79]	; 0x4f
 80092b6:	4b98      	ldr	r3, [pc, #608]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80092b8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80092bc:	461a      	mov	r2, r3
 80092be:	2009      	movs	r0, #9
 80092c0:	f004 f9be 	bl	800d640 <rfalSetMode>
 80092c4:	4603      	mov	r3, r0
 80092c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80092c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <rfalNfcPollTechDetetection+0x52>
 80092ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092d0:	e15d      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
        rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 80092d2:	2001      	movs	r0, #1
 80092d4:	f004 fd4e 	bl	800dd74 <rfalSetErrorHandling>
        rfalSetFDTListen( RFAL_FDT_LISTEN_AP2P_POLLER );
 80092d8:	2040      	movs	r0, #64	; 0x40
 80092da:	f004 fd71 	bl	800ddc0 <rfalSetFDTListen>
        rfalSetFDTPoll( RFAL_TIMING_NONE );
 80092de:	2000      	movs	r0, #0
 80092e0:	f004 fd58 	bl	800dd94 <rfalSetFDTPoll>
        rfalSetGT( RFAL_GT_AP2P_ADJUSTED );
 80092e4:	488d      	ldr	r0, [pc, #564]	; (800951c <rfalNfcPollTechDetetection+0x29c>)
 80092e6:	f004 fd7f 	bl	800dde8 <rfalSetGT>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                     /* Turns the Field On and starts GT timer */
 80092ea:	f004 fdab 	bl	800de44 <rfalFieldOnAndStartGT>
 80092ee:	4603      	mov	r3, r0
 80092f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80092f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <rfalNfcPollTechDetetection+0x7c>
 80092f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092fa:	e148      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalNfcNfcDepActivate( gNfcDev.devList, RFAL_NFCDEP_COMM_ACTIVE, NULL, 0 );/* Poll for NFC-A devices */
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	2101      	movs	r1, #1
 8009302:	4887      	ldr	r0, [pc, #540]	; (8009520 <rfalNfcPollTechDetetection+0x2a0>)
 8009304:	f000 fec8 	bl	800a098 <rfalNfcNfcDepActivate>
 8009308:	4603      	mov	r3, r0
 800930a:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 800930c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800930e:	2b00      	cmp	r3, #0
 8009310:	d118      	bne.n	8009344 <rfalNfcPollTechDetetection+0xc4>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_AP2P;
 8009312:	4b81      	ldr	r3, [pc, #516]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009314:	885b      	ldrh	r3, [r3, #2]
 8009316:	f043 0310 	orr.w	r3, r3, #16
 800931a:	b29a      	uxth	r2, r3
 800931c:	4b7e      	ldr	r3, [pc, #504]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800931e:	805a      	strh	r2, [r3, #2]
            
            gNfcDev.devList->type        = RFAL_NFC_LISTEN_TYPE_AP2P;
 8009320:	4b7d      	ldr	r3, [pc, #500]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009322:	2205      	movs	r2, #5
 8009324:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            gNfcDev.devList->rfInterface = RFAL_NFC_INTERFACE_NFCDEP;
 8009328:	4b7b      	ldr	r3, [pc, #492]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800932a:	2202      	movs	r2, #2
 800932c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
            gNfcDev.devCnt++;
 8009330:	4b79      	ldr	r3, [pc, #484]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009332:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009336:	3301      	adds	r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	4b77      	ldr	r3, [pc, #476]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800933c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            
            return ERR_NONE;
 8009340:	2300      	movs	r3, #0
 8009342:	e124      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
        }
        
        rfalFieldOff();
 8009344:	f004 fde0 	bl	800df08 <rfalFieldOff>
        return ERR_BUSY;
 8009348:	2302      	movs	r3, #2
 800934a:	e120      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-A Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )
 800934c:	4b72      	ldr	r3, [pc, #456]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800934e:	89db      	ldrh	r3, [r3, #14]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d034      	beq.n	80093c2 <rfalNfcPollTechDetetection+0x142>
 8009358:	4b6f      	ldr	r3, [pc, #444]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800935a:	889b      	ldrh	r3, [r3, #4]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d02e      	beq.n	80093c2 <rfalNfcPollTechDetetection+0x142>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 8009364:	4b6c      	ldr	r3, [pc, #432]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009366:	889b      	ldrh	r3, [r3, #4]
 8009368:	f023 0301 	bic.w	r3, r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	4b6a      	ldr	r3, [pc, #424]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009370:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCA
        {
            rfalNfcaSensRes sensRes;            
        
            EXIT_ON_ERR( err, rfalNfcaPollerInitialize() );                            /* Initialize RFAL for NFC-A */
 8009372:	f002 fdc1 	bl	800bef8 <rfalNfcaPollerInitialize>
 8009376:	4603      	mov	r3, r0
 8009378:	84fb      	strh	r3, [r7, #38]	; 0x26
 800937a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <rfalNfcPollTechDetetection+0x104>
 8009380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009382:	e104      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                               /* Turns the Field On and starts GT timer */
 8009384:	f004 fd5e 	bl	800de44 <rfalFieldOnAndStartGT>
 8009388:	4603      	mov	r3, r0
 800938a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800938c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <rfalNfcPollTechDetetection+0x116>
 8009392:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009394:	e0fb      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
                                                                                       
            err = rfalNfcaPollerTechnologyDetection( gNfcDev.disc.compMode, &sensRes );/* Poll for NFC-A devices */
 8009396:	4b60      	ldr	r3, [pc, #384]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009398:	7b1b      	ldrb	r3, [r3, #12]
 800939a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f002 fdf6 	bl	800bf92 <rfalNfcaPollerTechnologyDetection>
 80093a6:	4603      	mov	r3, r0
 80093a8:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 80093aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d106      	bne.n	80093be <rfalNfcPollTechDetetection+0x13e>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_A;
 80093b0:	4b59      	ldr	r3, [pc, #356]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80093b2:	885b      	ldrh	r3, [r3, #2]
 80093b4:	f043 0301 	orr.w	r3, r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	4b57      	ldr	r3, [pc, #348]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80093bc:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 80093be:	2302      	movs	r3, #2
 80093c0:	e0e5      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-B Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )
 80093c2:	4b55      	ldr	r3, [pc, #340]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80093c4:	89db      	ldrh	r3, [r3, #14]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d035      	beq.n	800943a <rfalNfcPollTechDetetection+0x1ba>
 80093ce:	4b52      	ldr	r3, [pc, #328]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80093d0:	889b      	ldrh	r3, [r3, #4]
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d02f      	beq.n	800943a <rfalNfcPollTechDetetection+0x1ba>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 80093da:	4b4f      	ldr	r3, [pc, #316]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80093dc:	889b      	ldrh	r3, [r3, #4]
 80093de:	f023 0302 	bic.w	r3, r3, #2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	4b4c      	ldr	r3, [pc, #304]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80093e6:	809a      	strh	r2, [r3, #4]
    #if RFAL_FEATURE_NFCB
        {
            rfalNfcbSensbRes sensbRes;
            uint8_t          sensbResLen;            
        
            EXIT_ON_ERR( err, rfalNfcbPollerInitialize() );                           /* Initialize RFAL for NFC-B */
 80093e8:	f003 f98c 	bl	800c704 <rfalNfcbPollerInitialize>
 80093ec:	4603      	mov	r3, r0
 80093ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80093f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <rfalNfcPollTechDetetection+0x17a>
 80093f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093f8:	e0c9      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                              /* As field is already On only starts GT timer */
 80093fa:	f004 fd23 	bl	800de44 <rfalFieldOnAndStartGT>
 80093fe:	4603      	mov	r3, r0
 8009400:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <rfalNfcPollTechDetetection+0x18c>
 8009408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800940a:	e0c0      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
                                                                                                       
            err = rfalNfcbPollerTechnologyDetection( gNfcDev.disc.compMode, &sensbRes, &sensbResLen ); /* Poll for NFC-B devices */
 800940c:	4b42      	ldr	r3, [pc, #264]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800940e:	7b1b      	ldrb	r3, [r3, #12]
 8009410:	f107 0213 	add.w	r2, r7, #19
 8009414:	f107 0114 	add.w	r1, r7, #20
 8009418:	4618      	mov	r0, r3
 800941a:	f003 fa85 	bl	800c928 <rfalNfcbPollerTechnologyDetection>
 800941e:	4603      	mov	r3, r0
 8009420:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8009422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009424:	2b00      	cmp	r3, #0
 8009426:	d106      	bne.n	8009436 <rfalNfcPollTechDetetection+0x1b6>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_B;
 8009428:	4b3b      	ldr	r3, [pc, #236]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	f043 0302 	orr.w	r3, r3, #2
 8009430:	b29a      	uxth	r2, r3
 8009432:	4b39      	ldr	r3, [pc, #228]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009434:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8009436:	2302      	movs	r3, #2
 8009438:	e0a9      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
    }
    
    /*******************************************************************************/
    /* Passive NFC-F Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )
 800943a:	4b37      	ldr	r3, [pc, #220]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800943c:	89db      	ldrh	r3, [r3, #14]
 800943e:	f003 0304 	and.w	r3, r3, #4
 8009442:	2b00      	cmp	r3, #0
 8009444:	d031      	beq.n	80094aa <rfalNfcPollTechDetetection+0x22a>
 8009446:	4b34      	ldr	r3, [pc, #208]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009448:	889b      	ldrh	r3, [r3, #4]
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	2b00      	cmp	r3, #0
 8009450:	d02b      	beq.n	80094aa <rfalNfcPollTechDetetection+0x22a>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8009452:	4b31      	ldr	r3, [pc, #196]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009454:	889b      	ldrh	r3, [r3, #4]
 8009456:	f023 0304 	bic.w	r3, r3, #4
 800945a:	b29a      	uxth	r2, r3
 800945c:	4b2e      	ldr	r3, [pc, #184]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800945e:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCF
    
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ) );          /* Initialize RFAL for NFC-F */
 8009460:	4b2d      	ldr	r3, [pc, #180]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009462:	7cdb      	ldrb	r3, [r3, #19]
 8009464:	4618      	mov	r0, r3
 8009466:	f003 fd23 	bl	800ceb0 <rfalNfcfPollerInitialize>
 800946a:	4603      	mov	r3, r0
 800946c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800946e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <rfalNfcPollTechDetetection+0x1f8>
 8009474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009476:	e08a      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 8009478:	f004 fce4 	bl	800de44 <rfalFieldOnAndStartGT>
 800947c:	4603      	mov	r3, r0
 800947e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <rfalNfcPollTechDetetection+0x20a>
 8009486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009488:	e081      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
                                                                                      
        err = rfalNfcfPollerCheckPresence();                                          /* Poll for NFC-F devices */
 800948a:	f003 fd5f 	bl	800cf4c <rfalNfcfPollerCheckPresence>
 800948e:	4603      	mov	r3, r0
 8009490:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8009492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <rfalNfcPollTechDetetection+0x226>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_F;
 8009498:	4b1f      	ldr	r3, [pc, #124]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 800949a:	885b      	ldrh	r3, [r3, #2]
 800949c:	f043 0304 	orr.w	r3, r3, #4
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80094a4:	805a      	strh	r2, [r3, #2]
        }
        
        return ERR_BUSY;
 80094a6:	2302      	movs	r3, #2
 80094a8:	e071      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
    
    
    /*******************************************************************************/
    /* Passive NFC-V Technology Detection                                          */
    /*******************************************************************************/
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )
 80094aa:	4b1b      	ldr	r3, [pc, #108]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80094ac:	89db      	ldrh	r3, [r3, #14]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d036      	beq.n	8009524 <rfalNfcPollTechDetetection+0x2a4>
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80094b8:	889b      	ldrh	r3, [r3, #4]
 80094ba:	f003 0308 	and.w	r3, r3, #8
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d030      	beq.n	8009524 <rfalNfcPollTechDetetection+0x2a4>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80094c4:	889b      	ldrh	r3, [r3, #4]
 80094c6:	f023 0308 	bic.w	r3, r3, #8
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	4b12      	ldr	r3, [pc, #72]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 80094ce:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_NFCV
        {
            rfalNfcvInventoryRes invRes;
        
            EXIT_ON_ERR( err, rfalNfcvPollerInitialize() );                               /* Initialize RFAL for NFC-V */
 80094d0:	f003 fdcc 	bl	800d06c <rfalNfcvPollerInitialize>
 80094d4:	4603      	mov	r3, r0
 80094d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80094d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <rfalNfcPollTechDetetection+0x262>
 80094de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094e0:	e055      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
            EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 80094e2:	f004 fcaf 	bl	800de44 <rfalFieldOnAndStartGT>
 80094e6:	4603      	mov	r3, r0
 80094e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80094ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <rfalNfcPollTechDetetection+0x274>
 80094f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094f2:	e04c      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
                                                                                          
            err = rfalNfcvPollerCheckPresence( &invRes );                                 /* Poll for NFC-V devices */
 80094f4:	1d3b      	adds	r3, r7, #4
 80094f6:	4618      	mov	r0, r3
 80094f8:	f003 fddc 	bl	800d0b4 <rfalNfcvPollerCheckPresence>
 80094fc:	4603      	mov	r3, r0
 80094fe:	84fb      	strh	r3, [r7, #38]	; 0x26
            if( err == ERR_NONE )
 8009500:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <rfalNfcPollTechDetetection+0x294>
            {
                gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_V;
 8009506:	4b04      	ldr	r3, [pc, #16]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009508:	885b      	ldrh	r3, [r3, #2]
 800950a:	f043 0308 	orr.w	r3, r3, #8
 800950e:	b29a      	uxth	r2, r3
 8009510:	4b01      	ldr	r3, [pc, #4]	; (8009518 <rfalNfcPollTechDetetection+0x298>)
 8009512:	805a      	strh	r2, [r3, #2]
            }
            
            return ERR_BUSY;
 8009514:	2302      	movs	r3, #2
 8009516:	e03a      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
 8009518:	200002d8 	.word	0x200002d8
 800951c:	00063510 	.word	0x00063510
 8009520:	20000368 	.word	0x20000368
    
    
    /*******************************************************************************/
    /* Passive Proprietary Technology ST25TB                                       */
    /*******************************************************************************/  
    if( ((gNfcDev.disc.techs2Find & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) )
 8009524:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <rfalNfcPollTechDetetection+0x318>)
 8009526:	89db      	ldrh	r3, [r3, #14]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d02d      	beq.n	800958c <rfalNfcPollTechDetetection+0x30c>
 8009530:	4b19      	ldr	r3, [pc, #100]	; (8009598 <rfalNfcPollTechDetetection+0x318>)
 8009532:	889b      	ldrh	r3, [r3, #4]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d027      	beq.n	800958c <rfalNfcPollTechDetetection+0x30c>
    {
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 800953c:	4b16      	ldr	r3, [pc, #88]	; (8009598 <rfalNfcPollTechDetetection+0x318>)
 800953e:	889b      	ldrh	r3, [r3, #4]
 8009540:	f023 0320 	bic.w	r3, r3, #32
 8009544:	b29a      	uxth	r2, r3
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <rfalNfcPollTechDetetection+0x318>)
 8009548:	809a      	strh	r2, [r3, #4]
        
    #if RFAL_FEATURE_ST25TB
        
        EXIT_ON_ERR( err, rfalSt25tbPollerInitialize() );                             /* Initialize RFAL for NFC-V */
 800954a:	f006 fc9c 	bl	800fe86 <rfalSt25tbPollerInitialize>
 800954e:	4603      	mov	r3, r0
 8009550:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <rfalNfcPollTechDetetection+0x2dc>
 8009558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800955a:	e018      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* As field is already On only starts GT timer */
 800955c:	f004 fc72 	bl	800de44 <rfalFieldOnAndStartGT>
 8009560:	4603      	mov	r3, r0
 8009562:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <rfalNfcPollTechDetetection+0x2ee>
 800956a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800956c:	e00f      	b.n	800958e <rfalNfcPollTechDetetection+0x30e>
        
        err = rfalSt25tbPollerCheckPresence( NULL );                                  /* Poll for ST25TB devices */
 800956e:	2000      	movs	r0, #0
 8009570:	f006 fc90 	bl	800fe94 <rfalSt25tbPollerCheckPresence>
 8009574:	4603      	mov	r3, r0
 8009576:	84fb      	strh	r3, [r7, #38]	; 0x26
        if( err == ERR_NONE )
 8009578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <rfalNfcPollTechDetetection+0x30c>
        {
            gNfcDev.techsFound |= RFAL_NFC_POLL_TECH_ST25TB;
 800957e:	4b06      	ldr	r3, [pc, #24]	; (8009598 <rfalNfcPollTechDetetection+0x318>)
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	f043 0320 	orr.w	r3, r3, #32
 8009586:	b29a      	uxth	r2, r3
 8009588:	4b03      	ldr	r3, [pc, #12]	; (8009598 <rfalNfcPollTechDetetection+0x318>)
 800958a:	805a      	strh	r2, [r3, #2]
        }
        
    #endif /* RFAL_FEATURE_ST25TB */
    }
    
    return ERR_NONE;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3728      	adds	r7, #40	; 0x28
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	200002d8 	.word	0x200002d8

0800959c <rfalNfcPollCollResolution>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollCollResolution( void )
{
 800959c:	b5b0      	push	{r4, r5, r7, lr}
 800959e:	b09e      	sub	sp, #120	; 0x78
 80095a0:	af00      	add	r7, sp, #0
    uint8_t    i;
    uint8_t    devCnt;
    ReturnCode err;
    
    err    = ERR_NONE;
 80095a2:	2300      	movs	r3, #0
 80095a4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    devCnt = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    i      = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    NO_WARNING(err);
    NO_WARNING(devCnt);
    NO_WARNING(i);
    
    /* Check if device limit has been reached */
    if( gNfcDev.devCnt >= gNfcDev.disc.devLimit )
 80095b4:	4bb6      	ldr	r3, [pc, #728]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80095b6:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
 80095ba:	4bb5      	ldr	r3, [pc, #724]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80095bc:	7c9b      	ldrb	r3, [r3, #18]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d301      	bcc.n	80095c6 <rfalNfcPollCollResolution+0x2a>
    {
        return ERR_NONE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e2b6      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-A Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCA
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_A) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_A) != 0U) )   /* If a NFC-A device was found/detected, perform Collision Resolution */
 80095c6:	4bb2      	ldr	r3, [pc, #712]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80095c8:	885b      	ldrh	r3, [r3, #2]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 8085 	beq.w	80096de <rfalNfcPollCollResolution+0x142>
 80095d4:	4bae      	ldr	r3, [pc, #696]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80095d6:	889b      	ldrh	r3, [r3, #4]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d07e      	beq.n	80096de <rfalNfcPollCollResolution+0x142>
    {
        rfalNfcaListenDevice nfcaDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_A;
 80095e0:	4bab      	ldr	r3, [pc, #684]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80095e2:	889b      	ldrh	r3, [r3, #4]
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	4ba9      	ldr	r3, [pc, #676]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80095ec:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcaPollerInitialize());                                /* Initialize RFAL for NFC-A */
 80095ee:	f002 fc83 	bl	800bef8 <rfalNfcaPollerInitialize>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80095f8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <rfalNfcPollCollResolution+0x6a>
 8009600:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009604:	e296      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8009606:	f004 fc1d 	bl	800de44 <rfalFieldOnAndStartGT>
 800960a:	4603      	mov	r3, r0
 800960c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009610:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <rfalNfcPollCollResolution+0x82>
 8009618:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800961c:	e28a      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcaPollerFullCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcaDevList, &devCnt );
 800961e:	4b9c      	ldr	r3, [pc, #624]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009620:	7b18      	ldrb	r0, [r3, #12]
 8009622:	4b9b      	ldr	r3, [pc, #620]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009624:	7c9a      	ldrb	r2, [r3, #18]
 8009626:	4b9a      	ldr	r3, [pc, #616]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009628:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	b2d9      	uxtb	r1, r3
 8009630:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8009634:	1d3a      	adds	r2, r7, #4
 8009636:	f002 fe9c 	bl	800c372 <rfalNfcaPollerFullCollisionResolution>
 800963a:	4603      	mov	r3, r0
 800963c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009640:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009644:	2b00      	cmp	r3, #0
 8009646:	d148      	bne.n	80096da <rfalNfcPollCollResolution+0x13e>
 8009648:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800964c:	2b00      	cmp	r3, #0
 800964e:	d044      	beq.n	80096da <rfalNfcPollCollResolution+0x13e>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 8009650:	2300      	movs	r3, #0
 8009652:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009656:	e03a      	b.n	80096ce <rfalNfcPollCollResolution+0x132>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCA;
 8009658:	4b8d      	ldr	r3, [pc, #564]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 800965a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800965e:	4619      	mov	r1, r3
 8009660:	4a8b      	ldr	r2, [pc, #556]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009662:	460b      	mov	r3, r1
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	1a5b      	subs	r3, r3, r1
 8009668:	00db      	lsls	r3, r3, #3
 800966a:	4413      	add	r3, r2
 800966c:	3390      	adds	r3, #144	; 0x90
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfca = nfcaDevList[i];
 8009672:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009676:	4b86      	ldr	r3, [pc, #536]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009678:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800967c:	4618      	mov	r0, r3
 800967e:	4984      	ldr	r1, [pc, #528]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009680:	4603      	mov	r3, r0
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	1a1b      	subs	r3, r3, r0
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	440b      	add	r3, r1
 800968a:	3390      	adds	r3, #144	; 0x90
 800968c:	2116      	movs	r1, #22
 800968e:	fb01 f202 	mul.w	r2, r1, r2
 8009692:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8009696:	440a      	add	r2, r1
 8009698:	3a74      	subs	r2, #116	; 0x74
 800969a:	3301      	adds	r3, #1
 800969c:	6811      	ldr	r1, [r2, #0]
 800969e:	6855      	ldr	r5, [r2, #4]
 80096a0:	6894      	ldr	r4, [r2, #8]
 80096a2:	68d0      	ldr	r0, [r2, #12]
 80096a4:	6019      	str	r1, [r3, #0]
 80096a6:	605d      	str	r5, [r3, #4]
 80096a8:	609c      	str	r4, [r3, #8]
 80096aa:	60d8      	str	r0, [r3, #12]
 80096ac:	6911      	ldr	r1, [r2, #16]
 80096ae:	6119      	str	r1, [r3, #16]
 80096b0:	8a92      	ldrh	r2, [r2, #20]
 80096b2:	829a      	strh	r2, [r3, #20]
                gNfcDev.devCnt++;
 80096b4:	4b76      	ldr	r3, [pc, #472]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80096b6:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80096ba:	3301      	adds	r3, #1
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b74      	ldr	r3, [pc, #464]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80096c0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfca list into global device list */
 80096c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80096c8:	3301      	adds	r3, #1
 80096ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80096ce:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80096d2:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3be      	bcc.n	8009658 <rfalNfcPollCollResolution+0xbc>
            }
        }
        
        return ERR_BUSY;
 80096da:	2302      	movs	r3, #2
 80096dc:	e22a      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-B Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_B) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_B) != 0U) )   /* If a NFC-B device was found/detected, perform Collision Resolution */
 80096de:	4b6c      	ldr	r3, [pc, #432]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8085 	beq.w	80097f6 <rfalNfcPollCollResolution+0x25a>
 80096ec:	4b68      	ldr	r3, [pc, #416]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80096ee:	889b      	ldrh	r3, [r3, #4]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d07e      	beq.n	80097f6 <rfalNfcPollCollResolution+0x25a>
    {
        rfalNfcbListenDevice nfcbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_B;
 80096f8:	4b65      	ldr	r3, [pc, #404]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80096fa:	889b      	ldrh	r3, [r3, #4]
 80096fc:	f023 0302 	bic.w	r3, r3, #2
 8009700:	b29a      	uxth	r2, r3
 8009702:	4b63      	ldr	r3, [pc, #396]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009704:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcbPollerInitialize());                                /* Initialize RFAL for NFC-B */
 8009706:	f002 fffd 	bl	800c704 <rfalNfcbPollerInitialize>
 800970a:	4603      	mov	r3, r0
 800970c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009710:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <rfalNfcPollCollResolution+0x182>
 8009718:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800971c:	e20a      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800971e:	f004 fb91 	bl	800de44 <rfalFieldOnAndStartGT>
 8009722:	4603      	mov	r3, r0
 8009724:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009728:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <rfalNfcPollCollResolution+0x19a>
 8009730:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009734:	e1fe      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcbPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcbDevList, &devCnt );
 8009736:	4b56      	ldr	r3, [pc, #344]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009738:	7b18      	ldrb	r0, [r3, #12]
 800973a:	4b55      	ldr	r3, [pc, #340]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 800973c:	7c9a      	ldrb	r2, [r3, #18]
 800973e:	4b54      	ldr	r3, [pc, #336]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009740:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	b2d9      	uxtb	r1, r3
 8009748:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800974c:	1d3a      	adds	r2, r7, #4
 800974e:	f003 f8fd 	bl	800c94c <rfalNfcbPollerCollisionResolution>
 8009752:	4603      	mov	r3, r0
 8009754:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009758:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800975c:	2b00      	cmp	r3, #0
 800975e:	d148      	bne.n	80097f2 <rfalNfcPollCollResolution+0x256>
 8009760:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009764:	2b00      	cmp	r3, #0
 8009766:	d044      	beq.n	80097f2 <rfalNfcPollCollResolution+0x256>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 8009768:	2300      	movs	r3, #0
 800976a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800976e:	e03a      	b.n	80097e6 <rfalNfcPollCollResolution+0x24a>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCB;
 8009770:	4b47      	ldr	r3, [pc, #284]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009772:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009776:	4619      	mov	r1, r3
 8009778:	4a45      	ldr	r2, [pc, #276]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 800977a:	460b      	mov	r3, r1
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	4413      	add	r3, r2
 8009784:	3390      	adds	r3, #144	; 0x90
 8009786:	2201      	movs	r2, #1
 8009788:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcb = nfcbDevList[i];
 800978a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800978e:	4b40      	ldr	r3, [pc, #256]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009790:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009794:	4618      	mov	r0, r3
 8009796:	493e      	ldr	r1, [pc, #248]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009798:	4603      	mov	r3, r0
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	1a1b      	subs	r3, r3, r0
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	440b      	add	r3, r1
 80097a2:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80097a6:	4613      	mov	r3, r2
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80097b0:	4413      	add	r3, r2
 80097b2:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80097b6:	1c4b      	adds	r3, r1, #1
 80097b8:	6814      	ldr	r4, [r2, #0]
 80097ba:	6850      	ldr	r0, [r2, #4]
 80097bc:	6891      	ldr	r1, [r2, #8]
 80097be:	601c      	str	r4, [r3, #0]
 80097c0:	6058      	str	r0, [r3, #4]
 80097c2:	6099      	str	r1, [r3, #8]
 80097c4:	8991      	ldrh	r1, [r2, #12]
 80097c6:	7b92      	ldrb	r2, [r2, #14]
 80097c8:	8199      	strh	r1, [r3, #12]
 80097ca:	739a      	strb	r2, [r3, #14]
                gNfcDev.devCnt++;
 80097cc:	4b30      	ldr	r3, [pc, #192]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80097ce:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80097d2:	3301      	adds	r3, #1
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80097d8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcb list into global device list */
 80097dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80097e0:	3301      	adds	r3, #1
 80097e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80097e6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80097ea:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d3be      	bcc.n	8009770 <rfalNfcPollCollResolution+0x1d4>
            }
        }
        
        return ERR_BUSY;
 80097f2:	2302      	movs	r3, #2
 80097f4:	e19e      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-F Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCF
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_F) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_F) != 0U) )  /* If a NFC-F device was found/detected, perform Collision Resolution */
 80097f6:	4b26      	ldr	r3, [pc, #152]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 80097f8:	885b      	ldrh	r3, [r3, #2]
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 808f 	beq.w	8009922 <rfalNfcPollCollResolution+0x386>
 8009804:	4b22      	ldr	r3, [pc, #136]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009806:	889b      	ldrh	r3, [r3, #4]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8088 	beq.w	8009922 <rfalNfcPollCollResolution+0x386>
    {
        rfalNfcfListenDevice nfcfDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_F;
 8009812:	4b1f      	ldr	r3, [pc, #124]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009814:	889b      	ldrh	r3, [r3, #4]
 8009816:	f023 0304 	bic.w	r3, r3, #4
 800981a:	b29a      	uxth	r2, r3
 800981c:	4b1c      	ldr	r3, [pc, #112]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 800981e:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR ));           /* Initialize RFAL for NFC-F */
 8009820:	4b1b      	ldr	r3, [pc, #108]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009822:	7cdb      	ldrb	r3, [r3, #19]
 8009824:	4618      	mov	r0, r3
 8009826:	f003 fb43 	bl	800ceb0 <rfalNfcfPollerInitialize>
 800982a:	4603      	mov	r3, r0
 800982c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009830:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <rfalNfcPollCollResolution+0x2a2>
 8009838:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800983c:	e17a      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 800983e:	f004 fb01 	bl	800de44 <rfalFieldOnAndStartGT>
 8009842:	4603      	mov	r3, r0
 8009844:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009848:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <rfalNfcPollCollResolution+0x2ba>
 8009850:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009854:	e16e      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcfPollerCollisionResolution( gNfcDev.disc.compMode, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcfDevList, &devCnt );
 8009856:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009858:	7b18      	ldrb	r0, [r3, #12]
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 800985c:	7c9a      	ldrb	r2, [r3, #18]
 800985e:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <rfalNfcPollCollResolution+0x2f4>)
 8009860:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	b2d9      	uxtb	r1, r3
 8009868:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800986c:	1d3a      	adds	r2, r7, #4
 800986e:	f003 fb8d 	bl	800cf8c <rfalNfcfPollerCollisionResolution>
 8009872:	4603      	mov	r3, r0
 8009874:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009878:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800987c:	2b00      	cmp	r3, #0
 800987e:	d14e      	bne.n	800991e <rfalNfcPollCollResolution+0x382>
 8009880:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009884:	2b00      	cmp	r3, #0
 8009886:	d04a      	beq.n	800991e <rfalNfcPollCollResolution+0x382>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009888:	2300      	movs	r3, #0
 800988a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800988e:	e040      	b.n	8009912 <rfalNfcPollCollResolution+0x376>
 8009890:	200002d8 	.word	0x200002d8
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCF;
 8009894:	4ba9      	ldr	r3, [pc, #676]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009896:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 800989a:	4619      	mov	r1, r3
 800989c:	4aa7      	ldr	r2, [pc, #668]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 800989e:	460b      	mov	r3, r1
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	1a5b      	subs	r3, r3, r1
 80098a4:	00db      	lsls	r3, r3, #3
 80098a6:	4413      	add	r3, r2
 80098a8:	3390      	adds	r3, #144	; 0x90
 80098aa:	2202      	movs	r2, #2
 80098ac:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcf = nfcfDevList[i];
 80098ae:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80098b2:	4ba2      	ldr	r3, [pc, #648]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80098b4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80098b8:	4618      	mov	r0, r3
 80098ba:	49a0      	ldr	r1, [pc, #640]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80098bc:	4603      	mov	r3, r0
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	1a1b      	subs	r3, r3, r0
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	440b      	add	r3, r1
 80098c6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	4413      	add	r3, r2
 80098d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80098d8:	4413      	add	r3, r2
 80098da:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80098de:	1c4b      	adds	r3, r1, #1
 80098e0:	6815      	ldr	r5, [r2, #0]
 80098e2:	6854      	ldr	r4, [r2, #4]
 80098e4:	6890      	ldr	r0, [r2, #8]
 80098e6:	68d1      	ldr	r1, [r2, #12]
 80098e8:	601d      	str	r5, [r3, #0]
 80098ea:	605c      	str	r4, [r3, #4]
 80098ec:	6098      	str	r0, [r3, #8]
 80098ee:	60d9      	str	r1, [r3, #12]
 80098f0:	8a11      	ldrh	r1, [r2, #16]
 80098f2:	7c92      	ldrb	r2, [r2, #18]
 80098f4:	8219      	strh	r1, [r3, #16]
 80098f6:	749a      	strb	r2, [r3, #18]
                gNfcDev.devCnt++;
 80098f8:	4b90      	ldr	r3, [pc, #576]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80098fa:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80098fe:	3301      	adds	r3, #1
 8009900:	b2da      	uxtb	r2, r3
 8009902:	4b8e      	ldr	r3, [pc, #568]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009904:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009908:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800990c:	3301      	adds	r3, #1
 800990e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009912:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009916:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800991a:	429a      	cmp	r2, r3
 800991c:	d3ba      	bcc.n	8009894 <rfalNfcPollCollResolution+0x2f8>
            }
        }
        
        return ERR_BUSY;
 800991e:	2302      	movs	r3, #2
 8009920:	e108      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* NFC-V Collision Resolution                                                  */
    /*******************************************************************************/
#if RFAL_FEATURE_NFCV
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_V) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_V) != 0U) )  /* If a NFC-V device was found/detected, perform Collision Resolution */
 8009922:	4b86      	ldr	r3, [pc, #536]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009924:	885b      	ldrh	r3, [r3, #2]
 8009926:	f003 0308 	and.w	r3, r3, #8
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8084 	beq.w	8009a38 <rfalNfcPollCollResolution+0x49c>
 8009930:	4b82      	ldr	r3, [pc, #520]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009932:	889b      	ldrh	r3, [r3, #4]
 8009934:	f003 0308 	and.w	r3, r3, #8
 8009938:	2b00      	cmp	r3, #0
 800993a:	d07d      	beq.n	8009a38 <rfalNfcPollCollResolution+0x49c>
    {
        rfalNfcvListenDevice nfcvDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_V;
 800993c:	4b7f      	ldr	r3, [pc, #508]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 800993e:	889b      	ldrh	r3, [r3, #4]
 8009940:	f023 0308 	bic.w	r3, r3, #8
 8009944:	b29a      	uxth	r2, r3
 8009946:	4b7d      	ldr	r3, [pc, #500]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009948:	809a      	strh	r2, [r3, #4]
        
        EXIT_ON_ERR( err, rfalNfcvPollerInitialize());                                /* Initialize RFAL for NFC-V */
 800994a:	f003 fb8f 	bl	800d06c <rfalNfcvPollerInitialize>
 800994e:	4603      	mov	r3, r0
 8009950:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009954:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <rfalNfcPollCollResolution+0x3c6>
 800995c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009960:	e0e8      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8009962:	f004 fa6f 	bl	800de44 <rfalFieldOnAndStartGT>
 8009966:	4603      	mov	r3, r0
 8009968:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800996c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <rfalNfcPollCollResolution+0x3de>
 8009974:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009978:	e0dc      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        
        err = rfalNfcvPollerCollisionResolution( RFAL_COMPLIANCE_MODE_NFC, (gNfcDev.disc.devLimit - gNfcDev.devCnt), nfcvDevList, &devCnt );
 800997a:	4b70      	ldr	r3, [pc, #448]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 800997c:	7c9a      	ldrb	r2, [r3, #18]
 800997e:	4b6f      	ldr	r3, [pc, #444]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009980:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	b2d9      	uxtb	r1, r3
 8009988:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800998c:	1d3a      	adds	r2, r7, #4
 800998e:	2000      	movs	r0, #0
 8009990:	f003 fc14 	bl	800d1bc <rfalNfcvPollerCollisionResolution>
 8009994:	4603      	mov	r3, r0
 8009996:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 800999a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d148      	bne.n	8009a34 <rfalNfcPollCollResolution+0x498>
 80099a2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d044      	beq.n	8009a34 <rfalNfcPollCollResolution+0x498>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 80099aa:	2300      	movs	r3, #0
 80099ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80099b0:	e03a      	b.n	8009a28 <rfalNfcPollCollResolution+0x48c>
            {
                gNfcDev.devList[gNfcDev.devCnt].type     = RFAL_NFC_LISTEN_TYPE_NFCV;
 80099b2:	4b62      	ldr	r3, [pc, #392]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80099b4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80099b8:	4619      	mov	r1, r3
 80099ba:	4a60      	ldr	r2, [pc, #384]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80099bc:	460b      	mov	r3, r1
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	1a5b      	subs	r3, r3, r1
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	4413      	add	r3, r2
 80099c6:	3390      	adds	r3, #144	; 0x90
 80099c8:	2203      	movs	r2, #3
 80099ca:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.nfcv = nfcvDevList[i];
 80099cc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80099d0:	4b5a      	ldr	r3, [pc, #360]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80099d2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 80099d6:	4618      	mov	r0, r3
 80099d8:	4958      	ldr	r1, [pc, #352]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 80099da:	4603      	mov	r3, r0
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	1a1b      	subs	r3, r3, r0
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	440b      	add	r3, r1
 80099e4:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80099e8:	4613      	mov	r3, r2
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	4413      	add	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80099f6:	4413      	add	r3, r2
 80099f8:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 80099fc:	1c4b      	adds	r3, r1, #1
 80099fe:	6814      	ldr	r4, [r2, #0]
 8009a00:	6850      	ldr	r0, [r2, #4]
 8009a02:	6891      	ldr	r1, [r2, #8]
 8009a04:	601c      	str	r4, [r3, #0]
 8009a06:	6058      	str	r0, [r3, #4]
 8009a08:	6099      	str	r1, [r3, #8]
 8009a0a:	7b12      	ldrb	r2, [r2, #12]
 8009a0c:	731a      	strb	r2, [r3, #12]
                gNfcDev.devCnt++;
 8009a0e:	4b4b      	ldr	r3, [pc, #300]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a10:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009a14:	3301      	adds	r3, #1
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	4b48      	ldr	r3, [pc, #288]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a1a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009a1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009a22:	3301      	adds	r3, #1
 8009a24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009a28:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009a2c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d3be      	bcc.n	80099b2 <rfalNfcPollCollResolution+0x416>
            }
        }
        
        return ERR_BUSY;
 8009a34:	2302      	movs	r3, #2
 8009a36:	e07d      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
    
    /*******************************************************************************/
    /* ST25TB Collision Resolution                                                 */
    /*******************************************************************************/
#if RFAL_FEATURE_ST25TB
    if( ((gNfcDev.techsFound & RFAL_NFC_POLL_TECH_ST25TB) != 0U) && ((gNfcDev.techs2do & RFAL_NFC_POLL_TECH_ST25TB) != 0U) ) /* If a ST25TB device was found/detected, perform Collision Resolution */
 8009a38:	4b40      	ldr	r3, [pc, #256]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a3a:	885b      	ldrh	r3, [r3, #2]
 8009a3c:	f003 0320 	and.w	r3, r3, #32
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d076      	beq.n	8009b32 <rfalNfcPollCollResolution+0x596>
 8009a44:	4b3d      	ldr	r3, [pc, #244]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a46:	889b      	ldrh	r3, [r3, #4]
 8009a48:	f003 0320 	and.w	r3, r3, #32
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d070      	beq.n	8009b32 <rfalNfcPollCollResolution+0x596>
    {
        rfalSt25tbListenDevice st25tbDevList[RFAL_NFC_MAX_DEVICES];
        
        gNfcDev.techs2do &= ~RFAL_NFC_POLL_TECH_ST25TB;
 8009a50:	4b3a      	ldr	r3, [pc, #232]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a52:	889b      	ldrh	r3, [r3, #4]
 8009a54:	f023 0320 	bic.w	r3, r3, #32
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	4b38      	ldr	r3, [pc, #224]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a5c:	809a      	strh	r2, [r3, #4]
        
        rfalSt25tbPollerInitialize();                                                 /* Initialize RFAL for ST25TB */
 8009a5e:	f006 fa12 	bl	800fe86 <rfalSt25tbPollerInitialize>
        EXIT_ON_ERR( err, rfalFieldOnAndStartGT() );                                  /* Ensure GT again as other technologies have also been polled */
 8009a62:	f004 f9ef 	bl	800de44 <rfalFieldOnAndStartGT>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8009a6c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d002      	beq.n	8009a7a <rfalNfcPollCollResolution+0x4de>
 8009a74:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009a78:	e05c      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
        
        err = rfalSt25tbPollerCollisionResolution( (gNfcDev.disc.devLimit - gNfcDev.devCnt), st25tbDevList, &devCnt );
 8009a7a:	4b30      	ldr	r3, [pc, #192]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a7c:	7c9a      	ldrb	r2, [r3, #18]
 8009a7e:	4b2f      	ldr	r3, [pc, #188]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009a80:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f107 0273 	add.w	r2, r7, #115	; 0x73
 8009a8c:	1d39      	adds	r1, r7, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f006 faf6 	bl	8010080 <rfalSt25tbPollerCollisionResolution>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
        if( (err == ERR_NONE) && (devCnt != 0U) )
 8009a9a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d145      	bne.n	8009b2e <rfalNfcPollCollResolution+0x592>
 8009aa2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d041      	beq.n	8009b2e <rfalNfcPollCollResolution+0x592>
        {
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009aaa:	2300      	movs	r3, #0
 8009aac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009ab0:	e037      	b.n	8009b22 <rfalNfcPollCollResolution+0x586>
            {
                gNfcDev.devList[gNfcDev.devCnt].type       = RFAL_NFC_LISTEN_TYPE_ST25TB;
 8009ab2:	4b22      	ldr	r3, [pc, #136]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009ab4:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009abc:	460b      	mov	r3, r1
 8009abe:	011b      	lsls	r3, r3, #4
 8009ac0:	1a5b      	subs	r3, r3, r1
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	4413      	add	r3, r2
 8009ac6:	3390      	adds	r3, #144	; 0x90
 8009ac8:	2204      	movs	r2, #4
 8009aca:	701a      	strb	r2, [r3, #0]
                gNfcDev.devList[gNfcDev.devCnt].dev.st25tb = st25tbDevList[i];
 8009acc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009ad0:	4b1a      	ldr	r3, [pc, #104]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009ad2:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	4918      	ldr	r1, [pc, #96]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009ada:	4603      	mov	r3, r0
 8009adc:	011b      	lsls	r3, r3, #4
 8009ade:	1a1b      	subs	r3, r3, r0
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	440b      	add	r3, r1
 8009ae4:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8009af4:	4413      	add	r3, r2
 8009af6:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
 8009afa:	1c4b      	adds	r3, r1, #1
 8009afc:	6810      	ldr	r0, [r2, #0]
 8009afe:	6851      	ldr	r1, [r2, #4]
 8009b00:	6018      	str	r0, [r3, #0]
 8009b02:	6059      	str	r1, [r3, #4]
 8009b04:	8912      	ldrh	r2, [r2, #8]
 8009b06:	811a      	strh	r2, [r3, #8]
                gNfcDev.devCnt++;
 8009b08:	4b0c      	ldr	r3, [pc, #48]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009b0a:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <rfalNfcPollCollResolution+0x5a0>)
 8009b14:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
            for( i=0; i<devCnt; i++ )                                                 /* Copy devices found form local Nfcf list into global device list */
 8009b18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009b22:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8009b26:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d3c1      	bcc.n	8009ab2 <rfalNfcPollCollResolution+0x516>
            }
        }
        
        return ERR_BUSY;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e000      	b.n	8009b34 <rfalNfcPollCollResolution+0x598>
    }
#endif /* RFAL_FEATURE_ST25TB */
    
    return ERR_NONE;                                                                  /* All technologies have been performed */
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3778      	adds	r7, #120	; 0x78
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b3c:	200002d8 	.word	0x200002d8

08009b40 <rfalNfcPollActivation>:
 * \return  ERR_XXXX         : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcPollActivation( uint8_t devIt )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08e      	sub	sp, #56	; 0x38
 8009b44:	af04      	add	r7, sp, #16
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
    ReturnCode err;
    
    err = ERR_NONE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Supress warning when specific RFAL features have been disabled */
    NO_WARNING(err);
    
    if( devIt > gNfcDev.devCnt )
 8009b4e:	4ba3      	ldr	r3, [pc, #652]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009b50:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8009b54:	79fa      	ldrb	r2, [r7, #7]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d901      	bls.n	8009b5e <rfalNfcPollActivation+0x1e>
    {
        return ERR_WRONG_STATE;
 8009b5a:	2321      	movs	r3, #33	; 0x21
 8009b5c:	e296      	b.n	800a08c <rfalNfcPollActivation+0x54c>
    }
    
    switch( gNfcDev.devList[devIt].type )
 8009b5e:	79fa      	ldrb	r2, [r7, #7]
 8009b60:	499e      	ldr	r1, [pc, #632]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009b62:	4613      	mov	r3, r2
 8009b64:	011b      	lsls	r3, r3, #4
 8009b66:	1a9b      	subs	r3, r3, r2
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3390      	adds	r3, #144	; 0x90
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b05      	cmp	r3, #5
 8009b72:	f200 827e 	bhi.w	800a072 <rfalNfcPollActivation+0x532>
 8009b76:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <rfalNfcPollActivation+0x3c>)
 8009b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7c:	08009bcf 	.word	0x08009bcf
 8009b80:	08009de1 	.word	0x08009de1
 8009b84:	08009ed5 	.word	0x08009ed5
 8009b88:	08009fcf 	.word	0x08009fcf
 8009b8c:	0800a021 	.word	0x0800a021
 8009b90:	08009b95 	.word	0x08009b95
        /*******************************************************************************/
    #if RFAL_FEATURE_NFC_DEP
        case RFAL_NFC_LISTEN_TYPE_AP2P:
            /* Activation has already been perfomed (ATR_REQ) */
        
            gNfcDev.devList[devIt].nfcid     = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8009b94:	79f9      	ldrb	r1, [r7, #7]
 8009b96:	79fa      	ldrb	r2, [r7, #7]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	011b      	lsls	r3, r3, #4
 8009b9c:	1a5b      	subs	r3, r3, r1
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	33b0      	adds	r3, #176	; 0xb0
 8009ba2:	498e      	ldr	r1, [pc, #568]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009ba4:	440b      	add	r3, r1
 8009ba6:	1c99      	adds	r1, r3, #2
 8009ba8:	488c      	ldr	r0, [pc, #560]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009baa:	4613      	mov	r3, r2
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4403      	add	r3, r0
 8009bb4:	33a8      	adds	r3, #168	; 0xa8
 8009bb6:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen  = RFAL_NFCDEP_NFCID3_LEN;
 8009bb8:	79fa      	ldrb	r2, [r7, #7]
 8009bba:	4988      	ldr	r1, [pc, #544]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	440b      	add	r3, r1
 8009bc6:	33ac      	adds	r3, #172	; 0xac
 8009bc8:	220a      	movs	r2, #10
 8009bca:	701a      	strb	r2, [r3, #0]
            break;
 8009bcc:	e253      	b.n	800a076 <rfalNfcPollActivation+0x536>
        /* Passive NFC-A Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCA
        case RFAL_NFC_LISTEN_TYPE_NFCA:
            
            rfalNfcaPollerInitialize();
 8009bce:	f002 f993 	bl	800bef8 <rfalNfcaPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfca.isSleep )                             /* Check if desired device is in Sleep */
 8009bd2:	79fa      	ldrb	r2, [r7, #7]
 8009bd4:	4981      	ldr	r1, [pc, #516]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	00db      	lsls	r3, r3, #3
 8009bde:	440b      	add	r3, r1
 8009be0:	33a6      	adds	r3, #166	; 0xa6
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02a      	beq.n	8009c3e <rfalNfcPollActivation+0xfe>
            {
                rfalNfcaSensRes sensRes;
                rfalNfcaSelRes  selRes;
                
                EXIT_ON_ERR( err, rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_WUPA, &sensRes ) ); /* Wake up all cards  */
 8009be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bec:	4619      	mov	r1, r3
 8009bee:	2052      	movs	r0, #82	; 0x52
 8009bf0:	f002 f9a6 	bl	800bf40 <rfalNfcaPollerCheckPresence>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <rfalNfcPollActivation+0xc2>
 8009bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c00:	e244      	b.n	800a08c <rfalNfcPollActivation+0x54c>
                EXIT_ON_ERR( err, rfalNfcaPollerSelect( gNfcDev.devList[devIt].dev.nfca.nfcId1, gNfcDev.devList[devIt].dev.nfca.nfcId1Len, &selRes ) ); /* Select specific device  */
 8009c02:	79fa      	ldrb	r2, [r7, #7]
 8009c04:	4613      	mov	r3, r2
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	3390      	adds	r3, #144	; 0x90
 8009c0e:	4a73      	ldr	r2, [pc, #460]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c10:	4413      	add	r3, r2
 8009c12:	1d98      	adds	r0, r3, #6
 8009c14:	79fa      	ldrb	r2, [r7, #7]
 8009c16:	4971      	ldr	r1, [pc, #452]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c18:	4613      	mov	r3, r2
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	1a9b      	subs	r3, r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	440b      	add	r3, r1
 8009c22:	3395      	adds	r3, #149	; 0x95
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f107 0220 	add.w	r2, r7, #32
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f002 fcbe 	bl	800c5ac <rfalNfcaPollerSelect>
 8009c30:	4603      	mov	r3, r0
 8009c32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009c34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <rfalNfcPollActivation+0xfe>
 8009c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c3c:	e226      	b.n	800a08c <rfalNfcPollActivation+0x54c>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.nfcId1;
 8009c3e:	79f9      	ldrb	r1, [r7, #7]
 8009c40:	79fa      	ldrb	r2, [r7, #7]
 8009c42:	460b      	mov	r3, r1
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	1a5b      	subs	r3, r3, r1
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	3390      	adds	r3, #144	; 0x90
 8009c4c:	4963      	ldr	r1, [pc, #396]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c4e:	440b      	add	r3, r1
 8009c50:	1d99      	adds	r1, r3, #6
 8009c52:	4862      	ldr	r0, [pc, #392]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c54:	4613      	mov	r3, r2
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	1a9b      	subs	r3, r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	4403      	add	r3, r0
 8009c5e:	33a8      	adds	r3, #168	; 0xa8
 8009c60:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = gNfcDev.devList[devIt].dev.nfca.nfcId1Len;
 8009c62:	79f9      	ldrb	r1, [r7, #7]
 8009c64:	79fa      	ldrb	r2, [r7, #7]
 8009c66:	485d      	ldr	r0, [pc, #372]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c68:	460b      	mov	r3, r1
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	1a5b      	subs	r3, r3, r1
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	4403      	add	r3, r0
 8009c72:	3395      	adds	r3, #149	; 0x95
 8009c74:	7818      	ldrb	r0, [r3, #0]
 8009c76:	4959      	ldr	r1, [pc, #356]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c78:	4613      	mov	r3, r2
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	440b      	add	r3, r1
 8009c82:	33ac      	adds	r3, #172	; 0xac
 8009c84:	4602      	mov	r2, r0
 8009c86:	701a      	strb	r2, [r3, #0]
            
            /*******************************************************************************/
            /* Perform protocol specific activation                                        */
            switch( gNfcDev.devList[devIt].dev.nfca.type )
 8009c88:	79fa      	ldrb	r2, [r7, #7]
 8009c8a:	4954      	ldr	r1, [pc, #336]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	011b      	lsls	r3, r3, #4
 8009c90:	1a9b      	subs	r3, r3, r2
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	440b      	add	r3, r1
 8009c96:	3391      	adds	r3, #145	; 0x91
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	d03e      	beq.n	8009d1c <rfalNfcPollActivation+0x1dc>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	dc04      	bgt.n	8009cac <rfalNfcPollActivation+0x16c>
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d02f      	beq.n	8009d06 <rfalNfcPollActivation+0x1c6>
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d005      	beq.n	8009cb6 <rfalNfcPollActivation+0x176>
 8009caa:	e093      	b.n	8009dd4 <rfalNfcPollActivation+0x294>
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d056      	beq.n	8009d5e <rfalNfcPollActivation+0x21e>
 8009cb0:	2b60      	cmp	r3, #96	; 0x60
 8009cb2:	d054      	beq.n	8009d5e <rfalNfcPollActivation+0x21e>
 8009cb4:	e08e      	b.n	8009dd4 <rfalNfcPollActivation+0x294>
                /*******************************************************************************/
                case RFAL_NFCA_T1T:
                
                    /* No further activation needed for T1T (RID already performed) */
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfca.ridRes.uid;
 8009cb6:	79f9      	ldrb	r1, [r7, #7]
 8009cb8:	79fa      	ldrb	r2, [r7, #7]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	011b      	lsls	r3, r3, #4
 8009cbe:	1a5b      	subs	r3, r3, r1
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	3398      	adds	r3, #152	; 0x98
 8009cc4:	4945      	ldr	r1, [pc, #276]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009cc6:	440b      	add	r3, r1
 8009cc8:	f103 010a 	add.w	r1, r3, #10
 8009ccc:	4843      	ldr	r0, [pc, #268]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009cce:	4613      	mov	r3, r2
 8009cd0:	011b      	lsls	r3, r3, #4
 8009cd2:	1a9b      	subs	r3, r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	4403      	add	r3, r0
 8009cd8:	33a8      	adds	r3, #168	; 0xa8
 8009cda:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_T1T_UID_LEN;
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	493f      	ldr	r1, [pc, #252]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	1a9b      	subs	r3, r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	440b      	add	r3, r1
 8009cea:	33ac      	adds	r3, #172	; 0xac
 8009cec:	2204      	movs	r2, #4
 8009cee:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8009cf0:	79fa      	ldrb	r2, [r7, #7]
 8009cf2:	493a      	ldr	r1, [pc, #232]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	1a9b      	subs	r3, r3, r2
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	440b      	add	r3, r1
 8009cfe:	33ad      	adds	r3, #173	; 0xad
 8009d00:	2200      	movs	r2, #0
 8009d02:	701a      	strb	r2, [r3, #0]
                    break;
 8009d04:	e068      	b.n	8009dd8 <rfalNfcPollActivation+0x298>
                
                case RFAL_NFCA_T2T:
                    
                    /* No further activation needed for a T2T */

                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;
 8009d06:	79fa      	ldrb	r2, [r7, #7]
 8009d08:	4934      	ldr	r1, [pc, #208]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	011b      	lsls	r3, r3, #4
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	440b      	add	r3, r1
 8009d14:	33ad      	adds	r3, #173	; 0xad
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
                    break;
 8009d1a:	e05d      	b.n	8009dd8 <rfalNfcPollActivation+0x298>
                /*******************************************************************************/
                case RFAL_NFCA_T4T:                                                   /* Device supports ISO-DEP */
                
                #if RFAL_FEATURE_ISO_DEP_POLL
                    /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported */
                    rfalIsoDepInitialize();
 8009d1c:	f7fd ff70 	bl	8007c00 <rfalIsoDepInitialize>
                    EXIT_ON_ERR( err, rfalIsoDepPollAHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, &gNfcDev.devList[devIt].proto.isoDep ) );
 8009d20:	79fa      	ldrb	r2, [r7, #7]
 8009d22:	4613      	mov	r3, r2
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	00db      	lsls	r3, r3, #3
 8009d2a:	33b0      	adds	r3, #176	; 0xb0
 8009d2c:	4a2b      	ldr	r2, [pc, #172]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009d2e:	4413      	add	r3, r2
 8009d30:	2202      	movs	r2, #2
 8009d32:	2100      	movs	r1, #0
 8009d34:	2008      	movs	r0, #8
 8009d36:	f7fe fc83 	bl	8008640 <rfalIsoDepPollAHandleActivation>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009d3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <rfalNfcPollActivation+0x208>
 8009d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d46:	e1a1      	b.n	800a08c <rfalNfcPollActivation+0x54c>
                    
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;   /* NFC-A T4T device activated */
 8009d48:	79fa      	ldrb	r2, [r7, #7]
 8009d4a:	4924      	ldr	r1, [pc, #144]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	440b      	add	r3, r1
 8009d56:	33ad      	adds	r3, #173	; 0xad
 8009d58:	2201      	movs	r2, #1
 8009d5a:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No ISO-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                    break;
 8009d5c:	e03c      	b.n	8009dd8 <rfalNfcPollActivation+0x298>
                case RFAL_NFCA_T4T_NFCDEP:                                            /* Device supports both T4T and NFC-DEP */
                case RFAL_NFCA_NFCDEP:                                                /* Device supports NFC-DEP */
                
                #if RFAL_FEATURE_NFC_DEP
                    /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                    EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8009d5e:	79fa      	ldrb	r2, [r7, #7]
 8009d60:	4613      	mov	r3, r2
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	00db      	lsls	r3, r3, #3
 8009d68:	3390      	adds	r3, #144	; 0x90
 8009d6a:	4a1c      	ldr	r2, [pc, #112]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009d6c:	1898      	adds	r0, r3, r2
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	f000 f990 	bl	800a098 <rfalNfcNfcDepActivate>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <rfalNfcPollActivation+0x246>
 8009d82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d84:	e182      	b.n	800a08c <rfalNfcPollActivation+0x54c>
                
                    gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8009d86:	79f9      	ldrb	r1, [r7, #7]
 8009d88:	79fa      	ldrb	r2, [r7, #7]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	1a5b      	subs	r3, r3, r1
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	33b0      	adds	r3, #176	; 0xb0
 8009d94:	4911      	ldr	r1, [pc, #68]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009d96:	440b      	add	r3, r1
 8009d98:	1c99      	adds	r1, r3, #2
 8009d9a:	4810      	ldr	r0, [pc, #64]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	1a9b      	subs	r3, r3, r2
 8009da2:	00db      	lsls	r3, r3, #3
 8009da4:	4403      	add	r3, r0
 8009da6:	33a8      	adds	r3, #168	; 0xa8
 8009da8:	6019      	str	r1, [r3, #0]
                    gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8009daa:	79fa      	ldrb	r2, [r7, #7]
 8009dac:	490b      	ldr	r1, [pc, #44]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009dae:	4613      	mov	r3, r2
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	440b      	add	r3, r1
 8009db8:	33ac      	adds	r3, #172	; 0xac
 8009dba:	220a      	movs	r2, #10
 8009dbc:	701a      	strb	r2, [r3, #0]
                
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;   /* NFC-A P2P device activated */
 8009dbe:	79fa      	ldrb	r2, [r7, #7]
 8009dc0:	4906      	ldr	r1, [pc, #24]	; (8009ddc <rfalNfcPollActivation+0x29c>)
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	1a9b      	subs	r3, r3, r2
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	440b      	add	r3, r1
 8009dcc:	33ad      	adds	r3, #173	; 0xad
 8009dce:	2202      	movs	r2, #2
 8009dd0:	701a      	strb	r2, [r3, #0]
                #else
                    gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;       /* No NFC-DEP supported activate using RF interface */
                #endif /* RFAL_FEATURE_NFC_DEP */
                    break;
 8009dd2:	e001      	b.n	8009dd8 <rfalNfcPollActivation+0x298>
                
                /*******************************************************************************/
                default:
                    return ERR_WRONG_STATE;
 8009dd4:	2321      	movs	r3, #33	; 0x21
 8009dd6:	e159      	b.n	800a08c <rfalNfcPollActivation+0x54c>
            }
            break;
 8009dd8:	e14d      	b.n	800a076 <rfalNfcPollActivation+0x536>
 8009dda:	bf00      	nop
 8009ddc:	200002d8 	.word	0x200002d8
        /* Passive NFC-B Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCB
        case RFAL_NFC_LISTEN_TYPE_NFCB:
            
            rfalNfcbPollerInitialize();
 8009de0:	f002 fc90 	bl	800c704 <rfalNfcbPollerInitialize>
            if( gNfcDev.devList[devIt].dev.nfcb.isSleep )                             /* Check if desired device is in Sleep */
 8009de4:	79fa      	ldrb	r2, [r7, #7]
 8009de6:	49ab      	ldr	r1, [pc, #684]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009de8:	4613      	mov	r3, r2
 8009dea:	011b      	lsls	r3, r3, #4
 8009dec:	1a9b      	subs	r3, r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	440b      	add	r3, r1
 8009df2:	339f      	adds	r3, #159	; 0x9f
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d007      	beq.n	8009e0a <rfalNfcPollActivation+0x2ca>
            {
                rfalNfcbSensbRes sensbRes;
                uint8_t          sensbResLen;
                
                /* Wake up all cards. SENSB_RES may return collision but the NFCID0 is available to explicitly select NFC-B card via ATTRIB; so error will be ignored here */
                rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, RFAL_NFCB_SLOT_NUM_1, &sensbRes, &sensbResLen );
 8009dfa:	f107 030f 	add.w	r3, r7, #15
 8009dfe:	f107 0210 	add.w	r2, r7, #16
 8009e02:	2100      	movs	r1, #0
 8009e04:	2008      	movs	r0, #8
 8009e06:	f002 fca9 	bl	800c75c <rfalNfcbPollerCheckPresence>
            }
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcb.sensbRes.nfcid0;
 8009e0a:	79f9      	ldrb	r1, [r7, #7]
 8009e0c:	79fa      	ldrb	r2, [r7, #7]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	1a5b      	subs	r3, r3, r1
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	3390      	adds	r3, #144	; 0x90
 8009e18:	499e      	ldr	r1, [pc, #632]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009e1a:	440b      	add	r3, r1
 8009e1c:	1cd9      	adds	r1, r3, #3
 8009e1e:	489d      	ldr	r0, [pc, #628]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009e20:	4613      	mov	r3, r2
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	4403      	add	r3, r0
 8009e2a:	33a8      	adds	r3, #168	; 0xa8
 8009e2c:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCB_NFCID0_LEN;
 8009e2e:	79fa      	ldrb	r2, [r7, #7]
 8009e30:	4998      	ldr	r1, [pc, #608]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009e32:	4613      	mov	r3, r2
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	1a9b      	subs	r3, r3, r2
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	440b      	add	r3, r1
 8009e3c:	33ac      	adds	r3, #172	; 0xac
 8009e3e:	2204      	movs	r2, #4
 8009e40:	701a      	strb	r2, [r3, #0]
            
        #if RFAL_FEATURE_ISO_DEP_POLL
            /* Check if device supports  ISO-DEP (ISO14443-4) */
            if( (gNfcDev.devList[devIt].dev.nfcb.sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U )
 8009e42:	79fa      	ldrb	r2, [r7, #7]
 8009e44:	4993      	ldr	r1, [pc, #588]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009e46:	4613      	mov	r3, r2
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	440b      	add	r3, r1
 8009e50:	339c      	adds	r3, #156	; 0x9c
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d030      	beq.n	8009ebe <rfalNfcPollActivation+0x37e>
            {
                rfalIsoDepInitialize();
 8009e5c:	f7fd fed0 	bl	8007c00 <rfalIsoDepInitialize>
                /* Perform ISO-DEP (ISO14443-4) activation: RATS and PPS if supported    */
                EXIT_ON_ERR( err, rfalIsoDepPollBHandleActivation( (rfalIsoDepFSxI)RFAL_ISODEP_FSDI_DEFAULT, RFAL_ISODEP_NO_DID, RFAL_BR_424, 0x00, &gNfcDev.devList[devIt].dev.nfcb, NULL, 0, &gNfcDev.devList[devIt].proto.isoDep ) );
 8009e60:	79fa      	ldrb	r2, [r7, #7]
 8009e62:	4613      	mov	r3, r2
 8009e64:	011b      	lsls	r3, r3, #4
 8009e66:	1a9b      	subs	r3, r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	3390      	adds	r3, #144	; 0x90
 8009e6c:	4a89      	ldr	r2, [pc, #548]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009e6e:	4413      	add	r3, r2
 8009e70:	1c59      	adds	r1, r3, #1
 8009e72:	79fa      	ldrb	r2, [r7, #7]
 8009e74:	4613      	mov	r3, r2
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	33b0      	adds	r3, #176	; 0xb0
 8009e7e:	4a85      	ldr	r2, [pc, #532]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009e80:	4413      	add	r3, r2
 8009e82:	9303      	str	r3, [sp, #12]
 8009e84:	2300      	movs	r3, #0
 8009e86:	9302      	str	r3, [sp, #8]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	9100      	str	r1, [sp, #0]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2202      	movs	r2, #2
 8009e92:	2100      	movs	r1, #0
 8009e94:	2008      	movs	r0, #8
 8009e96:	f7fe fd2d 	bl	80088f4 <rfalIsoDepPollBHandleActivation>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <rfalNfcPollActivation+0x368>
 8009ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ea6:	e0f1      	b.n	800a08c <rfalNfcPollActivation+0x54c>
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_ISODEP;       /* NFC-B T4T device activated */
 8009ea8:	79fa      	ldrb	r2, [r7, #7]
 8009eaa:	497a      	ldr	r1, [pc, #488]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009eac:	4613      	mov	r3, r2
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	440b      	add	r3, r1
 8009eb6:	33ad      	adds	r3, #173	; 0xad
 8009eb8:	2201      	movs	r2, #1
 8009eba:	701a      	strb	r2, [r3, #0]
                break;
 8009ebc:	e0db      	b.n	800a076 <rfalNfcPollActivation+0x536>
            }
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
            
            gNfcDev.devList[devIt].rfInterface =  RFAL_NFC_INTERFACE_RF;              /* NFC-B device activated     */
 8009ebe:	79fa      	ldrb	r2, [r7, #7]
 8009ec0:	4974      	ldr	r1, [pc, #464]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	440b      	add	r3, r1
 8009ecc:	33ad      	adds	r3, #173	; 0xad
 8009ece:	2200      	movs	r2, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
            break;
 8009ed2:	e0d0      	b.n	800a076 <rfalNfcPollActivation+0x536>
        /* Passive NFC-F Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCF
        case RFAL_NFC_LISTEN_TYPE_NFCF:
            
            rfalNfcfPollerInitialize( gNfcDev.disc.nfcfBR );
 8009ed4:	4b6f      	ldr	r3, [pc, #444]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009ed6:	7cdb      	ldrb	r3, [r3, #19]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 ffe9 	bl	800ceb0 <rfalNfcfPollerInitialize>
        
        #if RFAL_FEATURE_NFC_DEP
            if( rfalNfcfIsNfcDepSupported( &gNfcDev.devList[devIt].dev.nfcf ) )
 8009ede:	79fa      	ldrb	r2, [r7, #7]
 8009ee0:	496c      	ldr	r1, [pc, #432]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	011b      	lsls	r3, r3, #4
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	440b      	add	r3, r1
 8009eec:	3393      	adds	r3, #147	; 0x93
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d145      	bne.n	8009f80 <rfalNfcPollActivation+0x440>
 8009ef4:	79fa      	ldrb	r2, [r7, #7]
 8009ef6:	4967      	ldr	r1, [pc, #412]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009ef8:	4613      	mov	r3, r2
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	440b      	add	r3, r1
 8009f02:	3394      	adds	r3, #148	; 0x94
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2bfe      	cmp	r3, #254	; 0xfe
 8009f08:	d13a      	bne.n	8009f80 <rfalNfcPollActivation+0x440>
            {
                /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
                EXIT_ON_ERR( err, rfalNfcNfcDepActivate( &gNfcDev.devList[devIt], RFAL_NFCDEP_COMM_PASSIVE, NULL, 0 ) );
 8009f0a:	79fa      	ldrb	r2, [r7, #7]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	011b      	lsls	r3, r3, #4
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	3390      	adds	r3, #144	; 0x90
 8009f16:	4a5f      	ldr	r2, [pc, #380]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f18:	1898      	adds	r0, r3, r2
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2100      	movs	r1, #0
 8009f20:	f000 f8ba 	bl	800a098 <rfalNfcNfcDepActivate>
 8009f24:	4603      	mov	r3, r0
 8009f26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <rfalNfcPollActivation+0x3f2>
 8009f2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f30:	e0ac      	b.n	800a08c <rfalNfcPollActivation+0x54c>
                
                /* Set NFCID */
                gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].proto.nfcDep.activation.Target.ATR_RES.NFCID3;
 8009f32:	79f9      	ldrb	r1, [r7, #7]
 8009f34:	79fa      	ldrb	r2, [r7, #7]
 8009f36:	460b      	mov	r3, r1
 8009f38:	011b      	lsls	r3, r3, #4
 8009f3a:	1a5b      	subs	r3, r3, r1
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	33b0      	adds	r3, #176	; 0xb0
 8009f40:	4954      	ldr	r1, [pc, #336]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f42:	440b      	add	r3, r1
 8009f44:	1c99      	adds	r1, r3, #2
 8009f46:	4853      	ldr	r0, [pc, #332]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f48:	4613      	mov	r3, r2
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	1a9b      	subs	r3, r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4403      	add	r3, r0
 8009f52:	33a8      	adds	r3, #168	; 0xa8
 8009f54:	6019      	str	r1, [r3, #0]
                gNfcDev.devList[devIt].nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 8009f56:	79fa      	ldrb	r2, [r7, #7]
 8009f58:	494e      	ldr	r1, [pc, #312]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	440b      	add	r3, r1
 8009f64:	33ac      	adds	r3, #172	; 0xac
 8009f66:	220a      	movs	r2, #10
 8009f68:	701a      	strb	r2, [r3, #0]
                
                gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_NFCDEP;       /* NFC-F P2P device activated */
 8009f6a:	79fa      	ldrb	r2, [r7, #7]
 8009f6c:	4949      	ldr	r1, [pc, #292]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f6e:	4613      	mov	r3, r2
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	440b      	add	r3, r1
 8009f78:	33ad      	adds	r3, #173	; 0xad
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	701a      	strb	r2, [r3, #0]
                break;
 8009f7e:	e07a      	b.n	800a076 <rfalNfcPollActivation+0x536>
            }
        #endif /* RFAL_FEATURE_NFC_DEP */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcf.sensfRes.NFCID2;
 8009f80:	79f9      	ldrb	r1, [r7, #7]
 8009f82:	79fa      	ldrb	r2, [r7, #7]
 8009f84:	460b      	mov	r3, r1
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	1a5b      	subs	r3, r3, r1
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	3390      	adds	r3, #144	; 0x90
 8009f8e:	4941      	ldr	r1, [pc, #260]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f90:	440b      	add	r3, r1
 8009f92:	1cd9      	adds	r1, r3, #3
 8009f94:	483f      	ldr	r0, [pc, #252]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009f96:	4613      	mov	r3, r2
 8009f98:	011b      	lsls	r3, r3, #4
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	4403      	add	r3, r0
 8009fa0:	33a8      	adds	r3, #168	; 0xa8
 8009fa2:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCF_NFCID2_LEN;
 8009fa4:	79fa      	ldrb	r2, [r7, #7]
 8009fa6:	493b      	ldr	r1, [pc, #236]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009fa8:	4613      	mov	r3, r2
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	440b      	add	r3, r1
 8009fb2:	33ac      	adds	r3, #172	; 0xac
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	701a      	strb	r2, [r3, #0]
            
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-F T3T device activated */
 8009fb8:	79fa      	ldrb	r2, [r7, #7]
 8009fba:	4936      	ldr	r1, [pc, #216]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	440b      	add	r3, r1
 8009fc6:	33ad      	adds	r3, #173	; 0xad
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
            break;
 8009fcc:	e053      	b.n	800a076 <rfalNfcPollActivation+0x536>
        /* Passive NFC-V Activation                                                    */
        /*******************************************************************************/
    #if RFAL_FEATURE_NFCV
        case RFAL_NFC_LISTEN_TYPE_NFCV:
            
            rfalNfcvPollerInitialize();
 8009fce:	f003 f84d 	bl	800d06c <rfalNfcvPollerInitialize>
            
            /* No specific activation needed for a T5T */
            
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.nfcv.InvRes.UID;
 8009fd2:	79f9      	ldrb	r1, [r7, #7]
 8009fd4:	79fa      	ldrb	r2, [r7, #7]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	1a5b      	subs	r3, r3, r1
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	3390      	adds	r3, #144	; 0x90
 8009fe0:	492c      	ldr	r1, [pc, #176]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009fe2:	440b      	add	r3, r1
 8009fe4:	1cd9      	adds	r1, r3, #3
 8009fe6:	482b      	ldr	r0, [pc, #172]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009fe8:	4613      	mov	r3, r2
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	1a9b      	subs	r3, r3, r2
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	4403      	add	r3, r0
 8009ff2:	33a8      	adds	r3, #168	; 0xa8
 8009ff4:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_NFCV_UID_LEN;
 8009ff6:	79fa      	ldrb	r2, [r7, #7]
 8009ff8:	4926      	ldr	r1, [pc, #152]	; (800a094 <rfalNfcPollActivation+0x554>)
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	440b      	add	r3, r1
 800a004:	33ac      	adds	r3, #172	; 0xac
 800a006:	2208      	movs	r2, #8
 800a008:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* NFC-V T5T device activated */
 800a00a:	79fa      	ldrb	r2, [r7, #7]
 800a00c:	4921      	ldr	r1, [pc, #132]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a00e:	4613      	mov	r3, r2
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	1a9b      	subs	r3, r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	440b      	add	r3, r1
 800a018:	33ad      	adds	r3, #173	; 0xad
 800a01a:	2200      	movs	r2, #0
 800a01c:	701a      	strb	r2, [r3, #0]
            break;
 800a01e:	e02a      	b.n	800a076 <rfalNfcPollActivation+0x536>
        /* Passive ST25TB Activation                                                   */
        /*******************************************************************************/
    #if RFAL_FEATURE_ST25TB
        case RFAL_NFC_LISTEN_TYPE_ST25TB:
            
            rfalSt25tbPollerInitialize();
 800a020:	f005 ff31 	bl	800fe86 <rfalSt25tbPollerInitialize>
            
            /* No specific activation needed for a ST25TB */
        
            /* Set NFCID */
            gNfcDev.devList[devIt].nfcid    = gNfcDev.devList[devIt].dev.st25tb.UID;
 800a024:	79f9      	ldrb	r1, [r7, #7]
 800a026:	79fa      	ldrb	r2, [r7, #7]
 800a028:	460b      	mov	r3, r1
 800a02a:	011b      	lsls	r3, r3, #4
 800a02c:	1a5b      	subs	r3, r3, r1
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	3390      	adds	r3, #144	; 0x90
 800a032:	4918      	ldr	r1, [pc, #96]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a034:	440b      	add	r3, r1
 800a036:	1c99      	adds	r1, r3, #2
 800a038:	4816      	ldr	r0, [pc, #88]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a03a:	4613      	mov	r3, r2
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4403      	add	r3, r0
 800a044:	33a8      	adds	r3, #168	; 0xa8
 800a046:	6019      	str	r1, [r3, #0]
            gNfcDev.devList[devIt].nfcidLen = RFAL_ST25TB_UID_LEN;
 800a048:	79fa      	ldrb	r2, [r7, #7]
 800a04a:	4912      	ldr	r1, [pc, #72]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a04c:	4613      	mov	r3, r2
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	1a9b      	subs	r3, r3, r2
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	440b      	add	r3, r1
 800a056:	33ac      	adds	r3, #172	; 0xac
 800a058:	2208      	movs	r2, #8
 800a05a:	701a      	strb	r2, [r3, #0]
        
            gNfcDev.devList[devIt].rfInterface = RFAL_NFC_INTERFACE_RF;               /* ST25TB device activated */
 800a05c:	79fa      	ldrb	r2, [r7, #7]
 800a05e:	490d      	ldr	r1, [pc, #52]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a060:	4613      	mov	r3, r2
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	440b      	add	r3, r1
 800a06a:	33ad      	adds	r3, #173	; 0xad
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
            break;
 800a070:	e001      	b.n	800a076 <rfalNfcPollActivation+0x536>
    #endif /* RFAL_FEATURE_ST25TB */
        
        /*******************************************************************************/
        default:
            return ERR_WRONG_STATE;
 800a072:	2321      	movs	r3, #33	; 0x21
 800a074:	e00a      	b.n	800a08c <rfalNfcPollActivation+0x54c>
    }
    
    gNfcDev.activeDev = &gNfcDev.devList[devIt];                                      /* Assign active device to be used further on */
 800a076:	79fa      	ldrb	r2, [r7, #7]
 800a078:	4613      	mov	r3, r2
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	3390      	adds	r3, #144	; 0x90
 800a082:	4a04      	ldr	r2, [pc, #16]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a084:	4413      	add	r3, r2
 800a086:	4a03      	ldr	r2, [pc, #12]	; (800a094 <rfalNfcPollActivation+0x554>)
 800a088:	6093      	str	r3, [r2, #8]
    return ERR_NONE;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3728      	adds	r7, #40	; 0x28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	200002d8 	.word	0x200002d8

0800a098 <rfalNfcNfcDepActivate>:
 * 
 ******************************************************************************
 */
#if RFAL_FEATURE_NFC_DEP
static ReturnCode rfalNfcNfcDepActivate( rfalNfcDevice *device, rfalNfcDepCommMode commMode, const uint8_t *atrReq, uint16_t atrReqLen )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	607a      	str	r2, [r7, #4]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	72fb      	strb	r3, [r7, #11]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	813b      	strh	r3, [r7, #8]
    rfalNfcDepAtrParam          initParam;
    
    /* If we are in Poll mode */
    if( rfalNfcIsRemDevListener( device->type ) )
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b05      	cmp	r3, #5
 800a0b2:	d82f      	bhi.n	800a114 <rfalNfcNfcDepActivate+0x7c>
    {
        /*******************************************************************************/
        /* If Passive F use the NFCID2 retrieved from SENSF                            */
        if( device->type == RFAL_NFC_LISTEN_TYPE_NFCF )
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d105      	bne.n	800a0c8 <rfalNfcNfcDepActivate+0x30>
        {
            initParam.nfcid    = device->dev.nfcf.sensfRes.NFCID2;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3303      	adds	r3, #3
 800a0c0:	617b      	str	r3, [r7, #20]
            initParam.nfcidLen = RFAL_NFCF_NFCID2_LEN;
 800a0c2:	2308      	movs	r3, #8
 800a0c4:	763b      	strb	r3, [r7, #24]
 800a0c6:	e003      	b.n	800a0d0 <rfalNfcNfcDepActivate+0x38>
        }
        else
        {
            initParam.nfcid    = gNfcDev.disc.nfcid3; 
 800a0c8:	4b15      	ldr	r3, [pc, #84]	; (800a120 <rfalNfcNfcDepActivate+0x88>)
 800a0ca:	617b      	str	r3, [r7, #20]
            initParam.nfcidLen = RFAL_NFCDEP_NFCID3_LEN;
 800a0cc:	230a      	movs	r3, #10
 800a0ce:	763b      	strb	r3, [r7, #24]
        }    
        
        initParam.BS        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	76fb      	strb	r3, [r7, #27]
        initParam.BR        = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	773b      	strb	r3, [r7, #28]
        initParam.DID       = RFAL_NFCDEP_DID_NO;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	767b      	strb	r3, [r7, #25]
        initParam.NAD       = RFAL_NFCDEP_NAD_NO;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	76bb      	strb	r3, [r7, #26]
        initParam.LR        = RFAL_NFCDEP_LR_254;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	777b      	strb	r3, [r7, #29]
        initParam.GB        = gNfcDev.disc.GB;
 800a0e4:	4b0f      	ldr	r3, [pc, #60]	; (800a124 <rfalNfcNfcDepActivate+0x8c>)
 800a0e6:	623b      	str	r3, [r7, #32]
        initParam.GBLen     = gNfcDev.disc.GBLen;
 800a0e8:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <rfalNfcNfcDepActivate+0x90>)
 800a0ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a0ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        initParam.commMode  = commMode;
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	743b      	strb	r3, [r7, #16]
        initParam.operParam = (RFAL_NFCDEP_OPER_FULL_MI_EN | RFAL_NFCDEP_OPER_EMPTY_DEP_DIS | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800a0f6:	230e      	movs	r3, #14
 800a0f8:	747b      	strb	r3, [r7, #17]
        
        rfalNfcDepInitialize();
 800a0fa:	f001 fb43 	bl	800b784 <rfalNfcDepInitialize>
        /* Perform NFC-DEP (P2P) activation: ATR and PSL if supported */
        return rfalNfcDepInitiatorHandleActivation( &initParam, RFAL_BR_424, &device->proto.nfcDep );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f103 0220 	add.w	r2, r3, #32
 800a104:	f107 0310 	add.w	r3, r7, #16
 800a108:	2102      	movs	r1, #2
 800a10a:	4618      	mov	r0, r3
 800a10c:	f001 fd58 	bl	800bbc0 <rfalNfcDepInitiatorHandleActivation>
 800a110:	4603      	mov	r3, r0
 800a112:	e000      	b.n	800a116 <rfalNfcNfcDepActivate+0x7e>
    }
#endif  /* RFAL_FEATURE_LISTEN_MODE */
    
    else
    {
        return ERR_INTERNAL;
 800a114:	230c      	movs	r3, #12
    }
}
 800a116:	4618      	mov	r0, r3
 800a118:	3728      	adds	r7, #40	; 0x28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200002ec 	.word	0x200002ec
 800a124:	200002f6 	.word	0x200002f6
 800a128:	200002d8 	.word	0x200002d8

0800a12c <rfalNfcDeactivation>:
 * \return  ERR_XXXX  : Error occurred
 * 
 ******************************************************************************
 */
static ReturnCode rfalNfcDeactivation( void )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
    /* Check if a device has been activated */
    if( gNfcDev.activeDev != NULL )
 800a130:	4b11      	ldr	r3, [pc, #68]	; (800a178 <rfalNfcDeactivation+0x4c>)
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d011      	beq.n	800a15c <rfalNfcDeactivation+0x30>
    {
        switch( gNfcDev.activeDev->rfInterface )
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <rfalNfcDeactivation+0x4c>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	7f5b      	ldrb	r3, [r3, #29]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d004      	beq.n	800a14c <rfalNfcDeactivation+0x20>
 800a142:	2b02      	cmp	r3, #2
 800a144:	d005      	beq.n	800a152 <rfalNfcDeactivation+0x26>
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <rfalNfcDeactivation+0x34>
 800a14a:	e005      	b.n	800a158 <rfalNfcDeactivation+0x2c>
                break;                                                                /* No specific deactivation to be performed */
            
            /*******************************************************************************/
        #if RFAL_FEATURE_ISO_DEP_POLL
            case RFAL_NFC_INTERFACE_ISODEP:
                rfalIsoDepDeselect();                                                 /* Send a Deselect to device */
 800a14c:	f7fe f852 	bl	80081f4 <rfalIsoDepDeselect>
                break;
 800a150:	e007      	b.n	800a162 <rfalNfcDeactivation+0x36>
        #endif /* RFAL_FEATURE_ISO_DEP_POLL */
                
            /*******************************************************************************/
        #if RFAL_FEATURE_NFC_DEP
            case RFAL_NFC_INTERFACE_NFCDEP:
                rfalNfcDepRLS();                                                      /* Send a Release to device */
 800a152:	f001 fcc9 	bl	800bae8 <rfalNfcDepRLS>
                break;
 800a156:	e004      	b.n	800a162 <rfalNfcDeactivation+0x36>
        #endif /* RFAL_FEATURE_NFC_DEP */
                
            default:
                return ERR_REQUEST;
 800a158:	2305      	movs	r3, #5
 800a15a:	e00a      	b.n	800a172 <rfalNfcDeactivation+0x46>
        }
    }
 800a15c:	bf00      	nop
 800a15e:	e000      	b.n	800a162 <rfalNfcDeactivation+0x36>
                break;                                                                /* No specific deactivation to be performed */
 800a160:	bf00      	nop
    
    #if RFAL_FEATURE_WAKEUP_MODE
        rfalWakeUpModeStop();
 800a162:	f005 fdb9 	bl	800fcd8 <rfalWakeUpModeStop>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
    
    #if RFAL_FEATURE_LISTEN_MODE
        rfalListenStop();
    #else
        rfalFieldOff();
 800a166:	f003 fecf 	bl	800df08 <rfalFieldOff>
    #endif
    
    gNfcDev.activeDev = NULL;
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <rfalNfcDeactivation+0x4c>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	609a      	str	r2, [r3, #8]
    return ERR_NONE;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	200002d8 	.word	0x200002d8

0800a17c <nfcipDxIsSupported>:
/*******************************************************************************/


/*******************************************************************************/
static bool nfcipDxIsSupported( uint8_t Dx, uint8_t BRx, uint8_t BSx )
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	71fb      	strb	r3, [r7, #7]
 800a186:	460b      	mov	r3, r1
 800a188:	71bb      	strb	r3, [r7, #6]
 800a18a:	4613      	mov	r3, r2
 800a18c:	717b      	strb	r3, [r7, #5]
	uint8_t Bx;
	
	/* Take the min of the possible bit rates, we'll use one for both directions */
	Bx = MIN(BRx, BSx);
 800a18e:	797a      	ldrb	r2, [r7, #5]
 800a190:	79bb      	ldrb	r3, [r7, #6]
 800a192:	4293      	cmp	r3, r2
 800a194:	bf28      	it	cs
 800a196:	4613      	movcs	r3, r2
 800a198:	73fb      	strb	r3, [r7, #15]
	
	/* Lower bit rates must be supported for P2P */
	if( (Dx <= (uint8_t)RFAL_NFCDEP_Dx_04_424) )
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d801      	bhi.n	800a1a4 <nfcipDxIsSupported+0x28>
	{
		return true;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e008      	b.n	800a1b6 <nfcipDxIsSupported+0x3a>
	}
	
	if( (Dx == (uint8_t)RFAL_NFCDEP_Dx_08_848) && (Bx >= (uint8_t)RFAL_NFCDEP_Bx_08_848) )
 800a1a4:	79fb      	ldrb	r3, [r7, #7]
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d104      	bne.n	800a1b4 <nfcipDxIsSupported+0x38>
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <nfcipDxIsSupported+0x38>
	{
		return true;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e000      	b.n	800a1b6 <nfcipDxIsSupported+0x3a>
	}

	return false;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <nfcipTxRx>:


/*******************************************************************************/
static ReturnCode nfcipTxRx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint32_t fwt, uint8_t* paylBuf, uint8_t paylBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t *rxActLen )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
    ReturnCode ret;
    
    if( (cmd == NFCIP_CMD_DEP_REQ) || (cmd == NFCIP_CMD_DEP_RES) ) /* this method cannot be used for DEPs */
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b06      	cmp	r3, #6
 800a1d8:	d002      	beq.n	800a1e0 <nfcipTxRx+0x1c>
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b07      	cmp	r3, #7
 800a1de:	d101      	bne.n	800a1e4 <nfcipTxRx+0x20>
    {
        return ERR_PARAM;
 800a1e0:	2307      	movs	r3, #7
 800a1e2:	e030      	b.n	800a246 <nfcipTxRx+0x82>
    }
    
    /* Assign the global params for this TxRx */
    gNfcip.rxBuf       = rxBuf;
 800a1e4:	4a1a      	ldr	r2, [pc, #104]	; (800a250 <nfcipTxRx+0x8c>)
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	6653      	str	r3, [r2, #100]	; 0x64
    gNfcip.rxBufLen    = rxBufLen;
 800a1ea:	4a19      	ldr	r2, [pc, #100]	; (800a250 <nfcipTxRx+0x8c>)
 800a1ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1ee:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    gNfcip.rxRcvdLen   = rxActLen;
 800a1f2:	4a17      	ldr	r2, [pc, #92]	; (800a250 <nfcipTxRx+0x8c>)
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	66d3      	str	r3, [r2, #108]	; 0x6c
    
    
    /*******************************************************************************/
	/* Transmission                                                                */
	/*******************************************************************************/
    if(txBuf != NULL)                                              /* if nothing to Tx, just do Rx */               
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d013      	beq.n	800a226 <nfcipTxRx+0x62>
    {
        EXIT_ON_ERR( ret, nfcipTx( cmd, txBuf, paylBuf, paylBufLen, 0, fwt ) ); 
 800a1fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a202:	b29a      	uxth	r2, r3
 800a204:	7bf8      	ldrb	r0, [r7, #15]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	2300      	movs	r3, #0
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	4613      	mov	r3, r2
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	f000 ffb6 	bl	800b184 <nfcipTx>
 800a218:	4603      	mov	r3, r0
 800a21a:	82fb      	strh	r3, [r7, #22]
 800a21c:	8afb      	ldrh	r3, [r7, #22]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <nfcipTxRx+0x62>
 800a222:	8afb      	ldrh	r3, [r7, #22]
 800a224:	e00f      	b.n	800a246 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/
	/* Reception                                                                   */
	/*******************************************************************************/
    ret = nfcipDataRx( true );
 800a226:	2001      	movs	r0, #1
 800a228:	f001 fdf2 	bl	800be10 <nfcipDataRx>
 800a22c:	4603      	mov	r3, r0
 800a22e:	82fb      	strh	r3, [r7, #22]
    if( ret != ERR_NONE )
 800a230:	8afb      	ldrh	r3, [r7, #22]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <nfcipTxRx+0x76>
    {
        return ret;
 800a236:	8afb      	ldrh	r3, [r7, #22]
 800a238:	e005      	b.n	800a246 <nfcipTxRx+0x82>
    }
    
    /*******************************************************************************/    
    *rxActLen = *rxBuf;                                      		/* Use LEN byte instead due to with/without CRC modes */
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b29a      	uxth	r2, r3
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	801a      	strh	r2, [r3, #0]
    return ERR_NONE;                                         		/* Tx and Rx completed successfully                   */
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	200007d8 	.word	0x200007d8

0800a254 <nfcipDEPControlMsg>:


/*******************************************************************************/
static ReturnCode nfcipDEPControlMsg( uint8_t pfb, uint8_t RTOX  )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08c      	sub	sp, #48	; 0x30
 800a258:	af02      	add	r7, sp, #8
 800a25a:	4603      	mov	r3, r0
 800a25c:	460a      	mov	r2, r1
 800a25e:	71fb      	strb	r3, [r7, #7]
 800a260:	4613      	mov	r3, r2
 800a262:	71bb      	strb	r3, [r7, #6]


    /*******************************************************************************/
    /* Calculate Cmd and fwt to be used                                            */
    /*******************************************************************************/
    depCmd = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_CMD_DEP_RES : NFCIP_CMD_DEP_REQ);        
 800a264:	4b2a      	ldr	r3, [pc, #168]	; (800a310 <nfcipDEPControlMsg+0xbc>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d101      	bne.n	800a270 <nfcipDEPControlMsg+0x1c>
 800a26c:	2307      	movs	r3, #7
 800a26e:	e000      	b.n	800a272 <nfcipDEPControlMsg+0x1e>
 800a270:	2306      	movs	r3, #6
 800a272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    fwt    = ((gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_NO_FWT : (nfcip_PFBisSTO( pfb ) ? ( (RTOX*gNfcip.cfg.fwt) + gNfcip.cfg.dFwt) : (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) ) );
 800a276:	4b26      	ldr	r3, [pc, #152]	; (800a310 <nfcipDEPControlMsg+0xbc>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d018      	beq.n	800a2b0 <nfcipDEPControlMsg+0x5c>
 800a27e:	79fb      	ldrb	r3, [r7, #7]
 800a280:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a284:	2b80      	cmp	r3, #128	; 0x80
 800a286:	d10d      	bne.n	800a2a4 <nfcipDEPControlMsg+0x50>
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	f003 0310 	and.w	r3, r3, #16
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d008      	beq.n	800a2a4 <nfcipDEPControlMsg+0x50>
 800a292:	79bb      	ldrb	r3, [r7, #6]
 800a294:	4a1e      	ldr	r2, [pc, #120]	; (800a310 <nfcipDEPControlMsg+0xbc>)
 800a296:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a298:	fb02 f203 	mul.w	r2, r2, r3
 800a29c:	4b1c      	ldr	r3, [pc, #112]	; (800a310 <nfcipDEPControlMsg+0xbc>)
 800a29e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a0:	4413      	add	r3, r2
 800a2a2:	e007      	b.n	800a2b4 <nfcipDEPControlMsg+0x60>
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	; (800a310 <nfcipDEPControlMsg+0xbc>)
 800a2a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2a8:	4b19      	ldr	r3, [pc, #100]	; (800a310 <nfcipDEPControlMsg+0xbc>)
 800a2aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ac:	4413      	add	r3, r2
 800a2ae:	e001      	b.n	800a2b4 <nfcipDEPControlMsg+0x60>
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b4:	623b      	str	r3, [r7, #32]
    
    if( nfcip_PFBisSTO( pfb ) )
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a2bc:	2b80      	cmp	r3, #128	; 0x80
 800a2be:	d116      	bne.n	800a2ee <nfcipDEPControlMsg+0x9a>
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	f003 0310 	and.w	r3, r3, #16
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d011      	beq.n	800a2ee <nfcipDEPControlMsg+0x9a>
    {
        ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN] = RTOX;
 800a2ca:	79bb      	ldrb	r3, [r7, #6]
 800a2cc:	747b      	strb	r3, [r7, #17]
        return nfcipTx( depCmd, ctrlMsg, &ctrlMsg[RFAL_NFCDEP_DEPREQ_HEADER_LEN], sizeof(uint8_t), pfb, fwt );
 800a2ce:	f107 030c 	add.w	r3, r7, #12
 800a2d2:	1d5a      	adds	r2, r3, #5
 800a2d4:	f107 010c 	add.w	r1, r7, #12
 800a2d8:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f000 ff4d 	bl	800b184 <nfcipTx>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	e00c      	b.n	800a308 <nfcipDEPControlMsg+0xb4>
    }
    else
    {
        return nfcipTx( depCmd, ctrlMsg, NULL, 0, pfb, fwt );
 800a2ee:	f107 010c 	add.w	r1, r7, #12
 800a2f2:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800a2f6:	6a3b      	ldr	r3, [r7, #32]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	2300      	movs	r3, #0
 800a300:	2200      	movs	r2, #0
 800a302:	f000 ff3f 	bl	800b184 <nfcipTx>
 800a306:	4603      	mov	r3, r0
    }
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3728      	adds	r7, #40	; 0x28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	200007d8 	.word	0x200007d8

0800a314 <nfcipClearCounters>:

/*******************************************************************************/
static void nfcipClearCounters( void )
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
    gNfcip.cntATNRetrys  = 0;
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <nfcipClearCounters+0x38>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    gNfcip.cntNACKRetrys = 0;
 800a320:	4b0a      	ldr	r3, [pc, #40]	; (800a34c <nfcipClearCounters+0x38>)
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    gNfcip.cntTORetrys   = 0;
 800a328:	4b08      	ldr	r3, [pc, #32]	; (800a34c <nfcipClearCounters+0x38>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    gNfcip.cntTxRetrys   = 0;
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <nfcipClearCounters+0x38>)
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    gNfcip.cntRTOXRetrys = 0;
 800a338:	4b04      	ldr	r3, [pc, #16]	; (800a34c <nfcipClearCounters+0x38>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800a340:	bf00      	nop
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	200007d8 	.word	0x200007d8

0800a350 <nfcipInitiatorHandleDEP>:

/*******************************************************************************/
static ReturnCode nfcipInitiatorHandleDEP( ReturnCode rxRes, uint16_t rxLen, uint16_t *outActRxLen, bool *outIsChaining )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60ba      	str	r2, [r7, #8]
 800a358:	607b      	str	r3, [r7, #4]
 800a35a:	4603      	mov	r3, r0
 800a35c:	81fb      	strh	r3, [r7, #14]
 800a35e:	460b      	mov	r3, r1
 800a360:	81bb      	strh	r3, [r7, #12]
    uint8_t    rxMsgIt;
    uint8_t    rxPFB;
    uint8_t    rxRTOX;
    uint8_t    optHdrLen;
    
    ret        = ERR_INTERNAL;
 800a362:	230c      	movs	r3, #12
 800a364:	82fb      	strh	r3, [r7, #22]
    rxMsgIt    = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	757b      	strb	r3, [r7, #21]
    optHdrLen  = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	753b      	strb	r3, [r7, #20]
    
    *outActRxLen    = 0;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2200      	movs	r2, #0
 800a372:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 800a37a:	89fb      	ldrh	r3, [r7, #14]
 800a37c:	2b1d      	cmp	r3, #29
 800a37e:	f200 80c6 	bhi.w	800a50e <nfcipInitiatorHandleDEP+0x1be>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <nfcipInitiatorHandleDEP+0x38>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a513 	.word	0x0800a513
 800a38c:	0800a50f 	.word	0x0800a50f
 800a390:	0800a50b 	.word	0x0800a50b
 800a394:	0800a50f 	.word	0x0800a50f
 800a398:	0800a401 	.word	0x0800a401
 800a39c:	0800a50f 	.word	0x0800a50f
 800a3a0:	0800a50f 	.word	0x0800a50f
 800a3a4:	0800a50f 	.word	0x0800a50f
 800a3a8:	0800a50f 	.word	0x0800a50f
 800a3ac:	0800a4c7 	.word	0x0800a4c7
 800a3b0:	0800a50f 	.word	0x0800a50f
 800a3b4:	0800a50f 	.word	0x0800a50f
 800a3b8:	0800a50f 	.word	0x0800a50f
 800a3bc:	0800a50f 	.word	0x0800a50f
 800a3c0:	0800a50f 	.word	0x0800a50f
 800a3c4:	0800a50f 	.word	0x0800a50f
 800a3c8:	0800a50f 	.word	0x0800a50f
 800a3cc:	0800a50f 	.word	0x0800a50f
 800a3d0:	0800a50f 	.word	0x0800a50f
 800a3d4:	0800a50f 	.word	0x0800a50f
 800a3d8:	0800a50f 	.word	0x0800a50f
 800a3dc:	0800a4c7 	.word	0x0800a4c7
 800a3e0:	0800a50f 	.word	0x0800a50f
 800a3e4:	0800a50f 	.word	0x0800a50f
 800a3e8:	0800a50f 	.word	0x0800a50f
 800a3ec:	0800a50f 	.word	0x0800a50f
 800a3f0:	0800a50f 	.word	0x0800a50f
 800a3f4:	0800a4c7 	.word	0x0800a4c7
 800a3f8:	0800a50f 	.word	0x0800a50f
 800a3fc:	0800a4c7 	.word	0x0800a4c7
        case ERR_TIMEOUT:
            
            nfcipLogI( " NFCIP(I) TIMEOUT  TORetrys:%d \r\n", gNfcip.cntTORetrys );
            
            /* Digital 1.0 14.15.5.6 - If nTO >= Max raise protocol error */
            if( gNfcip.cntTORetrys++ >= NFCIP_MAX_TO_RETRYS )
 800a400:	4bac      	ldr	r3, [pc, #688]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a402:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	b2d1      	uxtb	r1, r2
 800a40a:	4aaa      	ldr	r2, [pc, #680]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a40c:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 800a410:	2b02      	cmp	r3, #2
 800a412:	d901      	bls.n	800a418 <nfcipInitiatorHandleDEP+0xc8>
            {
                return ERR_PROTO;
 800a414:	230b      	movs	r3, #11
 800a416:	e264      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
             * will be done #54. 
             * This is used to address the issue some devices that havea big TO. 
             * Normally LLCP layer has timeout already, and NFCIP layer is still
             * running error handling, retrying ATN/NACKs                                  */
            /*******************************************************************************/
            if( nfcipIsDeactivationPending() )
 800a418:	4ba6      	ldr	r3, [pc, #664]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d008      	beq.n	800a434 <nfcipInitiatorHandleDEP+0xe4>
 800a422:	4ba4      	ldr	r3, [pc, #656]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a428:	4798      	blx	r3
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <nfcipInitiatorHandleDEP+0xe4>
            {
                nfcipLogI( " skipping error recovery due deactivation pending \r\n");
                return ERR_TIMEOUT;
 800a430:	2304      	movs	r3, #4
 800a432:	e256      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.0 14.15.5.6 1)  If last PDU was NACK */
            if( nfcip_PFBisRNACK(gNfcip.lastPFB) )
 800a434:	4b9f      	ldr	r3, [pc, #636]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a436:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a43a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a43e:	2b40      	cmp	r3, #64	; 0x40
 800a440:	d128      	bne.n	800a494 <nfcipInitiatorHandleDEP+0x144>
 800a442:	4b9c      	ldr	r3, [pc, #624]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a444:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d021      	beq.n	800a494 <nfcipInitiatorHandleDEP+0x144>
            {
                /* Digital 1.0 14.15.5.6 2)  if NACKs failed raise protocol error  */
                if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800a450:	4b98      	ldr	r3, [pc, #608]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a452:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	b2d1      	uxtb	r1, r2
 800a45a:	4a96      	ldr	r2, [pc, #600]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a45c:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 800a460:	2b02      	cmp	r3, #2
 800a462:	d901      	bls.n	800a468 <nfcipInitiatorHandleDEP+0x118>
                {
                    return ERR_PROTO;
 800a464:	230b      	movs	r3, #11
 800a466:	e23c      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                }
                
                /* Send NACK */
                nfcipLogI( " NFCIP(I) Sending NACK retry: %d \r\n", gNfcip.cntNACKRetrys );
                EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800a468:	4b92      	ldr	r3, [pc, #584]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a46a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2100      	movs	r1, #0
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fee9 	bl	800a254 <nfcipDEPControlMsg>
 800a482:	4603      	mov	r3, r0
 800a484:	82fb      	strh	r3, [r7, #22]
 800a486:	8afb      	ldrh	r3, [r7, #22]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <nfcipInitiatorHandleDEP+0x140>
 800a48c:	8afb      	ldrh	r3, [r7, #22]
 800a48e:	e228      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                return ERR_BUSY;
 800a490:	2302      	movs	r3, #2
 800a492:	e226      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            nfcipLogI( " NFCIP(I) Checking if to send ATN  ATNRetrys: %d \r\n", gNfcip.cntATNRetrys );
            
            /* Digital 1.0 14.15.5.6 3)  Otherwise send ATN */                            
            if( gNfcip.cntATNRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800a494:	4b87      	ldr	r3, [pc, #540]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a496:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a49a:	1c5a      	adds	r2, r3, #1
 800a49c:	b2d1      	uxtb	r1, r2
 800a49e:	4a85      	ldr	r2, [pc, #532]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a4a0:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <nfcipInitiatorHandleDEP+0x15c>
            {
                return ERR_PROTO;
 800a4a8:	230b      	movs	r3, #11
 800a4aa:	e21a      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send ATN */
            nfcipLogI( " NFCIP(I) Sending ATN \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	2080      	movs	r0, #128	; 0x80
 800a4b0:	f7ff fed0 	bl	800a254 <nfcipDEPControlMsg>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	82fb      	strh	r3, [r7, #22]
 800a4b8:	8afb      	ldrh	r3, [r7, #22]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <nfcipInitiatorHandleDEP+0x172>
 800a4be:	8afb      	ldrh	r3, [r7, #22]
 800a4c0:	e20f      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	e20d      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                }
#endif /* 0 */
            }

            /* Digital 1.1 16.12.5.4  if NACKs failed raise Transmission error  */
            if( gNfcip.cntNACKRetrys++ >= NFCIP_MAX_NACK_RETRYS )
 800a4c6:	4b7b      	ldr	r3, [pc, #492]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a4c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a4cc:	1c5a      	adds	r2, r3, #1
 800a4ce:	b2d1      	uxtb	r1, r2
 800a4d0:	4a78      	ldr	r2, [pc, #480]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a4d2:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d901      	bls.n	800a4de <nfcipInitiatorHandleDEP+0x18e>
            {
                return ERR_FRAMING;
 800a4da:	2309      	movs	r3, #9
 800a4dc:	e201      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
                            
            /* Send NACK */
            nfcipLogI( " NFCIP(I) Sending NACK  \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_NACK(gNfcip.pni), 0 ) );
 800a4de:	4b75      	ldr	r3, [pc, #468]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a4e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff feae 	bl	800a254 <nfcipDEPControlMsg>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	82fb      	strh	r3, [r7, #22]
 800a4fc:	8afb      	ldrh	r3, [r7, #22]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <nfcipInitiatorHandleDEP+0x1b6>
 800a502:	8afb      	ldrh	r3, [r7, #22]
 800a504:	e1ed      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            return ERR_BUSY;
 800a506:	2302      	movs	r3, #2
 800a508:	e1eb      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            
        case ERR_NONE:
            break;
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 800a50a:	2302      	movs	r3, #2
 800a50c:	e1e9      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            
        default:
            nfcipLogW( " NFCIP(I) Error: %d \r\n", rxRes );
            return rxRes;
 800a50e:	89fb      	ldrh	r3, [r7, #14]
 800a510:	e1e7      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            break;
 800a512:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800a514:	4b67      	ldr	r3, [pc, #412]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a516:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a518:	7d7b      	ldrb	r3, [r7, #21]
 800a51a:	1c59      	adds	r1, r3, #1
 800a51c:	7579      	strb	r1, [r7, #21]
 800a51e:	4413      	add	r3, r2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	74fb      	strb	r3, [r7, #19]
    
    nfcipLogD( " NFCIP(I) rx OK: %d bytes \r\n", nfcDepLen );
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_RES )
 800a524:	4b63      	ldr	r3, [pc, #396]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a526:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a528:	7d7b      	ldrb	r3, [r7, #21]
 800a52a:	1c59      	adds	r1, r3, #1
 800a52c:	7579      	strb	r1, [r7, #21]
 800a52e:	4413      	add	r3, r2
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2bd5      	cmp	r3, #213	; 0xd5
 800a534:	d001      	beq.n	800a53a <nfcipInitiatorHandleDEP+0x1ea>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_RES );
        return ERR_PROTO;
 800a536:	230b      	movs	r3, #11
 800a538:	e1d3      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /* Digital 1.0 14.15.5.5 Protocol Error  */
    if( gNfcip.rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_DEP_RES )
 800a53a:	4b5e      	ldr	r3, [pc, #376]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a53c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a53e:	7d7b      	ldrb	r3, [r7, #21]
 800a540:	1c59      	adds	r1, r3, #1
 800a542:	7579      	strb	r1, [r7, #21]
 800a544:	4413      	add	r3, r2
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b07      	cmp	r3, #7
 800a54a:	d001      	beq.n	800a550 <nfcipInitiatorHandleDEP+0x200>
    {
    	nfcipLogW( " NFCIP(I) error %02X instead of %02X \r\n", gNfcip.rxBuf[--rxMsgIt], NFCIP_CMD_DEP_RES );
        return ERR_PROTO;
 800a54c:	230b      	movs	r3, #11
 800a54e:	e1c8      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];
 800a550:	4b58      	ldr	r3, [pc, #352]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a552:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a554:	7d7b      	ldrb	r3, [r7, #21]
 800a556:	1c59      	adds	r1, r3, #1
 800a558:	7579      	strb	r1, [r7, #21]
 800a55a:	4413      	add	r3, r2
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	74bb      	strb	r3, [r7, #18]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800a560:	7cbb      	ldrb	r3, [r7, #18]
 800a562:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a566:	2b80      	cmp	r3, #128	; 0x80
 800a568:	d00b      	beq.n	800a582 <nfcipInitiatorHandleDEP+0x232>
 800a56a:	7cbb      	ldrb	r3, [r7, #18]
 800a56c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a570:	2b40      	cmp	r3, #64	; 0x40
 800a572:	d006      	beq.n	800a582 <nfcipInitiatorHandleDEP+0x232>
 800a574:	7cbb      	ldrb	r3, [r7, #18]
 800a576:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <nfcipInitiatorHandleDEP+0x232>
    {
        return ERR_PROTO;
 800a57e:	230b      	movs	r3, #11
 800a580:	e1af      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
    }
        
    /*******************************************************************************/
    /* Digital 1.0 14.8.2.1  check if DID is expected and match -> Protocol Error  */
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800a582:	4b4c      	ldr	r3, [pc, #304]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a584:	78db      	ldrb	r3, [r3, #3]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d015      	beq.n	800a5b6 <nfcipInitiatorHandleDEP+0x266>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 800a58a:	4b4a      	ldr	r3, [pc, #296]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a58c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a58e:	7d7b      	ldrb	r3, [r7, #21]
 800a590:	1c59      	adds	r1, r3, #1
 800a592:	7579      	strb	r1, [r7, #21]
 800a594:	4413      	add	r3, r2
 800a596:	781a      	ldrb	r2, [r3, #0]
 800a598:	4b46      	ldr	r3, [pc, #280]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a59a:	78db      	ldrb	r3, [r3, #3]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d104      	bne.n	800a5aa <nfcipInitiatorHandleDEP+0x25a>
 800a5a0:	7cbb      	ldrb	r3, [r7, #18]
 800a5a2:	f003 0304 	and.w	r3, r3, #4
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <nfcipInitiatorHandleDEP+0x25e>
        {
            return ERR_PROTO;
 800a5aa:	230b      	movs	r3, #11
 800a5ac:	e199      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800a5ae:	7d3b      	ldrb	r3, [r7, #20]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	753b      	strb	r3, [r7, #20]
 800a5b4:	e006      	b.n	800a5c4 <nfcipInitiatorHandleDEP+0x274>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv */
 800a5b6:	7cbb      	ldrb	r3, [r7, #18]
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <nfcipInitiatorHandleDEP+0x274>
    {
        return ERR_PROTO;
 800a5c0:	230b      	movs	r3, #11
 800a5c2:	e18e      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
        /* MISRA 15.7 - Empty else */
    }
    
    /*******************************************************************************/
    /* Digital 1.0 14.6.2.8 & 14.6.3.11 NAD must not be used  */
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800a5c4:	4b3b      	ldr	r3, [pc, #236]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a5c6:	791b      	ldrb	r3, [r3, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d015      	beq.n	800a5f8 <nfcipInitiatorHandleDEP+0x2a8>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.nad) || !nfcip_PFBhasNAD( rxPFB ) )
 800a5cc:	4b39      	ldr	r3, [pc, #228]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a5ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a5d0:	7d7b      	ldrb	r3, [r7, #21]
 800a5d2:	1c59      	adds	r1, r3, #1
 800a5d4:	7579      	strb	r1, [r7, #21]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	781a      	ldrb	r2, [r3, #0]
 800a5da:	4b36      	ldr	r3, [pc, #216]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a5dc:	791b      	ldrb	r3, [r3, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d104      	bne.n	800a5ec <nfcipInitiatorHandleDEP+0x29c>
 800a5e2:	7cbb      	ldrb	r3, [r7, #18]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <nfcipInitiatorHandleDEP+0x2a0>
        {
            return ERR_PROTO;
 800a5ec:	230b      	movs	r3, #11
 800a5ee:	e178      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
        }        
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800a5f0:	7d3b      	ldrb	r3, [r7, #20]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	753b      	strb	r3, [r7, #20]
 800a5f6:	e006      	b.n	800a606 <nfcipInitiatorHandleDEP+0x2b6>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800a5f8:	7cbb      	ldrb	r3, [r7, #18]
 800a5fa:	f003 0308 	and.w	r3, r3, #8
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <nfcipInitiatorHandleDEP+0x2b6>
    {
        return ERR_PROTO;
 800a602:	230b      	movs	r3, #11
 800a604:	e16d      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
    }
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 800a606:	7cbb      	ldrb	r3, [r7, #18]
 800a608:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a60c:	2b40      	cmp	r3, #64	; 0x40
 800a60e:	d153      	bne.n	800a6b8 <nfcipInitiatorHandleDEP+0x368>
    {
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 800a610:	7cbb      	ldrb	r3, [r7, #18]
 800a612:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a616:	2b40      	cmp	r3, #64	; 0x40
 800a618:	d14a      	bne.n	800a6b0 <nfcipInitiatorHandleDEP+0x360>
 800a61a:	7cbb      	ldrb	r3, [r7, #18]
 800a61c:	f003 0310 	and.w	r3, r3, #16
 800a620:	2b00      	cmp	r3, #0
 800a622:	d145      	bne.n	800a6b0 <nfcipInitiatorHandleDEP+0x360>
        {
            nfcipLogI( " NFCIP(I) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800a624:	4b23      	ldr	r3, [pc, #140]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a62a:	461a      	mov	r2, r3
 800a62c:	7cbb      	ldrb	r3, [r7, #18]
 800a62e:	f003 0303 	and.w	r3, r3, #3
 800a632:	429a      	cmp	r2, r3
 800a634:	d11c      	bne.n	800a670 <nfcipInitiatorHandleDEP+0x320>
            {
                /* 14.12.3.3 R-ACK with correct PNI -> Increment */
                gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800a636:	4b1f      	ldr	r3, [pc, #124]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a63c:	3301      	adds	r3, #1
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	b2da      	uxtb	r2, r3
 800a646:	4b1b      	ldr	r3, [pc, #108]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                                
                /* R-ACK while not performing chaining -> Protocol error*/
                if( !gNfcip.isTxChaining )
 800a64c:	4b19      	ldr	r3, [pc, #100]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a64e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a652:	f083 0301 	eor.w	r3, r3, #1
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <nfcipInitiatorHandleDEP+0x310>
                {
                    return ERR_PROTO;
 800a65c:	230b      	movs	r3, #11
 800a65e:	e140      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipClearCounters();
 800a660:	f7ff fe58 	bl	800a314 <nfcipClearCounters>
                gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800a664:	4b13      	ldr	r3, [pc, #76]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a666:	2204      	movs	r2, #4
 800a668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_NONE;                            /* This block has been transmitted */
 800a66c:	2300      	movs	r3, #0
 800a66e:	e138      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
            else  /* Digital 1.0 14.12.4.5 ACK with wrong PNI Initiator may retransmit */
            {
                if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 800a670:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a672:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	b2d1      	uxtb	r1, r2
 800a67a:	4a0e      	ldr	r2, [pc, #56]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a67c:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 800a680:	2b02      	cmp	r3, #2
 800a682:	d901      	bls.n	800a688 <nfcipInitiatorHandleDEP+0x338>
                {
                    return ERR_PROTO;
 800a684:	230b      	movs	r3, #11
 800a686:	e12c      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                /* Extended the MAY in Digital 1.0 14.12.4.5 to only reTransmit if the ACK
                 * is for the previous DEP, otherwise raise Protocol immediately 
                 * If the PNI difference is more than 1 it is worthless to reTransmit 3x
                 * and after raise the error                                              */
                
                if( nfcip_PNIDec( gNfcip.pni ) ==  nfcip_PBF_PNI( rxPFB ) )
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a68a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a68e:	3b01      	subs	r3, #1
 800a690:	b2da      	uxtb	r2, r3
 800a692:	7cbb      	ldrb	r3, [r7, #18]
 800a694:	4053      	eors	r3, r2
 800a696:	b2db      	uxtb	r3, r3
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d105      	bne.n	800a6ac <nfcipInitiatorHandleDEP+0x35c>
                {
                    /* ReTransmit */
                    nfcipLogI( " NFCIP(I) Rcvd ACK prev PNI -> reTx \r\n" );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800a6a0:	4b04      	ldr	r3, [pc, #16]	; (800a6b4 <nfcipInitiatorHandleDEP+0x364>)
 800a6a2:	2205      	movs	r2, #5
 800a6a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e11a      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                }
                
                nfcipLogI( " NFCIP(I) Rcvd ACK unexpected far PNI -> Error \r\n" );
                return ERR_PROTO;
 800a6ac:	230b      	movs	r3, #11
 800a6ae:	e118      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        else /* Digital 1.0 - 14.12.5.2 Target must never send NACK  */
        {            
            return ERR_PROTO;
 800a6b0:	230b      	movs	r3, #11
 800a6b2:	e116      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
 800a6b4:	200007d8 	.word	0x200007d8
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )                                
 800a6b8:	7cbb      	ldrb	r3, [r7, #18]
 800a6ba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a6be:	2b80      	cmp	r3, #128	; 0x80
 800a6c0:	f040 8094 	bne.w	800a7ec <nfcipInitiatorHandleDEP+0x49c>
    {
        nfcipLogI( " NFCIP(I) Rcvd S-PDU  \r\n" );
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisSATN( rxPFB ) )                         /* If is a S-ATN        */
 800a6c4:	7cbb      	ldrb	r3, [r7, #18]
 800a6c6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a6ca:	2b80      	cmp	r3, #128	; 0x80
 800a6cc:	d146      	bne.n	800a75c <nfcipInitiatorHandleDEP+0x40c>
 800a6ce:	7cbb      	ldrb	r3, [r7, #18]
 800a6d0:	f003 0310 	and.w	r3, r3, #16
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d141      	bne.n	800a75c <nfcipInitiatorHandleDEP+0x40c>
        {
            nfcipLogI( " NFCIP(I) Rcvd ATN  \r\n" );
            if( nfcip_PFBisSATN( gNfcip.lastPFB ) )            /* Check if is expected */
 800a6d8:	4b84      	ldr	r3, [pc, #528]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a6da:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a6de:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a6e2:	2b80      	cmp	r3, #128	; 0x80
 800a6e4:	d138      	bne.n	800a758 <nfcipInitiatorHandleDEP+0x408>
 800a6e6:	4b81      	ldr	r3, [pc, #516]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a6e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d131      	bne.n	800a758 <nfcipInitiatorHandleDEP+0x408>
            {  
                gNfcip.cntATNRetrys = 0;                       /* Clear ATN counter    */
 800a6f4:	4b7d      	ldr	r3, [pc, #500]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
                
                /* Although spec is not clear NFC Forum Digital test is expecting to
                 * retransmit upon receiving ATN_RES */
                if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800a6fc:	4b7b      	ldr	r3, [pc, #492]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a6fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a702:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a706:	2b80      	cmp	r3, #128	; 0x80
 800a708:	d114      	bne.n	800a734 <nfcipInitiatorHandleDEP+0x3e4>
 800a70a:	4b78      	ldr	r3, [pc, #480]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a70c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00d      	beq.n	800a734 <nfcipInitiatorHandleDEP+0x3e4>
                {
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx RTOX_RES \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800a718:	4b74      	ldr	r3, [pc, #464]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a71a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a71e:	4619      	mov	r1, r3
 800a720:	2090      	movs	r0, #144	; 0x90
 800a722:	f7ff fd97 	bl	800a254 <nfcipDEPControlMsg>
 800a726:	4603      	mov	r3, r0
 800a728:	82fb      	strh	r3, [r7, #22]
 800a72a:	8afb      	ldrh	r3, [r7, #22]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d011      	beq.n	800a754 <nfcipInitiatorHandleDEP+0x404>
 800a730:	8afb      	ldrh	r3, [r7, #22]
 800a732:	e0d6      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                }
                else
                {
                    /* ReTransmit ? */
                    if( gNfcip.cntTxRetrys++ >= NFCIP_MAX_TX_RETRYS )
 800a734:	4b6d      	ldr	r3, [pc, #436]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a736:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	b2d1      	uxtb	r1, r2
 800a73e:	4a6b      	ldr	r2, [pc, #428]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a740:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 800a744:	2b02      	cmp	r3, #2
 800a746:	d901      	bls.n	800a74c <nfcipInitiatorHandleDEP+0x3fc>
                    {
                        return ERR_PROTO;
 800a748:	230b      	movs	r3, #11
 800a74a:	e0ca      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
                    }
                    
                    nfcipLogI( " NFCIP(I) Rcvd ATN  -> reTx  PNI: %d \r\n", gNfcip.pni );
                    gNfcip.state = NFCIP_ST_INIT_DEP_TX;
 800a74c:	4b67      	ldr	r3, [pc, #412]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a74e:	2205      	movs	r2, #5
 800a750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 800a754:	2302      	movs	r3, #2
 800a756:	e0c4      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
            else                                               /* Digital 1.0  14.12.4.4 & 14.12.4.8 */
            {
                return ERR_PROTO;
 800a758:	230b      	movs	r3, #11
 800a75a:	e0c2      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
        }
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800a75c:	7cbb      	ldrb	r3, [r7, #18]
 800a75e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a762:	2b80      	cmp	r3, #128	; 0x80
 800a764:	d140      	bne.n	800a7e8 <nfcipInitiatorHandleDEP+0x498>
 800a766:	7cbb      	ldrb	r3, [r7, #18]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d03b      	beq.n	800a7e8 <nfcipInitiatorHandleDEP+0x498>
        {
            nfcipLogI( " NFCIP(I) Rcvd TO  \r\n" );
            
            rxRTOX = gNfcip.rxBuf[rxMsgIt++];
 800a770:	4b5e      	ldr	r3, [pc, #376]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a772:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a774:	7d7b      	ldrb	r3, [r7, #21]
 800a776:	1c59      	adds	r1, r3, #1
 800a778:	7579      	strb	r1, [r7, #21]
 800a77a:	4413      	add	r3, r2
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	747b      	strb	r3, [r7, #17]
            
            /* Digital 1.1 16.12.4.3 - Initiator MAY stop accepting subsequent RTOX Req   *
             *                       - RTOX request to an ATN -> Protocol error           */
            if( (gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS) || nfcip_PFBisSATN( gNfcip.lastPFB ) )
 800a780:	4b5a      	ldr	r3, [pc, #360]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a782:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	b2d1      	uxtb	r1, r2
 800a78a:	4a58      	ldr	r2, [pc, #352]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a78c:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 800a790:	2b03      	cmp	r3, #3
 800a792:	d80d      	bhi.n	800a7b0 <nfcipInitiatorHandleDEP+0x460>
 800a794:	4b55      	ldr	r3, [pc, #340]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a796:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a79a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a79e:	2b80      	cmp	r3, #128	; 0x80
 800a7a0:	d108      	bne.n	800a7b4 <nfcipInitiatorHandleDEP+0x464>
 800a7a2:	4b52      	ldr	r3, [pc, #328]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a7a4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a7a8:	f003 0310 	and.w	r3, r3, #16
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <nfcipInitiatorHandleDEP+0x464>
            {
                return ERR_PROTO;
 800a7b0:	230b      	movs	r3, #11
 800a7b2:	e096      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            /* Digital 1.1 16.8.4.1 RTOX must be between [1,59] */
            if( (rxRTOX < NFCIP_INIT_MIN_RTOX) || (rxRTOX > NFCIP_INIT_MAX_RTOX) )
 800a7b4:	7c7b      	ldrb	r3, [r7, #17]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <nfcipInitiatorHandleDEP+0x470>
 800a7ba:	7c7b      	ldrb	r3, [r7, #17]
 800a7bc:	2b3b      	cmp	r3, #59	; 0x3b
 800a7be:	d901      	bls.n	800a7c4 <nfcipInitiatorHandleDEP+0x474>
            {
                return ERR_PROTO;
 800a7c0:	230b      	movs	r3, #11
 800a7c2:	e08e      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            }
            
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), rxRTOX ) );
 800a7c4:	7c7b      	ldrb	r3, [r7, #17]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	2090      	movs	r0, #144	; 0x90
 800a7ca:	f7ff fd43 	bl	800a254 <nfcipDEPControlMsg>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	82fb      	strh	r3, [r7, #22]
 800a7d2:	8afb      	ldrh	r3, [r7, #22]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <nfcipInitiatorHandleDEP+0x48c>
 800a7d8:	8afb      	ldrh	r3, [r7, #22]
 800a7da:	e082      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            gNfcip.lastRTOX = rxRTOX;
 800a7dc:	4a43      	ldr	r2, [pc, #268]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a7de:	7c7b      	ldrb	r3, [r7, #17]
 800a7e0:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            
            return ERR_BUSY;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e07c      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            /* Unexpected S-PDU */
            return ERR_PROTO;                       /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
 800a7e8:	230b      	movs	r3, #11
 800a7ea:	e07a      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 800a7ec:	7cbb      	ldrb	r3, [r7, #18]
 800a7ee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d174      	bne.n	800a8e0 <nfcipInitiatorHandleDEP+0x590>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800a7f6:	4b3d      	ldr	r3, [pc, #244]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a7f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	7cbb      	ldrb	r3, [r7, #18]
 800a800:	f003 0303 	and.w	r3, r3, #3
 800a804:	429a      	cmp	r2, r3
 800a806:	d001      	beq.n	800a80c <nfcipInitiatorHandleDEP+0x4bc>
        {
            nfcipLogI( " NFCIP(I) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni  , nfcip_PBF_PNI( rxPFB ) );
            return ERR_PROTO;
 800a808:	230b      	movs	r3, #11
 800a80a:	e06a      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
        }
        
        nfcipLogD( " NFCIP(I) Rcvd IPDU OK    PNI: %d \r\n", gNfcip.pni );
        
        /* 14.12.3.3 I-PDU with correct PNI -> Increment */
        gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800a80c:	4b37      	ldr	r3, [pc, #220]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a80e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a812:	3301      	adds	r3, #1
 800a814:	b2db      	uxtb	r3, r3
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	4b33      	ldr	r3, [pc, #204]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a81e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
        
        /* Successful data Exchange */
        nfcipClearCounters();
 800a822:	f7ff fd77 	bl	800a314 <nfcipClearCounters>
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800a826:	7cfb      	ldrb	r3, [r7, #19]
 800a828:	b29a      	uxth	r2, r3
 800a82a:	7d3b      	ldrb	r3, [r7, #20]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	b29b      	uxth	r3, r3
 800a832:	3b04      	subs	r3, #4
 800a834:	b29a      	uxth	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	801a      	strh	r2, [r3, #0]
        
        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800a83a:	4b2c      	ldr	r3, [pc, #176]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a83c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800a840:	461a      	mov	r2, r3
 800a842:	7d3b      	ldrb	r3, [r7, #20]
 800a844:	3304      	adds	r3, #4
 800a846:	429a      	cmp	r2, r3
 800a848:	d013      	beq.n	800a872 <nfcipInitiatorHandleDEP+0x522>
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00f      	beq.n	800a872 <nfcipInitiatorHandleDEP+0x522>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800a852:	4b26      	ldr	r3, [pc, #152]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a856:	4a25      	ldr	r2, [pc, #148]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a858:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 800a85c:	1898      	adds	r0, r3, r2
 800a85e:	4b23      	ldr	r3, [pc, #140]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a860:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a862:	7d3b      	ldrb	r3, [r7, #20]
 800a864:	3304      	adds	r3, #4
 800a866:	18d1      	adds	r1, r2, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	461a      	mov	r2, r3
 800a86e:	f005 fd19 	bl	80102a4 <memmove>
        }

        /*******************************************************************************/
        /* Check if target is indicating chaining MI                                   */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 800a872:	7cbb      	ldrb	r3, [r7, #18]
 800a874:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d127      	bne.n	800a8cc <nfcipInitiatorHandleDEP+0x57c>
 800a87c:	7cbb      	ldrb	r3, [r7, #18]
 800a87e:	f003 0310 	and.w	r3, r3, #16
 800a882:	2b00      	cmp	r3, #0
 800a884:	d022      	beq.n	800a8cc <nfcipInitiatorHandleDEP+0x57c>
        {
            gNfcip.isRxChaining = true;
 800a886:	4b19      	ldr	r3, [pc, #100]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(I) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800a894:	4b15      	ldr	r3, [pc, #84]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	b2d8      	uxtb	r0, r3
 800a8a6:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a8a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a8aa:	7d7b      	ldrb	r3, [r7, #21]
 800a8ac:	1c59      	adds	r1, r3, #1
 800a8ae:	7579      	strb	r1, [r7, #21]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	f7ff fccd 	bl	800a254 <nfcipDEPControlMsg>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	82fb      	strh	r3, [r7, #22]
 800a8be:	8afb      	ldrh	r3, [r7, #22]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <nfcipInitiatorHandleDEP+0x578>
 800a8c4:	8afb      	ldrh	r3, [r7, #22]
 800a8c6:	e00c      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800a8c8:	230d      	movs	r3, #13
 800a8ca:	e00a      	b.n	800a8e2 <nfcipInitiatorHandleDEP+0x592>
        }
        else
        {
            gNfcip.isRxChaining = false;
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            gNfcip.state        = NFCIP_ST_INIT_DEP_IDLE;
 800a8d4:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <nfcipInitiatorHandleDEP+0x59c>)
 800a8d6:	2204      	movs	r2, #4
 800a8d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            ret = ERR_NONE;    /* Data exchange done */
 800a8dc:	2300      	movs	r3, #0
 800a8de:	82fb      	strh	r3, [r7, #22]
        }
    }
    return ret;
 800a8e0:	8afb      	ldrh	r3, [r7, #22]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	200007d8 	.word	0x200007d8

0800a8f0 <nfcipTargetHandleRX>:


/*******************************************************************************/
static ReturnCode nfcipTargetHandleRX( ReturnCode rxRes, uint16_t *outActRxLen, bool *outIsChaining )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b08c      	sub	sp, #48	; 0x30
 800a8f4:	af04      	add	r7, sp, #16
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	81fb      	strh	r3, [r7, #14]
    uint8_t    rxPFB;
    uint8_t    optHdrLen;
    uint8_t    resBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_TARGET_RES_MAX];
        
    
    ret        = ERR_INTERNAL;
 800a8fe:	230c      	movs	r3, #12
 800a900:	83fb      	strh	r3, [r7, #30]
    rxMsgIt    = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	777b      	strb	r3, [r7, #29]
    optHdrLen  = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	773b      	strb	r3, [r7, #28]
    
    *outActRxLen    = 0;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2200      	movs	r2, #0
 800a90e:	801a      	strh	r2, [r3, #0]
    *outIsChaining  = false;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
    
    
    /*******************************************************************************/
    /* Handle reception errors                                                     */
    /*******************************************************************************/
    switch( rxRes )
 800a916:	89fb      	ldrh	r3, [r7, #14]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d007      	beq.n	800a92c <nfcipTargetHandleRX+0x3c>
 800a91c:	2b25      	cmp	r3, #37	; 0x25
 800a91e:	d002      	beq.n	800a926 <nfcipTargetHandleRX+0x36>
 800a920:	2b00      	cmp	r3, #0
 800a922:	d01c      	beq.n	800a95e <nfcipTargetHandleRX+0x6e>
 800a924:	e005      	b.n	800a932 <nfcipTargetHandleRX+0x42>
        case ERR_NONE:
            break;
            
        case ERR_LINK_LOSS:
            nfcipLogW( " NFCIP(T) Error: %d \r\n", rxRes );
            return rxRes;
 800a926:	89fb      	ldrh	r3, [r7, #14]
 800a928:	f000 bc23 	b.w	800b172 <nfcipTargetHandleRX+0x882>
            
        case ERR_BUSY:
            return ERR_BUSY;  /* Debug purposes */
 800a92c:	2302      	movs	r3, #2
 800a92e:	f000 bc20 	b.w	800b172 <nfcipTargetHandleRX+0x882>
             * The Target MUST always stay in receive mode when a                          *
             * Transmission Error or a Protocol Error occurs.                              *
             *                                                                             *
             * Do not push Transmission/Protocol Errors to upper layer in Listen Mode #766 */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800a932:	4ba1      	ldr	r3, [pc, #644]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a934:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a936:	4ba0      	ldr	r3, [pc, #640]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a938:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800a93c:	4b9e      	ldr	r3, [pc, #632]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a940:	f04f 32ff 	mov.w	r2, #4294967295
 800a944:	9202      	str	r2, [sp, #8]
 800a946:	2204      	movs	r2, #4
 800a948:	9201      	str	r2, [sp, #4]
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4603      	mov	r3, r0
 800a94e:	460a      	mov	r2, r1
 800a950:	2100      	movs	r1, #0
 800a952:	2000      	movs	r0, #0
 800a954:	f003 fc46 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;
 800a958:	2302      	movs	r3, #2
 800a95a:	f000 bc0a 	b.w	800b172 <nfcipTargetHandleRX+0x882>
            break;
 800a95e:	bf00      	nop
    /*******************************************************************************/
    /* Rx OK check if valid DEP PDU                                                */
    /*******************************************************************************/
    
    /* Due to different modes on ST25R391x (with/without CRC) use NFC-DEP LEN instead of bytes retrieved */
    nfcDepLen = gNfcip.rxBuf[rxMsgIt++];
 800a960:	4b95      	ldr	r3, [pc, #596]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a962:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a964:	7f7b      	ldrb	r3, [r7, #29]
 800a966:	1c59      	adds	r1, r3, #1
 800a968:	7779      	strb	r1, [r7, #29]
 800a96a:	4413      	add	r3, r2
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	76fb      	strb	r3, [r7, #27]
        
    nfcipLogD( " NFCIP(T) rx OK: %d bytes \r\n", nfcDepLen );
    
    if( gNfcip.rxBuf[rxMsgIt++] != NFCIP_REQ )
 800a970:	4b91      	ldr	r3, [pc, #580]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a972:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a974:	7f7b      	ldrb	r3, [r7, #29]
 800a976:	1c59      	adds	r1, r3, #1
 800a978:	7779      	strb	r1, [r7, #29]
 800a97a:	4413      	add	r3, r2
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2bd4      	cmp	r3, #212	; 0xd4
 800a980:	d014      	beq.n	800a9ac <nfcipTargetHandleRX+0xbc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800a982:	4b8d      	ldr	r3, [pc, #564]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a984:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800a986:	4b8c      	ldr	r3, [pc, #560]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a988:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800a98c:	4b8a      	ldr	r3, [pc, #552]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	9202      	str	r2, [sp, #8]
 800a996:	2204      	movs	r2, #4
 800a998:	9201      	str	r2, [sp, #4]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	4603      	mov	r3, r0
 800a99e:	460a      	mov	r2, r1
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	f003 fc1e 	bl	800e1e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore bad request */
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e3e2      	b.n	800b172 <nfcipTargetHandleRX+0x882>
    
    
    /*******************************************************************************/
    /* Check whether target rcvd a normal DEP or deactivation request              */
    /*******************************************************************************/
    switch( gNfcip.rxBuf[rxMsgIt++] )
 800a9ac:	4b82      	ldr	r3, [pc, #520]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a9ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a9b0:	7f7b      	ldrb	r3, [r7, #29]
 800a9b2:	1c59      	adds	r1, r3, #1
 800a9b4:	7779      	strb	r1, [r7, #29]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b08      	cmp	r3, #8
 800a9bc:	d004      	beq.n	800a9c8 <nfcipTargetHandleRX+0xd8>
 800a9be:	2b0a      	cmp	r3, #10
 800a9c0:	d02f      	beq.n	800aa22 <nfcipTargetHandleRX+0x132>
 800a9c2:	2b06      	cmp	r3, #6
 800a9c4:	d06f      	beq.n	800aaa6 <nfcipTargetHandleRX+0x1b6>
 800a9c6:	e059      	b.n	800aa7c <nfcipTargetHandleRX+0x18c>
            
            nfcipLogI( " NFCIP(T) rx DSL \r\n" );
            
            /* Digital 1.0  14.9.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.9.1.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800a9c8:	4b7b      	ldr	r3, [pc, #492]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a9ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a9cc:	7f7b      	ldrb	r3, [r7, #29]
 800a9ce:	1c59      	adds	r1, r3, #1
 800a9d0:	7779      	strb	r1, [r7, #29]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	781a      	ldrb	r2, [r3, #0]
 800a9d6:	4b78      	ldr	r3, [pc, #480]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a9d8:	78db      	ldrb	r3, [r3, #3]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d102      	bne.n	800a9e4 <nfcipTargetHandleRX+0xf4>
 800a9de:	7efb      	ldrb	r3, [r7, #27]
 800a9e0:	2b04      	cmp	r3, #4
 800a9e2:	d003      	beq.n	800a9ec <nfcipTargetHandleRX+0xfc>
 800a9e4:	4b74      	ldr	r3, [pc, #464]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a9e6:	78db      	ldrb	r3, [r3, #3]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d106      	bne.n	800a9fa <nfcipTargetHandleRX+0x10a>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800a9ec:	4b72      	ldr	r3, [pc, #456]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800a9ee:	78db      	ldrb	r3, [r3, #3]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d104      	bne.n	800a9fe <nfcipTargetHandleRX+0x10e>
 800a9f4:	7efb      	ldrb	r3, [r7, #27]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d001      	beq.n	800a9fe <nfcipTargetHandleRX+0x10e>
               )
            {
                nfcipLogI( " NFCIP(T) DSL wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	e3b9      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            }
            
            nfcipTx( NFCIP_CMD_DSL_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800a9fe:	f107 0114 	add.w	r1, r7, #20
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2009      	movs	r0, #9
 800aa12:	f000 fbb7 	bl	800b184 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_SLEEP;
 800aa16:	4b68      	ldr	r3, [pc, #416]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa18:	2210      	movs	r2, #16
 800aa1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_SLEEP_REQ;
 800aa1e:	2320      	movs	r3, #32
 800aa20:	e3a7      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            
            nfcipLogI( " NFCIP(T) rx RLS \r\n" );
            
            /* Digital 1.0  14.10.1.2 If DID is used and incorrect ignore it */
            /* [Digital 1.0, 16.10.2.2]: If DID == 0, Target SHALL ignore DSL_REQ with DID */
            if (   (((gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || (nfcDepLen != RFAL_NFCDEP_DSL_RLS_LEN_DID)) && (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO) )
 800aa22:	4b65      	ldr	r3, [pc, #404]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800aa26:	7f7b      	ldrb	r3, [r7, #29]
 800aa28:	1c59      	adds	r1, r3, #1
 800aa2a:	7779      	strb	r1, [r7, #29]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	4b61      	ldr	r3, [pc, #388]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa32:	78db      	ldrb	r3, [r3, #3]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d102      	bne.n	800aa3e <nfcipTargetHandleRX+0x14e>
 800aa38:	7efb      	ldrb	r3, [r7, #27]
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d003      	beq.n	800aa46 <nfcipTargetHandleRX+0x156>
 800aa3e:	4b5e      	ldr	r3, [pc, #376]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d106      	bne.n	800aa54 <nfcipTargetHandleRX+0x164>
                || ((gNfcip.cfg.did == RFAL_NFCDEP_DID_NO) && (nfcDepLen > RFAL_NFCDEP_DSL_RLS_LEN_NO_DID))
 800aa46:	4b5c      	ldr	r3, [pc, #368]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa48:	78db      	ldrb	r3, [r3, #3]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d104      	bne.n	800aa58 <nfcipTargetHandleRX+0x168>
 800aa4e:	7efb      	ldrb	r3, [r7, #27]
 800aa50:	2b03      	cmp	r3, #3
 800aa52:	d901      	bls.n	800aa58 <nfcipTargetHandleRX+0x168>
               )
            {
                nfcipLogI( " NFCIP(T) RLS wrong DID, ignoring \r\n" );
                return ERR_BUSY;
 800aa54:	2302      	movs	r3, #2
 800aa56:	e38c      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            }
                
            nfcipTx( NFCIP_CMD_RLS_RES, resBuf, NULL, 0, 0, NFCIP_NO_FWT );
 800aa58:	f107 0114 	add.w	r1, r7, #20
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	2300      	movs	r3, #0
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	2300      	movs	r3, #0
 800aa68:	2200      	movs	r2, #0
 800aa6a:	200b      	movs	r0, #11
 800aa6c:	f000 fb8a 	bl	800b184 <nfcipTx>
            
            gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;
 800aa70:	4b51      	ldr	r3, [pc, #324]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa72:	220c      	movs	r2, #12
 800aa74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_RELEASE_REQ;
 800aa78:	231f      	movs	r3, #31
 800aa7a:	e37a      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        default:
            
            /* Don't go to NFCIP_ST_TARG_DEP_IDLE state as it needs to ignore this    *
             * invalid frame, and keep waiting for more frames                        */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800aa7c:	4b4e      	ldr	r3, [pc, #312]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa7e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800aa80:	4b4d      	ldr	r3, [pc, #308]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa82:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800aa86:	4b4c      	ldr	r3, [pc, #304]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aa88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8e:	9202      	str	r2, [sp, #8]
 800aa90:	2204      	movs	r2, #4
 800aa92:	9201      	str	r2, [sp, #4]
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	4603      	mov	r3, r0
 800aa98:	460a      	mov	r2, r1
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	f003 fba1 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad frame */
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e365      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            break;                                /* Continue to normal DEP processing */
 800aaa6:	bf00      	nop
    }
    
    /*******************************************************************************/
    
    rxPFB = gNfcip.rxBuf[rxMsgIt++];                    /* Store rcvd PFB  */
 800aaa8:	4b43      	ldr	r3, [pc, #268]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aaaa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800aaac:	7f7b      	ldrb	r3, [r7, #29]
 800aaae:	1c59      	adds	r1, r3, #1
 800aab0:	7779      	strb	r1, [r7, #29]
 800aab2:	4413      	add	r3, r2
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	76bb      	strb	r3, [r7, #26]
    
    /*******************************************************************************/
    /* Check for valid PFB type                                                    */
    if( !(nfcip_PFBisSPDU( rxPFB ) || nfcip_PFBisRPDU( rxPFB ) || nfcip_PFBisIPDU( rxPFB )) )
 800aab8:	7ebb      	ldrb	r3, [r7, #26]
 800aaba:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800aabe:	2b80      	cmp	r3, #128	; 0x80
 800aac0:	d01e      	beq.n	800ab00 <nfcipTargetHandleRX+0x210>
 800aac2:	7ebb      	ldrb	r3, [r7, #26]
 800aac4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800aac8:	2b40      	cmp	r3, #64	; 0x40
 800aaca:	d019      	beq.n	800ab00 <nfcipTargetHandleRX+0x210>
 800aacc:	7ebb      	ldrb	r3, [r7, #26]
 800aace:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d014      	beq.n	800ab00 <nfcipTargetHandleRX+0x210>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800aad6:	4b38      	ldr	r3, [pc, #224]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aad8:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800aada:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aadc:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800aae0:	4b35      	ldr	r3, [pc, #212]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800aae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae4:	f04f 32ff 	mov.w	r2, #4294967295
 800aae8:	9202      	str	r2, [sp, #8]
 800aaea:	2204      	movs	r2, #4
 800aaec:	9201      	str	r2, [sp, #4]
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	f003 fb74 	bl	800e1e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore invalid PFB  */
 800aafc:	2302      	movs	r3, #2
 800aafe:	e338      	b.n	800b172 <nfcipTargetHandleRX+0x882>
    }
    
    /*******************************************************************************/   
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800ab00:	4b2d      	ldr	r3, [pc, #180]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab02:	78db      	ldrb	r3, [r3, #3]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d03d      	beq.n	800ab84 <nfcipTargetHandleRX+0x294>
    {
        if( !nfcip_PFBhasDID( rxPFB ) )
 800ab08:	7ebb      	ldrb	r3, [r7, #26]
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d114      	bne.n	800ab3c <nfcipTargetHandleRX+0x24c>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ab12:	4b29      	ldr	r3, [pc, #164]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab14:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ab16:	4b28      	ldr	r3, [pc, #160]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab18:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800ab1c:	4b26      	ldr	r3, [pc, #152]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab20:	f04f 32ff 	mov.w	r2, #4294967295
 800ab24:	9202      	str	r2, [sp, #8]
 800ab26:	2204      	movs	r2, #4
 800ab28:	9201      	str	r2, [sp, #4]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	460a      	mov	r2, r1
 800ab30:	2100      	movs	r1, #0
 800ab32:	2000      	movs	r0, #0
 800ab34:	f003 fb56 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 800ab38:	2302      	movs	r3, #2
 800ab3a:	e31a      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        }
        if( gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did ) /* MISRA 13.5 */
 800ab3c:	4b1e      	ldr	r3, [pc, #120]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ab40:	7f7b      	ldrb	r3, [r7, #29]
 800ab42:	1c59      	adds	r1, r3, #1
 800ab44:	7779      	strb	r1, [r7, #29]
 800ab46:	4413      	add	r3, r2
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab4c:	78db      	ldrb	r3, [r3, #3]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d014      	beq.n	800ab7c <nfcipTargetHandleRX+0x28c>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ab52:	4b19      	ldr	r3, [pc, #100]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab54:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ab56:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab58:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800ab5c:	4b16      	ldr	r3, [pc, #88]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab60:	f04f 32ff 	mov.w	r2, #4294967295
 800ab64:	9202      	str	r2, [sp, #8]
 800ab66:	2204      	movs	r2, #4
 800ab68:	9201      	str	r2, [sp, #4]
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	460a      	mov	r2, r1
 800ab70:	2100      	movs	r1, #0
 800ab72:	2000      	movs	r0, #0
 800ab74:	f003 fb36 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore bad/missing DID  */
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e2fa      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ab7c:	7f3b      	ldrb	r3, [r7, #28]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	773b      	strb	r3, [r7, #28]
 800ab82:	e01b      	b.n	800abbc <nfcipTargetHandleRX+0x2cc>
    }
    else if( nfcip_PFBhasDID( rxPFB ) )                 /* DID not expected but rcv     */
 800ab84:	7ebb      	ldrb	r3, [r7, #26]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d016      	beq.n	800abbc <nfcipTargetHandleRX+0x2cc>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ab8e:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab90:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ab92:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab94:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800ab98:	4b07      	ldr	r3, [pc, #28]	; (800abb8 <nfcipTargetHandleRX+0x2c8>)
 800ab9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aba0:	9202      	str	r2, [sp, #8]
 800aba2:	2204      	movs	r2, #4
 800aba4:	9201      	str	r2, [sp, #4]
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	4603      	mov	r3, r0
 800abaa:	460a      	mov	r2, r1
 800abac:	2100      	movs	r1, #0
 800abae:	2000      	movs	r0, #0
 800abb0:	f003 fb18 	bl	800e1e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY; /* ERR_PROTO - Ignore unexpected DID  */
 800abb4:	2302      	movs	r3, #2
 800abb6:	e2dc      	b.n	800b172 <nfcipTargetHandleRX+0x882>
 800abb8:	200007d8 	.word	0x200007d8
        /* MISRA 15.7 - Empty else */
    }
                                  
        
    /*******************************************************************************/
    if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO ) 
 800abbc:	4bb5      	ldr	r3, [pc, #724]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800abbe:	791b      	ldrb	r3, [r3, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d028      	beq.n	800ac16 <nfcipTargetHandleRX+0x326>
    {
        if( (gNfcip.rxBuf[rxMsgIt++] != gNfcip.cfg.did) || !nfcip_PFBhasDID( rxPFB ) )
 800abc4:	4bb3      	ldr	r3, [pc, #716]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800abc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800abc8:	7f7b      	ldrb	r3, [r7, #29]
 800abca:	1c59      	adds	r1, r3, #1
 800abcc:	7779      	strb	r1, [r7, #29]
 800abce:	4413      	add	r3, r2
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	4bb0      	ldr	r3, [pc, #704]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800abd4:	78db      	ldrb	r3, [r3, #3]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d104      	bne.n	800abe4 <nfcipTargetHandleRX+0x2f4>
 800abda:	7ebb      	ldrb	r3, [r7, #26]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d114      	bne.n	800ac0e <nfcipTargetHandleRX+0x31e>
        {
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800abe4:	4bab      	ldr	r3, [pc, #684]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800abe6:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800abe8:	4baa      	ldr	r3, [pc, #680]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800abea:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800abee:	4ba9      	ldr	r3, [pc, #676]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800abf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf2:	f04f 32ff 	mov.w	r2, #4294967295
 800abf6:	9202      	str	r2, [sp, #8]
 800abf8:	2204      	movs	r2, #4
 800abfa:	9201      	str	r2, [sp, #4]
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	4603      	mov	r3, r0
 800ac00:	460a      	mov	r2, r1
 800ac02:	2100      	movs	r1, #0
 800ac04:	2000      	movs	r0, #0
 800ac06:	f003 faed 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;                            /* ERR_PROTO - Ignore bad/missing DID  */
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	e2b1      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        }
        optHdrLen++;                                    /* Inc header optional field cnt*/
 800ac0e:	7f3b      	ldrb	r3, [r7, #28]
 800ac10:	3301      	adds	r3, #1
 800ac12:	773b      	strb	r3, [r7, #28]
 800ac14:	e019      	b.n	800ac4a <nfcipTargetHandleRX+0x35a>
    }
    else if( nfcip_PFBhasNAD( rxPFB ) )                 /* NAD not expected but rcv */
 800ac16:	7ebb      	ldrb	r3, [r7, #26]
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d014      	beq.n	800ac4a <nfcipTargetHandleRX+0x35a>
    {
        nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ac20:	4b9c      	ldr	r3, [pc, #624]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac22:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ac24:	4b9b      	ldr	r3, [pc, #620]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac26:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800ac2a:	4b9a      	ldr	r3, [pc, #616]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac32:	9202      	str	r2, [sp, #8]
 800ac34:	2204      	movs	r2, #4
 800ac36:	9201      	str	r2, [sp, #4]
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	460a      	mov	r2, r1
 800ac3e:	2100      	movs	r1, #0
 800ac40:	2000      	movs	r0, #0
 800ac42:	f003 facf 	bl	800e1e4 <rfalTransceiveBlockingTx>
        return ERR_BUSY;                                /* ERR_PROTO - Ignore unexpected NAD  */
 800ac46:	2302      	movs	r3, #2
 800ac48:	e293      	b.n	800b172 <nfcipTargetHandleRX+0x882>
    
       
    /*******************************************************************************/
    /* Process R-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisRPDU( rxPFB ) )
 800ac4a:	7ebb      	ldrb	r3, [r7, #26]
 800ac4c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ac50:	2b40      	cmp	r3, #64	; 0x40
 800ac52:	f040 80c7 	bne.w	800ade4 <nfcipTargetHandleRX+0x4f4>
    {
        nfcipLogD( " NFCIP(T) Rcvd R-PDU  \r\n" );
        /*******************************************************************************/
        /* R ACK                                                                       */
        /*******************************************************************************/
        if( nfcip_PFBisRACK( rxPFB ) )
 800ac56:	7ebb      	ldrb	r3, [r7, #26]
 800ac58:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ac5c:	2b40      	cmp	r3, #64	; 0x40
 800ac5e:	f040 8084 	bne.w	800ad6a <nfcipTargetHandleRX+0x47a>
 800ac62:	7ebb      	ldrb	r3, [r7, #26]
 800ac64:	f003 0310 	and.w	r3, r3, #16
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d17e      	bne.n	800ad6a <nfcipTargetHandleRX+0x47a>
        {
            nfcipLogI( " NFCIP(T) Rcvd ACK  \r\n" );
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800ac6c:	4b89      	ldr	r3, [pc, #548]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac72:	461a      	mov	r2, r3
 800ac74:	7ebb      	ldrb	r3, [r7, #26]
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d14a      	bne.n	800ad14 <nfcipTargetHandleRX+0x424>
            {
                /* R-ACK while not performing chaining -> Protocol error */
                if( !gNfcip.isTxChaining )
 800ac7e:	4b85      	ldr	r3, [pc, #532]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac80:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ac84:	f083 0301 	eor.w	r3, r3, #1
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d014      	beq.n	800acb8 <nfcipTargetHandleRX+0x3c8>
                {
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ac8e:	4b81      	ldr	r3, [pc, #516]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac90:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ac92:	4b80      	ldr	r3, [pc, #512]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac94:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800ac98:	4b7e      	ldr	r3, [pc, #504]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ac9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aca0:	9202      	str	r2, [sp, #8]
 800aca2:	2204      	movs	r2, #4
 800aca4:	9201      	str	r2, [sp, #4]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	4603      	mov	r3, r0
 800acaa:	460a      	mov	r2, r1
 800acac:	2100      	movs	r1, #0
 800acae:	2000      	movs	r0, #0
 800acb0:	f003 fa98 	bl	800e1e4 <rfalTransceiveBlockingTx>
                    return ERR_BUSY;                    /* ERR_PROTO - Ignore unexpected ACK  */
 800acb4:	2302      	movs	r3, #2
 800acb6:	e25c      	b.n	800b172 <nfcipTargetHandleRX+0x882>
                }
                
                /* This block has been transmitted and acknowledged, perform RTOX until next data is provided  */
                
                /* Digital 1.1  16.12.4.7 - If ACK rcvd continue with chaining or an RTOX */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800acb8:	4b76      	ldr	r3, [pc, #472]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800acba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	330c      	adds	r3, #12
 800acc4:	2201      	movs	r2, #1
 800acc6:	fa02 f303 	lsl.w	r3, r2, r3
 800acca:	4a73      	ldr	r2, [pc, #460]	; (800ae98 <nfcipTargetHandleRX+0x5a8>)
 800accc:	fba2 2303 	umull	r2, r3, r2, r3
 800acd0:	0b1b      	lsrs	r3, r3, #12
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	4b6f      	ldr	r3, [pc, #444]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800acd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acda:	f003 030f 	and.w	r3, r3, #15
 800acde:	330c      	adds	r3, #12
 800ace0:	2101      	movs	r1, #1
 800ace2:	fa01 f303 	lsl.w	r3, r1, r3
 800ace6:	496c      	ldr	r1, [pc, #432]	; (800ae98 <nfcipTargetHandleRX+0x5a8>)
 800ace8:	fba1 1303 	umull	r1, r3, r1, r3
 800acec:	0b1b      	lsrs	r3, r3, #12
 800acee:	3301      	adds	r3, #1
 800acf0:	08db      	lsrs	r3, r3, #3
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	1ad3      	subs	r3, r2, r3
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	3301      	adds	r3, #1
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f7 fe41 	bl	8002984 <timerCalculateTimer>
 800ad02:	4602      	mov	r2, r0
 800ad04:	4b63      	ldr	r3, [pc, #396]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad06:	67da      	str	r2, [r3, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800ad08:	4b62      	ldr	r3, [pc, #392]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad0a:	220e      	movs	r2, #14
 800ad0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_NONE;                        /* This block has been transmitted */
 800ad10:	2300      	movs	r3, #0
 800ad12:	e22e      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            }
            
            /* Digital 1.0 14.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            else if( nfcip_PFBisSATN( gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) )    
 800ad14:	4b5f      	ldr	r3, [pc, #380]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad16:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ad1a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ad1e:	2b80      	cmp	r3, #128	; 0x80
 800ad20:	d15f      	bne.n	800ade2 <nfcipTargetHandleRX+0x4f2>
 800ad22:	4b5c      	ldr	r3, [pc, #368]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad24:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d158      	bne.n	800ade2 <nfcipTargetHandleRX+0x4f2>
 800ad30:	4b58      	ldr	r3, [pc, #352]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	7ebb      	ldrb	r3, [r7, #26]
 800ad3c:	4053      	eors	r3, r2
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 0303 	and.w	r3, r3, #3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d14c      	bne.n	800ade2 <nfcipTargetHandleRX+0x4f2>
            {   
                nfcipLogI( " NFCIP(T) wrong PNI, last was ATN reTx  \r\n" );
                /* Spec says to leave current PNI as is, but will be Inc after Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec( gNfcip.pni );
 800ad48:	4b52      	ldr	r3, [pc, #328]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0303 	and.w	r3, r3, #3
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	4b4e      	ldr	r3, [pc, #312]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800ad5e:	4b4d      	ldr	r3, [pc, #308]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad60:	220f      	movs	r2, #15
 800ad62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                return ERR_BUSY;
 800ad66:	2302      	movs	r3, #2
 800ad68:	e203      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        }
        /*******************************************************************************/
        /* R NACK                                                                      */
        /*******************************************************************************/
        /* ISO 18092 12.6.1.3.3 When rcv NACK if PNI = prev PNI sent ->  reTx          */
        else if( nfcip_PFBisRNACK( rxPFB ) && (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB ) ) )
 800ad6a:	7ebb      	ldrb	r3, [r7, #26]
 800ad6c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ad70:	2b40      	cmp	r3, #64	; 0x40
 800ad72:	d121      	bne.n	800adb8 <nfcipTargetHandleRX+0x4c8>
 800ad74:	7ebb      	ldrb	r3, [r7, #26]
 800ad76:	f003 0310 	and.w	r3, r3, #16
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d01c      	beq.n	800adb8 <nfcipTargetHandleRX+0x4c8>
 800ad7e:	4b45      	ldr	r3, [pc, #276]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad84:	3b01      	subs	r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	7ebb      	ldrb	r3, [r7, #26]
 800ad8a:	4053      	eors	r3, r2
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d110      	bne.n	800adb8 <nfcipTargetHandleRX+0x4c8>
        {
            nfcipLogI( " NFCIP(T) Rcvd NACK  \r\n" );
            
            gNfcip.pni = nfcip_PNIDec( gNfcip.pni );   /* Dec so that has the prev PNI */
 800ad96:	4b3f      	ldr	r3, [pc, #252]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ad98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	4b3b      	ldr	r3, [pc, #236]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ada8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800adac:	4b39      	ldr	r3, [pc, #228]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800adae:	220f      	movs	r2, #15
 800adb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 800adb4:	2302      	movs	r3, #2
 800adb6:	e1dc      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        }
        else
        {        
            nfcipLogI( " NFCIP(T) Unexpected R-PDU \r\n" );
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800adb8:	4b36      	ldr	r3, [pc, #216]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800adba:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800adbc:	4b35      	ldr	r3, [pc, #212]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800adbe:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800adc2:	4b34      	ldr	r3, [pc, #208]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800adc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	9202      	str	r2, [sp, #8]
 800adcc:	2204      	movs	r2, #4
 800adce:	9201      	str	r2, [sp, #4]
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	4603      	mov	r3, r0
 800add4:	460a      	mov	r2, r1
 800add6:	2100      	movs	r1, #0
 800add8:	2000      	movs	r0, #0
 800adda:	f003 fa03 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected R-PDU  */
 800adde:	2302      	movs	r3, #2
 800ade0:	e1c7      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            if( gNfcip.pni == nfcip_PBF_PNI( rxPFB ) )
 800ade2:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process S-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisSPDU( rxPFB ) )
 800ade4:	7ebb      	ldrb	r3, [r7, #26]
 800ade6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800adea:	2b80      	cmp	r3, #128	; 0x80
 800adec:	f040 80af 	bne.w	800af4e <nfcipTargetHandleRX+0x65e>
        
        /*******************************************************************************/
        /* S ATN                                                                       */
        /*******************************************************************************/
        /* ISO 18092 12.6.3 Attention                                                  */
        if( nfcip_PFBisSATN( rxPFB ) )                         /*    If is a S-ATN     */
 800adf0:	7ebb      	ldrb	r3, [r7, #26]
 800adf2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800adf6:	2b80      	cmp	r3, #128	; 0x80
 800adf8:	d111      	bne.n	800ae1e <nfcipTargetHandleRX+0x52e>
 800adfa:	7ebb      	ldrb	r3, [r7, #26]
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10c      	bne.n	800ae1e <nfcipTargetHandleRX+0x52e>
        {            
            nfcipLogI( " NFCIP(T) Rcvd ATN  curPNI: %d \r\n", gNfcip.pni );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_ATN(), 0 ) );
 800ae04:	2100      	movs	r1, #0
 800ae06:	2080      	movs	r0, #128	; 0x80
 800ae08:	f7ff fa24 	bl	800a254 <nfcipDEPControlMsg>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	83fb      	strh	r3, [r7, #30]
 800ae10:	8bfb      	ldrh	r3, [r7, #30]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <nfcipTargetHandleRX+0x52a>
 800ae16:	8bfb      	ldrh	r3, [r7, #30]
 800ae18:	e1ab      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            return ERR_BUSY;
 800ae1a:	2302      	movs	r3, #2
 800ae1c:	e1a9      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        }
        
        /*******************************************************************************/
        /* S TO                                                                        */
        /*******************************************************************************/
        else if( nfcip_PFBisSTO( rxPFB ) )                     /* If is a S-TO (RTOX)  */
 800ae1e:	7ebb      	ldrb	r3, [r7, #26]
 800ae20:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ae24:	2b80      	cmp	r3, #128	; 0x80
 800ae26:	d17c      	bne.n	800af22 <nfcipTargetHandleRX+0x632>
 800ae28:	7ebb      	ldrb	r3, [r7, #26]
 800ae2a:	f003 0310 	and.w	r3, r3, #16
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d077      	beq.n	800af22 <nfcipTargetHandleRX+0x632>
        {
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800ae32:	4b18      	ldr	r3, [pc, #96]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ae38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ae3c:	2b80      	cmp	r3, #128	; 0x80
 800ae3e:	f040 8085 	bne.w	800af4c <nfcipTargetHandleRX+0x65c>
 800ae42:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ae48:	f003 0310 	and.w	r3, r3, #16
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d07d      	beq.n	800af4c <nfcipTargetHandleRX+0x65c>
            {
                nfcipLogI( " NFCIP(T) Rcvd TO  \r\n" );
                
                /* Digital 1.1  16.8.4.6  RTOX value in RES different that in REQ -> Protocol Error */
                if( gNfcip.lastRTOX != gNfcip.rxBuf[rxMsgIt++] )
 800ae50:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae52:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800ae56:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae58:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ae5a:	7f7b      	ldrb	r3, [r7, #29]
 800ae5c:	1c58      	adds	r0, r3, #1
 800ae5e:	7778      	strb	r0, [r7, #29]
 800ae60:	440b      	add	r3, r1
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d019      	beq.n	800ae9c <nfcipTargetHandleRX+0x5ac>
                {
                    nfcipLogI( " NFCIP(T) Mismatched RTOX value \r\n" );
                    
                    nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae6a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae6e:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800ae72:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <nfcipTargetHandleRX+0x5a4>)
 800ae74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae76:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7a:	9202      	str	r2, [sp, #8]
 800ae7c:	2204      	movs	r2, #4
 800ae7e:	9201      	str	r2, [sp, #4]
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	4603      	mov	r3, r0
 800ae84:	460a      	mov	r2, r1
 800ae86:	2100      	movs	r1, #0
 800ae88:	2000      	movs	r0, #0
 800ae8a:	f003 f9ab 	bl	800e1e4 <rfalTransceiveBlockingTx>
                    return ERR_BUSY; /* ERR_PROTO - Ignore unexpected RTOX value  */
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e16f      	b.n	800b172 <nfcipTargetHandleRX+0x882>
 800ae92:	bf00      	nop
 800ae94:	200007d8 	.word	0x200007d8
 800ae98:	4d542005 	.word	0x4d542005
                }
                
                /* Clear waiting for RTOX Ack Flag */
                gNfcip.isWait4RTOX = false;
 800ae9c:	4bb7      	ldr	r3, [pc, #732]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
                
                /* Check if a Tx is already pending */
                if( gNfcip.isTxPending )
 800aea4:	4bb5      	ldr	r3, [pc, #724]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800aea6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d005      	beq.n	800aeba <nfcipTargetHandleRX+0x5ca>
                {
                    nfcipLogW( " NFCIP(T) Tx pending, go immediately to TX \r\n" );
                    
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800aeae:	4bb3      	ldr	r3, [pc, #716]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800aeb0:	220f      	movs	r2, #15
 800aeb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    return ERR_BUSY;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e15b      	b.n	800b172 <nfcipTargetHandleRX+0x882>
                }
                
                /* Start RTOX timer and change to check state  */
                nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( gNfcip.lastRTOX * rfalNfcDepWT2RWT(gNfcip.cfg.to ) ) ) );
 800aeba:	4bb0      	ldr	r3, [pc, #704]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800aebc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aec0:	461a      	mov	r2, r3
 800aec2:	4bae      	ldr	r3, [pc, #696]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800aec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec8:	f003 030f 	and.w	r3, r3, #15
 800aecc:	330c      	adds	r3, #12
 800aece:	fa02 f303 	lsl.w	r3, r2, r3
 800aed2:	4aab      	ldr	r2, [pc, #684]	; (800b180 <nfcipTargetHandleRX+0x890>)
 800aed4:	fba2 2303 	umull	r2, r3, r2, r3
 800aed8:	0b1b      	lsrs	r3, r3, #12
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	4ba7      	ldr	r3, [pc, #668]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800aede:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800aee2:	4619      	mov	r1, r3
 800aee4:	4ba5      	ldr	r3, [pc, #660]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800aee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeea:	f003 030f 	and.w	r3, r3, #15
 800aeee:	330c      	adds	r3, #12
 800aef0:	fa01 f303 	lsl.w	r3, r1, r3
 800aef4:	49a2      	ldr	r1, [pc, #648]	; (800b180 <nfcipTargetHandleRX+0x890>)
 800aef6:	fba1 1303 	umull	r1, r3, r1, r3
 800aefa:	0b1b      	lsrs	r3, r3, #12
 800aefc:	3301      	adds	r3, #1
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	b29b      	uxth	r3, r3
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	b29b      	uxth	r3, r3
 800af06:	3301      	adds	r3, #1
 800af08:	b29b      	uxth	r3, r3
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f7 fd3a 	bl	8002984 <timerCalculateTimer>
 800af10:	4602      	mov	r2, r0
 800af12:	4b9a      	ldr	r3, [pc, #616]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af14:	67da      	str	r2, [r3, #124]	; 0x7c
                gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800af16:	4b99      	ldr	r3, [pc, #612]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af18:	220e      	movs	r2, #14
 800af1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                
                return ERR_BUSY;
 800af1e:	2302      	movs	r3, #2
 800af20:	e127      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        else
        {
            /* Unexpected S-PDU */
            nfcipLogI( " NFCIP(T) Unexpected S-PDU \r\n" );         /*  PRQA S  2880 # MISRA 2.1 - Guard code to prevent unexpected behavior */
            
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800af22:	4b96      	ldr	r3, [pc, #600]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af24:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800af26:	4b95      	ldr	r3, [pc, #596]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af28:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800af2c:	4b93      	ldr	r3, [pc, #588]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af30:	f04f 32ff 	mov.w	r2, #4294967295
 800af34:	9202      	str	r2, [sp, #8]
 800af36:	2204      	movs	r2, #4
 800af38:	9201      	str	r2, [sp, #4]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	4603      	mov	r3, r0
 800af3e:	460a      	mov	r2, r1
 800af40:	2100      	movs	r1, #0
 800af42:	2000      	movs	r0, #0
 800af44:	f003 f94e 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY; /* ERR_PROTO - Ignore unexpected S-PDU  */
 800af48:	2302      	movs	r3, #2
 800af4a:	e112      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            if( nfcip_PFBisSTO( gNfcip.lastPFBnATN ) )
 800af4c:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Process I-PDU                                                               */
    /*******************************************************************************/
    if( nfcip_PFBisIPDU( rxPFB ) )
 800af4e:	7ebb      	ldrb	r3, [r7, #26]
 800af50:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800af54:	2b00      	cmp	r3, #0
 800af56:	f040 810b 	bne.w	800b170 <nfcipTargetHandleRX+0x880>
    {
        if( gNfcip.pni != nfcip_PBF_PNI( rxPFB ) )
 800af5a:	4b88      	ldr	r3, [pc, #544]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af60:	461a      	mov	r2, r3
 800af62:	7ebb      	ldrb	r3, [r7, #26]
 800af64:	f003 0303 	and.w	r3, r3, #3
 800af68:	429a      	cmp	r2, r3
 800af6a:	d06f      	beq.n	800b04c <nfcipTargetHandleRX+0x75c>
        {
            nfcipLogI( " NFCIP(T) Rcvd IPDU wrong PNI     curPNI: %d rxPNI: %d \r\n", gNfcip.pni, nfcip_PBF_PNI( rxPFB ) );
            
            /* Digital 1.1 16.12.3.4 - If last send was ATN and rx PNI is minus 1 */
            if( nfcip_PFBisSATN(gNfcip.lastPFB ) &&  (nfcip_PNIDec(gNfcip.pni) == nfcip_PBF_PNI( rxPFB )) ) 
 800af6c:	4b83      	ldr	r3, [pc, #524]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af6e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800af72:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800af76:	2b80      	cmp	r3, #128	; 0x80
 800af78:	d153      	bne.n	800b022 <nfcipTargetHandleRX+0x732>
 800af7a:	4b80      	ldr	r3, [pc, #512]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af7c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800af80:	f003 0310 	and.w	r3, r3, #16
 800af84:	2b00      	cmp	r3, #0
 800af86:	d14c      	bne.n	800b022 <nfcipTargetHandleRX+0x732>
 800af88:	4b7c      	ldr	r3, [pc, #496]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800af8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af8e:	3b01      	subs	r3, #1
 800af90:	b2da      	uxtb	r2, r3
 800af92:	7ebb      	ldrb	r3, [r7, #26]
 800af94:	4053      	eors	r3, r2
 800af96:	b2db      	uxtb	r3, r3
 800af98:	f003 0303 	and.w	r3, r3, #3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d140      	bne.n	800b022 <nfcipTargetHandleRX+0x732>
            {
                /* Spec says to leave current PNI as is, but will be Inc after Data Tx, remaining the same */
                gNfcip.pni = nfcip_PNIDec(gNfcip.pni);
 800afa0:	4b76      	ldr	r3, [pc, #472]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800afa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afa6:	3b01      	subs	r3, #1
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	4b72      	ldr	r3, [pc, #456]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800afb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
                
                if( nfcip_PFBisIMI( rxPFB ) )
 800afb6:	7ebb      	ldrb	r3, [r7, #26]
 800afb8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d12a      	bne.n	800b016 <nfcipTargetHandleRX+0x726>
 800afc0:	7ebb      	ldrb	r3, [r7, #26]
 800afc2:	f003 0310 	and.w	r3, r3, #16
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d025      	beq.n	800b016 <nfcipTargetHandleRX+0x726>
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before && chaining -> send ACK  \r\n" );
                    EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800afca:	4b6c      	ldr	r3, [pc, #432]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800afcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afd0:	f003 0303 	and.w	r3, r3, #3
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afda:	b2d8      	uxtb	r0, r3
 800afdc:	4b67      	ldr	r3, [pc, #412]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800afde:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800afe0:	7f7b      	ldrb	r3, [r7, #29]
 800afe2:	1c59      	adds	r1, r3, #1
 800afe4:	7779      	strb	r1, [r7, #29]
 800afe6:	4413      	add	r3, r2
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	4619      	mov	r1, r3
 800afec:	f7ff f932 	bl	800a254 <nfcipDEPControlMsg>
 800aff0:	4603      	mov	r3, r0
 800aff2:	83fb      	strh	r3, [r7, #30]
 800aff4:	8bfb      	ldrh	r3, [r7, #30]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <nfcipTargetHandleRX+0x70e>
 800affa:	8bfb      	ldrh	r3, [r7, #30]
 800affc:	e0b9      	b.n	800b172 <nfcipTargetHandleRX+0x882>
                    
                    /* Digital 1.1 16.12.3.4 (...) leave the current PNI unchanged afterwards */
                    gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800affe:	4b5f      	ldr	r3, [pc, #380]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b004:	3301      	adds	r3, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 0303 	and.w	r3, r3, #3
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b5b      	ldr	r3, [pc, #364]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800b014:	e003      	b.n	800b01e <nfcipTargetHandleRX+0x72e>
                }
                else
                {
                    nfcipLogI( " NFCIP(T) PNI = prevPNI && ATN before -> reTx last I-PDU  \r\n" );
                    gNfcip.state = NFCIP_ST_TARG_DEP_TX;
 800b016:	4b59      	ldr	r3, [pc, #356]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b018:	220f      	movs	r2, #15
 800b01a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                }
                
                return ERR_BUSY;
 800b01e:	2302      	movs	r3, #2
 800b020:	e0a7      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            }
                        
            nfcDepReEnableRx( gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen );
 800b022:	4b56      	ldr	r3, [pc, #344]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b024:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800b026:	4b55      	ldr	r3, [pc, #340]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b028:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
 800b02c:	4b53      	ldr	r3, [pc, #332]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b030:	f04f 32ff 	mov.w	r2, #4294967295
 800b034:	9202      	str	r2, [sp, #8]
 800b036:	2204      	movs	r2, #4
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	4603      	mov	r3, r0
 800b03e:	460a      	mov	r2, r1
 800b040:	2100      	movs	r1, #0
 800b042:	2000      	movs	r0, #0
 800b044:	f003 f8ce 	bl	800e1e4 <rfalTransceiveBlockingTx>
            return ERR_BUSY;            /* ERR_PROTO - Ignore bad PNI value  */
 800b048:	2302      	movs	r3, #2
 800b04a:	e092      	b.n	800b172 <nfcipTargetHandleRX+0x882>
        nfcipLogD( " NFCIP(T) Rcvd IPDU OK PNI: %d  \r\n", gNfcip.pni );
        
        /*******************************************************************************/
        /* Successful data exchange                                                    */
        /*******************************************************************************/
        *outActRxLen  = ((uint16_t)nfcDepLen - RFAL_NFCDEP_DEP_HEADER - (uint16_t)optHdrLen);
 800b04c:	7efb      	ldrb	r3, [r7, #27]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	7f3b      	ldrb	r3, [r7, #28]
 800b052:	b29b      	uxth	r3, r3
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	b29b      	uxth	r3, r3
 800b058:	3b04      	subs	r3, #4
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	801a      	strh	r2, [r3, #0]
        
        nfcipClearCounters();
 800b060:	f7ff f958 	bl	800a314 <nfcipClearCounters>

        if( (&gNfcip.rxBuf[gNfcip.rxBufPaylPos] != &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen]) && (*outActRxLen > 0U) )
 800b064:	4b45      	ldr	r3, [pc, #276]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b066:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800b06a:	461a      	mov	r2, r3
 800b06c:	7f3b      	ldrb	r3, [r7, #28]
 800b06e:	3304      	adds	r3, #4
 800b070:	429a      	cmp	r2, r3
 800b072:	d013      	beq.n	800b09c <nfcipTargetHandleRX+0x7ac>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00f      	beq.n	800b09c <nfcipTargetHandleRX+0x7ac>
        {
            ST_MEMMOVE( &gNfcip.rxBuf[gNfcip.rxBufPaylPos], &gNfcip.rxBuf[RFAL_NFCDEP_DEP_HEADER + optHdrLen], *outActRxLen );
 800b07c:	4b3f      	ldr	r3, [pc, #252]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b07e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b080:	4a3e      	ldr	r2, [pc, #248]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b082:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 800b086:	1898      	adds	r0, r3, r2
 800b088:	4b3c      	ldr	r3, [pc, #240]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b08a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b08c:	7f3b      	ldrb	r3, [r7, #28]
 800b08e:	3304      	adds	r3, #4
 800b090:	18d1      	adds	r1, r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	f005 f904 	bl	80102a4 <memmove>
        
        
        /*******************************************************************************/
        /* Check if Initiator is indicating chaining MI                                */
        /*******************************************************************************/
        if( nfcip_PFBisIMI( rxPFB ) )
 800b09c:	7ebb      	ldrb	r3, [r7, #26]
 800b09e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d132      	bne.n	800b10c <nfcipTargetHandleRX+0x81c>
 800b0a6:	7ebb      	ldrb	r3, [r7, #26]
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d02d      	beq.n	800b10c <nfcipTargetHandleRX+0x81c>
        {
            gNfcip.isRxChaining = true;
 800b0b0:	4b32      	ldr	r3, [pc, #200]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            *outIsChaining      = true;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	701a      	strb	r2, [r3, #0]
            
            nfcipLogD( " NFCIP(T) Rcvd IPDU OK w MI -> ACK \r\n" );
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBRPDU_ACK( gNfcip.pni ), gNfcip.rxBuf[rxMsgIt++] ) );
 800b0be:	4b2f      	ldr	r3, [pc, #188]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b0c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0c4:	f003 0303 	and.w	r3, r3, #3
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ce:	b2d8      	uxtb	r0, r3
 800b0d0:	4b2a      	ldr	r3, [pc, #168]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b0d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b0d4:	7f7b      	ldrb	r3, [r7, #29]
 800b0d6:	1c59      	adds	r1, r3, #1
 800b0d8:	7779      	strb	r1, [r7, #29]
 800b0da:	4413      	add	r3, r2
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	f7ff f8b8 	bl	800a254 <nfcipDEPControlMsg>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	83fb      	strh	r3, [r7, #30]
 800b0e8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <nfcipTargetHandleRX+0x802>
 800b0ee:	8bfb      	ldrh	r3, [r7, #30]
 800b0f0:	e03f      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800b0f2:	4b22      	ldr	r3, [pc, #136]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b0f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	b2da      	uxtb	r2, r3
 800b102:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            return ERR_AGAIN;  /* Send Again signalling to run again, but some chaining data has arrived*/
 800b108:	230d      	movs	r3, #13
 800b10a:	e032      	b.n	800b172 <nfcipTargetHandleRX+0x882>
            }
            
            /*******************************************************************************/
            /* Reception done, send to DH and start RTOX timer                             */
            /*******************************************************************************/
            nfcipTimerStart( gNfcip.RTOXTimer, nfcipRTOXAdjust( nfcipConv1FcToMs( rfalNfcDepWT2RWT( gNfcip.cfg.to ) )) );
 800b10c:	4b1b      	ldr	r3, [pc, #108]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b10e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	330c      	adds	r3, #12
 800b118:	2201      	movs	r2, #1
 800b11a:	fa02 f303 	lsl.w	r3, r2, r3
 800b11e:	4a18      	ldr	r2, [pc, #96]	; (800b180 <nfcipTargetHandleRX+0x890>)
 800b120:	fba2 2303 	umull	r2, r3, r2, r3
 800b124:	0b1b      	lsrs	r3, r3, #12
 800b126:	b29a      	uxth	r2, r3
 800b128:	4b14      	ldr	r3, [pc, #80]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b12a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b12e:	f003 030f 	and.w	r3, r3, #15
 800b132:	330c      	adds	r3, #12
 800b134:	2101      	movs	r1, #1
 800b136:	fa01 f303 	lsl.w	r3, r1, r3
 800b13a:	4911      	ldr	r1, [pc, #68]	; (800b180 <nfcipTargetHandleRX+0x890>)
 800b13c:	fba1 1303 	umull	r1, r3, r1, r3
 800b140:	0b1b      	lsrs	r3, r3, #12
 800b142:	3301      	adds	r3, #1
 800b144:	08db      	lsrs	r3, r3, #3
 800b146:	b29b      	uxth	r3, r3
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	3301      	adds	r3, #1
 800b14e:	b29b      	uxth	r3, r3
 800b150:	4618      	mov	r0, r3
 800b152:	f7f7 fc17 	bl	8002984 <timerCalculateTimer>
 800b156:	4602      	mov	r2, r0
 800b158:	4b08      	ldr	r3, [pc, #32]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b15a:	67da      	str	r2, [r3, #124]	; 0x7c
            gNfcip.state = NFCIP_ST_TARG_DEP_RTOX;
 800b15c:	4b07      	ldr	r3, [pc, #28]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b15e:	220e      	movs	r2, #14
 800b160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            
            gNfcip.isRxChaining = false;
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <nfcipTargetHandleRX+0x88c>)
 800b166:	2200      	movs	r2, #0
 800b168:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
            ret = ERR_NONE;                            /* Data exchange done */
 800b16c:	2300      	movs	r3, #0
 800b16e:	83fb      	strh	r3, [r7, #30]
        }
    }
    return ret;
 800b170:	8bfb      	ldrh	r3, [r7, #30]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3720      	adds	r7, #32
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	200007d8 	.word	0x200007d8
 800b180:	4d542005 	.word	0x4d542005

0800b184 <nfcipTx>:


/*******************************************************************************/
static ReturnCode nfcipTx( rfalNfcDepCmd cmd, uint8_t* txBuf, uint8_t *paylBuf, uint16_t paylLen, uint8_t pfbData, uint32_t fwt )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	607a      	str	r2, [r7, #4]
 800b18e:	461a      	mov	r2, r3
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
 800b194:	4613      	mov	r3, r2
 800b196:	81bb      	strh	r3, [r7, #12]
    uint8_t *txBlock;
    uint8_t *payloadBuf;
    uint8_t  pfb;
    
   
    if( txBuf == NULL )
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <nfcipTx+0x1e>
    {
        return ERR_PARAM;
 800b19e:	2307      	movs	r3, #7
 800b1a0:	e177      	b.n	800b492 <nfcipTx+0x30e>
    }
    

    payloadBuf = paylBuf;                                               /* MISRA 17.8: Use intermediate variable */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	617b      	str	r3, [r7, #20]
    
    if( (paylLen == 0U) || (payloadBuf == NULL) )
 800b1a6:	89bb      	ldrh	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <nfcipTx+0x2e>
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d102      	bne.n	800b1b8 <nfcipTx+0x34>
    {
        payloadBuf = (uint8_t*) &txBuf[RFAL_NFCDEP_DEPREQ_HEADER_LEN];  /* If not a DEP (no Data) ensure enough space for header */
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	3305      	adds	r3, #5
 800b1b6:	617b      	str	r3, [r7, #20]
    }
    
    
    txBufIt  = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	83fb      	strh	r3, [r7, #30]
    pfb      = pfbData;                                                 /* MISRA 17.8: Use intermediate variable */
 800b1bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1c0:	74fb      	strb	r3, [r7, #19]
    
    txBlock  = payloadBuf;                                              /* Point to beginning of the Data, and go backwards     */    
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	61bb      	str	r3, [r7, #24]
        
    
    gNfcip.lastCmd = (uint8_t)cmd;                                      /* Store last cmd sent    */
 800b1c6:	4aac      	ldr	r2, [pc, #688]	; (800b478 <nfcipTx+0x2f4>)
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
    gNfcip.lastPFB = NFCIP_PFB_INVALID;                                 /* Reset last pfb sent    */
 800b1ce:	4baa      	ldr	r3, [pc, #680]	; (800b478 <nfcipTx+0x2f4>)
 800b1d0:	22ff      	movs	r2, #255	; 0xff
 800b1d2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    
    /*******************************************************************************/
    /* Compute outgoing NFCIP message                                              */
    /*******************************************************************************/
    switch( cmd )
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	2b0b      	cmp	r3, #11
 800b1da:	f200 8120 	bhi.w	800b41e <nfcipTx+0x29a>
 800b1de:	a201      	add	r2, pc, #4	; (adr r2, 800b1e4 <nfcipTx+0x60>)
 800b1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e4:	0800b215 	.word	0x0800b215
 800b1e8:	0800b215 	.word	0x0800b215
 800b1ec:	0800b309 	.word	0x0800b309
 800b1f0:	0800b33f 	.word	0x0800b33f
 800b1f4:	0800b33f 	.word	0x0800b33f
 800b1f8:	0800b33f 	.word	0x0800b33f
 800b1fc:	0800b367 	.word	0x0800b367
 800b200:	0800b367 	.word	0x0800b367
 800b204:	0800b34f 	.word	0x0800b34f
 800b208:	0800b34f 	.word	0x0800b34f
 800b20c:	0800b34f 	.word	0x0800b34f
 800b210:	0800b34f 	.word	0x0800b34f
    {
        /*******************************************************************************/
        case NFCIP_CMD_ATR_RES:
        case NFCIP_CMD_ATR_REQ:
            
            rfalNfcDepSetNFCID( payloadBuf, gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );    /* NFCID */
 800b214:	220a      	movs	r2, #10
 800b216:	2100      	movs	r1, #0
 800b218:	6978      	ldr	r0, [r7, #20]
 800b21a:	f005 f85c 	bl	80102d6 <memset>
 800b21e:	4b96      	ldr	r3, [pc, #600]	; (800b478 <nfcipTx+0x2f4>)
 800b220:	7c5b      	ldrb	r3, [r3, #17]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <nfcipTx+0xb0>
 800b226:	4b94      	ldr	r3, [pc, #592]	; (800b478 <nfcipTx+0x2f4>)
 800b228:	7c5b      	ldrb	r3, [r3, #17]
 800b22a:	461a      	mov	r2, r3
 800b22c:	4993      	ldr	r1, [pc, #588]	; (800b47c <nfcipTx+0x2f8>)
 800b22e:	6978      	ldr	r0, [r7, #20]
 800b230:	f005 f82d 	bl	801028e <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 800b234:	8bfb      	ldrh	r3, [r7, #30]
 800b236:	330a      	adds	r3, #10
 800b238:	83fb      	strh	r3, [r7, #30]
            
            payloadBuf[txBufIt++] = gNfcip.cfg.did;                                     /* DID   */
 800b23a:	8bfb      	ldrh	r3, [r7, #30]
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	83fa      	strh	r2, [r7, #30]
 800b240:	461a      	mov	r2, r3
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	4413      	add	r3, r2
 800b246:	4a8c      	ldr	r2, [pc, #560]	; (800b478 <nfcipTx+0x2f4>)
 800b248:	78d2      	ldrb	r2, [r2, #3]
 800b24a:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.bs;                                      /* BS    */
 800b24c:	8bfb      	ldrh	r3, [r7, #30]
 800b24e:	1c5a      	adds	r2, r3, #1
 800b250:	83fa      	strh	r2, [r7, #30]
 800b252:	461a      	mov	r2, r3
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	4413      	add	r3, r2
 800b258:	4a87      	ldr	r2, [pc, #540]	; (800b478 <nfcipTx+0x2f4>)
 800b25a:	7952      	ldrb	r2, [r2, #5]
 800b25c:	701a      	strb	r2, [r3, #0]
            payloadBuf[txBufIt++] = gNfcip.cfg.br;                                      /* BR    */
 800b25e:	8bfb      	ldrh	r3, [r7, #30]
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	83fa      	strh	r2, [r7, #30]
 800b264:	461a      	mov	r2, r3
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	4413      	add	r3, r2
 800b26a:	4a83      	ldr	r2, [pc, #524]	; (800b478 <nfcipTx+0x2f4>)
 800b26c:	7992      	ldrb	r2, [r2, #6]
 800b26e:	701a      	strb	r2, [r3, #0]
            
            if( cmd == NFCIP_CMD_ATR_RES )
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d109      	bne.n	800b28a <nfcipTx+0x106>
            {
                payloadBuf[txBufIt++] = gNfcip.cfg.to;                                  /* ATR_RES[ TO ] */
 800b276:	8bfb      	ldrh	r3, [r7, #30]
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	83fa      	strh	r2, [r7, #30]
 800b27c:	461a      	mov	r2, r3
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	4413      	add	r3, r2
 800b282:	4a7d      	ldr	r2, [pc, #500]	; (800b478 <nfcipTx+0x2f4>)
 800b284:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800b288:	701a      	strb	r2, [r3, #0]
            }
                                    
            if( gNfcip.cfg.gbLen > 0U)
 800b28a:	4b7b      	ldr	r3, [pc, #492]	; (800b478 <nfcipTx+0x2f4>)
 800b28c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b290:	2b00      	cmp	r3, #0
 800b292:	d023      	beq.n	800b2dc <nfcipTx+0x158>
            {
                payloadBuf[txBufIt++] = nfcip_PPwGB( gNfcip.cfg.lr );                   /* PP signalling GB  */
 800b294:	4b78      	ldr	r3, [pc, #480]	; (800b478 <nfcipTx+0x2f4>)
 800b296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b29a:	011b      	lsls	r3, r3, #4
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	8bfb      	ldrh	r3, [r7, #30]
 800b2a6:	1c59      	adds	r1, r3, #1
 800b2a8:	83f9      	strh	r1, [r7, #30]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	440b      	add	r3, r1
 800b2b0:	f042 0202 	orr.w	r2, r2, #2
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]
                ST_MEMCPY( &payloadBuf[txBufIt], gNfcip.cfg.gb, gNfcip.cfg.gbLen );     /* set General Bytes */
 800b2b8:	8bfb      	ldrh	r3, [r7, #30]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	18d0      	adds	r0, r2, r3
 800b2be:	4b6e      	ldr	r3, [pc, #440]	; (800b478 <nfcipTx+0x2f4>)
 800b2c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	496e      	ldr	r1, [pc, #440]	; (800b480 <nfcipTx+0x2fc>)
 800b2c8:	f004 ffe1 	bl	801028e <memcpy>
                txBufIt += gNfcip.cfg.gbLen;
 800b2cc:	4b6a      	ldr	r3, [pc, #424]	; (800b478 <nfcipTx+0x2f4>)
 800b2ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	8bfb      	ldrh	r3, [r7, #30]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	83fb      	strh	r3, [r7, #30]
 800b2da:	e00e      	b.n	800b2fa <nfcipTx+0x176>
            }
            else
            {
                payloadBuf[txBufIt++] = rfalNfcDepLR2PP( gNfcip.cfg.lr );               /* PP without GB     */
 800b2dc:	4b66      	ldr	r3, [pc, #408]	; (800b478 <nfcipTx+0x2f4>)
 800b2de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2e2:	011b      	lsls	r3, r3, #4
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	8bfb      	ldrh	r3, [r7, #30]
 800b2e8:	1c59      	adds	r1, r3, #1
 800b2ea:	83f9      	strh	r1, [r7, #30]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	440b      	add	r3, r1
 800b2f2:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
            }
            
            if( (txBufIt + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN) > RFAL_NFCDEP_ATRREQ_MAX_LEN )   /* Check max ATR length (ATR_REQ = ATR_RES)*/
 800b2fa:	8bfb      	ldrh	r3, [r7, #30]
 800b2fc:	3302      	adds	r3, #2
 800b2fe:	2b40      	cmp	r3, #64	; 0x40
 800b300:	f240 808f 	bls.w	800b422 <nfcipTx+0x29e>
            {
                return ERR_PARAM;
 800b304:	2307      	movs	r3, #7
 800b306:	e0c4      	b.n	800b492 <nfcipTx+0x30e>
            break;
            
        /*******************************************************************************/
        case NFCIP_CMD_WUP_REQ:                               /* ISO 18092 - 12.5.2.1 */
            
            rfalNfcDepSetNFCID( (payloadBuf), gNfcip.cfg.nfcid, gNfcip.cfg.nfcidLen );   /* NFCID */
 800b308:	220a      	movs	r2, #10
 800b30a:	2100      	movs	r1, #0
 800b30c:	6978      	ldr	r0, [r7, #20]
 800b30e:	f004 ffe2 	bl	80102d6 <memset>
 800b312:	4b59      	ldr	r3, [pc, #356]	; (800b478 <nfcipTx+0x2f4>)
 800b314:	7c5b      	ldrb	r3, [r3, #17]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <nfcipTx+0x1a4>
 800b31a:	4b57      	ldr	r3, [pc, #348]	; (800b478 <nfcipTx+0x2f4>)
 800b31c:	7c5b      	ldrb	r3, [r3, #17]
 800b31e:	461a      	mov	r2, r3
 800b320:	4956      	ldr	r1, [pc, #344]	; (800b47c <nfcipTx+0x2f8>)
 800b322:	6978      	ldr	r0, [r7, #20]
 800b324:	f004 ffb3 	bl	801028e <memcpy>
            txBufIt += RFAL_NFCDEP_NFCID3_LEN;
 800b328:	8bfb      	ldrh	r3, [r7, #30]
 800b32a:	330a      	adds	r3, #10
 800b32c:	83fb      	strh	r3, [r7, #30]
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	3b01      	subs	r3, #1
 800b332:	61bb      	str	r3, [r7, #24]
 800b334:	4b50      	ldr	r3, [pc, #320]	; (800b478 <nfcipTx+0x2f4>)
 800b336:	78da      	ldrb	r2, [r3, #3]
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	701a      	strb	r2, [r3, #0]
            break;
 800b33c:	e076      	b.n	800b42c <nfcipTx+0x2a8>
        /*******************************************************************************/
        case NFCIP_CMD_WUP_RES:                               /* ISO 18092 - 12.5.2.2 */
        case NFCIP_CMD_PSL_REQ:
        case NFCIP_CMD_PSL_RES:
            
            *(--txBlock) = gNfcip.cfg.did;                                               /* DID   */
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	3b01      	subs	r3, #1
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	4b4c      	ldr	r3, [pc, #304]	; (800b478 <nfcipTx+0x2f4>)
 800b346:	78da      	ldrb	r2, [r3, #3]
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	701a      	strb	r2, [r3, #0]
            break;
 800b34c:	e06e      	b.n	800b42c <nfcipTx+0x2a8>
        case NFCIP_CMD_RLS_RES:
        case NFCIP_CMD_DSL_REQ:
        case NFCIP_CMD_DSL_RES:
            
            /* Digital 1.0 - 14.8.1.1 & 14.9.1.1 & 14.10.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b34e:	4b4a      	ldr	r3, [pc, #296]	; (800b478 <nfcipTx+0x2f4>)
 800b350:	78db      	ldrb	r3, [r3, #3]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d067      	beq.n	800b426 <nfcipTx+0x2a2>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	3b01      	subs	r3, #1
 800b35a:	61bb      	str	r3, [r7, #24]
 800b35c:	4b46      	ldr	r3, [pc, #280]	; (800b478 <nfcipTx+0x2f4>)
 800b35e:	78da      	ldrb	r2, [r3, #3]
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	701a      	strb	r2, [r3, #0]
            }
            break;
 800b364:	e05f      	b.n	800b426 <nfcipTx+0x2a2>
        /*******************************************************************************/
        case NFCIP_CMD_DEP_REQ:
        case NFCIP_CMD_DEP_RES:
            
            /* Compute optional PFB bits */
            if (gNfcip.cfg.did != RFAL_NFCDEP_DID_NO)                {   pfb |= NFCIP_PFB_DID_BIT;       }
 800b366:	4b44      	ldr	r3, [pc, #272]	; (800b478 <nfcipTx+0x2f4>)
 800b368:	78db      	ldrb	r3, [r3, #3]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <nfcipTx+0x1f2>
 800b36e:	7cfb      	ldrb	r3, [r7, #19]
 800b370:	f043 0304 	orr.w	r3, r3, #4
 800b374:	74fb      	strb	r3, [r7, #19]
            if (gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO)                {   pfb |= NFCIP_PFB_NAD_BIT;       }
 800b376:	4b40      	ldr	r3, [pc, #256]	; (800b478 <nfcipTx+0x2f4>)
 800b378:	791b      	ldrb	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <nfcipTx+0x202>
 800b37e:	7cfb      	ldrb	r3, [r7, #19]
 800b380:	f043 0308 	orr.w	r3, r3, #8
 800b384:	74fb      	strb	r3, [r7, #19]
            if ((gNfcip.isTxChaining) && (nfcip_PFBisIPDU(pfb)) )    {   pfb |= NFCIP_PFB_MI_BIT;        }
 800b386:	4b3c      	ldr	r3, [pc, #240]	; (800b478 <nfcipTx+0x2f4>)
 800b388:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d008      	beq.n	800b3a2 <nfcipTx+0x21e>
 800b390:	7cfb      	ldrb	r3, [r7, #19]
 800b392:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d103      	bne.n	800b3a2 <nfcipTx+0x21e>
 800b39a:	7cfb      	ldrb	r3, [r7, #19]
 800b39c:	f043 0310 	orr.w	r3, r3, #16
 800b3a0:	74fb      	strb	r3, [r7, #19]
            
            /* Store PFB for future handling */
            gNfcip.lastPFB       = pfb;                                                  /* store PFB sent */
 800b3a2:	4a35      	ldr	r2, [pc, #212]	; (800b478 <nfcipTx+0x2f4>)
 800b3a4:	7cfb      	ldrb	r3, [r7, #19]
 800b3a6:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
            
            if( !nfcip_PFBisSATN(pfb) )
 800b3aa:	7cfb      	ldrb	r3, [r7, #19]
 800b3ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b3b0:	2b80      	cmp	r3, #128	; 0x80
 800b3b2:	d104      	bne.n	800b3be <nfcipTx+0x23a>
 800b3b4:	7cfb      	ldrb	r3, [r7, #19]
 800b3b6:	f003 0310 	and.w	r3, r3, #16
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <nfcipTx+0x242>
            {
                gNfcip.lastPFBnATN   = pfb;                                              /* store last PFB different then ATN */
 800b3be:	4a2e      	ldr	r2, [pc, #184]	; (800b478 <nfcipTx+0x2f4>)
 800b3c0:	7cfb      	ldrb	r3, [r7, #19]
 800b3c2:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
            }
            
            
            /* Add NAD if it is to be supported */
            if( gNfcip.cfg.nad != RFAL_NFCDEP_NAD_NO )      
 800b3c6:	4b2c      	ldr	r3, [pc, #176]	; (800b478 <nfcipTx+0x2f4>)
 800b3c8:	791b      	ldrb	r3, [r3, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d006      	beq.n	800b3dc <nfcipTx+0x258>
            {
                *(--txBlock) = gNfcip.cfg.nad;                                           /* NAD   */
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	61bb      	str	r3, [r7, #24]
 800b3d4:	4b28      	ldr	r3, [pc, #160]	; (800b478 <nfcipTx+0x2f4>)
 800b3d6:	791a      	ldrb	r2, [r3, #4]
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	701a      	strb	r2, [r3, #0]
            }
            
            /* Digital 1.0 - 14.8.1.1 & 14.8.1.1 Only add DID if not 0 */
            if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO )
 800b3dc:	4b26      	ldr	r3, [pc, #152]	; (800b478 <nfcipTx+0x2f4>)
 800b3de:	78db      	ldrb	r3, [r3, #3]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d006      	beq.n	800b3f2 <nfcipTx+0x26e>
            {
                *(--txBlock) = gNfcip.cfg.did;                                           /* DID   */
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	4b23      	ldr	r3, [pc, #140]	; (800b478 <nfcipTx+0x2f4>)
 800b3ec:	78da      	ldrb	r2, [r3, #3]
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	701a      	strb	r2, [r3, #0]
            }
            
            *(--txBlock) = pfb;                                                          /* PFB */
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	61bb      	str	r3, [r7, #24]
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	7cfa      	ldrb	r2, [r7, #19]
 800b3fc:	701a      	strb	r2, [r3, #0]
                        
            
            /* NCI 1.0 - Check if Empty frames are allowed */
            if( (paylLen == 0U) && nfcipIsEmptyDEPDisabled(gNfcip.cfg.oper) && nfcip_PFBisIPDU(pfb) )
 800b3fe:	89bb      	ldrh	r3, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d112      	bne.n	800b42a <nfcipTx+0x2a6>
 800b404:	4b1c      	ldr	r3, [pc, #112]	; (800b478 <nfcipTx+0x2f4>)
 800b406:	789b      	ldrb	r3, [r3, #2]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d00c      	beq.n	800b42a <nfcipTx+0x2a6>
 800b410:	7cfb      	ldrb	r3, [r7, #19]
 800b412:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d107      	bne.n	800b42a <nfcipTx+0x2a6>
            {
                return ERR_PARAM;
 800b41a:	2307      	movs	r3, #7
 800b41c:	e039      	b.n	800b492 <nfcipTx+0x30e>
            }
            break;

        /*******************************************************************************/
        default:
            return ERR_PARAM;
 800b41e:	2307      	movs	r3, #7
 800b420:	e037      	b.n	800b492 <nfcipTx+0x30e>
            break;
 800b422:	bf00      	nop
 800b424:	e002      	b.n	800b42c <nfcipTx+0x2a8>
            break;
 800b426:	bf00      	nop
 800b428:	e000      	b.n	800b42c <nfcipTx+0x2a8>
            break;
 800b42a:	bf00      	nop
    }
    
    /*******************************************************************************/
    /* Prepend Header                                                              */
    /*******************************************************************************/    
    *(--txBlock) = (uint8_t)cmd;                                                         /* CMD     */
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	3b01      	subs	r3, #1
 800b430:	61bb      	str	r3, [r7, #24]
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	7bfa      	ldrb	r2, [r7, #15]
 800b436:	701a      	strb	r2, [r3, #0]
    *(--txBlock) = (uint8_t)( nfcipCmdIsReq(cmd) ? NFCIP_REQ : NFCIP_RES );              /* CMDType */
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <nfcipTx+0x2c4>
 800b444:	22d4      	movs	r2, #212	; 0xd4
 800b446:	e000      	b.n	800b44a <nfcipTx+0x2c6>
 800b448:	22d5      	movs	r2, #213	; 0xd5
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	61bb      	str	r3, [r7, #24]
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	701a      	strb	r2, [r3, #0]
        
    
    txBufIt += paylLen + (uint16_t)((uint32_t)payloadBuf - (uint32_t)txBlock);           /* Calculate overall buffer size */
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	89bb      	ldrh	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	b29a      	uxth	r2, r3
 800b462:	8bfb      	ldrh	r3, [r7, #30]
 800b464:	4413      	add	r3, r2
 800b466:	83fb      	strh	r3, [r7, #30]
    
    
    if( txBufIt > gNfcip.fsc )                                                           /* Check if msg length violates the maximum payload size FSC */
 800b468:	4b03      	ldr	r3, [pc, #12]	; (800b478 <nfcipTx+0x2f4>)
 800b46a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b46e:	8bfa      	ldrh	r2, [r7, #30]
 800b470:	429a      	cmp	r2, r3
 800b472:	d907      	bls.n	800b484 <nfcipTx+0x300>
    {
        return ERR_NOTSUPP;
 800b474:	2318      	movs	r3, #24
 800b476:	e00c      	b.n	800b492 <nfcipTx+0x30e>
 800b478:	200007d8 	.word	0x200007d8
 800b47c:	200007df 	.word	0x200007df
 800b480:	200007ea 	.word	0x200007ea
    }
        
    /*******************************************************************************/
    return nfcipDataTx( txBlock, txBufIt, fwt );
 800b484:	8bfb      	ldrh	r3, [r7, #30]
 800b486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b488:	4619      	mov	r1, r3
 800b48a:	69b8      	ldr	r0, [r7, #24]
 800b48c:	f000 fca0 	bl	800bdd0 <nfcipDataTx>
 800b490:	4603      	mov	r3, r0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop

0800b49c <nfcipConfig>:
 ******************************************************************************
 */

/*******************************************************************************/
static void nfcipConfig( const rfalNfcDepConfigs * cfg )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
    if (cfg == NULL) 
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d034      	beq.n	800b514 <nfcipConfig+0x78>
    {
        return;
    }
    
    ST_MEMCPY(&gNfcip.cfg, cfg, sizeof(rfalNfcDepConfigs));          /* Copy given config to local       */
 800b4aa:	2250      	movs	r2, #80	; 0x50
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	481b      	ldr	r0, [pc, #108]	; (800b51c <nfcipConfig+0x80>)
 800b4b0:	f004 feed 	bl	801028e <memcpy>
    
    gNfcip.cfg.to   = MIN( RFAL_NFCDEP_WT_TRG_MAX, gNfcip.cfg.to);   /* Ensure proper WT value           */
 800b4b4:	4b19      	ldr	r3, [pc, #100]	; (800b51c <nfcipConfig+0x80>)
 800b4b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4ba:	2b0e      	cmp	r3, #14
 800b4bc:	bf28      	it	cs
 800b4be:	230e      	movcs	r3, #14
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	4b16      	ldr	r3, [pc, #88]	; (800b51c <nfcipConfig+0x80>)
 800b4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    gNfcip.cfg.did  = nfcip_DIDMax( gNfcip.cfg.did );                /* Ensure proper DID value          */
 800b4c8:	4b14      	ldr	r3, [pc, #80]	; (800b51c <nfcipConfig+0x80>)
 800b4ca:	78db      	ldrb	r3, [r3, #3]
 800b4cc:	2b0e      	cmp	r3, #14
 800b4ce:	bf28      	it	cs
 800b4d0:	230e      	movcs	r3, #14
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	4b11      	ldr	r3, [pc, #68]	; (800b51c <nfcipConfig+0x80>)
 800b4d6:	70da      	strb	r2, [r3, #3]
    gNfcip.fsc      = rfalNfcDepLR2FS( gNfcip.cfg.lr );              /* Calculate FSC based on given LR  */
 800b4d8:	4b10      	ldr	r3, [pc, #64]	; (800b51c <nfcipConfig+0x80>)
 800b4da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4de:	3301      	adds	r3, #1
 800b4e0:	019b      	lsls	r3, r3, #6
 800b4e2:	2bfd      	cmp	r3, #253	; 0xfd
 800b4e4:	d807      	bhi.n	800b4f6 <nfcipConfig+0x5a>
 800b4e6:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <nfcipConfig+0x80>)
 800b4e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	019b      	lsls	r3, r3, #6
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	e000      	b.n	800b4f8 <nfcipConfig+0x5c>
 800b4f6:	23fe      	movs	r3, #254	; 0xfe
 800b4f8:	4a08      	ldr	r2, [pc, #32]	; (800b51c <nfcipConfig+0x80>)
 800b4fa:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.state = ( ( gNfcip.cfg.role ==  RFAL_NFCDEP_ROLE_TARGET) ? NFCIP_ST_TARG_WAIT_ATR : NFCIP_ST_INIT_IDLE );
 800b4fe:	4b07      	ldr	r3, [pc, #28]	; (800b51c <nfcipConfig+0x80>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <nfcipConfig+0x6e>
 800b506:	220a      	movs	r2, #10
 800b508:	e000      	b.n	800b50c <nfcipConfig+0x70>
 800b50a:	2201      	movs	r2, #1
 800b50c:	4b03      	ldr	r3, [pc, #12]	; (800b51c <nfcipConfig+0x80>)
 800b50e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800b512:	e000      	b.n	800b516 <nfcipConfig+0x7a>
        return;
 800b514:	bf00      	nop
}
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200007d8 	.word	0x200007d8

0800b520 <nfcipRun>:


/*******************************************************************************/
static ReturnCode nfcipRun( uint16_t *outActRxLen, bool *outIsChaining  )
{
 800b520:	b5b0      	push	{r4, r5, r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
    ReturnCode ret;
    
    ret = ERR_SYNTAX;
 800b52a:	2314      	movs	r3, #20
 800b52c:	81fb      	strh	r3, [r7, #14]
    
    nfcipLogD( " NFCIP Run() state: %d \r\n", gNfcip.state );
    
    switch( gNfcip.state )
 800b52e:	4b94      	ldr	r3, [pc, #592]	; (800b780 <nfcipRun+0x260>)
 800b530:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b534:	2b10      	cmp	r3, #16
 800b536:	f200 8118 	bhi.w	800b76a <nfcipRun+0x24a>
 800b53a:	a201      	add	r2, pc, #4	; (adr r2, 800b540 <nfcipRun+0x20>)
 800b53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b540:	0800b585 	.word	0x0800b585
 800b544:	0800b76b 	.word	0x0800b76b
 800b548:	0800b76b 	.word	0x0800b76b
 800b54c:	0800b76b 	.word	0x0800b76b
 800b550:	0800b585 	.word	0x0800b585
 800b554:	0800b589 	.word	0x0800b589
 800b558:	0800b5e5 	.word	0x0800b5e5
 800b55c:	0800b76b 	.word	0x0800b76b
 800b560:	0800b76b 	.word	0x0800b76b
 800b564:	0800b76b 	.word	0x0800b76b
 800b568:	0800b76b 	.word	0x0800b76b
 800b56c:	0800b76b 	.word	0x0800b76b
 800b570:	0800b585 	.word	0x0800b585
 800b574:	0800b731 	.word	0x0800b731
 800b578:	0800b60d 	.word	0x0800b60d
 800b57c:	0800b6b7 	.word	0x0800b6b7
 800b580:	0800b585 	.word	0x0800b585
        /*******************************************************************************/
        case NFCIP_ST_IDLE:
        case NFCIP_ST_INIT_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_IDLE:
        case NFCIP_ST_TARG_DEP_SLEEP:
            return ERR_NONE;
 800b584:	2300      	movs	r3, #0
 800b586:	e0f6      	b.n	800b776 <nfcipRun+0x256>
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_TX:
            
            nfcipLogD( " NFCIP(I) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_REQ, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), (gNfcip.cfg.fwt + gNfcip.cfg.dFwt) );
 800b588:	4b7d      	ldr	r3, [pc, #500]	; (800b780 <nfcipRun+0x260>)
 800b58a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b58c:	4b7c      	ldr	r3, [pc, #496]	; (800b780 <nfcipRun+0x260>)
 800b58e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b590:	4a7b      	ldr	r2, [pc, #492]	; (800b780 <nfcipRun+0x260>)
 800b592:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800b596:	189c      	adds	r4, r3, r2
 800b598:	4b79      	ldr	r3, [pc, #484]	; (800b780 <nfcipRun+0x260>)
 800b59a:	f8b3 5068 	ldrh.w	r5, [r3, #104]	; 0x68
 800b59e:	4b78      	ldr	r3, [pc, #480]	; (800b780 <nfcipRun+0x260>)
 800b5a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b5a4:	f003 0303 	and.w	r3, r3, #3
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	4a75      	ldr	r2, [pc, #468]	; (800b780 <nfcipRun+0x260>)
 800b5ac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800b5ae:	4a74      	ldr	r2, [pc, #464]	; (800b780 <nfcipRun+0x260>)
 800b5b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b5b2:	440a      	add	r2, r1
 800b5b4:	9201      	str	r2, [sp, #4]
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	4622      	mov	r2, r4
 800b5bc:	4601      	mov	r1, r0
 800b5be:	2006      	movs	r0, #6
 800b5c0:	f7ff fde0 	bl	800b184 <nfcipTx>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	81fb      	strh	r3, [r7, #14]
                        
            switch( ret )
 800b5c8:	89fb      	ldrh	r3, [r7, #14]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <nfcipRun+0xba>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_INIT_DEP_IDLE;
 800b5ce:	4b6c      	ldr	r3, [pc, #432]	; (800b780 <nfcipRun+0x260>)
 800b5d0:	2204      	movs	r2, #4
 800b5d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 800b5d6:	89fb      	ldrh	r3, [r7, #14]
 800b5d8:	e0cd      	b.n	800b776 <nfcipRun+0x256>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_INIT_DEP_RX;
 800b5da:	4b69      	ldr	r3, [pc, #420]	; (800b780 <nfcipRun+0x260>)
 800b5dc:	2206      	movs	r2, #6
 800b5de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 800b5e2:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_INIT_DEP_RX:          /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */

            ret = nfcipDataRx( false );
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	f000 fc13 	bl	800be10 <nfcipDataRx>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	81fb      	strh	r3, [r7, #14]
            
            if( ret != ERR_BUSY )
 800b5ee:	89fb      	ldrh	r3, [r7, #14]
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	f000 80bc 	beq.w	800b76e <nfcipRun+0x24e>
            {
                ret = nfcipInitiatorHandleDEP( ret, *gNfcip.rxRcvdLen, outActRxLen, outIsChaining );
 800b5f6:	4b62      	ldr	r3, [pc, #392]	; (800b780 <nfcipRun+0x260>)
 800b5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fa:	8819      	ldrh	r1, [r3, #0]
 800b5fc:	89f8      	ldrh	r0, [r7, #14]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	f7fe fea5 	bl	800a350 <nfcipInitiatorHandleDEP>
 800b606:	4603      	mov	r3, r0
 800b608:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 800b60a:	e0b0      	b.n	800b76e <nfcipRun+0x24e>
            
        /*******************************************************************************/    
        case NFCIP_ST_TARG_DEP_RTOX:
            
            if( !nfcipTimerisExpired( gNfcip.RTOXTimer ) )                    /* Do nothing until RTOX timer has expired */
 800b60c:	4b5c      	ldr	r3, [pc, #368]	; (800b780 <nfcipRun+0x260>)
 800b60e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b610:	4618      	mov	r0, r3
 800b612:	f7f7 f9c5 	bl	80029a0 <timerIsExpired>
 800b616:	4603      	mov	r3, r0
 800b618:	f083 0301 	eor.w	r3, r3, #1
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <nfcipRun+0x106>
            {
                return ERR_BUSY;
 800b622:	2302      	movs	r3, #2
 800b624:	e0a7      	b.n	800b776 <nfcipRun+0x256>
            }
            
            /* If we cannot send a RTOX raise a Timeout error so that we do not   
             * hold the field On forever in AP2P                                  */
            if( nfcipIsRTOXReqDisabled(gNfcip.cfg.oper) )
 800b626:	4b56      	ldr	r3, [pc, #344]	; (800b780 <nfcipRun+0x260>)
 800b628:	789b      	ldrb	r3, [r3, #2]
 800b62a:	f003 0301 	and.w	r3, r3, #1
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <nfcipRun+0x116>
            {
                /* We should reEnable Rx, and measure time between our field Off to 
                 * either report link loss or recover               #287          */
                nfcipLogI( " NFCIP(T) RTOX not sent due to config, NOT reenabling Rx \r\n" );
                return ERR_TIMEOUT;
 800b632:	2304      	movs	r3, #4
 800b634:	e09f      	b.n	800b776 <nfcipRun+0x256>
            } 

            if( gNfcip.cntRTOXRetrys++ > NFCIP_MAX_RTOX_RETRYS )              /* Check maximum consecutive RTOX requests */
 800b636:	4b52      	ldr	r3, [pc, #328]	; (800b780 <nfcipRun+0x260>)
 800b638:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	b2d1      	uxtb	r1, r2
 800b640:	4a4f      	ldr	r2, [pc, #316]	; (800b780 <nfcipRun+0x260>)
 800b642:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 800b646:	2b03      	cmp	r3, #3
 800b648:	d901      	bls.n	800b64e <nfcipRun+0x12e>
            {
                return ERR_PROTO;
 800b64a:	230b      	movs	r3, #11
 800b64c:	e093      	b.n	800b776 <nfcipRun+0x256>
            }
            
            nfcipLogI( " NFCIP(T) RTOX sent \r\n" );
            
            gNfcip.lastRTOX = nfcip_RTOXTargMax(gNfcip.cfg.to);               /* Calculate requested RTOX value, and send it */                        
 800b64e:	4b4c      	ldr	r3, [pc, #304]	; (800b780 <nfcipRun+0x260>)
 800b650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	330c      	adds	r3, #12
 800b65a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b65e:	fa22 f303 	lsr.w	r3, r2, r3
 800b662:	2b3a      	cmp	r3, #58	; 0x3a
 800b664:	d80b      	bhi.n	800b67e <nfcipRun+0x15e>
 800b666:	4b46      	ldr	r3, [pc, #280]	; (800b780 <nfcipRun+0x260>)
 800b668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b66c:	f003 030f 	and.w	r3, r3, #15
 800b670:	330c      	adds	r3, #12
 800b672:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800b676:	fa22 f303 	lsr.w	r3, r2, r3
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	e000      	b.n	800b680 <nfcipRun+0x160>
 800b67e:	233b      	movs	r3, #59	; 0x3b
 800b680:	4a3f      	ldr	r2, [pc, #252]	; (800b780 <nfcipRun+0x260>)
 800b682:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
            EXIT_ON_ERR( ret, nfcipDEPControlMsg( nfcip_PFBSPDU_TO(), gNfcip.lastRTOX ) );
 800b686:	4b3e      	ldr	r3, [pc, #248]	; (800b780 <nfcipRun+0x260>)
 800b688:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b68c:	4619      	mov	r1, r3
 800b68e:	2090      	movs	r0, #144	; 0x90
 800b690:	f7fe fde0 	bl	800a254 <nfcipDEPControlMsg>
 800b694:	4603      	mov	r3, r0
 800b696:	81fb      	strh	r3, [r7, #14]
 800b698:	89fb      	ldrh	r3, [r7, #14]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <nfcipRun+0x182>
 800b69e:	89fb      	ldrh	r3, [r7, #14]
 800b6a0:	e069      	b.n	800b776 <nfcipRun+0x256>
            
            /* Set waiting for RTOX Ack Flag */
            gNfcip.isWait4RTOX = true;
 800b6a2:	4b37      	ldr	r3, [pc, #220]	; (800b780 <nfcipRun+0x260>)
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            gNfcip.state = NFCIP_ST_TARG_DEP_RX;                              /* Go back to Rx to process RTOX ack       */
 800b6aa:	4b35      	ldr	r3, [pc, #212]	; (800b780 <nfcipRun+0x260>)
 800b6ac:	220d      	movs	r2, #13
 800b6ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return ERR_BUSY;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	e05f      	b.n	800b776 <nfcipRun+0x256>
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_TX:
            
            nfcipLogD( " NFCIP(T) Tx PNI: %d txLen: %d \r\n", gNfcip.pni, gNfcip.txBufLen );
            ret = nfcipTx( NFCIP_CMD_DEP_RES, gNfcip.txBuf, &gNfcip.txBuf[gNfcip.txBufPaylPos], gNfcip.txBufLen, nfcip_PFBIPDU( gNfcip.pni ), NFCIP_NO_FWT );
 800b6b6:	4b32      	ldr	r3, [pc, #200]	; (800b780 <nfcipRun+0x260>)
 800b6b8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800b6ba:	4b31      	ldr	r3, [pc, #196]	; (800b780 <nfcipRun+0x260>)
 800b6bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6be:	4a30      	ldr	r2, [pc, #192]	; (800b780 <nfcipRun+0x260>)
 800b6c0:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800b6c4:	1898      	adds	r0, r3, r2
 800b6c6:	4b2e      	ldr	r3, [pc, #184]	; (800b780 <nfcipRun+0x260>)
 800b6c8:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
 800b6cc:	4b2c      	ldr	r3, [pc, #176]	; (800b780 <nfcipRun+0x260>)
 800b6ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	9201      	str	r2, [sp, #4]
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	4623      	mov	r3, r4
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	2007      	movs	r0, #7
 800b6e6:	f7ff fd4d 	bl	800b184 <nfcipTx>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	81fb      	strh	r3, [r7, #14]
            
            /* Clear flags */
            gNfcip.isTxPending = false;
 800b6ee:	4b24      	ldr	r3, [pc, #144]	; (800b780 <nfcipRun+0x260>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
            gNfcip.isWait4RTOX = false;
 800b6f6:	4b22      	ldr	r3, [pc, #136]	; (800b780 <nfcipRun+0x260>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
            
            /* Digital 1.0 14.12.3.4 Increment the current PNI after Tx */
            gNfcip.pni = nfcip_PNIInc( gNfcip.pni );
 800b6fe:	4b20      	ldr	r3, [pc, #128]	; (800b780 <nfcipRun+0x260>)
 800b700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b704:	3301      	adds	r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	4b1c      	ldr	r3, [pc, #112]	; (800b780 <nfcipRun+0x260>)
 800b710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            switch( ret )
 800b714:	89fb      	ldrh	r3, [r7, #14]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d005      	beq.n	800b726 <nfcipRun+0x206>
            {
                case ERR_PARAM:
                default:
                  gNfcip.state = NFCIP_ST_TARG_DEP_IDLE;                      /* Upon Tx error, goto IDLE state */
 800b71a:	4b19      	ldr	r3, [pc, #100]	; (800b780 <nfcipRun+0x260>)
 800b71c:	220c      	movs	r2, #12
 800b71e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  return ret;
 800b722:	89fb      	ldrh	r3, [r7, #14]
 800b724:	e027      	b.n	800b776 <nfcipRun+0x256>
                  
              case ERR_NONE:
                  gNfcip.state = NFCIP_ST_TARG_DEP_RX;                        /* All OK, goto Rx state          */
 800b726:	4b16      	ldr	r3, [pc, #88]	; (800b780 <nfcipRun+0x260>)
 800b728:	220d      	movs	r2, #13
 800b72a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                  break;
 800b72e:	bf00      	nop
            /* fall through */
            
        /*******************************************************************************/
        case NFCIP_ST_TARG_DEP_RX:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( gNfcip.isReqPending )    /* if already has Data should be from a DEP from nfcipTargetHandleActivation()  */
 800b730:	4b13      	ldr	r3, [pc, #76]	; (800b780 <nfcipRun+0x260>)
 800b732:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b736:	2b00      	cmp	r3, #0
 800b738:	d006      	beq.n	800b748 <nfcipRun+0x228>
            {
                nfcipLogD( " NFCIP(T) Skipping Rx Using DEP from Activation \r\n" );
                
                gNfcip.isReqPending = false;
 800b73a:	4b11      	ldr	r3, [pc, #68]	; (800b780 <nfcipRun+0x260>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
                ret = ERR_NONE;
 800b742:	2300      	movs	r3, #0
 800b744:	81fb      	strh	r3, [r7, #14]
 800b746:	e004      	b.n	800b752 <nfcipRun+0x232>
            }
            else
            {
                ret = nfcipDataRx( false );
 800b748:	2000      	movs	r0, #0
 800b74a:	f000 fb61 	bl	800be10 <nfcipDataRx>
 800b74e:	4603      	mov	r3, r0
 800b750:	81fb      	strh	r3, [r7, #14]
            }
            
            if( ret != ERR_BUSY )
 800b752:	89fb      	ldrh	r3, [r7, #14]
 800b754:	2b02      	cmp	r3, #2
 800b756:	d00c      	beq.n	800b772 <nfcipRun+0x252>
            {
                ret = nfcipTargetHandleRX( ret, outActRxLen, outIsChaining );
 800b758:	89fb      	ldrh	r3, [r7, #14]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	6879      	ldr	r1, [r7, #4]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff f8c6 	bl	800a8f0 <nfcipTargetHandleRX>
 800b764:	4603      	mov	r3, r0
 800b766:	81fb      	strh	r3, [r7, #14]
            }
            
            break;
 800b768:	e003      	b.n	800b772 <nfcipRun+0x252>
            
        /*******************************************************************************/
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800b76a:	bf00      	nop
 800b76c:	e002      	b.n	800b774 <nfcipRun+0x254>
            break;
 800b76e:	bf00      	nop
 800b770:	e000      	b.n	800b774 <nfcipRun+0x254>
            break;
 800b772:	bf00      	nop
    }
    return ret;
 800b774:	89fb      	ldrh	r3, [r7, #14]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bdb0      	pop	{r4, r5, r7, pc}
 800b77e:	bf00      	nop
 800b780:	200007d8 	.word	0x200007d8

0800b784 <rfalNfcDepInitialize>:
}


/*******************************************************************************/
void rfalNfcDepInitialize( void )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
    nfcipLogD( " NFCIP Ini() \r\n" );
	
    gNfcip.state          = NFCIP_ST_IDLE;
 800b788:	4b28      	ldr	r3, [pc, #160]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    gNfcip.isDeactivating = NULL;
 800b790:	4b26      	ldr	r3, [pc, #152]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    
    gNfcip.isTxPending    = false;
 800b798:	4b24      	ldr	r3, [pc, #144]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    gNfcip.isWait4RTOX    = false;
 800b7a0:	4b22      	ldr	r3, [pc, #136]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    gNfcip.isReqPending   = false;
 800b7a8:	4b20      	ldr	r3, [pc, #128]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    
            
    gNfcip.cfg.oper  = (RFAL_NFCDEP_OPER_FULL_MI_DIS | RFAL_NFCDEP_OPER_EMPTY_DEP_EN | RFAL_NFCDEP_OPER_ATN_EN | RFAL_NFCDEP_OPER_RTOX_REQ_EN);
 800b7b0:	4b1e      	ldr	r3, [pc, #120]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	709a      	strb	r2, [r3, #2]
    
    gNfcip.cfg.did   = RFAL_NFCDEP_DID_NO;
 800b7b6:	4b1d      	ldr	r3, [pc, #116]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	70da      	strb	r2, [r3, #3]
    gNfcip.cfg.nad   = RFAL_NFCDEP_NAD_NO;
 800b7bc:	4b1b      	ldr	r3, [pc, #108]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	711a      	strb	r2, [r3, #4]
    
    gNfcip.cfg.br    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800b7c2:	4b1a      	ldr	r3, [pc, #104]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	719a      	strb	r2, [r3, #6]
    gNfcip.cfg.bs    = RFAL_NFCDEP_Bx_NO_HIGH_BR;
 800b7c8:	4b18      	ldr	r3, [pc, #96]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	715a      	strb	r2, [r3, #5]
    
    gNfcip.cfg.lr    = RFAL_NFCDEP_LR_254;
 800b7ce:	4b17      	ldr	r3, [pc, #92]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7d0:	2203      	movs	r2, #3
 800b7d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    gNfcip.fsc       = rfalNfcDepLR2FS( gNfcip.cfg.lr );
 800b7d6:	4b15      	ldr	r3, [pc, #84]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7dc:	3301      	adds	r3, #1
 800b7de:	019b      	lsls	r3, r3, #6
 800b7e0:	2bfd      	cmp	r3, #253	; 0xfd
 800b7e2:	d807      	bhi.n	800b7f4 <rfalNfcDepInitialize+0x70>
 800b7e4:	4b11      	ldr	r3, [pc, #68]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	019b      	lsls	r3, r3, #6
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	e000      	b.n	800b7f6 <rfalNfcDepInitialize+0x72>
 800b7f4:	23fe      	movs	r3, #254	; 0xfe
 800b7f6:	4a0d      	ldr	r2, [pc, #52]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7f8:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
    
    gNfcip.cfg.gbLen = 0;    
 800b7fc:	4b0b      	ldr	r3, [pc, #44]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    
    gNfcip.cfg.fwt   = RFAL_NFCDEP_MAX_FWT;
 800b804:	4b09      	ldr	r3, [pc, #36]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b806:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b80a:	649a      	str	r2, [r3, #72]	; 0x48
    gNfcip.cfg.dFwt  = RFAL_NFCDEP_MAX_FWT;
 800b80c:	4b07      	ldr	r3, [pc, #28]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b80e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b812:	64da      	str	r2, [r3, #76]	; 0x4c
    
    gNfcip.pni       = 0;    
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    gNfcip.RTOXTimer = 0;
 800b81c:	4b03      	ldr	r3, [pc, #12]	; (800b82c <rfalNfcDepInitialize+0xa8>)
 800b81e:	2200      	movs	r2, #0
 800b820:	67da      	str	r2, [r3, #124]	; 0x7c

    nfcipClearCounters();
 800b822:	f7fe fd77 	bl	800a314 <nfcipClearCounters>
}
 800b826:	bf00      	nop
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	200007d8 	.word	0x200007d8

0800b830 <rfalNfcDepATR>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepATR( const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes *atrRes, uint8_t* atrResLen )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b0c0      	sub	sp, #256	; 0x100
 800b834:	af04      	add	r7, sp, #16
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
    uint8_t           msgIt;
    uint8_t           txBuf[RFAL_NFCDEP_ATRREQ_MAX_LEN];
    uint8_t           rxBuf[NFCIP_ATRRES_BUF_LEN];
    
    
    if( (param == NULL) || (atrRes == NULL) || (atrResLen == NULL) )
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d005      	beq.n	800b84e <rfalNfcDepATR+0x1e>
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <rfalNfcDepATR+0x1e>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <rfalNfcDepATR+0x22>
    {
        return ERR_PARAM;
 800b84e:	2307      	movs	r3, #7
 800b850:	e0be      	b.n	800b9d0 <rfalNfcDepATR+0x1a0>
    
    /*******************************************************************************/
    /* Configure NFC-DEP layer                                                     */
    /*******************************************************************************/
    
    cfg.did  = param->DID;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	7a5b      	ldrb	r3, [r3, #9]
 800b856:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    cfg.nad  = param->NAD;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	7a9b      	ldrb	r3, [r3, #10]
 800b85e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
    cfg.fwt  = RFAL_NFCDEP_MAX_FWT;
 800b862:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    cfg.dFwt = RFAL_NFCDEP_MAX_FWT;
 800b86a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b86e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    cfg.br   = param->BR;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	7b1b      	ldrb	r3, [r3, #12]
 800b876:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
    cfg.bs   = param->BS;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	7adb      	ldrb	r3, [r3, #11]
 800b87e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
    cfg.lr   = param->LR;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	7b5b      	ldrb	r3, [r3, #13]
 800b886:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    cfg.to   = RFAL_NFCDEP_WT_TRG_MAX;            /* Not used in Initiator mode */
 800b88a:	230e      	movs	r3, #14
 800b88c:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    
    
    cfg.gbLen = param->GBLen;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	7d1b      	ldrb	r3, [r3, #20]
 800b894:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    if( cfg.gbLen > 0U )                          /* MISRA 21.18 */
 800b898:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00a      	beq.n	800b8b6 <rfalNfcDepATR+0x86>
    {
        ST_MEMCPY( cfg.gb, param->GB, cfg.gbLen );
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6919      	ldr	r1, [r3, #16]
 800b8a4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b8ae:	3312      	adds	r3, #18
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f004 fcec 	bl	801028e <memcpy>
    }
    
    cfg.nfcidLen = param->nfcidLen;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	7a1b      	ldrb	r3, [r3, #8]
 800b8ba:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    if( cfg.nfcidLen > 0U )                       /* MISRA 21.18 */
 800b8be:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <rfalNfcDepATR+0xac>
    {
        ST_MEMCPY( cfg.nfcid, param->nfcid, cfg.nfcidLen );
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6859      	ldr	r1, [r3, #4]
 800b8ca:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b8d4:	3307      	adds	r3, #7
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f004 fcd9 	bl	801028e <memcpy>
    }
    
    cfg.role     = RFAL_NFCDEP_ROLE_INITIATOR;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
    cfg.oper     = param->operParam;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
    cfg.commMode = param->commMode;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

    rfalNfcDepInitialize();
 800b8f2:	f7ff ff47 	bl	800b784 <rfalNfcDepInitialize>
    nfcipConfig( &cfg );
 800b8f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff fdce 	bl	800b49c <nfcipConfig>
    
    /*******************************************************************************/
    /* Send ATR_REQ                                                                */
    /*******************************************************************************/
    
    EXIT_ON_ERR( ret, nfcipTxRx(NFCIP_CMD_ATR_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, NFCIP_ATRRES_BUF_LEN, &rxLen ) );
 800b900:	4b35      	ldr	r3, [pc, #212]	; (800b9d8 <rfalNfcDepATR+0x1a8>)
 800b902:	785b      	ldrb	r3, [r3, #1]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d101      	bne.n	800b90c <rfalNfcDepATR+0xdc>
 800b908:	4a34      	ldr	r2, [pc, #208]	; (800b9dc <rfalNfcDepATR+0x1ac>)
 800b90a:	e000      	b.n	800b90e <rfalNfcDepATR+0xde>
 800b90c:	4a34      	ldr	r2, [pc, #208]	; (800b9e0 <rfalNfcDepATR+0x1b0>)
 800b90e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b912:	f107 039a 	add.w	r3, r7, #154	; 0x9a
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	2341      	movs	r3, #65	; 0x41
 800b91a:	9302      	str	r3, [sp, #8]
 800b91c:	f107 0314 	add.w	r3, r7, #20
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	2300      	movs	r3, #0
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	2300      	movs	r3, #0
 800b928:	2000      	movs	r0, #0
 800b92a:	f7fe fc4b 	bl	800a1c4 <nfcipTxRx>
 800b92e:	4603      	mov	r3, r0
 800b930:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 800b934:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <rfalNfcDepATR+0x112>
 800b93c:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800b940:	e046      	b.n	800b9d0 <rfalNfcDepATR+0x1a0>
    
    
    /*******************************************************************************/
    /* ATR sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
    rxLen = ((uint16_t)rxBuf[msgIt++] - RFAL_NFCDEP_LEN_LEN);                           /* use LEN byte             */
 800b948:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800b94c:	1c5a      	adds	r2, r3, #1
 800b94e:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800b952:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b956:	4413      	add	r3, r2
 800b958:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29b      	uxth	r3, r3
 800b962:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    
    if( (rxLen < RFAL_NFCDEP_ATRRES_MIN_LEN) || (rxLen > RFAL_NFCDEP_ATRRES_MAX_LEN) )  /* Checking length: ATR_RES */
 800b966:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b96a:	2b10      	cmp	r3, #16
 800b96c:	d903      	bls.n	800b976 <rfalNfcDepATR+0x146>
 800b96e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d901      	bls.n	800b97a <rfalNfcDepATR+0x14a>
    {
        return ERR_PROTO;
 800b976:	230b      	movs	r3, #11
 800b978:	e02a      	b.n	800b9d0 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                                                   /* Checking if is a response*/
 800b97a:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800b97e:	1c5a      	adds	r2, r3, #1
 800b980:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800b984:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b988:	4413      	add	r3, r2
 800b98a:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800b98e:	2bd5      	cmp	r3, #213	; 0xd5
 800b990:	d001      	beq.n	800b996 <rfalNfcDepATR+0x166>
    {
        return ERR_PROTO;
 800b992:	230b      	movs	r3, #11
 800b994:	e01c      	b.n	800b9d0 <rfalNfcDepATR+0x1a0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_ATR_RES )                                  /* Checking if is a ATR RES */
 800b996:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	f887 20ed 	strb.w	r2, [r7, #237]	; 0xed
 800b9a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d001      	beq.n	800b9b2 <rfalNfcDepATR+0x182>
    {
        return ERR_PROTO;
 800b9ae:	230b      	movs	r3, #11
 800b9b0:	e00e      	b.n	800b9d0 <rfalNfcDepATR+0x1a0>
    }
    
    ST_MEMCPY( (uint8_t*)atrRes, (rxBuf + RFAL_NFCDEP_LEN_LEN), rxLen );
 800b9b2:	f107 0314 	add.w	r3, r7, #20
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800b9bc:	4619      	mov	r1, r3
 800b9be:	68b8      	ldr	r0, [r7, #8]
 800b9c0:	f004 fc65 	bl	801028e <memcpy>
    *atrResLen = (uint8_t)rxLen;
 800b9c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	701a      	strb	r2, [r3, #0]
    
    return ERR_NONE;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	37f0      	adds	r7, #240	; 0xf0
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	200007d8 	.word	0x200007d8
 800b9dc:	00200201 	.word	0x00200201
 800b9e0:	01000201 	.word	0x01000201

0800b9e4 <rfalNfcDepPSL>:


/*******************************************************************************/
ReturnCode rfalNfcDepPSL( uint8_t BRS, uint8_t FSL )
{
 800b9e4:	b590      	push	{r4, r7, lr}
 800b9e6:	b08b      	sub	sp, #44	; 0x2c
 800b9e8:	af04      	add	r7, sp, #16
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	460a      	mov	r2, r1
 800b9ee:	71fb      	strb	r3, [r7, #7]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	71bb      	strb	r3, [r7, #6]
    uint16_t   rxLen;
    uint8_t    msgIt;
    uint8_t    txBuf[NFCIP_PSLREQ_LEN + NFCIP_PSLPAY_LEN];
    uint8_t    rxBuf[NFCIP_PSLRES_LEN];
    
    msgIt = NFCIP_PSLREQ_LEN;
 800b9f4:	2304      	movs	r3, #4
 800b9f6:	75fb      	strb	r3, [r7, #23]
    
    txBuf[msgIt++] = BRS;
 800b9f8:	7dfb      	ldrb	r3, [r7, #23]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	75fa      	strb	r2, [r7, #23]
 800b9fe:	f107 0218 	add.w	r2, r7, #24
 800ba02:	4413      	add	r3, r2
 800ba04:	79fa      	ldrb	r2, [r7, #7]
 800ba06:	f803 2c0c 	strb.w	r2, [r3, #-12]
    txBuf[msgIt++] = FSL;
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	75fa      	strb	r2, [r7, #23]
 800ba10:	f107 0218 	add.w	r2, r7, #24
 800ba14:	4413      	add	r3, r2
 800ba16:	79ba      	ldrb	r2, [r7, #6]
 800ba18:	f803 2c0c 	strb.w	r2, [r3, #-12]
    
    /*******************************************************************************/
    /* Send PSL REQ and wait for response                                          */
    /*******************************************************************************/
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_PSL_REQ, txBuf, nfcipRWTActivation(), &txBuf[NFCIP_PSLREQ_LEN], (msgIt - NFCIP_PSLREQ_LEN), rxBuf, NFCIP_PSLRES_LEN, &rxLen ) );
 800ba1c:	4b2f      	ldr	r3, [pc, #188]	; (800badc <rfalNfcDepPSL+0xf8>)
 800ba1e:	785b      	ldrb	r3, [r3, #1]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d101      	bne.n	800ba28 <rfalNfcDepPSL+0x44>
 800ba24:	482e      	ldr	r0, [pc, #184]	; (800bae0 <rfalNfcDepPSL+0xfc>)
 800ba26:	e000      	b.n	800ba2a <rfalNfcDepPSL+0x46>
 800ba28:	482e      	ldr	r0, [pc, #184]	; (800bae4 <rfalNfcDepPSL+0x100>)
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	3b04      	subs	r3, #4
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	f107 020c 	add.w	r2, r7, #12
 800ba34:	1d14      	adds	r4, r2, #4
 800ba36:	f107 010c 	add.w	r1, r7, #12
 800ba3a:	f107 0212 	add.w	r2, r7, #18
 800ba3e:	9203      	str	r2, [sp, #12]
 800ba40:	2204      	movs	r2, #4
 800ba42:	9202      	str	r2, [sp, #8]
 800ba44:	f107 0208 	add.w	r2, r7, #8
 800ba48:	9201      	str	r2, [sp, #4]
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	4602      	mov	r2, r0
 800ba50:	2004      	movs	r0, #4
 800ba52:	f7fe fbb7 	bl	800a1c4 <nfcipTxRx>
 800ba56:	4603      	mov	r3, r0
 800ba58:	82bb      	strh	r3, [r7, #20]
 800ba5a:	8abb      	ldrh	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <rfalNfcDepPSL+0x80>
 800ba60:	8abb      	ldrh	r3, [r7, #20]
 800ba62:	e037      	b.n	800bad4 <rfalNfcDepPSL+0xf0>
    
    
    /*******************************************************************************/
    /* PSL sent, check response                                                    */
    /*******************************************************************************/
    msgIt = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	75fb      	strb	r3, [r7, #23]
    rxLen = (uint16_t)(rxBuf[msgIt++]);                /* use LEN byte                   */
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	75fa      	strb	r2, [r7, #23]
 800ba6e:	f107 0218 	add.w	r2, r7, #24
 800ba72:	4413      	add	r3, r2
 800ba74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	827b      	strh	r3, [r7, #18]
        
    if( rxLen < NFCIP_PSLRES_LEN )                     /* Checking length: LEN + RLS_RES */
 800ba7c:	8a7b      	ldrh	r3, [r7, #18]
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d801      	bhi.n	800ba86 <rfalNfcDepPSL+0xa2>
    {
        return ERR_PROTO;
 800ba82:	230b      	movs	r3, #11
 800ba84:	e026      	b.n	800bad4 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != NFCIP_RES )                  /* Checking if is a response      */
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	75fa      	strb	r2, [r7, #23]
 800ba8c:	f107 0218 	add.w	r2, r7, #24
 800ba90:	4413      	add	r3, r2
 800ba92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800ba96:	2bd5      	cmp	r3, #213	; 0xd5
 800ba98:	d001      	beq.n	800ba9e <rfalNfcDepPSL+0xba>
    {
        return ERR_PROTO;
 800ba9a:	230b      	movs	r3, #11
 800ba9c:	e01a      	b.n	800bad4 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != (uint8_t)NFCIP_CMD_PSL_RES ) /* Checking if is a PSL RES       */
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	75fa      	strb	r2, [r7, #23]
 800baa4:	f107 0218 	add.w	r2, r7, #24
 800baa8:	4413      	add	r3, r2
 800baaa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800baae:	2b05      	cmp	r3, #5
 800bab0:	d001      	beq.n	800bab6 <rfalNfcDepPSL+0xd2>
    {
        return ERR_PROTO;
 800bab2:	230b      	movs	r3, #11
 800bab4:	e00e      	b.n	800bad4 <rfalNfcDepPSL+0xf0>
    }
    
    if( rxBuf[msgIt++] != gNfcip.cfg.did )             /* Checking DID                   */
 800bab6:	7dfb      	ldrb	r3, [r7, #23]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	75fa      	strb	r2, [r7, #23]
 800babc:	f107 0218 	add.w	r2, r7, #24
 800bac0:	4413      	add	r3, r2
 800bac2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bac6:	4b05      	ldr	r3, [pc, #20]	; (800badc <rfalNfcDepPSL+0xf8>)
 800bac8:	78db      	ldrb	r3, [r3, #3]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d001      	beq.n	800bad2 <rfalNfcDepPSL+0xee>
    {
        return ERR_PROTO;
 800bace:	230b      	movs	r3, #11
 800bad0:	e000      	b.n	800bad4 <rfalNfcDepPSL+0xf0>
    }
    
    return ERR_NONE;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	371c      	adds	r7, #28
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd90      	pop	{r4, r7, pc}
 800badc:	200007d8 	.word	0x200007d8
 800bae0:	00200201 	.word	0x00200201
 800bae4:	01000201 	.word	0x01000201

0800bae8 <rfalNfcDepRLS>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepRLS( void )
{   
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08a      	sub	sp, #40	; 0x28
 800baec:	af04      	add	r7, sp, #16
    ReturnCode ret;
    uint8_t    txBuf[RFAL_NFCDEP_HEADER_PAD + NFCIP_RLSREQ_LEN];
    uint8_t    rxBuf[NFCIP_RLSRES_LEN];    
    uint8_t    rxMsgIt;
    uint16_t   rxLen = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	80fb      	strh	r3, [r7, #6]
    
    if ( gNfcip.cfg.role == RFAL_NFCDEP_ROLE_TARGET )  /* Target has no release procedure */
 800baf2:	4b30      	ldr	r3, [pc, #192]	; (800bbb4 <rfalNfcDepRLS+0xcc>)
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d101      	bne.n	800bafe <rfalNfcDepRLS+0x16>
    {
        return ERR_NONE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	e055      	b.n	800bbaa <rfalNfcDepRLS+0xc2>
    }
        
    /* Repeating a RLS REQ is optional, not doing it */
    EXIT_ON_ERR( ret, nfcipTxRx( NFCIP_CMD_RLS_REQ, txBuf, nfcipRWTActivation(), NULL, 0, rxBuf, RFAL_NFCDEP_ATRRES_MAX_LEN, &rxLen  ) );
 800bafe:	4b2d      	ldr	r3, [pc, #180]	; (800bbb4 <rfalNfcDepRLS+0xcc>)
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d101      	bne.n	800bb0a <rfalNfcDepRLS+0x22>
 800bb06:	4a2c      	ldr	r2, [pc, #176]	; (800bbb8 <rfalNfcDepRLS+0xd0>)
 800bb08:	e000      	b.n	800bb0c <rfalNfcDepRLS+0x24>
 800bb0a:	4a2c      	ldr	r2, [pc, #176]	; (800bbbc <rfalNfcDepRLS+0xd4>)
 800bb0c:	f107 010c 	add.w	r1, r7, #12
 800bb10:	1dbb      	adds	r3, r7, #6
 800bb12:	9303      	str	r3, [sp, #12]
 800bb14:	2340      	movs	r3, #64	; 0x40
 800bb16:	9302      	str	r3, [sp, #8]
 800bb18:	f107 0308 	add.w	r3, r7, #8
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	2300      	movs	r3, #0
 800bb24:	200a      	movs	r0, #10
 800bb26:	f7fe fb4d 	bl	800a1c4 <nfcipTxRx>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	82fb      	strh	r3, [r7, #22]
 800bb2e:	8afb      	ldrh	r3, [r7, #22]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <rfalNfcDepRLS+0x50>
 800bb34:	8afb      	ldrh	r3, [r7, #22]
 800bb36:	e038      	b.n	800bbaa <rfalNfcDepRLS+0xc2>
    
    /*******************************************************************************/
    rxMsgIt = 0;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	757b      	strb	r3, [r7, #21]
       
    if( rxBuf[rxMsgIt++] < NFCIP_RLSRES_MIN )             /* Checking length: LEN + RLS_RES */
 800bb3c:	7d7b      	ldrb	r3, [r7, #21]
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	757a      	strb	r2, [r7, #21]
 800bb42:	f107 0218 	add.w	r2, r7, #24
 800bb46:	4413      	add	r3, r2
 800bb48:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d801      	bhi.n	800bb54 <rfalNfcDepRLS+0x6c>
    {
        return ERR_PROTO;
 800bb50:	230b      	movs	r3, #11
 800bb52:	e02a      	b.n	800bbaa <rfalNfcDepRLS+0xc2>
    }
        
    if( rxBuf[rxMsgIt++] != NFCIP_RES )                   /* Checking if is a response      */
 800bb54:	7d7b      	ldrb	r3, [r7, #21]
 800bb56:	1c5a      	adds	r2, r3, #1
 800bb58:	757a      	strb	r2, [r7, #21]
 800bb5a:	f107 0218 	add.w	r2, r7, #24
 800bb5e:	4413      	add	r3, r2
 800bb60:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bb64:	2bd5      	cmp	r3, #213	; 0xd5
 800bb66:	d001      	beq.n	800bb6c <rfalNfcDepRLS+0x84>
    {
        return ERR_PROTO;
 800bb68:	230b      	movs	r3, #11
 800bb6a:	e01e      	b.n	800bbaa <rfalNfcDepRLS+0xc2>
    }
    
    if( rxBuf[rxMsgIt++] != (uint8_t)NFCIP_CMD_RLS_RES )  /* Checking if is RLS RES         */
 800bb6c:	7d7b      	ldrb	r3, [r7, #21]
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	757a      	strb	r2, [r7, #21]
 800bb72:	f107 0218 	add.w	r2, r7, #24
 800bb76:	4413      	add	r3, r2
 800bb78:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bb7c:	2b0b      	cmp	r3, #11
 800bb7e:	d001      	beq.n	800bb84 <rfalNfcDepRLS+0x9c>
    {
        return ERR_PROTO;
 800bb80:	230b      	movs	r3, #11
 800bb82:	e012      	b.n	800bbaa <rfalNfcDepRLS+0xc2>
    }
     
    if( gNfcip.cfg.did != RFAL_NFCDEP_DID_NO ) 
 800bb84:	4b0b      	ldr	r3, [pc, #44]	; (800bbb4 <rfalNfcDepRLS+0xcc>)
 800bb86:	78db      	ldrb	r3, [r3, #3]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00d      	beq.n	800bba8 <rfalNfcDepRLS+0xc0>
    {
        if ( rxBuf[rxMsgIt++] != gNfcip.cfg.did ) 
 800bb8c:	7d7b      	ldrb	r3, [r7, #21]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	757a      	strb	r2, [r7, #21]
 800bb92:	f107 0218 	add.w	r2, r7, #24
 800bb96:	4413      	add	r3, r2
 800bb98:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800bb9c:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <rfalNfcDepRLS+0xcc>)
 800bb9e:	78db      	ldrb	r3, [r3, #3]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d001      	beq.n	800bba8 <rfalNfcDepRLS+0xc0>
        {
            return ERR_PROTO;
 800bba4:	230b      	movs	r3, #11
 800bba6:	e000      	b.n	800bbaa <rfalNfcDepRLS+0xc2>
        }
    }
    
    return ERR_NONE;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3718      	adds	r7, #24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	200007d8 	.word	0x200007d8
 800bbb8:	00200201 	.word	0x00200201
 800bbbc:	01000201 	.word	0x01000201

0800bbc0 <rfalNfcDepInitiatorHandleActivation>:


/*******************************************************************************/
ReturnCode rfalNfcDepInitiatorHandleActivation( rfalNfcDepAtrParam* param, rfalBitRate desiredBR, rfalNfcDepDevice* nfcDepDev )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	72fb      	strb	r3, [r7, #11]
    uint8_t    maxRetyrs;
    uint8_t    PSL_BRS;
    uint8_t    PSL_FSL;
    bool       sendPSL;
    
    if( (param == NULL) || (nfcDepDev == NULL) )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <rfalNfcDepInitiatorHandleActivation+0x1a>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <rfalNfcDepInitiatorHandleActivation+0x1e>
    {
        return ERR_PARAM;
 800bbda:	2307      	movs	r3, #7
 800bbdc:	e0da      	b.n	800bd94 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    param->NAD = RFAL_NFCDEP_NAD_NO;          /* Digital 1.1  16.6.2.9  Initiator SHALL NOT use NAD */
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	729a      	strb	r2, [r3, #10]
    maxRetyrs  = NFCIP_ATR_RETRY_MAX;
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	75fb      	strb	r3, [r7, #23]
    /*******************************************************************************/
    /* Send ATR REQ and wait for response                                          */
    /*******************************************************************************/
    do{  /* Upon transmission error ATR REQ should be retried */
        
         ret = rfalNfcDepATR( param, &nfcDepDev->activation.Target.ATR_RES, &nfcDepDev->activation.Target.ATR_RESLen );
 800bbe8:	6879      	ldr	r1, [r7, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3341      	adds	r3, #65	; 0x41
 800bbee:	461a      	mov	r2, r3
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f7ff fe1d 	bl	800b830 <rfalNfcDepATR>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	827b      	strh	r3, [r7, #18]
         
         if( nfcipIsTransmissionError(ret) )
 800bbfa:	8a7b      	ldrh	r3, [r7, #18]
 800bbfc:	2b15      	cmp	r3, #21
 800bbfe:	d005      	beq.n	800bc0c <rfalNfcDepInitiatorHandleActivation+0x4c>
 800bc00:	8a7b      	ldrh	r3, [r7, #18]
 800bc02:	2b09      	cmp	r3, #9
 800bc04:	d002      	beq.n	800bc0c <rfalNfcDepInitiatorHandleActivation+0x4c>
 800bc06:	8a7b      	ldrh	r3, [r7, #18]
 800bc08:	2b1b      	cmp	r3, #27
 800bc0a:	d105      	bne.n	800bc18 <rfalNfcDepInitiatorHandleActivation+0x58>
         {
             continue;
         }
         break;
    }
    while( (maxRetyrs--) != 0U );
 800bc0c:	7dfb      	ldrb	r3, [r7, #23]
 800bc0e:	1e5a      	subs	r2, r3, #1
 800bc10:	75fa      	strb	r2, [r7, #23]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e8      	bne.n	800bbe8 <rfalNfcDepInitiatorHandleActivation+0x28>
 800bc16:	e000      	b.n	800bc1a <rfalNfcDepInitiatorHandleActivation+0x5a>
         break;
 800bc18:	bf00      	nop
    
    if( ret != ERR_NONE )
 800bc1a:	8a7b      	ldrh	r3, [r7, #18]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <rfalNfcDepInitiatorHandleActivation+0x64>
    {
        return ret;
 800bc20:	8a7b      	ldrh	r3, [r7, #18]
 800bc22:	e0b7      	b.n	800bd94 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    /*******************************************************************************/
    /* Compute NFC-DEP device with ATR_RES                                         */
    /*******************************************************************************/
    nfcDepDev->info.GBLen = (nfcDepDev->activation.Target.ATR_RESLen - RFAL_NFCDEP_ATRRES_MIN_LEN);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc2a:	3b11      	subs	r3, #17
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    nfcDepDev->info.DID   = nfcDepDev->activation.Target.ATR_RES.DID;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	7b1a      	ldrb	r2, [r3, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    nfcDepDev->info.NAD   = RFAL_NFCDEP_NAD_NO;                                      /* Digital 1.1  16.6.3.11 Initiator SHALL ignore b1 of PPt */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    nfcDepDev->info.LR    = rfalNfcDepPP2LR( nfcDepDev->activation.Target.ATR_RES.PPt );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7c1b      	ldrb	r3, [r3, #16]
 800bc4a:	091b      	lsrs	r3, r3, #4
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    nfcDepDev->info.FS    = rfalNfcDepLR2FS( nfcDepDev->info.LR );
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc60:	3301      	adds	r3, #1
 800bc62:	019b      	lsls	r3, r3, #6
 800bc64:	2bfd      	cmp	r3, #253	; 0xfd
 800bc66:	d807      	bhi.n	800bc78 <rfalNfcDepInitiatorHandleActivation+0xb8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc6e:	3301      	adds	r3, #1
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	019b      	lsls	r3, r3, #6
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	e000      	b.n	800bc7a <rfalNfcDepInitiatorHandleActivation+0xba>
 800bc78:	22fe      	movs	r2, #254	; 0xfe
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    nfcDepDev->info.WT    = (nfcDepDev->activation.Target.ATR_RES.TO & RFAL_NFCDEP_WT_MASK);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7bdb      	ldrb	r3, [r3, #15]
 800bc84:	f003 030f 	and.w	r3, r3, #15
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    nfcDepDev->info.FWT   = rfalNfcDepCalculateRWT( nfcDepDev->info.WT );
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 f882 	bl	800bda0 <rfalNfcDepCalculateRWT>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	649a      	str	r2, [r3, #72]	; 0x48
    nfcDepDev->info.dFWT  = RFAL_NFCDEP_WT_DELTA;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	220c      	movs	r2, #12
 800bca6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    rfalGetBitRate( &nfcDepDev->info.DSI, &nfcDepDev->info.DRI );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3355      	adds	r3, #85	; 0x55
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	f002 f837 	bl	800dd28 <rfalGetBitRate>
    
    
    /*******************************************************************************/
    /* Check if a PSL needs to be sent                                                */
    /*******************************************************************************/
    sendPSL = false;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	757b      	strb	r3, [r7, #21]
    PSL_BRS = rfalNfcDepDx2BRS( nfcDepDev->info.DSI );  /* Set current bit rate divisor on both directions  */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	75bb      	strb	r3, [r7, #22]
    PSL_FSL = nfcDepDev->info.LR;                       /* Set current Frame Size                           */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bce4:	747b      	strb	r3, [r7, #17]
    
    
    /*******************************************************************************/
    /* Check Baud rates                                                            */
    /*******************************************************************************/
    if( nfcDepDev->info.DSI != desiredBR )    /* if desired BR is different    */
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bcec:	7afa      	ldrb	r2, [r7, #11]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d018      	beq.n	800bd24 <rfalNfcDepInitiatorHandleActivation+0x164>
    {
       /* || (target->brt != RFAL_NFCDEP_Bx_NO_HIGH_BR) || (target->bst != RFAL_NFCDEP_Bx_NO_HIGH_BR)  */  /* if target supports higher BR, must send PSL? */
        if( nfcipDxIsSupported( (uint8_t)desiredBR, nfcDepDev->activation.Target.ATR_RES.BRt, nfcDepDev->activation.Target.ATR_RES.BSt ) )  /* if desired BR is supported     */    /* MISRA 13.5 */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	7b99      	ldrb	r1, [r3, #14]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	7b5a      	ldrb	r2, [r3, #13]
 800bcfa:	7afb      	ldrb	r3, [r7, #11]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fa3d 	bl	800a17c <nfcipDxIsSupported>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00d      	beq.n	800bd24 <rfalNfcDepInitiatorHandleActivation+0x164>
        {
            sendPSL = true;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	757b      	strb	r3, [r7, #21]
            PSL_BRS = rfalNfcDepDx2BRS( desiredBR );
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	f003 0307 	and.w	r3, r3, #7
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	4313      	orrs	r3, r2
 800bd22:	75bb      	strb	r3, [r7, #22]
        }
    }

    
    /*******************************************************************************/
    if( sendPSL )
 800bd24:	7d7b      	ldrb	r3, [r7, #21]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d033      	beq.n	800bd92 <rfalNfcDepInitiatorHandleActivation+0x1d2>
    {
        /*******************************************************************************/
        /* Send PSL REQ and wait for response                                          */
        /*******************************************************************************/
        EXIT_ON_ERR( ret, rfalNfcDepPSL(PSL_BRS, PSL_FSL) );
 800bd2a:	7c7a      	ldrb	r2, [r7, #17]
 800bd2c:	7dbb      	ldrb	r3, [r7, #22]
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fe57 	bl	800b9e4 <rfalNfcDepPSL>
 800bd36:	4603      	mov	r3, r0
 800bd38:	827b      	strh	r3, [r7, #18]
 800bd3a:	8a7b      	ldrh	r3, [r7, #18]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <rfalNfcDepInitiatorHandleActivation+0x184>
 800bd40:	8a7b      	ldrh	r3, [r7, #18]
 800bd42:	e027      	b.n	800bd94 <rfalNfcDepInitiatorHandleActivation+0x1d4>
        
        /* Check if bit rate has been changed */
        if( nfcDepDev->info.DSI != desiredBR )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bd4a:	7afa      	ldrb	r2, [r7, #11]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d01e      	beq.n	800bd8e <rfalNfcDepInitiatorHandleActivation+0x1ce>
        {
            /* Check if device was in Passive NFC-A and went to higher bit rates, use NFC-F */
            if( (nfcDepDev->info.DSI == RFAL_BR_106) && (gNfcip.cfg.commMode == RFAL_NFCDEP_COMM_PASSIVE) )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d107      	bne.n	800bd6a <rfalNfcDepInitiatorHandleActivation+0x1aa>
 800bd5a:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <rfalNfcDepInitiatorHandleActivation+0x1dc>)
 800bd5c:	785b      	ldrb	r3, [r3, #1]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d103      	bne.n	800bd6a <rfalNfcDepInitiatorHandleActivation+0x1aa>
            {
                
            #if RFAL_FEATURE_NFCF 
                /* If Passive initialize NFC-F module */
                rfalNfcfPollerInitialize( desiredBR );
 800bd62:	7afb      	ldrb	r3, [r7, #11]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f001 f8a3 	bl	800ceb0 <rfalNfcfPollerInitialize>
                return ERR_NOTSUPP;
            #endif /* RFAL_FEATURE_NFCF */
                
            }
            
            nfcDepDev->info.DRI  = desiredBR;  /* DSI Bit Rate coding from Initiator  to Target  */
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7afa      	ldrb	r2, [r7, #11]
 800bd6e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            nfcDepDev->info.DSI  = desiredBR;  /* DRI Bit Rate coding from Target to Initiator   */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	7afa      	ldrb	r2, [r7, #11]
 800bd76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            rfalSetBitRate( nfcDepDev->info.DSI, nfcDepDev->info.DRI );
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	f001 fd6b 	bl	800d864 <rfalSetBitRate>
        }
        
        
        return ERR_NONE;   /* PSL has been sent    */
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e000      	b.n	800bd94 <rfalNfcDepInitiatorHandleActivation+0x1d4>
    }
    
    return ERR_NONE;       /* No PSL has been sent */
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3718      	adds	r7, #24
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	200007d8 	.word	0x200007d8

0800bda0 <rfalNfcDepCalculateRWT>:


/*******************************************************************************/
uint32_t rfalNfcDepCalculateRWT( uint8_t wt )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	4603      	mov	r3, r0
 800bda8:	71fb      	strb	r3, [r7, #7]
    /* Digital 1.0  14.6.3.8  &  Digital 1.1  16.6.3.9     */
    /* Digital 1.1  16.6.3.9 treat all RFU values as WT=14 */
    uint8_t responseWaitTime = MIN( RFAL_NFCDEP_WT_INI_MAX, wt );
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	2b0e      	cmp	r3, #14
 800bdae:	bf28      	it	cs
 800bdb0:	230e      	movcs	r3, #14
 800bdb2:	73fb      	strb	r3, [r7, #15]
        
    return (uint32_t)rfalNfcDepWT2RWT(responseWaitTime);
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	330c      	adds	r3, #12
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	fa02 f303 	lsl.w	r3, r2, r3
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <nfcipDataTx>:



/*******************************************************************************/
static ReturnCode nfcipDataTx( uint8_t* txBuf, uint16_t txBufLen, uint32_t fwt )
{
 800bdd0:	b590      	push	{r4, r7, lr}
 800bdd2:	b089      	sub	sp, #36	; 0x24
 800bdd4:	af04      	add	r7, sp, #16
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	817b      	strh	r3, [r7, #10]
   return rfalTransceiveBlockingTx( txBuf, txBufLen, gNfcip.rxBuf, gNfcip.rxBufLen, gNfcip.rxRcvdLen, (RFAL_TXRX_FLAGS_DEFAULT | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_ON), ((fwt == NFCIP_NO_FWT) ? RFAL_FWT_NONE : fwt) );
 800bdde:	4b0b      	ldr	r3, [pc, #44]	; (800be0c <nfcipDataTx+0x3c>)
 800bde0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800bde2:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <nfcipDataTx+0x3c>)
 800bde4:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
 800bde8:	4b08      	ldr	r3, [pc, #32]	; (800be0c <nfcipDataTx+0x3c>)
 800bdea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdec:	8979      	ldrh	r1, [r7, #10]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	9202      	str	r2, [sp, #8]
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	9201      	str	r2, [sp, #4]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f002 f9f1 	bl	800e1e4 <rfalTransceiveBlockingTx>
 800be02:	4603      	mov	r3, r0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd90      	pop	{r4, r7, pc}
 800be0c:	200007d8 	.word	0x200007d8

0800be10 <nfcipDataRx>:


/*******************************************************************************/
static ReturnCode nfcipDataRx( bool blocking )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    /* Perform Rx either blocking or non-blocking */
    if( blocking )
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d004      	beq.n	800be2a <nfcipDataRx+0x1a>
    {
        ret = rfalTransceiveBlockingRx();
 800be20:	f002 fa2c 	bl	800e27c <rfalTransceiveBlockingRx>
 800be24:	4603      	mov	r3, r0
 800be26:	81fb      	strh	r3, [r7, #14]
 800be28:	e003      	b.n	800be32 <nfcipDataRx+0x22>
    }
    else
    {
        ret = rfalGetTransceiveStatus();
 800be2a:	f002 fa91 	bl	800e350 <rfalGetTransceiveStatus>
 800be2e:	4603      	mov	r3, r0
 800be30:	81fb      	strh	r3, [r7, #14]
    }
    
    if( ret != ERR_BUSY )
 800be32:	89fb      	ldrh	r3, [r7, #14]
 800be34:	2b02      	cmp	r3, #2
 800be36:	d028      	beq.n	800be8a <nfcipDataRx+0x7a>
    {
        if( gNfcip.rxRcvdLen != NULL )
 800be38:	4b16      	ldr	r3, [pc, #88]	; (800be94 <nfcipDataRx+0x84>)
 800be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d024      	beq.n	800be8a <nfcipDataRx+0x7a>
        {
            (*gNfcip.rxRcvdLen) = rfalConvBitsToBytes( *gNfcip.rxRcvdLen );
 800be40:	4b14      	ldr	r3, [pc, #80]	; (800be94 <nfcipDataRx+0x84>)
 800be42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	3307      	adds	r3, #7
 800be48:	08da      	lsrs	r2, r3, #3
 800be4a:	4b12      	ldr	r3, [pc, #72]	; (800be94 <nfcipDataRx+0x84>)
 800be4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be4e:	b292      	uxth	r2, r2
 800be50:	801a      	strh	r2, [r3, #0]
                        
            if( (ret == ERR_NONE) && (gNfcip.rxBuf != NULL) )
 800be52:	89fb      	ldrh	r3, [r7, #14]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d118      	bne.n	800be8a <nfcipDataRx+0x7a>
 800be58:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <nfcipDataRx+0x84>)
 800be5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d014      	beq.n	800be8a <nfcipDataRx+0x7a>
            {
                /* Digital 1.1  16.4.1.3 - Length byte LEN SHALL have a value between 3 and 255 -> otherwise treat as Transmission Error *
                 *                       - Ensure that actual received and frame length do match, otherwise treat as Transmission error  */
                if( (*gNfcip.rxRcvdLen != (uint16_t)*gNfcip.rxBuf) || (*gNfcip.rxRcvdLen < RFAL_NFCDEP_LEN_MIN) || (*gNfcip.rxRcvdLen > RFAL_NFCDEP_LEN_MAX) )
 800be60:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <nfcipDataRx+0x84>)
 800be62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be64:	881a      	ldrh	r2, [r3, #0]
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <nfcipDataRx+0x84>)
 800be68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	429a      	cmp	r2, r3
 800be70:	d109      	bne.n	800be86 <nfcipDataRx+0x76>
 800be72:	4b08      	ldr	r3, [pc, #32]	; (800be94 <nfcipDataRx+0x84>)
 800be74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d904      	bls.n	800be86 <nfcipDataRx+0x76>
 800be7c:	4b05      	ldr	r3, [pc, #20]	; (800be94 <nfcipDataRx+0x84>)
 800be7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	2bff      	cmp	r3, #255	; 0xff
 800be84:	d901      	bls.n	800be8a <nfcipDataRx+0x7a>
                {
                    return ERR_FRAMING;
 800be86:	2309      	movs	r3, #9
 800be88:	e000      	b.n	800be8c <nfcipDataRx+0x7c>
                }
            }
        }
    }
    
    return ret;
 800be8a:	89fb      	ldrh	r3, [r7, #14]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	200007d8 	.word	0x200007d8

0800be98 <rfalNfcDepGetTransceiveStatus>:
}


/*******************************************************************************/
ReturnCode rfalNfcDepGetTransceiveStatus( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
    return nfcipRun( gNfcip.rxRcvdLen, gNfcip.isChaining );
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <rfalNfcDepGetTransceiveStatus+0x1c>)
 800be9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bea0:	4b04      	ldr	r3, [pc, #16]	; (800beb4 <rfalNfcDepGetTransceiveStatus+0x1c>)
 800bea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f7ff fb3a 	bl	800b520 <nfcipRun>
 800beac:	4603      	mov	r3, r0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	200007d8 	.word	0x200007d8

0800beb8 <rfalNfcaCalculateBcc>:
 * LOCAL FUNCTIONS
 ******************************************************************************
 */

static uint8_t rfalNfcaCalculateBcc( const uint8_t* buf, uint8_t bufLen )
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	460b      	mov	r3, r1
 800bec2:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t BCC;
    
    BCC = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73bb      	strb	r3, [r7, #14]
    
    /* BCC is XOR over first 4 bytes of the SDD_RES  Digital 1.1 6.7.2 */
    for(i = 0; i < bufLen; i++)
 800bec8:	2300      	movs	r3, #0
 800beca:	73fb      	strb	r3, [r7, #15]
 800becc:	e009      	b.n	800bee2 <rfalNfcaCalculateBcc+0x2a>
    {
        BCC ^= buf[i];
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	4413      	add	r3, r2
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	4053      	eors	r3, r2
 800beda:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < bufLen; i++)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	3301      	adds	r3, #1
 800bee0:	73fb      	strb	r3, [r7, #15]
 800bee2:	7bfa      	ldrb	r2, [r7, #15]
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d3f1      	bcc.n	800bece <rfalNfcaCalculateBcc+0x16>
    }
    
    return BCC;
 800beea:	7bbb      	ldrb	r3, [r7, #14]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <rfalNfcaPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcaPollerInitialize( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCA, RFAL_BR_106, RFAL_BR_106 ) );
 800befe:	2200      	movs	r2, #0
 800bf00:	2100      	movs	r1, #0
 800bf02:	2001      	movs	r0, #1
 800bf04:	f001 fb9c 	bl	800d640 <rfalSetMode>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	80fb      	strh	r3, [r7, #6]
 800bf0c:	88fb      	ldrh	r3, [r7, #6]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <rfalNfcaPollerInitialize+0x1e>
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	e00e      	b.n	800bf34 <rfalNfcaPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800bf16:	2001      	movs	r0, #1
 800bf18:	f001 ff2c 	bl	800dd74 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCA );
 800bf1c:	4807      	ldr	r0, [pc, #28]	; (800bf3c <rfalNfcaPollerInitialize+0x44>)
 800bf1e:	f001 ff63 	bl	800dde8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );
 800bf22:	f240 4094 	movw	r0, #1172	; 0x494
 800bf26:	f001 ff4b 	bl	800ddc0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_POLLER );
 800bf2a:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800bf2e:	f001 ff31 	bl	800dd94 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	000108d8 	.word	0x000108d8

0800bf40 <rfalNfcaPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerCheckPresence( rfal14443AShortFrameCmd cmd, rfalNfcaSensRes *sensRes )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	4603      	mov	r3, r0
 800bf48:	6039      	str	r1, [r7, #0]
 800bf4a:	71fb      	strb	r3, [r7, #7]
    uint16_t   rcvLen;
    
    /* Digital 1.1 6.10.1.3  For Commands ALL_REQ, SENS_REQ, SDD_REQ, and SEL_REQ, the NFC Forum Device      *
     *              MUST treat receipt of a Listen Frame at a time after FDT(Listen, min) as a Timeour Error */
    
    ret = rfalISO14443ATransceiveShortFrame(  cmd, (uint8_t*)sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800bf4c:	f107 020c 	add.w	r2, r7, #12
 800bf50:	79f8      	ldrb	r0, [r7, #7]
 800bf52:	f240 6354 	movw	r3, #1620	; 0x654
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	2210      	movs	r2, #16
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	f003 f943 	bl	800f1e8 <rfalISO14443ATransceiveShortFrame>
 800bf62:	4603      	mov	r3, r0
 800bf64:	81fb      	strh	r3, [r7, #14]
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || (ret == ERR_NOMEM) || (ret == ERR_FRAMING) || (ret == ERR_PAR) )
 800bf66:	89fb      	ldrh	r3, [r7, #14]
 800bf68:	2b1d      	cmp	r3, #29
 800bf6a:	d00b      	beq.n	800bf84 <rfalNfcaPollerCheckPresence+0x44>
 800bf6c:	89fb      	ldrh	r3, [r7, #14]
 800bf6e:	2b15      	cmp	r3, #21
 800bf70:	d008      	beq.n	800bf84 <rfalNfcaPollerCheckPresence+0x44>
 800bf72:	89fb      	ldrh	r3, [r7, #14]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d005      	beq.n	800bf84 <rfalNfcaPollerCheckPresence+0x44>
 800bf78:	89fb      	ldrh	r3, [r7, #14]
 800bf7a:	2b09      	cmp	r3, #9
 800bf7c:	d002      	beq.n	800bf84 <rfalNfcaPollerCheckPresence+0x44>
 800bf7e:	89fb      	ldrh	r3, [r7, #14]
 800bf80:	2b1b      	cmp	r3, #27
 800bf82:	d101      	bne.n	800bf88 <rfalNfcaPollerCheckPresence+0x48>
    {
       ret = ERR_NONE;
 800bf84:	2300      	movs	r3, #0
 800bf86:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 800bf88:	89fb      	ldrh	r3, [r7, #14]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <rfalNfcaPollerTechnologyDetection>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcaSensRes *sensRes )
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b084      	sub	sp, #16
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	4603      	mov	r3, r0
 800bf9a:	6039      	str	r1, [r7, #0]
 800bf9c:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalNfcaPollerCheckPresence( ((compMode == RFAL_COMPLIANCE_MODE_EMV) ? RFAL_14443A_SHORTFRAME_CMD_WUPA : RFAL_14443A_SHORTFRAME_CMD_REQA), sensRes ) );
 800bf9e:	79fb      	ldrb	r3, [r7, #7]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d101      	bne.n	800bfa8 <rfalNfcaPollerTechnologyDetection+0x16>
 800bfa4:	2352      	movs	r3, #82	; 0x52
 800bfa6:	e000      	b.n	800bfaa <rfalNfcaPollerTechnologyDetection+0x18>
 800bfa8:	2326      	movs	r3, #38	; 0x26
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff ffc7 	bl	800bf40 <rfalNfcaPollerCheckPresence>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	81fb      	strh	r3, [r7, #14]
 800bfb6:	89fb      	ldrh	r3, [r7, #14]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <rfalNfcaPollerTechnologyDetection+0x2e>
 800bfbc:	89fb      	ldrh	r3, [r7, #14]
 800bfbe:	e005      	b.n	800bfcc <rfalNfcaPollerTechnologyDetection+0x3a>
    
    /* Send SLP_REQ as  Activity 1.1  9.2.3.6 and EMVCo 2.6  9.2.1.3 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO)
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d001      	beq.n	800bfca <rfalNfcaPollerTechnologyDetection+0x38>
    {
        rfalNfcaPollerSleep();
 800bfc6:	f000 fb63 	bl	800c690 <rfalNfcaPollerSleep>
    }
    return ERR_NONE;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <rfalNfcaPollerSingleCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcaPollerSingleCollisionResolution( uint8_t devLimit, bool *collPending, rfalNfcaSelRes *selRes, uint8_t *nfcId1, uint8_t *nfcId1Len )
{
 800bfd4:	b590      	push	{r4, r7, lr}
 800bfd6:	b08f      	sub	sp, #60	; 0x3c
 800bfd8:	af04      	add	r7, sp, #16
 800bfda:	60b9      	str	r1, [r7, #8]
 800bfdc:	607a      	str	r2, [r7, #4]
 800bfde:	603b      	str	r3, [r7, #0]
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]
    ReturnCode      ret;
    rfalNfcaSelReq  selReq;
    uint16_t        bytesRx;
    uint8_t         bytesTxRx;
    uint8_t         bitsTxRx;
    bool            doBacktrack = false;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t         backtrackCnt = 3;
 800bfea:	2303      	movs	r3, #3
 800bfec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    /* Check parameters */
    if( (collPending == NULL) || (selRes == NULL) || (nfcId1 == NULL) || (nfcId1Len == NULL) )
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d008      	beq.n	800c008 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <rfalNfcaPollerSingleCollisionResolution+0x34>
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <rfalNfcaPollerSingleCollisionResolution+0x38>
    {
        return ERR_PARAM;
 800c008:	2307      	movs	r3, #7
 800c00a:	e1ae      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
    }
    
    /* Initialize output parameters */
    *collPending = false;  /* Activity 1.1  9.3.4.6 */
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2200      	movs	r2, #0
 800c010:	701a      	strb	r2, [r3, #0]
    *nfcId1Len   = 0;
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2200      	movs	r2, #0
 800c016:	701a      	strb	r2, [r3, #0]
    ST_MEMSET( nfcId1, 0x00, RFAL_NFCA_CASCADE_3_UID_LEN );
 800c018:	220a      	movs	r2, #10
 800c01a:	2100      	movs	r1, #0
 800c01c:	6838      	ldr	r0, [r7, #0]
 800c01e:	f004 f95a 	bl	80102d6 <memset>
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.3.4 */
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800c022:	2300      	movs	r3, #0
 800c024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c028:	e199      	b.n	800c35e <rfalNfcaPollerSingleCollisionResolution+0x38a>
    {
        /* Initialize the SDD_REQ to send for the new cascade level */
        ST_MEMSET( (uint8_t*)&selReq, 0x00, sizeof(rfalNfcaSelReq) );
 800c02a:	f107 0318 	add.w	r3, r7, #24
 800c02e:	2207      	movs	r2, #7
 800c030:	2100      	movs	r1, #0
 800c032:	4618      	mov	r0, r3
 800c034:	f004 f94f 	bl	80102d6 <memset>
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 800c038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c03c:	005b      	lsls	r3, r3, #1
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	3b6d      	subs	r3, #109	; 0x6d
 800c042:	b2db      	uxtb	r3, r3
 800c044:	763b      	strb	r3, [r7, #24]
    
        bytesTxRx    = RFAL_NFCA_SDD_REQ_LEN;
 800c046:	2302      	movs	r3, #2
 800c048:	757b      	strb	r3, [r7, #21]
        bitsTxRx     = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	753b      	strb	r3, [r7, #20]
        
        /*******************************************************************************/
        /* Go through Collision loop */
        do
        {
            uint8_t         collBit = 1; /* standards mandate or recommend collision bit to be set to One. */
 800c04e:	2301      	movs	r3, #1
 800c050:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* Calculate SEL_PAR with the bytes/bits to be sent */
            selReq.selPar = rfalNfcaSelPar(bytesTxRx, bitsTxRx);
 800c054:	7d7b      	ldrb	r3, [r7, #21]
 800c056:	011b      	lsls	r3, r3, #4
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	7d3b      	ldrb	r3, [r7, #20]
 800c05c:	f003 030f 	and.w	r3, r3, #15
 800c060:	b2db      	uxtb	r3, r3
 800c062:	4313      	orrs	r3, r2
 800c064:	b2db      	uxtb	r3, r3
 800c066:	767b      	strb	r3, [r7, #25]
    
            /* Send SDD_REQ (Anticollision frame) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
            rfalNfcaTxRetry( ret, rfalISO14443ATransceiveAnticollisionFrame( (uint8_t*)&selReq, &bytesTxRx, &bitsTxRx, &bytesRx, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 800c068:	7bfb      	ldrb	r3, [r7, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d101      	bne.n	800c072 <rfalNfcaPollerSingleCollisionResolution+0x9e>
 800c06e:	2302      	movs	r3, #2
 800c070:	e000      	b.n	800c074 <rfalNfcaPollerSingleCollisionResolution+0xa0>
 800c072:	2300      	movs	r3, #0
 800c074:	f887 3020 	strb.w	r3, [r7, #32]
 800c078:	f107 0416 	add.w	r4, r7, #22
 800c07c:	f107 0214 	add.w	r2, r7, #20
 800c080:	f107 0115 	add.w	r1, r7, #21
 800c084:	f107 0018 	add.w	r0, r7, #24
 800c088:	f240 6354 	movw	r3, #1620	; 0x654
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	4623      	mov	r3, r4
 800c090:	f003 f9a6 	bl	800f3e0 <rfalISO14443ATransceiveAnticollisionFrame>
 800c094:	4603      	mov	r3, r0
 800c096:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <rfalNfcaPollerSingleCollisionResolution+0xd0>
 800c09e:	2005      	movs	r0, #5
 800c0a0:	f7f6 fcca 	bl	8002a38 <HAL_Delay>
 800c0a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0a8:	1e5a      	subs	r2, r3, #1
 800c0aa:	f887 2020 	strb.w	r2, [r7, #32]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d002      	beq.n	800c0b8 <rfalNfcaPollerSingleCollisionResolution+0xe4>
 800c0b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0b4:	2b04      	cmp	r3, #4
 800c0b6:	d0df      	beq.n	800c078 <rfalNfcaPollerSingleCollisionResolution+0xa4>
            
            bytesRx = rfalConvBitsToBytes(bytesRx);
 800c0b8:	8afb      	ldrh	r3, [r7, #22]
 800c0ba:	3307      	adds	r3, #7
 800c0bc:	08db      	lsrs	r3, r3, #3
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	82fb      	strh	r3, [r7, #22]
            
            if ((ret == ERR_TIMEOUT) 
 800c0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c0c4:	2b04      	cmp	r3, #4
 800c0c6:	d146      	bne.n	800c156 <rfalNfcaPollerSingleCollisionResolution+0x182>
                && (backtrackCnt != 0U) && !doBacktrack
 800c0c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d042      	beq.n	800c156 <rfalNfcaPollerSingleCollisionResolution+0x182>
 800c0d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0d4:	f083 0301 	eor.w	r3, r3, #1
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d03b      	beq.n	800c156 <rfalNfcaPollerSingleCollisionResolution+0x182>
                && !((RFAL_NFCA_SDD_REQ_LEN==bytesTxRx) && (0U==bitsTxRx)))
 800c0de:	7d7b      	ldrb	r3, [r7, #21]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d102      	bne.n	800c0ea <rfalNfcaPollerSingleCollisionResolution+0x116>
 800c0e4:	7d3b      	ldrb	r3, [r7, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d035      	beq.n	800c156 <rfalNfcaPollerSingleCollisionResolution+0x182>
                 * collisions of a weaker tag go unnoticed. If then a later 
                 * collision is recognized and the strong tag has a 0 at the 
                 * collision position then no tag will respond. Catch this 
                 * corner case and then try with the bit being sent as zero. */
                rfalNfcaSensRes sensRes;
                ret = ERR_RF_COLLISION;
 800c0ea:	231d      	movs	r3, #29
 800c0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
                rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &sensRes );
 800c0ee:	f107 0310 	add.w	r3, r7, #16
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	2026      	movs	r0, #38	; 0x26
 800c0f6:	f7ff ff23 	bl	800bf40 <rfalNfcaPollerCheckPresence>
                /* Algorithm below does a post-increment, decrement to go back to current position */
                if (0U == bitsTxRx)
 800c0fa:	7d3b      	ldrb	r3, [r7, #20]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d106      	bne.n	800c10e <rfalNfcaPollerSingleCollisionResolution+0x13a>
                {
                    bitsTxRx = 7;
 800c100:	2307      	movs	r3, #7
 800c102:	753b      	strb	r3, [r7, #20]
                    bytesTxRx--;
 800c104:	7d7b      	ldrb	r3, [r7, #21]
 800c106:	3b01      	subs	r3, #1
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	757b      	strb	r3, [r7, #21]
 800c10c:	e003      	b.n	800c116 <rfalNfcaPollerSingleCollisionResolution+0x142>
                }
                else
                {
                    bitsTxRx--;
 800c10e:	7d3b      	ldrb	r3, [r7, #20]
 800c110:	3b01      	subs	r3, #1
 800c112:	b2db      	uxtb	r3, r3
 800c114:	753b      	strb	r3, [r7, #20]
                }
                collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) );
 800c116:	7d7b      	ldrb	r3, [r7, #21]
 800c118:	461a      	mov	r2, r3
 800c11a:	f107 0318 	add.w	r3, r7, #24
 800c11e:	4413      	add	r3, r2
 800c120:	781a      	ldrb	r2, [r3, #0]
 800c122:	7d3b      	ldrb	r3, [r7, #20]
 800c124:	4619      	mov	r1, r3
 800c126:	2301      	movs	r3, #1
 800c128:	408b      	lsls	r3, r1
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	4013      	ands	r3, r2
 800c12e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                collBit = (uint8_t)((0U==collBit)?1U:0U); // invert the collision bit
 800c132:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <rfalNfcaPollerSingleCollisionResolution+0x16a>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e000      	b.n	800c140 <rfalNfcaPollerSingleCollisionResolution+0x16c>
 800c13e:	2300      	movs	r3, #0
 800c140:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                doBacktrack = true;
 800c144:	2301      	movs	r3, #1
 800c146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                backtrackCnt--;
 800c14a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c14e:	3b01      	subs	r3, #1
 800c150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            { 
 800c154:	e002      	b.n	800c15c <rfalNfcaPollerSingleCollisionResolution+0x188>
            }
            else
            {
                doBacktrack = false;
 800c156:	2300      	movs	r3, #0
 800c158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            if( ret == ERR_RF_COLLISION )
 800c15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c15e:	2b1d      	cmp	r3, #29
 800c160:	d17e      	bne.n	800c260 <rfalNfcaPollerSingleCollisionResolution+0x28c>
            {
                /* Check received length */
                if( (bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_SDD_RES_LEN + RFAL_NFCA_SDD_REQ_LEN) )
 800c162:	7d7b      	ldrb	r3, [r7, #21]
 800c164:	461a      	mov	r2, r3
 800c166:	7d3b      	ldrb	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <rfalNfcaPollerSingleCollisionResolution+0x19c>
 800c16c:	2301      	movs	r3, #1
 800c16e:	e000      	b.n	800c172 <rfalNfcaPollerSingleCollisionResolution+0x19e>
 800c170:	2300      	movs	r3, #0
 800c172:	4413      	add	r3, r2
 800c174:	2b07      	cmp	r3, #7
 800c176:	d901      	bls.n	800c17c <rfalNfcaPollerSingleCollisionResolution+0x1a8>
                {
                    return ERR_PROTO;
 800c178:	230b      	movs	r3, #11
 800c17a:	e0f6      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
                }

                if( ((bytesTxRx + ((bitsTxRx != 0U) ? 1U : 0U)) > (RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN)) && (backtrackCnt != 0U) )
 800c17c:	7d7b      	ldrb	r3, [r7, #21]
 800c17e:	461a      	mov	r2, r3
 800c180:	7d3b      	ldrb	r3, [r7, #20]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <rfalNfcaPollerSingleCollisionResolution+0x1b6>
 800c186:	2301      	movs	r3, #1
 800c188:	e000      	b.n	800c18c <rfalNfcaPollerSingleCollisionResolution+0x1b8>
 800c18a:	2300      	movs	r3, #0
 800c18c:	4413      	add	r3, r2
 800c18e:	2b06      	cmp	r3, #6
 800c190:	d91a      	bls.n	800c1c8 <rfalNfcaPollerSingleCollisionResolution+0x1f4>
 800c192:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c196:	2b00      	cmp	r3, #0
 800c198:	d016      	beq.n	800c1c8 <rfalNfcaPollerSingleCollisionResolution+0x1f4>
                { /* Collision in BCC: Anticollide only UID part */
                    backtrackCnt--;
 800c19a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    bytesTxRx = RFAL_NFCA_CASCADE_1_UID_LEN + RFAL_NFCA_SDD_REQ_LEN - 1U;
 800c1a4:	2305      	movs	r3, #5
 800c1a6:	757b      	strb	r3, [r7, #21]
                    bitsTxRx = 7;
 800c1a8:	2307      	movs	r3, #7
 800c1aa:	753b      	strb	r3, [r7, #20]
                    collBit = (uint8_t)( ((uint8_t*)&selReq)[bytesTxRx] & (1U << bitsTxRx) ); /* Not a real collision, extract the actual bit for the subsequent code */
 800c1ac:	7d7b      	ldrb	r3, [r7, #21]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f107 0318 	add.w	r3, r7, #24
 800c1b4:	4413      	add	r3, r2
 800c1b6:	781a      	ldrb	r2, [r3, #0]
 800c1b8:	7d3b      	ldrb	r3, [r7, #20]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	2301      	movs	r3, #1
 800c1be:	408b      	lsls	r3, r1
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                }
                
                if( (devLimit == 0U) && !(*collPending) )
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10b      	bne.n	800c1e6 <rfalNfcaPollerSingleCollisionResolution+0x212>
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	f083 0301 	eor.w	r3, r3, #1
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <rfalNfcaPollerSingleCollisionResolution+0x212>
                {   
                    /* Activity 1.0 & 1.1  9.3.4.12: If CON_DEVICES_LIMIT has a value of 0, then 
                     * NFC Forum Device is configured to perform collision detection only       */
                    *collPending = true;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	701a      	strb	r2, [r3, #0]
                    return ERR_IGNORE;
 800c1e2:	2312      	movs	r3, #18
 800c1e4:	e0c1      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
                }
                
                *collPending = true;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	701a      	strb	r2, [r3, #0]
                
                /* Set and select the collision bit, with the number of bytes/bits successfully TxRx */
                if (collBit != 0U)
 800c1ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d013      	beq.n	800c21c <rfalNfcaPollerSingleCollisionResolution+0x248>
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] | (1U << bitsTxRx));   /* MISRA 10.3 */
 800c1f4:	7d7b      	ldrb	r3, [r7, #21]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f107 0318 	add.w	r3, r7, #24
 800c1fc:	4413      	add	r3, r2
 800c1fe:	7819      	ldrb	r1, [r3, #0]
 800c200:	7d3b      	ldrb	r3, [r7, #20]
 800c202:	461a      	mov	r2, r3
 800c204:	2301      	movs	r3, #1
 800c206:	4093      	lsls	r3, r2
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	7d7b      	ldrb	r3, [r7, #21]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f107 0318 	add.w	r3, r7, #24
 800c212:	4403      	add	r3, r0
 800c214:	430a      	orrs	r2, r1
 800c216:	b2d2      	uxtb	r2, r2
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e014      	b.n	800c246 <rfalNfcaPollerSingleCollisionResolution+0x272>
                }
                else
                {
                    ((uint8_t*)&selReq)[bytesTxRx] = (uint8_t)(((uint8_t*)&selReq)[bytesTxRx] & ~(1U << bitsTxRx));  /* MISRA 10.3 */
 800c21c:	7d7b      	ldrb	r3, [r7, #21]
 800c21e:	461a      	mov	r2, r3
 800c220:	f107 0318 	add.w	r3, r7, #24
 800c224:	4413      	add	r3, r2
 800c226:	7819      	ldrb	r1, [r3, #0]
 800c228:	7d3b      	ldrb	r3, [r7, #20]
 800c22a:	461a      	mov	r2, r3
 800c22c:	2301      	movs	r3, #1
 800c22e:	4093      	lsls	r3, r2
 800c230:	b2db      	uxtb	r3, r3
 800c232:	43db      	mvns	r3, r3
 800c234:	b2da      	uxtb	r2, r3
 800c236:	7d7b      	ldrb	r3, [r7, #21]
 800c238:	4618      	mov	r0, r3
 800c23a:	f107 0318 	add.w	r3, r7, #24
 800c23e:	4403      	add	r3, r0
 800c240:	400a      	ands	r2, r1
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	701a      	strb	r2, [r3, #0]
                }

                bitsTxRx++;
 800c246:	7d3b      	ldrb	r3, [r7, #20]
 800c248:	3301      	adds	r3, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	753b      	strb	r3, [r7, #20]
                
                /* Check if number of bits form a byte */
                if( bitsTxRx == RFAL_BITS_IN_BYTE )
 800c24e:	7d3b      	ldrb	r3, [r7, #20]
 800c250:	2b08      	cmp	r3, #8
 800c252:	d105      	bne.n	800c260 <rfalNfcaPollerSingleCollisionResolution+0x28c>
                {
                    bitsTxRx = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	753b      	strb	r3, [r7, #20]
                    bytesTxRx++;
 800c258:	7d7b      	ldrb	r3, [r7, #21]
 800c25a:	3301      	adds	r3, #1
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	757b      	strb	r3, [r7, #21]
                }
            }
        }while (ret == ERR_RF_COLLISION);
 800c260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c262:	2b1d      	cmp	r3, #29
 800c264:	f43f aef3 	beq.w	800c04e <rfalNfcaPollerSingleCollisionResolution+0x7a>
        
        
        /*******************************************************************************/
        /* Check if Collision loop has failed */
        if( ret != ERR_NONE )
 800c268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <rfalNfcaPollerSingleCollisionResolution+0x29e>
        {
            return ret;
 800c26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c270:	e07b      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        
        /* If collisions are to be reported check whether the response is complete */
        if( (devLimit == 0U) && (bytesRx != sizeof(rfalNfcaSddRes)) )
 800c272:	7bfb      	ldrb	r3, [r7, #15]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d104      	bne.n	800c282 <rfalNfcaPollerSingleCollisionResolution+0x2ae>
 800c278:	8afb      	ldrh	r3, [r7, #22]
 800c27a:	2b05      	cmp	r3, #5
 800c27c:	d001      	beq.n	800c282 <rfalNfcaPollerSingleCollisionResolution+0x2ae>
        {
            return ERR_PROTO;
 800c27e:	230b      	movs	r3, #11
 800c280:	e073      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /* Check if the received BCC match */
        if( selReq.bcc != rfalNfcaCalculateBcc( selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN ) )
 800c282:	7fbc      	ldrb	r4, [r7, #30]
 800c284:	f107 0318 	add.w	r3, r7, #24
 800c288:	3302      	adds	r3, #2
 800c28a:	2104      	movs	r1, #4
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff fe13 	bl	800beb8 <rfalNfcaCalculateBcc>
 800c292:	4603      	mov	r3, r0
 800c294:	429c      	cmp	r4, r3
 800c296:	d001      	beq.n	800c29c <rfalNfcaPollerSingleCollisionResolution+0x2c8>
        {
            return ERR_PROTO;
 800c298:	230b      	movs	r3, #11
 800c29a:	e066      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /*******************************************************************************/
        /* Anticollision OK, Select this Cascade Level */
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800c29c:	2370      	movs	r3, #112	; 0x70
 800c29e:	767b      	strb	r3, [r7, #25]
        
        /* Send SEL_REQ (Select command) - Retry upon timeout  EMVCo 2.6  9.6.1.3 */
        rfalNfcaTxRetry( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &bytesRx, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ), ((devLimit==0U)?RFAL_NFCA_N_RETRANS:0U), RFAL_NFCA_T_RETRANS );
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <rfalNfcaPollerSingleCollisionResolution+0x2d6>
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	e000      	b.n	800c2ac <rfalNfcaPollerSingleCollisionResolution+0x2d8>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	77fb      	strb	r3, [r7, #31]
 800c2ae:	f107 0018 	add.w	r0, r7, #24
 800c2b2:	f240 6354 	movw	r3, #1620	; 0x654
 800c2b6:	9302      	str	r3, [sp, #8]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	f107 0316 	add.w	r3, r7, #22
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	2107      	movs	r1, #7
 800c2c8:	f001 ffee 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <rfalNfcaPollerSingleCollisionResolution+0x308>
 800c2d6:	2005      	movs	r0, #5
 800c2d8:	f7f6 fbae 	bl	8002a38 <HAL_Delay>
 800c2dc:	7ffb      	ldrb	r3, [r7, #31]
 800c2de:	1e5a      	subs	r2, r3, #1
 800c2e0:	77fa      	strb	r2, [r7, #31]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <rfalNfcaPollerSingleCollisionResolution+0x318>
 800c2e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d0e0      	beq.n	800c2ae <rfalNfcaPollerSingleCollisionResolution+0x2da>
        
        if( ret != ERR_NONE )
 800c2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <rfalNfcaPollerSingleCollisionResolution+0x322>
        {
            return ret;
 800c2f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2f4:	e039      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
        }

        
        /* Ensure proper response length */
        if( bytesRx != sizeof(rfalNfcaSelRes) )
 800c2f6:	8afb      	ldrh	r3, [r7, #22]
 800c2f8:	2b01      	cmp	r3, #1
 800c2fa:	d001      	beq.n	800c300 <rfalNfcaPollerSingleCollisionResolution+0x32c>
        {
            return ERR_PROTO;
 800c2fc:	230b      	movs	r3, #11
 800c2fe:	e034      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
        }
        
        /*******************************************************************************/
        /* Check cascade byte, if cascade tag then go next cascade level */
        if( (ret == ERR_NONE) && (*selReq.nfcid1 == RFAL_NFCA_SDD_CT) )
 800c300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d11b      	bne.n	800c33e <rfalNfcaPollerSingleCollisionResolution+0x36a>
 800c306:	7ebb      	ldrb	r3, [r7, #26]
 800c308:	2b88      	cmp	r3, #136	; 0x88
 800c30a:	d118      	bne.n	800c33e <rfalNfcaPollerSingleCollisionResolution+0x36a>
        {
            /* Cascade Tag present, store nfcid1 bytes (excluding cascade tag) and continue for next CL */
            ST_MEMCPY( &nfcId1[*nfcId1Len], &((uint8_t*)&selReq.nfcid1)[RFAL_NFCA_SDD_CT_LEN], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	461a      	mov	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	1898      	adds	r0, r3, r2
 800c316:	f107 0318 	add.w	r3, r7, #24
 800c31a:	3302      	adds	r3, #2
 800c31c:	3301      	adds	r3, #1
 800c31e:	2203      	movs	r2, #3
 800c320:	4619      	mov	r1, r3
 800c322:	f003 ffb4 	bl	801028e <memcpy>
            *nfcId1Len += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	3303      	adds	r3, #3
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	701a      	strb	r2, [r3, #0]
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800c332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c336:	3301      	adds	r3, #1
 800c338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c33c:	e00f      	b.n	800c35e <rfalNfcaPollerSingleCollisionResolution+0x38a>
        }
        else
        {
            /* UID Selection complete, Stop Cascade Level loop */
            ST_MEMCPY( &nfcId1[*nfcId1Len], (uint8_t*)&selReq.nfcid1, RFAL_NFCA_CASCADE_1_UID_LEN );
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	4413      	add	r3, r2
 800c348:	f8d7 201a 	ldr.w	r2, [r7, #26]
 800c34c:	601a      	str	r2, [r3, #0]
            *nfcId1Len += RFAL_NFCA_CASCADE_1_UID_LEN;
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	3304      	adds	r3, #4
 800c354:	b2da      	uxtb	r2, r3
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 800c35a:	2300      	movs	r3, #0
 800c35c:	e005      	b.n	800c36a <rfalNfcaPollerSingleCollisionResolution+0x396>
    for( i = (uint8_t)RFAL_NFCA_SEL_CASCADE_L1; i <= (uint8_t)RFAL_NFCA_SEL_CASCADE_L3; i++)
 800c35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c362:	2b02      	cmp	r3, #2
 800c364:	f67f ae61 	bls.w	800c02a <rfalNfcaPollerSingleCollisionResolution+0x56>
        }
    }
    return ERR_INTERNAL;
 800c368:	230c      	movs	r3, #12
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	372c      	adds	r7, #44	; 0x2c
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd90      	pop	{r4, r7, pc}

0800c372 <rfalNfcaPollerFullCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerFullCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcaListenDevice *nfcaDevList, uint8_t *devCnt )
{
 800c372:	b5b0      	push	{r4, r5, r7, lr}
 800c374:	b08a      	sub	sp, #40	; 0x28
 800c376:	af02      	add	r7, sp, #8
 800c378:	60ba      	str	r2, [r7, #8]
 800c37a:	607b      	str	r3, [r7, #4]
 800c37c:	4603      	mov	r3, r0
 800c37e:	73fb      	strb	r3, [r7, #15]
 800c380:	460b      	mov	r3, r1
 800c382:	73bb      	strb	r3, [r7, #14]
    ReturnCode      ret;
    bool            collPending;
    rfalNfcaSensRes sensRes;
    uint16_t        rcvLen;
    
    if( (nfcaDevList == NULL) || (devCnt == NULL) )
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <rfalNfcaPollerFullCollisionResolution+0x1e>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <rfalNfcaPollerFullCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800c390:	2307      	movs	r3, #7
 800c392:	e106      	b.n	800c5a2 <rfalNfcaPollerFullCollisionResolution+0x230>
    }
    
    *devCnt = 0;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	701a      	strb	r2, [r3, #0]
    ret     = ERR_NONE;
 800c39a:	2300      	movs	r3, #0
 800c39c:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Send ALL_REQ before Anticollision if a Sleep was sent before  Activity 1.1  9.3.4.1 and EMVco 2.6  9.3.2.1 */
    if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d029      	beq.n	800c3f8 <rfalNfcaPollerFullCollisionResolution+0x86>
    {
        ret = rfalISO14443ATransceiveShortFrame( RFAL_14443A_SHORTFRAME_CMD_WUPA, (uint8_t*)&nfcaDevList->sensRes, (uint8_t)rfalConvBytesToBits(sizeof(rfalNfcaSensRes)), &rcvLen, RFAL_NFCA_FDTMIN  );
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	1c59      	adds	r1, r3, #1
 800c3a8:	f107 0216 	add.w	r2, r7, #22
 800c3ac:	f240 6354 	movw	r3, #1620	; 0x654
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	2210      	movs	r2, #16
 800c3b6:	2052      	movs	r0, #82	; 0x52
 800c3b8:	f002 ff16 	bl	800f1e8 <rfalISO14443ATransceiveShortFrame>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	83fb      	strh	r3, [r7, #30]
        if(ret != ERR_NONE)
 800c3c0:	8bfb      	ldrh	r3, [r7, #30]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d010      	beq.n	800c3e8 <rfalNfcaPollerFullCollisionResolution+0x76>
        {
            if( (compMode == RFAL_COMPLIANCE_MODE_EMV) || ((ret != ERR_RF_COLLISION) && (ret != ERR_CRC) && (ret != ERR_FRAMING) && (ret != ERR_PAR)) )
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d00b      	beq.n	800c3e4 <rfalNfcaPollerFullCollisionResolution+0x72>
 800c3cc:	8bfb      	ldrh	r3, [r7, #30]
 800c3ce:	2b1d      	cmp	r3, #29
 800c3d0:	d00a      	beq.n	800c3e8 <rfalNfcaPollerFullCollisionResolution+0x76>
 800c3d2:	8bfb      	ldrh	r3, [r7, #30]
 800c3d4:	2b15      	cmp	r3, #21
 800c3d6:	d007      	beq.n	800c3e8 <rfalNfcaPollerFullCollisionResolution+0x76>
 800c3d8:	8bfb      	ldrh	r3, [r7, #30]
 800c3da:	2b09      	cmp	r3, #9
 800c3dc:	d004      	beq.n	800c3e8 <rfalNfcaPollerFullCollisionResolution+0x76>
 800c3de:	8bfb      	ldrh	r3, [r7, #30]
 800c3e0:	2b1b      	cmp	r3, #27
 800c3e2:	d001      	beq.n	800c3e8 <rfalNfcaPollerFullCollisionResolution+0x76>
            {
                return ret;
 800c3e4:	8bfb      	ldrh	r3, [r7, #30]
 800c3e6:	e0dc      	b.n	800c5a2 <rfalNfcaPollerFullCollisionResolution+0x230>
            }
        }
        
        /* Check proper SENS_RES/ATQA size */
        if( (ret == ERR_NONE) && (rfalConvBytesToBits(sizeof(rfalNfcaSensRes)) != rcvLen) )
 800c3e8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d104      	bne.n	800c3f8 <rfalNfcaPollerFullCollisionResolution+0x86>
 800c3ee:	8afb      	ldrh	r3, [r7, #22]
 800c3f0:	2b10      	cmp	r3, #16
 800c3f2:	d001      	beq.n	800c3f8 <rfalNfcaPollerFullCollisionResolution+0x86>
        {
            return ERR_PROTO;
 800c3f4:	230b      	movs	r3, #11
 800c3f6:	e0d4      	b.n	800c5a2 <rfalNfcaPollerFullCollisionResolution+0x230>
    #if RFAL_FEATURE_T1T
    /*******************************************************************************/
    /* Only check for T1T if previous SENS_RES was received without a transmission  *
     * error. When collisions occur bits in the SENS_RES may look like a T1T        */
    /* If T1T Anticollision is not supported  Activity 1.1  9.3.4.3 */
    if( rfalNfcaIsSensResT1T( &nfcaDevList->sensRes ) && (devLimit != 0U) && (ret == ERR_NONE) && (compMode != RFAL_COMPLIANCE_MODE_EMV) )
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	789b      	ldrb	r3, [r3, #2]
 800c3fc:	f003 030f 	and.w	r3, r3, #15
 800c400:	2b0c      	cmp	r3, #12
 800c402:	d12a      	bne.n	800c45a <rfalNfcaPollerFullCollisionResolution+0xe8>
 800c404:	7bbb      	ldrb	r3, [r7, #14]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d027      	beq.n	800c45a <rfalNfcaPollerFullCollisionResolution+0xe8>
 800c40a:	8bfb      	ldrh	r3, [r7, #30]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d124      	bne.n	800c45a <rfalNfcaPollerFullCollisionResolution+0xe8>
 800c410:	7bfb      	ldrb	r3, [r7, #15]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d021      	beq.n	800c45a <rfalNfcaPollerFullCollisionResolution+0xe8>
    {
        /* RID_REQ shall be performed with rfalT1TPollerRid()    Activity 1.1  9.3.4.24 */
        rfalT1TPollerInitialize();
 800c416:	f003 fea6 	bl	8010166 <rfalT1TPollerInitialize>
        EXIT_ON_ERR( ret, rfalT1TPollerRid( &nfcaDevList->ridRes ) );
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	330f      	adds	r3, #15
 800c41e:	4618      	mov	r0, r3
 800c420:	f003 fec3 	bl	80101aa <rfalT1TPollerRid>
 800c424:	4603      	mov	r3, r0
 800c426:	83fb      	strh	r3, [r7, #30]
 800c428:	8bfb      	ldrh	r3, [r7, #30]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <rfalNfcaPollerFullCollisionResolution+0xc0>
 800c42e:	8bfb      	ldrh	r3, [r7, #30]
 800c430:	e0b7      	b.n	800c5a2 <rfalNfcaPollerFullCollisionResolution+0x230>
        
        /* T1T doesn't support Anticollision */
        *devCnt = 1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	701a      	strb	r2, [r3, #0]
        nfcaDevList->isSleep   = false;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2200      	movs	r2, #0
 800c43c:	755a      	strb	r2, [r3, #21]
        nfcaDevList->type      = RFAL_NFCA_T1T;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2201      	movs	r2, #1
 800c442:	701a      	strb	r2, [r3, #0]
        nfcaDevList->nfcId1Len = RFAL_NFCA_CASCADE_1_UID_LEN;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2204      	movs	r2, #4
 800c448:	711a      	strb	r2, [r3, #4]
        ST_MEMCPY( &nfcaDevList->nfcId1, &nfcaDevList->ridRes.uid, RFAL_NFCA_CASCADE_1_UID_LEN );
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	3305      	adds	r3, #5
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	3211      	adds	r2, #17
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	601a      	str	r2, [r3, #0]
        
        return ERR_NONE;
 800c456:	2300      	movs	r3, #0
 800c458:	e0a3      	b.n	800c5a2 <rfalNfcaPollerFullCollisionResolution+0x230>
    }    
    #endif /* RFAL_FEATURE_T1T */
    
    /*******************************************************************************/
    /* Store the SENS_RES from Technology Detection or from WUPA */ 
    sensRes = nfcaDevList->sensRes;
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	f107 0318 	add.w	r3, r7, #24
 800c460:	3201      	adds	r2, #1
 800c462:	8812      	ldrh	r2, [r2, #0]
 800c464:	801a      	strh	r2, [r3, #0]
    
    if( devLimit > 0U )  /* MISRA 21.18 */
 800c466:	7bbb      	ldrb	r3, [r7, #14]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d008      	beq.n	800c47e <rfalNfcaPollerFullCollisionResolution+0x10c>
    {
        ST_MEMSET( nfcaDevList, 0x00, (sizeof(rfalNfcaListenDevice) * devLimit) );
 800c46c:	7bbb      	ldrb	r3, [r7, #14]
 800c46e:	2216      	movs	r2, #22
 800c470:	fb02 f303 	mul.w	r3, r2, r3
 800c474:	461a      	mov	r2, r3
 800c476:	2100      	movs	r1, #0
 800c478:	68b8      	ldr	r0, [r7, #8]
 800c47a:	f003 ff2c 	bl	80102d6 <memset>
    }
    
    /* Restore the prev SENS_RES, assuming that the SENS_RES received is from first device
     * When only one device is detected it's not woken up then we'll have no SENS_RES (ATQA) */
    nfcaDevList->sensRes = sensRes;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	3301      	adds	r3, #1
 800c482:	f107 0218 	add.w	r2, r7, #24
 800c486:	8812      	ldrh	r2, [r2, #0]
 800c488:	801a      	strh	r2, [r3, #0]
    /*******************************************************************************/
    do
    {
        uint8_t newDeviceType;
        
        EXIT_ON_ERR( ret, rfalNfcaPollerSingleCollisionResolution( devLimit, &collPending, &nfcaDevList[*devCnt].selRes, (uint8_t*)&nfcaDevList[*devCnt].nfcId1, (uint8_t*)&nfcaDevList[*devCnt].nfcId1Len ) );
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	461a      	mov	r2, r3
 800c490:	2316      	movs	r3, #22
 800c492:	fb03 f302 	mul.w	r3, r3, r2
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	1cdc      	adds	r4, r3, #3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	2316      	movs	r3, #22
 800c4a4:	fb03 f302 	mul.w	r3, r3, r2
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	1d5d      	adds	r5, r3, #5
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	2316      	movs	r3, #22
 800c4b6:	fb03 f302 	mul.w	r3, r3, r2
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	4413      	add	r3, r2
 800c4be:	3304      	adds	r3, #4
 800c4c0:	f107 011c 	add.w	r1, r7, #28
 800c4c4:	7bb8      	ldrb	r0, [r7, #14]
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	4622      	mov	r2, r4
 800c4cc:	f7ff fd82 	bl	800bfd4 <rfalNfcaPollerSingleCollisionResolution>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	83fb      	strh	r3, [r7, #30]
 800c4d4:	8bfb      	ldrh	r3, [r7, #30]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <rfalNfcaPollerFullCollisionResolution+0x16c>
 800c4da:	8bfb      	ldrh	r3, [r7, #30]
 800c4dc:	e061      	b.n	800c5a2 <rfalNfcaPollerFullCollisionResolution+0x230>
        
        /* Assign Listen Device */
        newDeviceType = ((uint8_t)nfcaDevList[*devCnt].selRes.sak) & RFAL_NFCA_SEL_RES_CONF_MASK;  /* MISRA 10.8 */
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	2316      	movs	r3, #22
 800c4e6:	fb03 f302 	mul.w	r3, r3, r2
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	78db      	ldrb	r3, [r3, #3]
 800c4f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4f4:	777b      	strb	r3, [r7, #29]
        /* PRQA S 4342 1 # MISRA 10.5 - Guaranteed that no invalid enum values are created: see guard_eq_RFAL_NFCA_T2T, .... */
        nfcaDevList[*devCnt].type    = (rfalNfcaListenDeviceType) (newDeviceType);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	2316      	movs	r3, #22
 800c4fe:	fb03 f302 	mul.w	r3, r3, r2
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	7f7a      	ldrb	r2, [r7, #29]
 800c508:	701a      	strb	r2, [r3, #0]
        nfcaDevList[*devCnt].isSleep = false;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	2316      	movs	r3, #22
 800c512:	fb03 f302 	mul.w	r3, r3, r2
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	4413      	add	r3, r2
 800c51a:	2200      	movs	r2, #0
 800c51c:	755a      	strb	r2, [r3, #21]
        (*devCnt)++;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	3301      	adds	r3, #1
 800c524:	b2da      	uxtb	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	701a      	strb	r2, [r3, #0]

        
        /* If a collision was detected and device counter is lower than limit  Activity 1.1  9.3.4.21 */
        if( (*devCnt < devLimit) && ((collPending) || (compMode != RFAL_COMPLIANCE_MODE_ISO) ) )
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	7bba      	ldrb	r2, [r7, #14]
 800c530:	429a      	cmp	r2, r3
 800c532:	d92a      	bls.n	800c58a <rfalNfcaPollerFullCollisionResolution+0x218>
 800c534:	7f3b      	ldrb	r3, [r7, #28]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d102      	bne.n	800c540 <rfalNfcaPollerFullCollisionResolution+0x1ce>
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d024      	beq.n	800c58a <rfalNfcaPollerFullCollisionResolution+0x218>
        {
            /* Put this device to Sleep  Activity 1.1  9.3.4.22 */
            rfalNfcaPollerSleep();
 800c540:	f000 f8a6 	bl	800c690 <rfalNfcaPollerSleep>
            nfcaDevList[(*devCnt - 1U)].isSleep = true;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	461a      	mov	r2, r3
 800c54a:	2316      	movs	r3, #22
 800c54c:	fb03 f302 	mul.w	r3, r3, r2
 800c550:	3b16      	subs	r3, #22
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	4413      	add	r3, r2
 800c556:	2201      	movs	r2, #1
 800c558:	755a      	strb	r2, [r3, #21]
            
            
            /* Send a new SENS_REQ to check for other cards  Activity 1.1  9.3.4.23 */
            ret = rfalNfcaPollerCheckPresence( RFAL_14443A_SHORTFRAME_CMD_REQA, &nfcaDevList[*devCnt].sensRes );
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	2316      	movs	r3, #22
 800c562:	fb03 f302 	mul.w	r3, r3, r2
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	3301      	adds	r3, #1
 800c56c:	4619      	mov	r1, r3
 800c56e:	2026      	movs	r0, #38	; 0x26
 800c570:	f7ff fce6 	bl	800bf40 <rfalNfcaPollerCheckPresence>
 800c574:	4603      	mov	r3, r0
 800c576:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 800c578:	8bfb      	ldrh	r3, [r7, #30]
 800c57a:	2b04      	cmp	r3, #4
 800c57c:	d102      	bne.n	800c584 <rfalNfcaPollerFullCollisionResolution+0x212>
            {
                /* No more devices found, exit */
                collPending = false;
 800c57e:	2300      	movs	r3, #0
 800c580:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 800c582:	e004      	b.n	800c58e <rfalNfcaPollerFullCollisionResolution+0x21c>
            }
            else
            {
                /* Another device found, continue loop */
                collPending = true;
 800c584:	2301      	movs	r3, #1
 800c586:	773b      	strb	r3, [r7, #28]
            if( ret == ERR_TIMEOUT )
 800c588:	e001      	b.n	800c58e <rfalNfcaPollerFullCollisionResolution+0x21c>
            }
        }
        else
        {
            /* Exit loop */
            collPending = false;
 800c58a:	2300      	movs	r3, #0
 800c58c:	773b      	strb	r3, [r7, #28]
        }
    }while( (*devCnt < devLimit) && (collPending) );
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	7bba      	ldrb	r2, [r7, #14]
 800c594:	429a      	cmp	r2, r3
 800c596:	d903      	bls.n	800c5a0 <rfalNfcaPollerFullCollisionResolution+0x22e>
 800c598:	7f3b      	ldrb	r3, [r7, #28]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f47f af75 	bne.w	800c48a <rfalNfcaPollerFullCollisionResolution+0x118>
    
    return ERR_NONE;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3720      	adds	r7, #32
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c5ac <rfalNfcaPollerSelect>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSelect( const uint8_t *nfcid1, uint8_t nfcidLen, rfalNfcaSelRes *selRes )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08c      	sub	sp, #48	; 0x30
 800c5b0:	af04      	add	r7, sp, #16
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	72fb      	strb	r3, [r7, #11]
    uint8_t        nfcidOffset;
    uint16_t       rxLen;
    ReturnCode     ret;
    rfalNfcaSelReq selReq;
    
    if( (nfcid1 == NULL) || (nfcidLen > RFAL_NFCA_CASCADE_3_UID_LEN) || (selRes == NULL) )
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <rfalNfcaPollerSelect+0x20>
 800c5c0:	7afb      	ldrb	r3, [r7, #11]
 800c5c2:	2b0a      	cmp	r3, #10
 800c5c4:	d802      	bhi.n	800c5cc <rfalNfcaPollerSelect+0x20>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <rfalNfcaPollerSelect+0x24>
    {
        return ERR_PARAM;
 800c5cc:	2307      	movs	r3, #7
 800c5ce:	e058      	b.n	800c682 <rfalNfcaPollerSelect+0xd6>
    }
    
    
    /* Calculate Cascate Level */
    cl          = rfalNfcaNfcidLen2CL( nfcidLen );
 800c5d0:	7afb      	ldrb	r3, [r7, #11]
 800c5d2:	4a2e      	ldr	r2, [pc, #184]	; (800c68c <rfalNfcaPollerSelect+0xe0>)
 800c5d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d8:	089b      	lsrs	r3, r3, #2
 800c5da:	777b      	strb	r3, [r7, #29]
    nfcidOffset = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	77bb      	strb	r3, [r7, #30]
    
    /*******************************************************************************/
    /* Go through all Cascade Levels     Activity 1.1  9.4.4 */
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	77fb      	strb	r3, [r7, #31]
 800c5e4:	e048      	b.n	800c678 <rfalNfcaPollerSelect+0xcc>
    {
        /* Assign SEL_CMD according to the CLn and SEL_PAR*/
        selReq.selCmd = rfalNfcaCLn2SELCMD(i);
 800c5e6:	7ffb      	ldrb	r3, [r7, #31]
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	3b6d      	subs	r3, #109	; 0x6d
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	743b      	strb	r3, [r7, #16]
        selReq.selPar = RFAL_NFCA_SEL_SELPAR;
 800c5f2:	2370      	movs	r3, #112	; 0x70
 800c5f4:	747b      	strb	r3, [r7, #17]
        
        /* Compute NFCID/Data on the SEL_REQ command   Digital 1.1  Table 18 */
        if( cl != i )
 800c5f6:	7f7a      	ldrb	r2, [r7, #29]
 800c5f8:	7ffb      	ldrb	r3, [r7, #31]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d00f      	beq.n	800c61e <rfalNfcaPollerSelect+0x72>
        {
            *selReq.nfcid1 = RFAL_NFCA_SDD_CT;
 800c5fe:	2388      	movs	r3, #136	; 0x88
 800c600:	74bb      	strb	r3, [r7, #18]
            ST_MEMCPY( &selReq.nfcid1[RFAL_NFCA_SDD_CT_LEN], &nfcid1[nfcidOffset], (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN) );
 800c602:	7fbb      	ldrb	r3, [r7, #30]
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	18d1      	adds	r1, r2, r3
 800c608:	f107 0310 	add.w	r3, r7, #16
 800c60c:	3303      	adds	r3, #3
 800c60e:	2203      	movs	r2, #3
 800c610:	4618      	mov	r0, r3
 800c612:	f003 fe3c 	bl	801028e <memcpy>
            nfcidOffset += (RFAL_NFCA_CASCADE_1_UID_LEN - RFAL_NFCA_SDD_CT_LEN);
 800c616:	7fbb      	ldrb	r3, [r7, #30]
 800c618:	3303      	adds	r3, #3
 800c61a:	77bb      	strb	r3, [r7, #30]
 800c61c:	e005      	b.n	800c62a <rfalNfcaPollerSelect+0x7e>
        }
        else
        {
            ST_MEMCPY( selReq.nfcid1, &nfcid1[nfcidOffset], RFAL_NFCA_CASCADE_1_UID_LEN );
 800c61e:	7fbb      	ldrb	r3, [r7, #30]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f8c7 3012 	str.w	r3, [r7, #18]
        }
        
        /* Calculate nfcid's BCC */
        selReq.bcc = rfalNfcaCalculateBcc( (uint8_t*)&selReq.nfcid1, sizeof(selReq.nfcid1) );
 800c62a:	f107 0310 	add.w	r3, r7, #16
 800c62e:	3302      	adds	r3, #2
 800c630:	2104      	movs	r1, #4
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fc40 	bl	800beb8 <rfalNfcaCalculateBcc>
 800c638:	4603      	mov	r3, r0
 800c63a:	75bb      	strb	r3, [r7, #22]
        
        /*******************************************************************************/
        /* Send SEL_REQ  */
        EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&selReq, sizeof(rfalNfcaSelReq), (uint8_t*)selRes, sizeof(rfalNfcaSelRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_FDTMIN ) );
 800c63c:	f107 0010 	add.w	r0, r7, #16
 800c640:	f240 6354 	movw	r3, #1620	; 0x654
 800c644:	9302      	str	r3, [sp, #8]
 800c646:	2300      	movs	r3, #0
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	f107 0318 	add.w	r3, r7, #24
 800c64e:	9300      	str	r3, [sp, #0]
 800c650:	2301      	movs	r3, #1
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	2107      	movs	r1, #7
 800c656:	f001 fe27 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800c65a:	4603      	mov	r3, r0
 800c65c:	837b      	strh	r3, [r7, #26]
 800c65e:	8b7b      	ldrh	r3, [r7, #26]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <rfalNfcaPollerSelect+0xbc>
 800c664:	8b7b      	ldrh	r3, [r7, #26]
 800c666:	e00c      	b.n	800c682 <rfalNfcaPollerSelect+0xd6>
        
        /* Ensure proper response length */
        if( rxLen != sizeof(rfalNfcaSelRes) )
 800c668:	8b3b      	ldrh	r3, [r7, #24]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d001      	beq.n	800c672 <rfalNfcaPollerSelect+0xc6>
        {
            return ERR_PROTO;
 800c66e:	230b      	movs	r3, #11
 800c670:	e007      	b.n	800c682 <rfalNfcaPollerSelect+0xd6>
    for( i = RFAL_NFCA_SEL_CASCADE_L1; i <= cl; i++ )
 800c672:	7ffb      	ldrb	r3, [r7, #31]
 800c674:	3301      	adds	r3, #1
 800c676:	77fb      	strb	r3, [r7, #31]
 800c678:	7ffa      	ldrb	r2, [r7, #31]
 800c67a:	7f7b      	ldrb	r3, [r7, #29]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d9b2      	bls.n	800c5e6 <rfalNfcaPollerSelect+0x3a>
        }
    }
    
    /* REMARK: Could check if NFCID1 is complete */
    
    return ERR_NONE;
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	3720      	adds	r7, #32
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	cccccccd 	.word	0xcccccccd

0800c690 <rfalNfcaPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcaPollerSleep( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b086      	sub	sp, #24
 800c694:	af04      	add	r7, sp, #16
    rfalNfcaSlpReq slpReq;
    uint8_t        rxBuf;    /* dummy buffer, just to perform Rx */
    
    slpReq.frame[RFAL_NFCA_SLP_CMD_POS]   = RFAL_NFCA_SLP_CMD;
 800c696:	2350      	movs	r3, #80	; 0x50
 800c698:	713b      	strb	r3, [r7, #4]
    slpReq.frame[RFAL_NFCA_SLP_BYTE2_POS] = RFAL_NFCA_SLP_BYTE2;
 800c69a:	2300      	movs	r3, #0
 800c69c:	717b      	strb	r3, [r7, #5]
    
    rfalTransceiveBlockingTxRx( (uint8_t*)&slpReq, sizeof(rfalNfcaSlpReq), &rxBuf, sizeof(rxBuf), NULL, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCA_SLP_FWT );
 800c69e:	1cfa      	adds	r2, r7, #3
 800c6a0:	1d38      	adds	r0, r7, #4
 800c6a2:	f243 43f8 	movw	r3, #13560	; 0x34f8
 800c6a6:	9302      	str	r3, [sp, #8]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	f001 fdf8 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
    /* ISO14443-3 6.4.3  HLTA - If PICC responds with any modulation during 1 ms this response shall be interpreted as not acknowledge 
       Digital 2.0  6.9.2.1 & EMVCo 3.0  5.6.2.1 - consider the HLTA command always acknowledged
       No check to be compliant with NFC and EMVCo, and to improve interoprability (Kovio RFID Tag)
    */
    
    return ERR_NONE;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <rfalNfcbCheckSensbRes>:
******************************************************************************
*/

/*******************************************************************************/
static ReturnCode rfalNfcbCheckSensbRes( const rfalNfcbSensbRes *sensbRes, uint8_t sensbResLen )
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	70fb      	strb	r3, [r7, #3]
    /* Check response length */
    if( ( (sensbResLen != RFAL_NFCB_SENSB_RES_LEN) && (sensbResLen != RFAL_NFCB_SENSB_RES_EXT_LEN) ) )
 800c6ce:	78fb      	ldrb	r3, [r7, #3]
 800c6d0:	2b0c      	cmp	r3, #12
 800c6d2:	d004      	beq.n	800c6de <rfalNfcbCheckSensbRes+0x1c>
 800c6d4:	78fb      	ldrb	r3, [r7, #3]
 800c6d6:	2b0d      	cmp	r3, #13
 800c6d8:	d001      	beq.n	800c6de <rfalNfcbCheckSensbRes+0x1c>
    {
        return ERR_PROTO;
 800c6da:	230b      	movs	r3, #11
 800c6dc:	e00c      	b.n	800c6f8 <rfalNfcbCheckSensbRes+0x36>
    }
    
    /* Check SENSB_RES and Protocol Type   Digital 1.1 7.6.2.19 */
    if( ((sensbRes->protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROT_TYPE_RFU) != 0U) || (sensbRes->cmd != (uint8_t)RFAL_NFCB_CMD_SENSB_RES) )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	7a9b      	ldrb	r3, [r3, #10]
 800c6e2:	f003 0308 	and.w	r3, r3, #8
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d103      	bne.n	800c6f2 <rfalNfcbCheckSensbRes+0x30>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2b50      	cmp	r3, #80	; 0x50
 800c6f0:	d001      	beq.n	800c6f6 <rfalNfcbCheckSensbRes+0x34>
    {
        return ERR_PROTO;
 800c6f2:	230b      	movs	r3, #11
 800c6f4:	e000      	b.n	800c6f8 <rfalNfcbCheckSensbRes+0x36>
    }
    return ERR_NONE;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <rfalNfcbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcbPollerInitialize( void )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCB, RFAL_BR_106, RFAL_BR_106 ) );
 800c70a:	2200      	movs	r2, #0
 800c70c:	2100      	movs	r1, #0
 800c70e:	2003      	movs	r0, #3
 800c710:	f000 ff96 	bl	800d640 <rfalSetMode>
 800c714:	4603      	mov	r3, r0
 800c716:	80fb      	strh	r3, [r7, #6]
 800c718:	88fb      	ldrh	r3, [r7, #6]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <rfalNfcbPollerInitialize+0x1e>
 800c71e:	88fb      	ldrh	r3, [r7, #6]
 800c720:	e014      	b.n	800c74c <rfalNfcbPollerInitialize+0x48>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800c722:	2001      	movs	r0, #1
 800c724:	f001 fb26 	bl	800dd74 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCB );
 800c728:	480a      	ldr	r0, [pc, #40]	; (800c754 <rfalNfcbPollerInitialize+0x50>)
 800c72a:	f001 fb5d 	bl	800dde8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCB_POLLER );
 800c72e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 800c732:	f001 fb45 	bl	800ddc0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCB_POLLER );
 800c736:	f641 207c 	movw	r0, #6780	; 0x1a7c
 800c73a:	f001 fb2b 	bl	800dd94 <rfalSetFDTPoll>
    
    gRfalNfcb.AFI    = RFAL_NFCB_AFI;
 800c73e:	4b06      	ldr	r3, [pc, #24]	; (800c758 <rfalNfcbPollerInitialize+0x54>)
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
    gRfalNfcb.PARAM  = RFAL_NFCB_PARAM;
 800c744:	4b04      	ldr	r3, [pc, #16]	; (800c758 <rfalNfcbPollerInitialize+0x54>)
 800c746:	2200      	movs	r2, #0
 800c748:	705a      	strb	r2, [r3, #1]
    
    return ERR_NONE;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	000108d8 	.word	0x000108d8
 800c758:	20000860 	.word	0x20000860

0800c75c <rfalNfcbPollerCheckPresence>:
}


/*******************************************************************************/
ReturnCode rfalNfcbPollerCheckPresence( rfalNfcbSensCmd cmd, rfalNfcbSlots slots, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08a      	sub	sp, #40	; 0x28
 800c760:	af04      	add	r7, sp, #16
 800c762:	60ba      	str	r2, [r7, #8]
 800c764:	607b      	str	r3, [r7, #4]
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
 800c76a:	460b      	mov	r3, r1
 800c76c:	73bb      	strb	r3, [r7, #14]
    ReturnCode       ret;
    rfalNfcbSensbReq sensbReq;
    

    /* Check if the command requested and given the slot number are valid */
    if( ((RFAL_NFCB_SENS_CMD_SENSB_REQ != cmd) && (RFAL_NFCB_SENS_CMD_ALLB_REQ != cmd)) ||
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <rfalNfcbPollerCheckPresence+0x1e>
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	2b08      	cmp	r3, #8
 800c778:	d108      	bne.n	800c78c <rfalNfcbPollerCheckPresence+0x30>
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d805      	bhi.n	800c78c <rfalNfcbPollerCheckPresence+0x30>
        (slots > RFAL_NFCB_SLOT_NUM_16) || (sensbRes == NULL) || (sensbResLen == NULL)    )
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <rfalNfcbPollerCheckPresence+0x30>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <rfalNfcbPollerCheckPresence+0x34>
    {
        return ERR_PARAM;
 800c78c:	2307      	movs	r3, #7
 800c78e:	e044      	b.n	800c81a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    *sensbResLen = 0;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	701a      	strb	r2, [r3, #0]
    ST_MEMSET(sensbRes, 0x00, sizeof(rfalNfcbSensbRes) );
 800c796:	220d      	movs	r2, #13
 800c798:	2100      	movs	r1, #0
 800c79a:	68b8      	ldr	r0, [r7, #8]
 800c79c:	f003 fd9b 	bl	80102d6 <memset>
    
    /* Compute SENSB_REQ */
    sensbReq.cmd   = RFAL_NFCB_CMD_SENSB_REQ;
 800c7a0:	2305      	movs	r3, #5
 800c7a2:	743b      	strb	r3, [r7, #16]
    sensbReq.AFI   = gRfalNfcb.AFI;
 800c7a4:	4b1f      	ldr	r3, [pc, #124]	; (800c824 <rfalNfcbPollerCheckPresence+0xc8>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	747b      	strb	r3, [r7, #17]
    sensbReq.PARAM = (((uint8_t)gRfalNfcb.PARAM & RFAL_NFCB_SENSB_REQ_PARAM) | (uint8_t)cmd | (uint8_t)slots);
 800c7aa:	4b1e      	ldr	r3, [pc, #120]	; (800c824 <rfalNfcbPollerCheckPresence+0xc8>)
 800c7ac:	785b      	ldrb	r3, [r3, #1]
 800c7ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	74bb      	strb	r3, [r7, #18]
    
    /* Send SENSB_REQ and disable AGC to detect collisions */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&sensbReq, sizeof(rfalNfcbSensbReq), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_FWTSENSB );
 800c7c2:	f107 0010 	add.w	r0, r7, #16
 800c7c6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800c7ca:	9302      	str	r3, [sp, #8]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	f107 0314 	add.w	r3, r7, #20
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	230d      	movs	r3, #13
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	2103      	movs	r1, #3
 800c7dc:	f001 fd64 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 800c7e4:	8abb      	ldrh	r3, [r7, #20]
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	701a      	strb	r2, [r3, #0]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800c7ec:	8afb      	ldrh	r3, [r7, #22]
 800c7ee:	2b15      	cmp	r3, #21
 800c7f0:	d002      	beq.n	800c7f8 <rfalNfcbPollerCheckPresence+0x9c>
 800c7f2:	8afb      	ldrh	r3, [r7, #22]
 800c7f4:	2b09      	cmp	r3, #9
 800c7f6:	d104      	bne.n	800c802 <rfalNfcbPollerCheckPresence+0xa6>
    {
        /* Invalidate received frame as an error was detected (CollisionResolution checks if valid) */
        *sensbResLen = 0;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
        return ERR_NONE;
 800c7fe:	2300      	movs	r3, #0
 800c800:	e00b      	b.n	800c81a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    if( ret == ERR_NONE )
 800c802:	8afb      	ldrh	r3, [r7, #22]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d107      	bne.n	800c818 <rfalNfcbPollerCheckPresence+0xbc>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	4619      	mov	r1, r3
 800c80e:	68b8      	ldr	r0, [r7, #8]
 800c810:	f7ff ff57 	bl	800c6c2 <rfalNfcbCheckSensbRes>
 800c814:	4603      	mov	r3, r0
 800c816:	e000      	b.n	800c81a <rfalNfcbPollerCheckPresence+0xbe>
    }
    
    return ret;
 800c818:	8afb      	ldrh	r3, [r7, #22]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3718      	adds	r7, #24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	20000860 	.word	0x20000860

0800c828 <rfalNfcbPollerSleep>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSleep( const uint8_t* nfcid0 )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08a      	sub	sp, #40	; 0x28
 800c82c:	af04      	add	r7, sp, #16
 800c82e:	6078      	str	r0, [r7, #4]
    uint16_t        rxLen;
    ReturnCode      ret;
    rfalNfcbSlpbReq slpbReq;
    rfalNfcbSlpbRes slpbRes;
    
    if( nfcid0 == NULL )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d101      	bne.n	800c83a <rfalNfcbPollerSleep+0x12>
    {
        return ERR_PARAM;
 800c836:	2307      	movs	r3, #7
 800c838:	e024      	b.n	800c884 <rfalNfcbPollerSleep+0x5c>
    }
    
    /* Compute SLPB_REQ */
    slpbReq.cmd = RFAL_NFCB_CMD_SLPB_REQ;
 800c83a:	2350      	movs	r3, #80	; 0x50
 800c83c:	733b      	strb	r3, [r7, #12]
    ST_MEMCPY( slpbReq.nfcid0, nfcid0, RFAL_NFCB_NFCID0_LEN );
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f8c7 300d 	str.w	r3, [r7, #13]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&slpbReq, sizeof(rfalNfcbSlpbReq), (uint8_t*)&slpbRes, sizeof(rfalNfcbSlpbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT ));
 800c846:	f107 0208 	add.w	r2, r7, #8
 800c84a:	f107 000c 	add.w	r0, r7, #12
 800c84e:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <rfalNfcbPollerSleep+0x64>)
 800c850:	9302      	str	r3, [sp, #8]
 800c852:	2300      	movs	r3, #0
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	f107 0314 	add.w	r3, r7, #20
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	2301      	movs	r3, #1
 800c85e:	2105      	movs	r1, #5
 800c860:	f001 fd22 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800c864:	4603      	mov	r3, r0
 800c866:	82fb      	strh	r3, [r7, #22]
 800c868:	8afb      	ldrh	r3, [r7, #22]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <rfalNfcbPollerSleep+0x4a>
 800c86e:	8afb      	ldrh	r3, [r7, #22]
 800c870:	e008      	b.n	800c884 <rfalNfcbPollerSleep+0x5c>
    
    /* Check SLPB_RES */
    if( (rxLen != sizeof(rfalNfcbSlpbRes)) || (slpbRes.cmd != (uint8_t)RFAL_NFCB_CMD_SLPB_RES) )
 800c872:	8abb      	ldrh	r3, [r7, #20]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d102      	bne.n	800c87e <rfalNfcbPollerSleep+0x56>
 800c878:	7a3b      	ldrb	r3, [r7, #8]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d001      	beq.n	800c882 <rfalNfcbPollerSleep+0x5a>
    {
        return ERR_PROTO;
 800c87e:	230b      	movs	r3, #11
 800c880:	e000      	b.n	800c884 <rfalNfcbPollerSleep+0x5c>
    }
    return ERR_NONE;
 800c882:	2300      	movs	r3, #0
}
 800c884:	4618      	mov	r0, r3
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	0003a278 	.word	0x0003a278

0800c890 <rfalNfcbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlotMarker( uint8_t slotCode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b08a      	sub	sp, #40	; 0x28
 800c894:	af04      	add	r7, sp, #16
 800c896:	4603      	mov	r3, r0
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	73fb      	strb	r3, [r7, #15]
    ReturnCode         ret;
    rfalNfcbSlotMarker slotMarker;
    uint16_t           rxLen;
    
    /* Check parameters */
    if( (sensbRes == NULL) || (sensbResLen == NULL)    || 
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d008      	beq.n	800c8b6 <rfalNfcbPollerSlotMarker+0x26>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d005      	beq.n	800c8b6 <rfalNfcbPollerSlotMarker+0x26>
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <rfalNfcbPollerSlotMarker+0x26>
        (slotCode < RFAL_NFCB_SLOTMARKER_SLOTCODE_MIN) || 
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b10      	cmp	r3, #16
 800c8b4:	d901      	bls.n	800c8ba <rfalNfcbPollerSlotMarker+0x2a>
        (slotCode > RFAL_NFCB_SLOTMARKER_SLOTCODE_MAX)   )
    {
        return ERR_PARAM;
 800c8b6:	2307      	movs	r3, #7
 800c8b8:	e02f      	b.n	800c91a <rfalNfcbPollerSlotMarker+0x8a>
    }
    /* Compose and send SLOT_MARKER with disabled AGC to detect collisions  */
    slotMarker.APn = ((slotCode << RFAL_NFCB_SLOT_MARKER_SC_SHIFT) | (uint8_t)RFAL_NFCB_CMD_SENSB_REQ);
 800c8ba:	7bfb      	ldrb	r3, [r7, #15]
 800c8bc:	011b      	lsls	r3, r3, #4
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	f043 0305 	orr.w	r3, r3, #5
 800c8c4:	b25b      	sxtb	r3, r3
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	753b      	strb	r3, [r7, #20]
    
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, sizeof(rfalNfcbSlotMarker), (uint8_t*)sensbRes, sizeof(rfalNfcbSensbRes), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_NFCB_ACTIVATION_FWT );
 800c8ca:	f107 0014 	add.w	r0, r7, #20
 800c8ce:	4b15      	ldr	r3, [pc, #84]	; (800c924 <rfalNfcbPollerSlotMarker+0x94>)
 800c8d0:	9302      	str	r3, [sp, #8]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	f107 0312 	add.w	r3, r7, #18
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	230d      	movs	r3, #13
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	f001 fce1 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	82fb      	strh	r3, [r7, #22]
    
    *sensbResLen = (uint8_t)rxLen;
 800c8ea:	8a7b      	ldrh	r3, [r7, #18]
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	701a      	strb	r2, [r3, #0]
    
    /* Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800c8f2:	8afb      	ldrh	r3, [r7, #22]
 800c8f4:	2b15      	cmp	r3, #21
 800c8f6:	d002      	beq.n	800c8fe <rfalNfcbPollerSlotMarker+0x6e>
 800c8f8:	8afb      	ldrh	r3, [r7, #22]
 800c8fa:	2b09      	cmp	r3, #9
 800c8fc:	d101      	bne.n	800c902 <rfalNfcbPollerSlotMarker+0x72>
    {
        return ERR_RF_COLLISION;
 800c8fe:	231d      	movs	r3, #29
 800c900:	e00b      	b.n	800c91a <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    if( ret == ERR_NONE )
 800c902:	8afb      	ldrh	r3, [r7, #22]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d107      	bne.n	800c918 <rfalNfcbPollerSlotMarker+0x88>
    {
        return rfalNfcbCheckSensbRes( sensbRes, *sensbResLen );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	4619      	mov	r1, r3
 800c90e:	68b8      	ldr	r0, [r7, #8]
 800c910:	f7ff fed7 	bl	800c6c2 <rfalNfcbCheckSensbRes>
 800c914:	4603      	mov	r3, r0
 800c916:	e000      	b.n	800c91a <rfalNfcbPollerSlotMarker+0x8a>
    }
    
    return ret;
 800c918:	8afb      	ldrh	r3, [r7, #22]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0003a278 	.word	0x0003a278

0800c928 <rfalNfcbPollerTechnologyDetection>:


ReturnCode rfalNfcbPollerTechnologyDetection( rfalComplianceMode compMode, rfalNfcbSensbRes *sensbRes, uint8_t *sensbResLen )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	73fb      	strb	r3, [r7, #15]
    NO_WARNING(compMode);
    
    return rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, RFAL_NFCB_SLOT_NUM_1, sensbRes, sensbResLen );
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	2100      	movs	r1, #0
 800c93c:	2000      	movs	r0, #0
 800c93e:	f7ff ff0d 	bl	800c75c <rfalNfcbPollerCheckPresence>
 800c942:	4603      	mov	r3, r0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <rfalNfcbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08a      	sub	sp, #40	; 0x28
 800c950:	af04      	add	r7, sp, #16
 800c952:	60ba      	str	r2, [r7, #8]
 800c954:	607b      	str	r3, [r7, #4]
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]
 800c95a:	460b      	mov	r3, r1
 800c95c:	73bb      	strb	r3, [r7, #14]
    bool colPending; /* dummy */
    return rfalNfcbPollerSlottedCollisionResolution( compMode, devLimit, RFAL_NFCB_SLOT_NUM_1, RFAL_NFCB_SLOT_NUM_16, nfcbDevList, devCnt, &colPending );
 800c95e:	7bb9      	ldrb	r1, [r7, #14]
 800c960:	7bf8      	ldrb	r0, [r7, #15]
 800c962:	f107 0317 	add.w	r3, r7, #23
 800c966:	9302      	str	r3, [sp, #8]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	9301      	str	r3, [sp, #4]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2304      	movs	r3, #4
 800c972:	2200      	movs	r2, #0
 800c974:	f000 f805 	bl	800c982 <rfalNfcbPollerSlottedCollisionResolution>
 800c978:	4603      	mov	r3, r0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <rfalNfcbPollerSlottedCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcbPollerSlottedCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcbSlots initSlots, rfalNfcbSlots endSlots, rfalNfcbListenDevice *nfcbDevList, uint8_t *devCnt, bool *colPending )
{
 800c982:	b590      	push	{r4, r7, lr}
 800c984:	b085      	sub	sp, #20
 800c986:	af00      	add	r7, sp, #0
 800c988:	4604      	mov	r4, r0
 800c98a:	4608      	mov	r0, r1
 800c98c:	4611      	mov	r1, r2
 800c98e:	461a      	mov	r2, r3
 800c990:	4623      	mov	r3, r4
 800c992:	71fb      	strb	r3, [r7, #7]
 800c994:	4603      	mov	r3, r0
 800c996:	71bb      	strb	r3, [r7, #6]
 800c998:	460b      	mov	r3, r1
 800c99a:	717b      	strb	r3, [r7, #5]
 800c99c:	4613      	mov	r3, r2
 800c99e:	713b      	strb	r3, [r7, #4]
        uint8_t       slotCode;
        uint8_t       curDevCnt;
        
        
        /* Check parameters. In ISO | Activity 1.0 mode the initial slots must be 1 as continuation of Technology Detection */
        if( (nfcbDevList == NULL) || (devCnt == NULL)  || (colPending == NULL) || (initSlots > RFAL_NFCB_SLOT_NUM_16) || 
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d011      	beq.n	800c9ca <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00e      	beq.n	800c9ca <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00b      	beq.n	800c9ca <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c9b2:	797b      	ldrb	r3, [r7, #5]
 800c9b4:	2b04      	cmp	r3, #4
 800c9b6:	d808      	bhi.n	800c9ca <rfalNfcbPollerSlottedCollisionResolution+0x48>
 800c9b8:	793b      	ldrb	r3, [r7, #4]
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	d805      	bhi.n	800c9ca <rfalNfcbPollerSlottedCollisionResolution+0x48>
            (endSlots > RFAL_NFCB_SLOT_NUM_16) || ((compMode == RFAL_COMPLIANCE_MODE_ISO) && (initSlots != RFAL_NFCB_SLOT_NUM_1)) )
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d104      	bne.n	800c9ce <rfalNfcbPollerSlottedCollisionResolution+0x4c>
 800c9c4:	797b      	ldrb	r3, [r7, #5]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <rfalNfcbPollerSlottedCollisionResolution+0x4c>
        {
            return ERR_PARAM;
 800c9ca:	2307      	movs	r3, #7
 800c9cc:	e14c      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        /* Initialise as no error in case Activity 1.0 where the previous SENSB_RES from technology detection should be used */
        ret         = ERR_NONE;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	81fb      	strh	r3, [r7, #14]
        *devCnt     = 0;
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	701a      	strb	r2, [r3, #0]
        curDevCnt   = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	72fb      	strb	r3, [r7, #11]
        *colPending = false;
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
           
        
        /* Send ALLB_REQ   Activity 1.1   9.3.5.2 and 9.3.5.3  (Symbol 1 and 2) */
        if( compMode != RFAL_COMPLIANCE_MODE_ISO )
 800c9e2:	79fb      	ldrb	r3, [r7, #7]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d010      	beq.n	800ca0a <rfalNfcbPollerSlottedCollisionResolution+0x88>
        {
           ret =  rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_ALLB_REQ, initSlots, &nfcbDevList->sensbRes, &nfcbDevList->sensbResLen );
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	7979      	ldrb	r1, [r7, #5]
 800c9f0:	2008      	movs	r0, #8
 800c9f2:	f7ff feb3 	bl	800c75c <rfalNfcbPollerCheckPresence>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	81fb      	strh	r3, [r7, #14]
           if( (ret != ERR_NONE) && (initSlots == RFAL_NFCB_SLOT_NUM_1) )
 800c9fa:	89fb      	ldrh	r3, [r7, #14]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d004      	beq.n	800ca0a <rfalNfcbPollerSlottedCollisionResolution+0x88>
 800ca00:	797b      	ldrb	r3, [r7, #5]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <rfalNfcbPollerSlottedCollisionResolution+0x88>
           {
               return ret;
 800ca06:	89fb      	ldrh	r3, [r7, #14]
 800ca08:	e12e      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
           }
        }

        
        /* Check if there was a transmission error on WUPB  EMVCo 2.6  9.3.3.1 */
        if( (compMode == RFAL_COMPLIANCE_MODE_EMV) && (nfcbDevList->sensbResLen == 0U) )
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d105      	bne.n	800ca1c <rfalNfcbPollerSlottedCollisionResolution+0x9a>
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <rfalNfcbPollerSlottedCollisionResolution+0x9a>
        {
            return ERR_FRAMING;
 800ca18:	2309      	movs	r3, #9
 800ca1a:	e125      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
        }
        
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800ca1c:	797b      	ldrb	r3, [r7, #5]
 800ca1e:	737b      	strb	r3, [r7, #13]
 800ca20:	e11c      	b.n	800cc5c <rfalNfcbPollerSlottedCollisionResolution+0x2da>
        {
            do {
                /* Activity 1.1  9.3.5.23  -  Symbol 22 */
                if( (compMode == RFAL_COMPLIANCE_MODE_NFC) && (curDevCnt != 0U) )
 800ca22:	79fb      	ldrb	r3, [r7, #7]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d11a      	bne.n	800ca5e <rfalNfcbPollerSlottedCollisionResolution+0xdc>
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d017      	beq.n	800ca5e <rfalNfcbPollerSlottedCollisionResolution+0xdc>
                {
                    rfalNfcbPollerSleep( nfcbDevList[(*devCnt-1U)].sensbRes.nfcid0 );
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	461a      	mov	r2, r3
 800ca34:	4613      	mov	r3, r2
 800ca36:	011b      	lsls	r3, r3, #4
 800ca38:	1a9b      	subs	r3, r3, r2
 800ca3a:	3b0f      	subs	r3, #15
 800ca3c:	6a3a      	ldr	r2, [r7, #32]
 800ca3e:	4413      	add	r3, r2
 800ca40:	3302      	adds	r3, #2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7ff fef0 	bl	800c828 <rfalNfcbPollerSleep>
                    nfcbDevList[(*devCnt-1U)].isSleep = true;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	4613      	mov	r3, r2
 800ca50:	011b      	lsls	r3, r3, #4
 800ca52:	1a9b      	subs	r3, r3, r2
 800ca54:	3b0f      	subs	r3, #15
 800ca56:	6a3a      	ldr	r2, [r7, #32]
 800ca58:	4413      	add	r3, r2
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	739a      	strb	r2, [r3, #14]
                }
                
                /* Send SENSB_REQ with number of slots if not the first Activity 1.1  9.3.5.24  -  Symbol 23 */
                if( (slotsNum != (uint8_t)initSlots) || *colPending )
 800ca5e:	7b7a      	ldrb	r2, [r7, #13]
 800ca60:	797b      	ldrb	r3, [r7, #5]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d103      	bne.n	800ca6e <rfalNfcbPollerSlottedCollisionResolution+0xec>
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d017      	beq.n	800ca9e <rfalNfcbPollerSlottedCollisionResolution+0x11c>
                {
                    /* PRQA S 4342 1 # MISRA 10.5 - Layout of rfalNfcbSlots and above loop guarantee that no invalid enum values are created. */
                    ret = rfalNfcbPollerCheckPresence( RFAL_NFCB_SENS_CMD_SENSB_REQ, (rfalNfcbSlots)slotsNum, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	461a      	mov	r2, r3
 800ca74:	4613      	mov	r3, r2
 800ca76:	011b      	lsls	r3, r3, #4
 800ca78:	1a9b      	subs	r3, r3, r2
 800ca7a:	6a3a      	ldr	r2, [r7, #32]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	1c58      	adds	r0, r3, #1
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	4613      	mov	r3, r2
 800ca88:	011b      	lsls	r3, r3, #4
 800ca8a:	1a9b      	subs	r3, r3, r2
 800ca8c:	6a3a      	ldr	r2, [r7, #32]
 800ca8e:	4413      	add	r3, r2
 800ca90:	7b79      	ldrb	r1, [r7, #13]
 800ca92:	4602      	mov	r2, r0
 800ca94:	2000      	movs	r0, #0
 800ca96:	f7ff fe61 	bl	800c75c <rfalNfcbPollerCheckPresence>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	81fb      	strh	r3, [r7, #14]
                }
                
                /* Activity 1.1  9.3.5.6  -  Symbol 5 */
                slotCode    = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	733b      	strb	r3, [r7, #12]
                curDevCnt   = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	72fb      	strb	r3, [r7, #11]
                *colPending = false;
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	2200      	movs	r2, #0
 800caaa:	701a      	strb	r2, [r3, #0]

                do{
                    /* Activity 1.1  9.3.5.26  -  Symbol 25 */
                    if( slotCode != 0U )
 800caac:	7b3b      	ldrb	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d017      	beq.n	800cae2 <rfalNfcbPollerSlottedCollisionResolution+0x160>
                    {
                        ret = rfalNfcbPollerSlotMarker( slotCode, &nfcbDevList[*devCnt].sensbRes, &nfcbDevList[*devCnt].sensbResLen );
 800cab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	4613      	mov	r3, r2
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	1a9b      	subs	r3, r3, r2
 800cabe:	6a3a      	ldr	r2, [r7, #32]
 800cac0:	4413      	add	r3, r2
 800cac2:	1c59      	adds	r1, r3, #1
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	461a      	mov	r2, r3
 800caca:	4613      	mov	r3, r2
 800cacc:	011b      	lsls	r3, r3, #4
 800cace:	1a9b      	subs	r3, r3, r2
 800cad0:	6a3a      	ldr	r2, [r7, #32]
 800cad2:	4413      	add	r3, r2
 800cad4:	461a      	mov	r2, r3
 800cad6:	7b3b      	ldrb	r3, [r7, #12]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff fed9 	bl	800c890 <rfalNfcbPollerSlotMarker>
 800cade:	4603      	mov	r3, r0
 800cae0:	81fb      	strh	r3, [r7, #14]
                    }
                    
                    /* Activity 1.1  9.3.5.7 and 9.3.5.8  -  Symbol 6 */
                    if( ret != ERR_TIMEOUT )
 800cae2:	89fb      	ldrh	r3, [r7, #14]
 800cae4:	2b04      	cmp	r3, #4
 800cae6:	f000 809d 	beq.w	800cc24 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                    {
                        /* Activity 1.1  9.3.5.8  -  Symbol 7 */
                        if( (rfalNfcbCheckSensbRes( &nfcbDevList[*devCnt].sensbRes, nfcbDevList[*devCnt].sensbResLen) == ERR_NONE) && (ret == ERR_NONE) )
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	4613      	mov	r3, r2
 800caf2:	011b      	lsls	r3, r3, #4
 800caf4:	1a9b      	subs	r3, r3, r2
 800caf6:	6a3a      	ldr	r2, [r7, #32]
 800caf8:	4413      	add	r3, r2
 800cafa:	1c58      	adds	r0, r3, #1
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	4613      	mov	r3, r2
 800cb04:	011b      	lsls	r3, r3, #4
 800cb06:	1a9b      	subs	r3, r3, r2
 800cb08:	6a3a      	ldr	r2, [r7, #32]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	f7ff fdd7 	bl	800c6c2 <rfalNfcbCheckSensbRes>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d177      	bne.n	800cc0a <rfalNfcbPollerSlottedCollisionResolution+0x288>
 800cb1a:	89fb      	ldrh	r3, [r7, #14]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d174      	bne.n	800cc0a <rfalNfcbPollerSlottedCollisionResolution+0x288>
                        {
                            nfcbDevList[*devCnt].isSleep = false;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	461a      	mov	r2, r3
 800cb26:	4613      	mov	r3, r2
 800cb28:	011b      	lsls	r3, r3, #4
 800cb2a:	1a9b      	subs	r3, r3, r2
 800cb2c:	6a3a      	ldr	r2, [r7, #32]
 800cb2e:	4413      	add	r3, r2
 800cb30:	2200      	movs	r2, #0
 800cb32:	739a      	strb	r2, [r3, #14]
                            
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800cb34:	79fb      	ldrb	r3, [r7, #7]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d107      	bne.n	800cb4a <rfalNfcbPollerSlottedCollisionResolution+0x1c8>
                            {
                                (*devCnt)++;
 800cb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	701a      	strb	r2, [r3, #0]
                                return ret;
 800cb46:	89fb      	ldrh	r3, [r7, #14]
 800cb48:	e08e      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_ISO )
 800cb4a:	79fb      	ldrb	r3, [r7, #7]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d12b      	bne.n	800cba8 <rfalNfcbPollerSlottedCollisionResolution+0x226>
                            {
                                /* Activity 1.0  9.3.5.8  -  Symbol 7 */
                                (*devCnt)++;
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800cb5c:	7afb      	ldrb	r3, [r7, #11]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.0  9.3.5.10  -  Symbol 9 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	79ba      	ldrb	r2, [r7, #6]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d902      	bls.n	800cb72 <rfalNfcbPollerSlottedCollisionResolution+0x1f0>
 800cb6c:	7b7b      	ldrb	r3, [r7, #13]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <rfalNfcbPollerSlottedCollisionResolution+0x1f4>
                                {
                                    return ret;
 800cb72:	89fb      	ldrh	r3, [r7, #14]
 800cb74:	e078      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                                }

                                /* Activity 1.0  9.3.5.11  -  Symbol 10 */
                                rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	011b      	lsls	r3, r3, #4
 800cb80:	1a9b      	subs	r3, r3, r2
 800cb82:	3b0f      	subs	r3, #15
 800cb84:	6a3a      	ldr	r2, [r7, #32]
 800cb86:	4413      	add	r3, r2
 800cb88:	3302      	adds	r3, #2
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fe4c 	bl	800c828 <rfalNfcbPollerSleep>
                                nfcbDevList[*devCnt-1U].isSleep =  true;
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	4613      	mov	r3, r2
 800cb98:	011b      	lsls	r3, r3, #4
 800cb9a:	1a9b      	subs	r3, r3, r2
 800cb9c:	3b0f      	subs	r3, #15
 800cb9e:	6a3a      	ldr	r2, [r7, #32]
 800cba0:	4413      	add	r3, r2
 800cba2:	2201      	movs	r2, #1
 800cba4:	739a      	strb	r2, [r3, #14]
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800cba6:	e03c      	b.n	800cc22 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            }
                            else if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d139      	bne.n	800cc22 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                            {
                                /* Activity 1.1  9.3.5.10 and 9.3.5.11  -  Symbol 9 and Symbol 11*/
                                if(curDevCnt != 0U)
 800cbae:	7afb      	ldrb	r3, [r7, #11]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d017      	beq.n	800cbe4 <rfalNfcbPollerSlottedCollisionResolution+0x262>
                                {
                                    rfalNfcbPollerSleep( nfcbDevList[*devCnt-1U].sensbRes.nfcid0 );
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4613      	mov	r3, r2
 800cbbc:	011b      	lsls	r3, r3, #4
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	3b0f      	subs	r3, #15
 800cbc2:	6a3a      	ldr	r2, [r7, #32]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	3302      	adds	r3, #2
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7ff fe2d 	bl	800c828 <rfalNfcbPollerSleep>
                                    nfcbDevList[*devCnt-1U].isSleep = true;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	011b      	lsls	r3, r3, #4
 800cbd8:	1a9b      	subs	r3, r3, r2
 800cbda:	3b0f      	subs	r3, #15
 800cbdc:	6a3a      	ldr	r2, [r7, #32]
 800cbde:	4413      	add	r3, r2
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	739a      	strb	r2, [r3, #14]
                                }
                                
                                /* Activity 1.1  9.3.5.12  -  Symbol 11 */
                                (*devCnt)++;
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	701a      	strb	r2, [r3, #0]
                                curDevCnt++;
 800cbf0:	7afb      	ldrb	r3, [r7, #11]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	72fb      	strb	r3, [r7, #11]
                                
                                /* Activity 1.1  9.3.5.6  -  Symbol 13 */
                                if( (*devCnt >= devLimit) || (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	79ba      	ldrb	r2, [r7, #6]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d902      	bls.n	800cc06 <rfalNfcbPollerSlottedCollisionResolution+0x284>
 800cc00:	7b7b      	ldrb	r3, [r7, #13]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10d      	bne.n	800cc22 <rfalNfcbPollerSlottedCollisionResolution+0x2a0>
                                {
                                    return ret;
 800cc06:	89fb      	ldrh	r3, [r7, #14]
 800cc08:	e02e      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                        }
                        else
                        {
                            /* If deviceLimit is set to 0 the NFC Forum Device is configured to perform collision detection only  Activity 1.0 and 1.1  9.3.5.5  - Symbol 4 */
                            if( (devLimit == 0U) && (slotsNum == (uint8_t)RFAL_NFCB_SLOT_NUM_1) )
 800cc0a:	79bb      	ldrb	r3, [r7, #6]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d104      	bne.n	800cc1a <rfalNfcbPollerSlottedCollisionResolution+0x298>
 800cc10:	7b7b      	ldrb	r3, [r7, #13]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <rfalNfcbPollerSlottedCollisionResolution+0x298>
                            {
                                return ERR_RF_COLLISION;
 800cc16:	231d      	movs	r3, #29
 800cc18:	e026      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                            }
                            
                            /* Activity 1.1  9.3.5.9  -  Symbol 8 */
                            *colPending = true;
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	e000      	b.n	800cc24 <rfalNfcbPollerSlottedCollisionResolution+0x2a2>
                            if( compMode == RFAL_COMPLIANCE_MODE_EMV )
 800cc22:	bf00      	nop
                        }
                    }
                    
                    /* Activity 1.1  9.3.5.15  -  Symbol 14 */
                    slotCode++;
 800cc24:	7b3b      	ldrb	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	733b      	strb	r3, [r7, #12]
                }
                while( slotCode < rfalNfcbNI2NumberOfSlots(slotsNum) );
 800cc2a:	7b7b      	ldrb	r3, [r7, #13]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	7b3a      	ldrb	r2, [r7, #12]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	f4ff af38 	bcc.w	800caac <rfalNfcbPollerSlottedCollisionResolution+0x12a>
                
                /* Activity 1.1  9.3.5.17  -  Symbol 16 */
                if( !(*colPending) )
 800cc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	f083 0301 	eor.w	r3, r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <rfalNfcbPollerSlottedCollisionResolution+0x2cc>
                {
                    return ERR_NONE;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	e00c      	b.n	800cc68 <rfalNfcbPollerSlottedCollisionResolution+0x2e6>
                }
            
            /* Activity 1.1  9.3.5.18  -  Symbol 17 */
            } while (curDevCnt != 0U);     /* If a collision is detected and card(s) were found on this loop keep the same number of available slots */
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f47f aee6 	bne.w	800ca22 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        for( slotsNum = (uint8_t)initSlots; slotsNum <= (uint8_t)endSlots; slotsNum++ )
 800cc56:	7b7b      	ldrb	r3, [r7, #13]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	737b      	strb	r3, [r7, #13]
 800cc5c:	7b7a      	ldrb	r2, [r7, #13]
 800cc5e:	793b      	ldrb	r3, [r7, #4]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	f67f aede 	bls.w	800ca22 <rfalNfcbPollerSlottedCollisionResolution+0xa0>
        }
        
        return ERR_NONE;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd90      	pop	{r4, r7, pc}

0800cc70 <rfalNfcbTR2ToFDT>:


/*******************************************************************************/
uint32_t rfalNfcbTR2ToFDT( uint8_t tr2Code )
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
    /*******************************************************************************/
    /* MISRA 8.9 An object should be defined at block scope if its identifier only appears in a single function */
    /*! TR2 Table according to Digital 1.1 Table 33 */
    const uint16_t rfalNfcbTr2Table[] = { 1792, 3328, 5376, 9472 };
 800cc7a:	4a0b      	ldr	r2, [pc, #44]	; (800cca8 <rfalNfcbTR2ToFDT+0x38>)
 800cc7c:	f107 0308 	add.w	r3, r7, #8
 800cc80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc84:	e883 0003 	stmia.w	r3, {r0, r1}
    /*******************************************************************************/

    return rfalNfcbTr2Table[ (tr2Code & RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK) ];
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	f003 0303 	and.w	r3, r3, #3
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	f107 0210 	add.w	r2, r7, #16
 800cc94:	4413      	add	r3, r2
 800cc96:	f833 3c08 	ldrh.w	r3, [r3, #-8]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	08011514 	.word	0x08011514

0800ccac <rfalNfcfComputeValidSENF>:
******************************************************************************
*/

/*******************************************************************************/
static void rfalNfcfComputeValidSENF( rfalNfcfListenDevice *outDevInfo, uint8_t *curDevIdx, uint8_t devLimit, bool overwrite, bool *nfcDepFound )
{
 800ccac:	b5b0      	push	{r4, r5, r7, lr}
 800ccae:	b08c      	sub	sp, #48	; 0x30
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	461a      	mov	r2, r3
 800ccba:	460b      	mov	r3, r1
 800ccbc:	71fb      	strb	r3, [r7, #7]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	71bb      	strb	r3, [r7, #6]
    
    
    /*******************************************************************************/
    /* Go through all responses check if valid and duplicates                      */
    /*******************************************************************************/
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800ccc2:	e0e5      	b.n	800ce90 <rfalNfcfComputeValidSENF+0x1e4>
    {
        duplicate = false;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        gRfalNfcfGreedyF.pollFound--;
 800ccca:	4b78      	ldr	r3, [pc, #480]	; (800ceac <rfalNfcfComputeValidSENF+0x200>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	b2da      	uxtb	r2, r3
 800ccd2:	4b76      	ldr	r3, [pc, #472]	; (800ceac <rfalNfcfComputeValidSENF+0x200>)
 800ccd4:	701a      	strb	r2, [r3, #0]
        
        /* MISRA 11.3 - Cannot point directly into different object type, use local copy */
        ST_MEMCPY( (uint8_t*)&sensfCopy, (uint8_t*)&gRfalNfcfGreedyF.POLL_F[gRfalNfcfGreedyF.pollFound], sizeof(rfalNfcfSensfResBuf) );
 800ccd6:	4b75      	ldr	r3, [pc, #468]	; (800ceac <rfalNfcfComputeValidSENF+0x200>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4a71      	ldr	r2, [pc, #452]	; (800ceac <rfalNfcfComputeValidSENF+0x200>)
 800cce6:	4413      	add	r3, r2
 800cce8:	3302      	adds	r3, #2
 800ccea:	f107 0414 	add.w	r4, r7, #20
 800ccee:	461d      	mov	r5, r3
 800ccf0:	6828      	ldr	r0, [r5, #0]
 800ccf2:	6869      	ldr	r1, [r5, #4]
 800ccf4:	68aa      	ldr	r2, [r5, #8]
 800ccf6:	68eb      	ldr	r3, [r5, #12]
 800ccf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccfa:	8a2b      	ldrh	r3, [r5, #16]
 800ccfc:	7caa      	ldrb	r2, [r5, #18]
 800ccfe:	8023      	strh	r3, [r4, #0]
 800cd00:	4613      	mov	r3, r2
 800cd02:	70a3      	strb	r3, [r4, #2]
        
        
        /* Point to received SENSF_RES */
        sensfBuf = &sensfCopy;
 800cd04:	f107 0314 	add.w	r3, r7, #20
 800cd08:	62bb      	str	r3, [r7, #40]	; 0x28
        
        
        /* Check for devices that are already in device list */
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd10:	e01b      	b.n	800cd4a <rfalNfcfComputeValidSENF+0x9e>
        {
            if( ST_BYTECMP( sensfBuf->SENSF_RES.NFCID2, outDevInfo[tmpIdx].sensfRes.NFCID2, RFAL_NFCF_NFCID2_LEN ) == 0 )
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	1c98      	adds	r0, r3, #2
 800cd16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	4413      	add	r3, r2
 800cd20:	005b      	lsls	r3, r3, #1
 800cd22:	4413      	add	r3, r2
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4413      	add	r3, r2
 800cd28:	3302      	adds	r3, #2
 800cd2a:	2208      	movs	r2, #8
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	f003 fa9f 	bl	8010270 <memcmp>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <rfalNfcfComputeValidSENF+0x94>
            {
                duplicate = true;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                break;
 800cd3e:	e00a      	b.n	800cd56 <rfalNfcfComputeValidSENF+0xaa>
        for( tmpIdx = 0; tmpIdx < (*curDevIdx); tmpIdx++ )
 800cd40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd44:	3301      	adds	r3, #1
 800cd46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d3dd      	bcc.n	800cd12 <rfalNfcfComputeValidSENF+0x66>
            }
        }
        
        /* If is a duplicate skip this (and not to overwrite)*/        
        if(duplicate && !overwrite)
 800cd56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d006      	beq.n	800cd6c <rfalNfcfComputeValidSENF+0xc0>
 800cd5e:	79bb      	ldrb	r3, [r7, #6]
 800cd60:	f083 0301 	eor.w	r3, r3, #1
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d000      	beq.n	800cd6c <rfalNfcfComputeValidSENF+0xc0>
        {
            continue;
 800cd6a:	e091      	b.n	800ce90 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if response length is OK */
        if( (( sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) < RFAL_NFCF_SENSF_RES_LEN_MIN) || ((sensfBuf->LEN - RFAL_NFCF_HEADER_LEN) > RFAL_NFCF_SENSF_RES_LEN_MAX) )
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	3b02      	subs	r3, #2
 800cd72:	2b0f      	cmp	r3, #15
 800cd74:	f240 808c 	bls.w	800ce90 <rfalNfcfComputeValidSENF+0x1e4>
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	3b02      	subs	r3, #2
 800cd7e:	2b12      	cmp	r3, #18
 800cd80:	d900      	bls.n	800cd84 <rfalNfcfComputeValidSENF+0xd8>
        {
            continue;
 800cd82:	e085      	b.n	800ce90 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if the response is a SENSF_RES / Polling response */
        if( sensfBuf->SENSF_RES.CMD != (uint8_t)RFAL_NFCF_CMD_POLLING_RES )
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d000      	beq.n	800cd8e <rfalNfcfComputeValidSENF+0xe2>
        {
            continue;
 800cd8c:	e080      	b.n	800ce90 <rfalNfcfComputeValidSENF+0x1e4>
        }
        
        /* Check if is an overwrite request or new device*/
        if(duplicate && overwrite)
 800cd8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d02a      	beq.n	800cdec <rfalNfcfComputeValidSENF+0x140>
 800cd96:	79bb      	ldrb	r3, [r7, #6]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d027      	beq.n	800cdec <rfalNfcfComputeValidSENF+0x140>
        {
            /* overwrite deviceInfo/GRE_SENSF_RES with SENSF_RES */
            outDevInfo[tmpIdx].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	7819      	ldrb	r1, [r3, #0]
 800cda0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cda4:	4613      	mov	r3, r2
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	4413      	add	r3, r2
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	4413      	add	r3, r2
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	1e4a      	subs	r2, r1, #1
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[tmpIdx].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[tmpIdx].sensfResLen );
 800cdb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	00db      	lsls	r3, r3, #3
 800cdc0:	4413      	add	r3, r2
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	4413      	add	r3, r2
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	1c58      	adds	r0, r3, #1
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	1c59      	adds	r1, r3, #1
 800cdd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	4413      	add	r3, r2
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	4413      	add	r3, r2
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4413      	add	r3, r2
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
 800cde6:	f003 fa52 	bl	801028e <memcpy>
            continue;
 800cdea:	e051      	b.n	800ce90 <rfalNfcfComputeValidSENF+0x1e4>
        }
        else
        {
            /* fill deviceInfo/GRE_SENSF_RES with new SENSF_RES */
            outDevInfo[(*curDevIdx)].sensfResLen = (sensfBuf->LEN - RFAL_NFCF_LENGTH_LEN);
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	7819      	ldrb	r1, [r3, #0]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	4413      	add	r3, r2
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	4413      	add	r3, r2
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	4413      	add	r3, r2
 800ce04:	1e4a      	subs	r2, r1, #1
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	701a      	strb	r2, [r3, #0]
            ST_MEMCPY( &outDevInfo[(*curDevIdx)].sensfRes, &sensfBuf->SENSF_RES, outDevInfo[(*curDevIdx)].sensfResLen );            
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	4613      	mov	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	4413      	add	r3, r2
 800ce16:	005b      	lsls	r3, r3, #1
 800ce18:	4413      	add	r3, r2
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	1c58      	adds	r0, r3, #1
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	1c59      	adds	r1, r3, #1
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	4413      	add	r3, r2
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	4413      	add	r3, r2
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	4413      	add	r3, r2
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	f003 fa27 	bl	801028e <memcpy>
        }
        
        /* Check if this device supports NFC-DEP and signal it (ACTIVITY 1.1   9.3.6.63) */        
        *nfcDepFound = rfalNfcfIsNfcDepSupported( &outDevInfo[(*curDevIdx)] );
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	461a      	mov	r2, r3
 800ce46:	4613      	mov	r3, r2
 800ce48:	00db      	lsls	r3, r3, #3
 800ce4a:	4413      	add	r3, r2
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	4413      	add	r3, r2
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	4413      	add	r3, r2
 800ce54:	789b      	ldrb	r3, [r3, #2]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d10e      	bne.n	800ce78 <rfalNfcfComputeValidSENF+0x1cc>
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4613      	mov	r3, r2
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	4413      	add	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	78db      	ldrb	r3, [r3, #3]
 800ce70:	2bfe      	cmp	r3, #254	; 0xfe
 800ce72:	d101      	bne.n	800ce78 <rfalNfcfComputeValidSENF+0x1cc>
 800ce74:	2301      	movs	r3, #1
 800ce76:	e000      	b.n	800ce7a <rfalNfcfComputeValidSENF+0x1ce>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce82:	701a      	strb	r2, [r3, #0]
                
        (*curDevIdx)++;
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	701a      	strb	r2, [r3, #0]
    while( (gRfalNfcfGreedyF.pollFound > 0U) && ((*curDevIdx) < devLimit) )
 800ce90:	4b06      	ldr	r3, [pc, #24]	; (800ceac <rfalNfcfComputeValidSENF+0x200>)
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d005      	beq.n	800cea4 <rfalNfcfComputeValidSENF+0x1f8>
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	79fa      	ldrb	r2, [r7, #7]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	f63f af10 	bhi.w	800ccc4 <rfalNfcfComputeValidSENF+0x18>
    }
}
 800cea4:	bf00      	nop
 800cea6:	3730      	adds	r7, #48	; 0x30
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bdb0      	pop	{r4, r5, r7, pc}
 800ceac:	20000864 	.word	0x20000864

0800ceb0 <rfalNfcfPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcfPollerInitialize( rfalBitRate bitRate )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    
    if( (bitRate != RFAL_BR_212) && (bitRate != RFAL_BR_424) )
 800ceba:	79fb      	ldrb	r3, [r7, #7]
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d004      	beq.n	800ceca <rfalNfcfPollerInitialize+0x1a>
 800cec0:	79fb      	ldrb	r3, [r7, #7]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d001      	beq.n	800ceca <rfalNfcfPollerInitialize+0x1a>
    {
        return ERR_PARAM;
 800cec6:	2307      	movs	r3, #7
 800cec8:	e01b      	b.n	800cf02 <rfalNfcfPollerInitialize+0x52>
    }
    
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCF, bitRate, bitRate ) );
 800ceca:	79fa      	ldrb	r2, [r7, #7]
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	4619      	mov	r1, r3
 800ced0:	2006      	movs	r0, #6
 800ced2:	f000 fbb5 	bl	800d640 <rfalSetMode>
 800ced6:	4603      	mov	r3, r0
 800ced8:	81fb      	strh	r3, [r7, #14]
 800ceda:	89fb      	ldrh	r3, [r7, #14]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <rfalNfcfPollerInitialize+0x34>
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	e00e      	b.n	800cf02 <rfalNfcfPollerInitialize+0x52>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800cee4:	2001      	movs	r0, #1
 800cee6:	f000 ff45 	bl	800dd74 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCF );
 800ceea:	4808      	ldr	r0, [pc, #32]	; (800cf0c <rfalNfcfPollerInitialize+0x5c>)
 800ceec:	f000 ff7c 	bl	800dde8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCF_POLLER );
 800cef0:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 800cef4:	f000 ff64 	bl	800ddc0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCF_POLLER );
 800cef8:	f44f 6027 	mov.w	r0, #2672	; 0xa70
 800cefc:	f000 ff4a 	bl	800dd94 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	00042360 	.word	0x00042360

0800cf10 <rfalNfcfPollerPoll>:



/*******************************************************************************/
ReturnCode rfalNfcfPollerPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes *cardList, uint8_t *devCnt, uint8_t *collisions )
{
 800cf10:	b590      	push	{r4, r7, lr}
 800cf12:	b087      	sub	sp, #28
 800cf14:	af04      	add	r7, sp, #16
 800cf16:	603b      	str	r3, [r7, #0]
 800cf18:	4603      	mov	r3, r0
 800cf1a:	71fb      	strb	r3, [r7, #7]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	80bb      	strh	r3, [r7, #4]
 800cf20:	4613      	mov	r3, r2
 800cf22:	71bb      	strb	r3, [r7, #6]
    return rfalFeliCaPoll( slots, sysCode, reqCode, cardList, rfalNfcfSlots2CardNum(slots), devCnt, collisions );
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	3301      	adds	r3, #1
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	79bc      	ldrb	r4, [r7, #6]
 800cf2c:	88b9      	ldrh	r1, [r7, #4]
 800cf2e:	79f8      	ldrb	r0, [r7, #7]
 800cf30:	69fa      	ldr	r2, [r7, #28]
 800cf32:	9202      	str	r2, [sp, #8]
 800cf34:	69ba      	ldr	r2, [r7, #24]
 800cf36:	9201      	str	r2, [sp, #4]
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	f002 fbbd 	bl	800f6bc <rfalFeliCaPoll>
 800cf42:	4603      	mov	r3, r0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd90      	pop	{r4, r7, pc}

0800cf4c <rfalNfcfPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcfPollerCheckPresence( void )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af04      	add	r7, sp, #16
    gRfalNfcfGreedyF.pollFound     = 0;
 800cf52:	4b0b      	ldr	r3, [pc, #44]	; (800cf80 <rfalNfcfPollerCheckPresence+0x34>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	701a      	strb	r2, [r3, #0]
    gRfalNfcfGreedyF.pollCollision = 0;
 800cf58:	4b09      	ldr	r3, [pc, #36]	; (800cf80 <rfalNfcfPollerCheckPresence+0x34>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	705a      	strb	r2, [r3, #1]
        
    /* ACTIVITY 1.0 & 1.1 - 9.2.3.17 SENSF_REQ  must be with number of slots equal to 4
     *                                SC must be 0xFFFF
     *                                RC must be 0x00 (No system code info required) */
    return rfalFeliCaPoll( RFAL_FELICA_4_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, rfalNfcfSlots2CardNum(RFAL_FELICA_4_SLOTS), &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800cf5e:	4b09      	ldr	r3, [pc, #36]	; (800cf84 <rfalNfcfPollerCheckPresence+0x38>)
 800cf60:	9302      	str	r3, [sp, #8]
 800cf62:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <rfalNfcfPollerCheckPresence+0x34>)
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	2304      	movs	r3, #4
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	4b07      	ldr	r3, [pc, #28]	; (800cf88 <rfalNfcfPollerCheckPresence+0x3c>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cf72:	2003      	movs	r0, #3
 800cf74:	f002 fba2 	bl	800f6bc <rfalFeliCaPoll>
 800cf78:	4603      	mov	r3, r0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20000864 	.word	0x20000864
 800cf84:	20000865 	.word	0x20000865
 800cf88:	20000866 	.word	0x20000866

0800cf8c <rfalNfcfPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalNfcfPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcfListenDevice *nfcfDevList, uint8_t *devCnt )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b088      	sub	sp, #32
 800cf90:	af02      	add	r7, sp, #8
 800cf92:	60ba      	str	r2, [r7, #8]
 800cf94:	607b      	str	r3, [r7, #4]
 800cf96:	4603      	mov	r3, r0
 800cf98:	73fb      	strb	r3, [r7, #15]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	73bb      	strb	r3, [r7, #14]
    ReturnCode  ret;
    bool        nfcDepFound;
    
    if( (nfcfDevList == NULL) || (devCnt == NULL) )
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <rfalNfcfPollerCollisionResolution+0x1e>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <rfalNfcfPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800cfaa:	2307      	movs	r3, #7
 800cfac:	e053      	b.n	800d056 <rfalNfcfPollerCollisionResolution+0xca>
    }
            
    *devCnt      = 0;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	701a      	strb	r2, [r3, #0]
    nfcDepFound  = false;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	757b      	strb	r3, [r7, #21]
    /* ACTIVITY 1.1 - 9.3.63.59 Populate GRE_SENSF_RES with data from GRE_POLL_F               */
    /*                                                                                         */
    /* CON_DEVICES_LIMIT = 0 Just check if devices from Tech Detection exceeds -> always true  */
    /* Allow the number of slots open on Technology Detection                                  */
    /*******************************************************************************************/
    rfalNfcfComputeValidSENF( nfcfDevList, devCnt, ((devLimit == 0U) ? rfalNfcfSlots2CardNum( RFAL_FELICA_4_SLOTS ) : devLimit), false, &nfcDepFound );
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d001      	beq.n	800cfc2 <rfalNfcfPollerCollisionResolution+0x36>
 800cfbe:	7bba      	ldrb	r2, [r7, #14]
 800cfc0:	e000      	b.n	800cfc4 <rfalNfcfPollerCollisionResolution+0x38>
 800cfc2:	2204      	movs	r2, #4
 800cfc4:	f107 0315 	add.w	r3, r7, #21
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	6879      	ldr	r1, [r7, #4]
 800cfce:	68b8      	ldr	r0, [r7, #8]
 800cfd0:	f7ff fe6c 	bl	800ccac <rfalNfcfComputeValidSENF>
    /*******************************************************************************/
    /* ACTIVITY 1.0 - 9.3.6.4                                                      */
    /* ACTIVITY 1.1 - 9.3.63.60 Check if devices found are lower than the limit    */
    /* and send a SENSF_REQ if so                                                  */
    /*******************************************************************************/
    if( *devCnt < devLimit )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	7bba      	ldrb	r2, [r7, #14]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d93a      	bls.n	800d054 <rfalNfcfPollerCollisionResolution+0xc8>
    {
        /* ACTIVITY 1.0 - 9.3.6.5  Copy valid SENSF_RES and then to remove it
         * ACTIVITY 1.1 - 9.3.6.65 Copy and filter duplicates                                           
         * For now, due to some devices keep generating different nfcid2, we use 1.0  
         * Phones detected: Samsung Galaxy Nexus,Samsung Galaxy S3,Samsung Nexus S */
        *devCnt = 0;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	701a      	strb	r2, [r3, #0]
        
        ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_NO_REQUEST, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800cfe4:	4b1e      	ldr	r3, [pc, #120]	; (800d060 <rfalNfcfPollerCollisionResolution+0xd4>)
 800cfe6:	9301      	str	r3, [sp, #4]
 800cfe8:	4b1e      	ldr	r3, [pc, #120]	; (800d064 <rfalNfcfPollerCollisionResolution+0xd8>)
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	4b1e      	ldr	r3, [pc, #120]	; (800d068 <rfalNfcfPollerCollisionResolution+0xdc>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cff4:	200f      	movs	r0, #15
 800cff6:	f7ff ff8b 	bl	800cf10 <rfalNfcfPollerPoll>
 800cffa:	4603      	mov	r3, r0
 800cffc:	82fb      	strh	r3, [r7, #22]
        if( ret == ERR_NONE )
 800cffe:	8afb      	ldrh	r3, [r7, #22]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d108      	bne.n	800d016 <rfalNfcfPollerCollisionResolution+0x8a>
        {
            rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, false, &nfcDepFound );
 800d004:	7bba      	ldrb	r2, [r7, #14]
 800d006:	f107 0315 	add.w	r3, r7, #21
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	2300      	movs	r3, #0
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	68b8      	ldr	r0, [r7, #8]
 800d012:	f7ff fe4b 	bl	800ccac <rfalNfcfComputeValidSENF>
        }
      
      /*******************************************************************************/
      /* ACTIVITY 1.1 -  9.3.6.63 Check if any device supports NFC DEP               */
      /*******************************************************************************/
      if( nfcDepFound && (compMode == RFAL_COMPLIANCE_MODE_NFC) )
 800d016:	7d7b      	ldrb	r3, [r7, #21]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d01b      	beq.n	800d054 <rfalNfcfPollerCollisionResolution+0xc8>
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d118      	bne.n	800d054 <rfalNfcfPollerCollisionResolution+0xc8>
      {
          ret = rfalNfcfPollerPoll( RFAL_FELICA_16_SLOTS, RFAL_NFCF_SYSTEMCODE, RFAL_FELICA_POLL_RC_SYSTEM_CODE, gRfalNfcfGreedyF.POLL_F, &gRfalNfcfGreedyF.pollFound, &gRfalNfcfGreedyF.pollCollision );
 800d022:	4b0f      	ldr	r3, [pc, #60]	; (800d060 <rfalNfcfPollerCollisionResolution+0xd4>)
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	4b0f      	ldr	r3, [pc, #60]	; (800d064 <rfalNfcfPollerCollisionResolution+0xd8>)
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <rfalNfcfPollerCollisionResolution+0xdc>)
 800d02c:	2201      	movs	r2, #1
 800d02e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d032:	200f      	movs	r0, #15
 800d034:	f7ff ff6c 	bl	800cf10 <rfalNfcfPollerPoll>
 800d038:	4603      	mov	r3, r0
 800d03a:	82fb      	strh	r3, [r7, #22]
          if( ret == ERR_NONE )
 800d03c:	8afb      	ldrh	r3, [r7, #22]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d108      	bne.n	800d054 <rfalNfcfPollerCollisionResolution+0xc8>
          {
              rfalNfcfComputeValidSENF( nfcfDevList, devCnt, devLimit, true, &nfcDepFound );
 800d042:	7bba      	ldrb	r2, [r7, #14]
 800d044:	f107 0315 	add.w	r3, r7, #21
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	2301      	movs	r3, #1
 800d04c:	6879      	ldr	r1, [r7, #4]
 800d04e:	68b8      	ldr	r0, [r7, #8]
 800d050:	f7ff fe2c 	bl	800ccac <rfalNfcfComputeValidSENF>
          }
      }
    }
    
    return ERR_NONE;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	20000865 	.word	0x20000865
 800d064:	20000864 	.word	0x20000864
 800d068:	20000866 	.word	0x20000866

0800d06c <rfalNfcvPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalNfcvPollerInitialize( void )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
    ReturnCode ret;
            
    EXIT_ON_ERR( ret, rfalSetMode( RFAL_MODE_POLL_NFCV, RFAL_BR_26p48, RFAL_BR_26p48 ) );
 800d072:	22ec      	movs	r2, #236	; 0xec
 800d074:	21ec      	movs	r1, #236	; 0xec
 800d076:	2007      	movs	r0, #7
 800d078:	f000 fae2 	bl	800d640 <rfalSetMode>
 800d07c:	4603      	mov	r3, r0
 800d07e:	80fb      	strh	r3, [r7, #6]
 800d080:	88fb      	ldrh	r3, [r7, #6]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <rfalNfcvPollerInitialize+0x1e>
 800d086:	88fb      	ldrh	r3, [r7, #6]
 800d088:	e00e      	b.n	800d0a8 <rfalNfcvPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 800d08a:	2001      	movs	r0, #1
 800d08c:	f000 fe72 	bl	800dd74 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NFCV );
 800d090:	4807      	ldr	r0, [pc, #28]	; (800d0b0 <rfalNfcvPollerInitialize+0x44>)
 800d092:	f000 fea9 	bl	800dde8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCV_POLLER );
 800d096:	f241 00d6 	movw	r0, #4310	; 0x10d6
 800d09a:	f000 fe91 	bl	800ddc0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCV_POLLER );
 800d09e:	f44f 5083 	mov.w	r0, #4192	; 0x1060
 800d0a2:	f000 fe77 	bl	800dd94 <rfalSetFDTPoll>
    
    return ERR_NONE;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	000108d8 	.word	0x000108d8

0800d0b4 <rfalNfcvPollerCheckPresence>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCheckPresence( rfalNfcvInventoryRes *invRes )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af02      	add	r7, sp, #8
 800d0ba:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    
    /* INVENTORY_REQ with 1 slot and no Mask   Activity 2.0 (Candidate) 9.2.3.32 */
    ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, invRes, NULL );
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	2020      	movs	r0, #32
 800d0c8:	f000 f815 	bl	800d0f6 <rfalNfcvPollerInventory>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	81fb      	strh	r3, [r7, #14]
    
    if( (ret == ERR_RF_COLLISION) || (ret == ERR_CRC)  || 
 800d0d0:	89fb      	ldrh	r3, [r7, #14]
 800d0d2:	2b1d      	cmp	r3, #29
 800d0d4:	d008      	beq.n	800d0e8 <rfalNfcvPollerCheckPresence+0x34>
 800d0d6:	89fb      	ldrh	r3, [r7, #14]
 800d0d8:	2b15      	cmp	r3, #21
 800d0da:	d005      	beq.n	800d0e8 <rfalNfcvPollerCheckPresence+0x34>
 800d0dc:	89fb      	ldrh	r3, [r7, #14]
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d002      	beq.n	800d0e8 <rfalNfcvPollerCheckPresence+0x34>
        (ret == ERR_FRAMING)      || (ret == ERR_PROTO)  )
 800d0e2:	89fb      	ldrh	r3, [r7, #14]
 800d0e4:	2b0b      	cmp	r3, #11
 800d0e6:	d101      	bne.n	800d0ec <rfalNfcvPollerCheckPresence+0x38>
    {
        ret = ERR_NONE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	81fb      	strh	r3, [r7, #14]
    }
    
    return ret;
 800d0ec:	89fb      	ldrh	r3, [r7, #14]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <rfalNfcvPollerInventory>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerInventory( rfalNfcvNumSlots nSlots, uint8_t maskLen, const uint8_t *maskVal, rfalNfcvInventoryRes *invRes, uint16_t* rcvdLen )
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b08c      	sub	sp, #48	; 0x30
 800d0fa:	af02      	add	r7, sp, #8
 800d0fc:	60ba      	str	r2, [r7, #8]
 800d0fe:	607b      	str	r3, [r7, #4]
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]
 800d104:	460b      	mov	r3, r1
 800d106:	73bb      	strb	r3, [r7, #14]
    ReturnCode           ret;
    rfalNfcvInventoryReq invReq;
    uint16_t             rxLen;
    
    if( ((maskVal == NULL) && (maskLen != 0U)) || (invRes == NULL) )
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d102      	bne.n	800d114 <rfalNfcvPollerInventory+0x1e>
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <rfalNfcvPollerInventory+0x24>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <rfalNfcvPollerInventory+0x28>
    {
        return ERR_PARAM;
 800d11a:	2307      	movs	r3, #7
 800d11c:	e04a      	b.n	800d1b4 <rfalNfcvPollerInventory+0xbe>
    }
    
    invReq.INV_FLAG = (RFAL_NFCV_INV_REQ_FLAG | (uint8_t)nSlots);
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	f043 0306 	orr.w	r3, r3, #6
 800d124:	b2db      	uxtb	r3, r3
 800d126:	763b      	strb	r3, [r7, #24]
    invReq.CMD      = RFAL_NFCV_CMD_INVENTORY;
 800d128:	2301      	movs	r3, #1
 800d12a:	767b      	strb	r3, [r7, #25]
    invReq.MASK_LEN = (uint8_t)MIN( maskLen, ((nSlots == RFAL_NFCV_NUM_SLOTS_1) ? RFAL_NFCV_MASKVAL_MAX_1SLOT_LEN : RFAL_NFCV_MASKVAL_MAX_16SLOT_LEN) );   /* Digital 2.0  9.6.1.6 */
 800d12c:	7bbb      	ldrb	r3, [r7, #14]
 800d12e:	7bfa      	ldrb	r2, [r7, #15]
 800d130:	2a20      	cmp	r2, #32
 800d132:	d101      	bne.n	800d138 <rfalNfcvPollerInventory+0x42>
 800d134:	2240      	movs	r2, #64	; 0x40
 800d136:	e000      	b.n	800d13a <rfalNfcvPollerInventory+0x44>
 800d138:	223c      	movs	r2, #60	; 0x3c
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d806      	bhi.n	800d14c <rfalNfcvPollerInventory+0x56>
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	2b20      	cmp	r3, #32
 800d142:	d101      	bne.n	800d148 <rfalNfcvPollerInventory+0x52>
 800d144:	2340      	movs	r3, #64	; 0x40
 800d146:	e002      	b.n	800d14e <rfalNfcvPollerInventory+0x58>
 800d148:	233c      	movs	r3, #60	; 0x3c
 800d14a:	e000      	b.n	800d14e <rfalNfcvPollerInventory+0x58>
 800d14c:	7bbb      	ldrb	r3, [r7, #14]
 800d14e:	76bb      	strb	r3, [r7, #26]
    
    if( rfalConvBitsToBytes(invReq.MASK_LEN) > 0U )  /* MISRA 21.18 */
 800d150:	7ebb      	ldrb	r3, [r7, #26]
 800d152:	3307      	adds	r3, #7
 800d154:	08db      	lsrs	r3, r3, #3
 800d156:	b29b      	uxth	r3, r3
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00b      	beq.n	800d174 <rfalNfcvPollerInventory+0x7e>
    {
        ST_MEMCPY( invReq.MASK_VALUE, maskVal, rfalConvBitsToBytes(invReq.MASK_LEN) );
 800d15c:	7ebb      	ldrb	r3, [r7, #26]
 800d15e:	3307      	adds	r3, #7
 800d160:	08db      	lsrs	r3, r3, #3
 800d162:	b29b      	uxth	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	f107 0318 	add.w	r3, r7, #24
 800d16a:	3303      	adds	r3, #3
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	4618      	mov	r0, r3
 800d170:	f003 f88d 	bl	801028e <memcpy>
    }
    
    ret = rfalISO15693TransceiveAnticollisionFrame( (uint8_t*)&invReq, (uint8_t)(RFAL_NFCV_INV_REQ_HEADER_LEN + rfalConvBitsToBytes(invReq.MASK_LEN)), (uint8_t*)invRes, sizeof(rfalNfcvInventoryRes), &rxLen );
 800d174:	7ebb      	ldrb	r3, [r7, #26]
 800d176:	3307      	adds	r3, #7
 800d178:	08db      	lsrs	r3, r3, #3
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	3303      	adds	r3, #3
 800d17e:	b2d9      	uxtb	r1, r3
 800d180:	f107 0018 	add.w	r0, r7, #24
 800d184:	f107 0316 	add.w	r3, r7, #22
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	230c      	movs	r3, #12
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	f002 fa1f 	bl	800f5d0 <rfalISO15693TransceiveAnticollisionFrame>
 800d192:	4603      	mov	r3, r0
 800d194:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Check for optional output parameter */
    if( rcvdLen != NULL )
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <rfalNfcvPollerInventory+0xac>
    {
        *rcvdLen = rxLen;
 800d19c:	8afa      	ldrh	r2, [r7, #22]
 800d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a0:	801a      	strh	r2, [r3, #0]
    }
    
    if( ret == ERR_NONE )
 800d1a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d104      	bne.n	800d1b2 <rfalNfcvPollerInventory+0xbc>
    {
        if( rxLen != rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800d1a8:	8afb      	ldrh	r3, [r7, #22]
 800d1aa:	2b60      	cmp	r3, #96	; 0x60
 800d1ac:	d001      	beq.n	800d1b2 <rfalNfcvPollerInventory+0xbc>
        {
            return ERR_PROTO;
 800d1ae:	230b      	movs	r3, #11
 800d1b0:	e000      	b.n	800d1b4 <rfalNfcvPollerInventory+0xbe>
        }
    }
    
    return ret;
 800d1b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3728      	adds	r7, #40	; 0x28
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <rfalNfcvPollerCollisionResolution>:

/*******************************************************************************/
ReturnCode rfalNfcvPollerCollisionResolution( rfalComplianceMode compMode, uint8_t devLimit, rfalNfcvListenDevice *nfcvDevList, uint8_t *devCnt )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b0ae      	sub	sp, #184	; 0xb8
 800d1c0:	af02      	add	r7, sp, #8
 800d1c2:	60ba      	str	r2, [r7, #8]
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	73fb      	strb	r3, [r7, #15]
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	73bb      	strb	r3, [r7, #14]
    uint8_t           colPos;
    bool              colPending;
    rfalNfcvCollision colFound[RFAL_NFCV_MAX_COLL_SUPPORTED];
    
    
    if( (nfcvDevList == NULL) || (devCnt == NULL) )
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <rfalNfcvPollerCollisionResolution+0x1e>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d101      	bne.n	800d1de <rfalNfcvPollerCollisionResolution+0x22>
    {
        return ERR_PARAM;
 800d1da:	2307      	movs	r3, #7
 800d1dc:	e190      	b.n	800d500 <rfalNfcvPollerCollisionResolution+0x344>
    }

    /* Initialize parameters */
    *devCnt = 0;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
    colIt         = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    colCnt        = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    colPending    = false;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
    ST_MEMSET(colFound, 0x00, (sizeof(rfalNfcvCollision)*RFAL_NFCV_MAX_COLL_SUPPORTED) );
 800d1f6:	f107 0314 	add.w	r3, r7, #20
 800d1fa:	2290      	movs	r2, #144	; 0x90
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	4618      	mov	r0, r3
 800d200:	f003 f869 	bl	80102d6 <memset>

    if( devLimit > 0U )       /* MISRA 21.18 */
 800d204:	7bbb      	ldrb	r3, [r7, #14]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <rfalNfcvPollerCollisionResolution+0x64>
    {
        ST_MEMSET(nfcvDevList, 0x00, (sizeof(rfalNfcvListenDevice)*devLimit) );
 800d20a:	7bba      	ldrb	r2, [r7, #14]
 800d20c:	4613      	mov	r3, r2
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	4413      	add	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	461a      	mov	r2, r3
 800d218:	2100      	movs	r1, #0
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f003 f85b 	bl	80102d6 <memset>
    }

    NO_WARNING(colPending);   /* colPending is not exposed externally, in future it might become exposed/ouput parameter */

    if( compMode == RFAL_COMPLIANCE_MODE_NFC )
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d12c      	bne.n	800d280 <rfalNfcvPollerCollisionResolution+0xc4>
    {
        /* Send INVENTORY_REQ with one slot   Activity 2.0  9.3.7.1  (Symbol 0)  */
        ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_1, 0, NULL, &nfcvDevList->InvRes, NULL );
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	2300      	movs	r3, #0
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	4613      	mov	r3, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	2100      	movs	r1, #0
 800d232:	2020      	movs	r0, #32
 800d234:	f7ff ff5f 	bl	800d0f6 <rfalNfcvPollerInventory>
 800d238:	4603      	mov	r3, r0
 800d23a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

        if( ret == ERR_TIMEOUT )  /* Exit if no device found     Activity 2.0  9.3.7.2 (Symbol 1)  */
 800d23e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800d242:	2b04      	cmp	r3, #4
 800d244:	d101      	bne.n	800d24a <rfalNfcvPollerCollisionResolution+0x8e>
        {
            return ERR_NONE;
 800d246:	2300      	movs	r3, #0
 800d248:	e15a      	b.n	800d500 <rfalNfcvPollerCollisionResolution+0x344>
        }
        if( ret == ERR_NONE )     /* Device found without transmission error/collision    Activity 2.0  9.3.7.3 (Symbol 2)  */
 800d24a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d107      	bne.n	800d262 <rfalNfcvPollerCollisionResolution+0xa6>
        {
            (*devCnt)++;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	3301      	adds	r3, #1
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	701a      	strb	r2, [r3, #0]
            return ERR_NONE;
 800d25e:	2300      	movs	r3, #0
 800d260:	e14e      	b.n	800d500 <rfalNfcvPollerCollisionResolution+0x344>
        }

        /* A Collision has been identified  Activity 2.0  9.3.7.2  (Symbol 3) */
        colPending = true;
 800d262:	2301      	movs	r3, #1
 800d264:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 800d268:	2301      	movs	r3, #1
 800d26a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

        /* Check if the Collision Resolution is set to perform only Collision detection   Activity 2.0  9.3.7.5 (Symbol 4)*/
        if( devLimit == 0U )
 800d26e:	7bbb      	ldrb	r3, [r7, #14]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <rfalNfcvPollerCollisionResolution+0xbc>
        {
            return ERR_RF_COLLISION;
 800d274:	231d      	movs	r3, #29
 800d276:	e143      	b.n	800d500 <rfalNfcvPollerCollisionResolution+0x344>
        }

        platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800d278:	2004      	movs	r0, #4
 800d27a:	f7f5 fbdd 	bl	8002a38 <HAL_Delay>
 800d27e:	e005      	b.n	800d28c <rfalNfcvPollerCollisionResolution+0xd0>
        /*******************************************************************************/
    }
    else
    { 
        /* Advance to 16 slots below without mask. Will give a good chance to identify multiple cards */
        colPending = true;
 800d280:	2301      	movs	r3, #1
 800d282:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        colCnt        = 1;
 800d286:	2301      	movs	r3, #1
 800d288:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    
    /* Execute until all collisions are resolved Activity 2.0  9.3.7.16  (Symbol 17) */
    do
    {
        /* Activity 2.0  9.3.7.5  (Symbol 6) */
        colPending = false;
 800d28c:	2300      	movs	r3, #0
 800d28e:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
        slotNum    = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
        
        do
        {
            if( slotNum == 0U )
 800d298:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d12a      	bne.n	800d2f6 <rfalNfcvPollerCollisionResolution+0x13a>
            {
                /* Send INVENTORY_REQ with 16 slots   Activity 2.0  9.3.7.7  (Symbol 8) */
                ret = rfalNfcvPollerInventory( RFAL_NFCV_NUM_SLOTS_16, colFound[colIt].maskLen, colFound[colIt].maskVal, &nfcvDevList[(*devCnt)].InvRes, &rcvdLen );
 800d2a0:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	00db      	lsls	r3, r3, #3
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3b9c      	subs	r3, #156	; 0x9c
 800d2b2:	7818      	ldrb	r0, [r3, #0]
 800d2b4:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800d2b8:	f107 0114 	add.w	r1, r7, #20
 800d2bc:	4613      	mov	r3, r2
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	4413      	add	r3, r2
 800d2c2:	440b      	add	r3, r1
 800d2c4:	1c59      	adds	r1, r3, #1
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	005b      	lsls	r3, r3, #1
 800d2d0:	4413      	add	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	4413      	add	r3, r2
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	460a      	mov	r2, r1
 800d2e6:	4601      	mov	r1, r0
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f7ff ff04 	bl	800d0f6 <rfalNfcvPollerInventory>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800d2f4:	e013      	b.n	800d31e <rfalNfcvPollerCollisionResolution+0x162>
            }
            else
            {
                ret = rfalISO15693TransceiveEOFAnticollision( (uint8_t*)&nfcvDevList[(*devCnt)].InvRes, sizeof(rfalNfcvInventoryRes), &rcvdLen );
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	4413      	add	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	4413      	add	r3, r2
 800d30a:	4618      	mov	r0, r3
 800d30c:	f107 03a6 	add.w	r3, r7, #166	; 0xa6
 800d310:	461a      	mov	r2, r3
 800d312:	210c      	movs	r1, #12
 800d314:	f002 f9bc 	bl	800f690 <rfalISO15693TransceiveEOFAnticollision>
 800d318:	4603      	mov	r3, r0
 800d31a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            }
            slotNum++;
 800d31e:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800d322:	3301      	adds	r3, #1
 800d324:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
            
            /*******************************************************************************/
            if( ret != ERR_TIMEOUT )
 800d328:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800d32c:	2b04      	cmp	r3, #4
 800d32e:	f000 80cb 	beq.w	800d4c8 <rfalNfcvPollerCollisionResolution+0x30c>
            {
                if( rcvdLen < rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800d332:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d336:	2b5f      	cmp	r3, #95	; 0x5f
 800d338:	d802      	bhi.n	800d340 <rfalNfcvPollerCollisionResolution+0x184>
                { /* If only a partial frame was received make sure the FDT_V_INVENT_NORES is fulfilled */
                    platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800d33a:	2004      	movs	r0, #4
 800d33c:	f7f5 fb7c 	bl	8002a38 <HAL_Delay>
                }

                if( ret == ERR_NONE )
 800d340:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10b      	bne.n	800d360 <rfalNfcvPollerCollisionResolution+0x1a4>
                {
                    /* Check if the device found is already on the list and its response is a valid INVENTORY_RES */
                    if( rcvdLen == rfalConvBytesToBits(RFAL_NFCV_INV_RES_LEN + RFAL_NFCV_CRC_LEN) )
 800d348:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d34c:	2b60      	cmp	r3, #96	; 0x60
 800d34e:	f040 80be 	bne.w	800d4ce <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Activity 2.0  9.3.7.15  (Symbol 11) */
                        (*devCnt)++;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	3301      	adds	r3, #1
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	701a      	strb	r2, [r3, #0]
 800d35e:	e0b6      	b.n	800d4ce <rfalNfcvPollerCollisionResolution+0x312>
                    }
                }
                else /* Treat everything else as collision */
                {
                    /* Activity 2.0  9.3.7.15  (Symbol 16) */
                    colPending = true;
 800d360:	2301      	movs	r3, #1
 800d362:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
                    

                    /*******************************************************************************/
                    /* Ensure that this collision still fits on the container */
                    if( colCnt < RFAL_NFCV_MAX_COLL_SUPPORTED )
 800d366:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800d36a:	2b0f      	cmp	r3, #15
 800d36c:	f200 80af 	bhi.w	800d4ce <rfalNfcvPollerCollisionResolution+0x312>
                    {
                        /* Store this collision on the container to be resolved later */
                        /* Activity 2.0  9.3.7.15  (Symbol 16): add the collision information
                         * (MASK_VAL + SN) to the list containing the collision information */
                        ST_MEMCPY(colFound[colCnt].maskVal, colFound[colIt].maskVal, RFAL_NFCV_UID_LEN);
 800d370:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d374:	f107 0114 	add.w	r1, r7, #20
 800d378:	4613      	mov	r3, r2
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	4413      	add	r3, r2
 800d37e:	440b      	add	r3, r1
 800d380:	1c58      	adds	r0, r3, #1
 800d382:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800d386:	f107 0114 	add.w	r1, r7, #20
 800d38a:	4613      	mov	r3, r2
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	4413      	add	r3, r2
 800d390:	440b      	add	r3, r1
 800d392:	3301      	adds	r3, #1
 800d394:	2208      	movs	r2, #8
 800d396:	4619      	mov	r1, r3
 800d398:	f002 ff79 	bl	801028e <memcpy>
                        colPos = colFound[colIt].maskLen;
 800d39c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800d3a0:	4613      	mov	r3, r2
 800d3a2:	00db      	lsls	r3, r3, #3
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d3aa:	4413      	add	r3, r2
 800d3ac:	3b9c      	subs	r3, #156	; 0x9c
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      &= (uint8_t)((1U << (colPos % RFAL_BITS_IN_BYTE)) - 1U);
 800d3b4:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d3b8:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800d3bc:	08db      	lsrs	r3, r3, #3
 800d3be:	b2d8      	uxtb	r0, r3
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	00db      	lsls	r3, r3, #3
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d3cc:	4413      	add	r3, r2
 800d3ce:	440b      	add	r3, r1
 800d3d0:	3b9b      	subs	r3, #155	; 0x9b
 800d3d2:	7819      	ldrb	r1, [r3, #0]
 800d3d4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800d3d8:	f003 0307 	and.w	r3, r3, #7
 800d3dc:	2201      	movs	r2, #1
 800d3de:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d3ec:	400b      	ands	r3, r1
 800d3ee:	b2d9      	uxtb	r1, r3
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	4413      	add	r3, r2
 800d3f6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d3fa:	4413      	add	r3, r2
 800d3fc:	4403      	add	r3, r0
 800d3fe:	3b9b      	subs	r3, #155	; 0x9b
 800d400:	460a      	mov	r2, r1
 800d402:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[(colPos/RFAL_BITS_IN_BYTE)]      |= (uint8_t)((slotNum-1U) << (colPos % RFAL_BITS_IN_BYTE));
 800d404:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d408:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800d40c:	08db      	lsrs	r3, r3, #3
 800d40e:	b2d8      	uxtb	r0, r3
 800d410:	4601      	mov	r1, r0
 800d412:	4613      	mov	r3, r2
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	4413      	add	r3, r2
 800d418:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d41c:	4413      	add	r3, r2
 800d41e:	440b      	add	r3, r1
 800d420:	3b9b      	subs	r3, #155	; 0x9b
 800d422:	7819      	ldrb	r1, [r3, #0]
 800d424:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800d428:	1e5a      	subs	r2, r3, #1
 800d42a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800d42e:	f003 0307 	and.w	r3, r3, #7
 800d432:	fa02 f303 	lsl.w	r3, r2, r3
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d43c:	430b      	orrs	r3, r1
 800d43e:	b2d9      	uxtb	r1, r3
 800d440:	4613      	mov	r3, r2
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	4413      	add	r3, r2
 800d446:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d44a:	4413      	add	r3, r2
 800d44c:	4403      	add	r3, r0
 800d44e:	3b9b      	subs	r3, #155	; 0x9b
 800d450:	460a      	mov	r2, r1
 800d452:	701a      	strb	r2, [r3, #0]
                        colFound[colCnt].maskVal[((colPos/RFAL_BITS_IN_BYTE)+1U)]  = (uint8_t)((slotNum-1U) >> (RFAL_BITS_IN_BYTE - (colPos % RFAL_BITS_IN_BYTE)));
 800d454:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800d458:	1e5a      	subs	r2, r3, #1
 800d45a:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800d45e:	f003 0307 	and.w	r3, r3, #7
 800d462:	f1c3 0308 	rsb	r3, r3, #8
 800d466:	fa22 f003 	lsr.w	r0, r2, r3
 800d46a:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d46e:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 800d472:	08db      	lsrs	r3, r3, #3
 800d474:	b2db      	uxtb	r3, r3
 800d476:	1c59      	adds	r1, r3, #1
 800d478:	b2c0      	uxtb	r0, r0
 800d47a:	4613      	mov	r3, r2
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	4413      	add	r3, r2
 800d480:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d484:	4413      	add	r3, r2
 800d486:	440b      	add	r3, r1
 800d488:	3b9b      	subs	r3, #155	; 0x9b
 800d48a:	4602      	mov	r2, r0
 800d48c:	701a      	strb	r2, [r3, #0]

                        colFound[colCnt].maskLen = (colFound[colIt].maskLen + 4U);
 800d48e:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800d492:	4613      	mov	r3, r2
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	4413      	add	r3, r2
 800d498:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d49c:	4413      	add	r3, r2
 800d49e:	3b9c      	subs	r3, #156	; 0x9c
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	b2d9      	uxtb	r1, r3
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800d4b4:	4413      	add	r3, r2
 800d4b6:	3b9c      	subs	r3, #156	; 0x9c
 800d4b8:	460a      	mov	r2, r1
 800d4ba:	701a      	strb	r2, [r3, #0]

                        colCnt++;
 800d4bc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800d4c6:	e002      	b.n	800d4ce <rfalNfcvPollerCollisionResolution+0x312>
                }
            }
            else 
            { 
                /* Timeout */
                platformDelay(RFAL_NFCV_FDT_V_INVENT_NORES);
 800d4c8:	2004      	movs	r0, #4
 800d4ca:	f7f5 fab5 	bl	8002a38 <HAL_Delay>
            }
            
            /* Check if devices found have reached device limit   Activity 2.0  9.3.7.15  (Symbol 16) */
            if( *devCnt >= devLimit )
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	7bba      	ldrb	r2, [r7, #14]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d801      	bhi.n	800d4dc <rfalNfcvPollerCollisionResolution+0x320>
            {
                return ERR_NONE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e011      	b.n	800d500 <rfalNfcvPollerCollisionResolution+0x344>
            }
        } while( slotNum < RFAL_NFCV_MAX_SLOTS );  /* Slot loop             */
 800d4dc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800d4e0:	2b0f      	cmp	r3, #15
 800d4e2:	f67f aed9 	bls.w	800d298 <rfalNfcvPollerCollisionResolution+0xdc>
        colIt++;
 800d4e6:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    } while( colIt < colCnt );                     /* Collisions found loop */
 800d4f0:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800d4f4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	f4ff aec7 	bcc.w	800d28c <rfalNfcvPollerCollisionResolution+0xd0>
    
    return ERR_NONE;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	37b0      	adds	r7, #176	; 0xb0
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <rfalInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalInitialize( void )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	af00      	add	r7, sp, #0
    st25r3911InitInterrupts();
 800d50c:	f7f5 f89a 	bl	8002644 <st25r3911InitInterrupts>
    
    /* Initialize chip */
    st25r3911Initialize();
 800d510:	f7f4 f996 	bl	8001840 <st25r3911Initialize>
    
    /* Check expected chip: ST25R3911 */
    if( !st25r3911CheckChipID( NULL ) )
 800d514:	2000      	movs	r0, #0
 800d516:	f7f4 fb53 	bl	8001bc0 <st25r3911CheckChipID>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f083 0301 	eor.w	r3, r3, #1
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <rfalInitialize+0x22>
    {
        return ERR_HW_MISMATCH;
 800d526:	2324      	movs	r3, #36	; 0x24
 800d528:	e04a      	b.n	800d5c0 <rfalInitialize+0xb8>
    }
    
    /* Disable any previous observation mode */
    rfalST25R3911ObsModeDisable();
 800d52a:	2100      	movs	r1, #0
 800d52c:	2001      	movs	r0, #1
 800d52e:	f7f4 fe03 	bl	8002138 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/    
    /* Apply RF Chip generic initialization */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_INIT) );
 800d532:	2000      	movs	r0, #0
 800d534:	f7f9 fd3c 	bl	8006fb0 <rfalSetAnalogConfig>

    /*******************************************************************************/
    /* Set FIFO Water Levels to be used */
    st25r3911ChangeRegisterBits( ST25R3911_REG_IO_CONF1, (ST25R3911_REG_IO_CONF1_fifo_lt | ST25R3911_REG_IO_CONF1_fifo_lr), (ST25R3911_REG_IO_CONF1_fifo_lt_32bytes | ST25R3911_REG_IO_CONF1_fifo_lr_64bytes) );
 800d538:	2200      	movs	r2, #0
 800d53a:	2130      	movs	r1, #48	; 0x30
 800d53c:	2000      	movs	r0, #0
 800d53e:	f7f4 feca 	bl	80022d6 <st25r3911ChangeRegisterBits>
    
    /* Always have CRC in FIFO upon reception  */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_crc_2_fifo );
 800d542:	2140      	movs	r1, #64	; 0x40
 800d544:	2009      	movs	r0, #9
 800d546:	f7f4 fea8 	bl	800229a <st25r3911SetRegisterBits>
    
    /* Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800d54a:	2110      	movs	r1, #16
 800d54c:	2009      	movs	r0, #9
 800d54e:	f7f4 fea4 	bl	800229a <st25r3911SetRegisterBits>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800d552:	f001 fdfb 	bl	800f14c <rfalFIFOStatusClear>
    
    /*******************************************************************************/
    gRFAL.state              = RFAL_STATE_INIT;
 800d556:	4b1b      	ldr	r3, [pc, #108]	; (800d5c4 <rfalInitialize+0xbc>)
 800d558:	2201      	movs	r2, #1
 800d55a:	701a      	strb	r2, [r3, #0]
    gRFAL.mode               = RFAL_MODE_NONE;
 800d55c:	4b19      	ldr	r3, [pc, #100]	; (800d5c4 <rfalInitialize+0xbc>)
 800d55e:	2200      	movs	r2, #0
 800d560:	705a      	strb	r2, [r3, #1]
    gRFAL.field              = false;
 800d562:	4b18      	ldr	r3, [pc, #96]	; (800d5c4 <rfalInitialize+0xbc>)
 800d564:	2200      	movs	r2, #0
 800d566:	711a      	strb	r2, [r3, #4]
    
    /* Set RFAL default configs */
    gRFAL.conf.obsvModeTx    = RFAL_OBSMODE_DISABLE;
 800d568:	4b16      	ldr	r3, [pc, #88]	; (800d5c4 <rfalInitialize+0xbc>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	715a      	strb	r2, [r3, #5]
    gRFAL.conf.obsvModeRx    = RFAL_OBSMODE_DISABLE;
 800d56e:	4b15      	ldr	r3, [pc, #84]	; (800d5c4 <rfalInitialize+0xbc>)
 800d570:	2200      	movs	r2, #0
 800d572:	719a      	strb	r2, [r3, #6]
    gRFAL.conf.eHandling     = RFAL_ERRORHANDLING_NONE;
 800d574:	4b13      	ldr	r3, [pc, #76]	; (800d5c4 <rfalInitialize+0xbc>)
 800d576:	2200      	movs	r2, #0
 800d578:	71da      	strb	r2, [r3, #7]
    
    /* Transceive set to IDLE */
    gRFAL.TxRx.lastState     = RFAL_TXRX_STATE_IDLE;
 800d57a:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <rfalInitialize+0xbc>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	755a      	strb	r2, [r3, #21]
    gRFAL.TxRx.state         = RFAL_TXRX_STATE_IDLE;
 800d580:	4b10      	ldr	r3, [pc, #64]	; (800d5c4 <rfalInitialize+0xbc>)
 800d582:	2200      	movs	r2, #0
 800d584:	751a      	strb	r2, [r3, #20]
    
    /* Disable all timings */
    gRFAL.timings.FDTListen  = RFAL_TIMING_NONE;
 800d586:	4b0f      	ldr	r3, [pc, #60]	; (800d5c4 <rfalInitialize+0xbc>)
 800d588:	2200      	movs	r2, #0
 800d58a:	60da      	str	r2, [r3, #12]
    gRFAL.timings.FDTPoll    = RFAL_TIMING_NONE;
 800d58c:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <rfalInitialize+0xbc>)
 800d58e:	2200      	movs	r2, #0
 800d590:	611a      	str	r2, [r3, #16]
    gRFAL.timings.GT         = RFAL_TIMING_NONE;
 800d592:	4b0c      	ldr	r3, [pc, #48]	; (800d5c4 <rfalInitialize+0xbc>)
 800d594:	2200      	movs	r2, #0
 800d596:	609a      	str	r2, [r3, #8]
    
    gRFAL.tmr.GT             = RFAL_TIMING_NONE;
 800d598:	4b0a      	ldr	r3, [pc, #40]	; (800d5c4 <rfalInitialize+0xbc>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	641a      	str	r2, [r3, #64]	; 0x40
    
    gRFAL.callbacks.preTxRx  = NULL;
 800d59e:	4b09      	ldr	r3, [pc, #36]	; (800d5c4 <rfalInitialize+0xbc>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	64da      	str	r2, [r3, #76]	; 0x4c
    gRFAL.callbacks.postTxRx = NULL;
 800d5a4:	4b07      	ldr	r3, [pc, #28]	; (800d5c4 <rfalInitialize+0xbc>)
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	651a      	str	r2, [r3, #80]	; 0x50
    
#if RFAL_FEATURE_NFCV    
    /* Initialize NFC-V Data */
    gRFAL.nfcvData.ignoreBits = 0;
 800d5aa:	4b06      	ldr	r3, [pc, #24]	; (800d5c4 <rfalInitialize+0xbc>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    gRFAL.Lm.brDetected      = RFAL_BR_KEEP;
#endif /* RFAL_FEATURE_LISTEN_MODE */

#if RFAL_FEATURE_WAKEUP_MODE
    /* Initialize Wake-Up Mode */
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800d5b2:	4b04      	ldr	r3, [pc, #16]	; (800d5c4 <rfalInitialize+0xbc>)
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    
    /*******************************************************************************/    
    /* Perform Automatic Calibration (if configured to do so).                     *
     * Registers set by rfalSetAnalogConfig will tell rfalCalibrate what to perform*/
    rfalCalibrate();
 800d5ba:	f000 f805 	bl	800d5c8 <rfalCalibrate>
    
    return ERR_NONE;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	200009a8 	.word	0x200009a8

0800d5c8 <rfalCalibrate>:


/*******************************************************************************/
ReturnCode rfalCalibrate( void )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
    uint16_t resValue;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d5ce:	4b1b      	ldr	r3, [pc, #108]	; (800d63c <rfalCalibrate+0x74>)
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d101      	bne.n	800d5da <rfalCalibrate+0x12>
    {
        return ERR_WRONG_STATE;
 800d5d6:	2321      	movs	r3, #33	; 0x21
 800d5d8:	e02b      	b.n	800d632 <rfalCalibrate+0x6a>
    /*******************************************************************************/
    /* Perform ST25R3911 regulators and antenna calibration                        */
    /*******************************************************************************/
    
    /* Automatic regulator adjustment only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )       
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2180      	movs	r1, #128	; 0x80
 800d5de:	202a      	movs	r0, #42	; 0x2a
 800d5e0:	f7f4 face 	bl	8001b80 <st25r3911CheckReg>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <rfalCalibrate+0x2a>
    {
        /* Adjust the regulators so that Antenna Calibrate has better Regulator values */
        st25r3911AdjustRegulators( &resValue );
 800d5ea:	1dbb      	adds	r3, r7, #6
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7f4 f955 	bl	800189c <st25r3911AdjustRegulators>
    }
    
    /* Automatic Antenna calibration only performed if not set manually on Analog Configs */
    if( st25r3911CheckReg( ST25R3911_REG_ANT_CAL_CONTROL, ST25R3911_REG_ANT_CAL_CONTROL_trim_s, 0x00 ) )
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2180      	movs	r1, #128	; 0x80
 800d5f6:	2021      	movs	r0, #33	; 0x21
 800d5f8:	f7f4 fac2 	bl	8001b80 <st25r3911CheckReg>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d010      	beq.n	800d624 <rfalCalibrate+0x5c>
    {
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );
 800d602:	1dbb      	adds	r3, r7, #6
 800d604:	4618      	mov	r0, r3
 800d606:	f7f4 f9ca 	bl	800199e <st25r3911CalibrateAntenna>
      
        /*******************************************************************************/
        /* REMARK: Silicon workaround ST25R3911 Errata #1.5                            */
        /* Always run the command Calibrate Antenna twice                              */
        st25r3911CalibrateAntenna( (uint8_t*) &resValue );                
 800d60a:	1dbb      	adds	r3, r7, #6
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7f4 f9c6 	bl	800199e <st25r3911CalibrateAntenna>
    {
        /* If no antenna calibration is performed there is no need to perform second regulator adjustment again */
        return ERR_NONE; 
    }
    
    if( st25r3911CheckReg( ST25R3911_REG_REGULATOR_CONTROL, ST25R3911_REG_REGULATOR_CONTROL_reg_s, 0x00 ) )
 800d612:	2200      	movs	r2, #0
 800d614:	2180      	movs	r1, #128	; 0x80
 800d616:	202a      	movs	r0, #42	; 0x2a
 800d618:	f7f4 fab2 	bl	8001b80 <st25r3911CheckReg>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d006      	beq.n	800d630 <rfalCalibrate+0x68>
 800d622:	e001      	b.n	800d628 <rfalCalibrate+0x60>
        return ERR_NONE; 
 800d624:	2300      	movs	r3, #0
 800d626:	e004      	b.n	800d632 <rfalCalibrate+0x6a>
    {
        /* Adjust the regulators again with the Antenna calibrated */
        st25r3911AdjustRegulators( &resValue );
 800d628:	1dbb      	adds	r3, r7, #6
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f4 f936 	bl	800189c <st25r3911AdjustRegulators>
    }
    
    return ERR_NONE;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	200009a8 	.word	0x200009a8

0800d640 <rfalSetMode>:
}


/*******************************************************************************/
ReturnCode rfalSetMode( rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	71fb      	strb	r3, [r7, #7]
 800d64a:	460b      	mov	r3, r1
 800d64c:	71bb      	strb	r3, [r7, #6]
 800d64e:	4613      	mov	r3, r2
 800d650:	717b      	strb	r3, [r7, #5]

    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d652:	4b83      	ldr	r3, [pc, #524]	; (800d860 <rfalSetMode+0x220>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <rfalSetMode+0x1e>
    {
        return ERR_WRONG_STATE;
 800d65a:	2321      	movs	r3, #33	; 0x21
 800d65c:	e0fb      	b.n	800d856 <rfalSetMode+0x216>
    }
    
    /* Check allowed bit rate value */
    if( (txBR == RFAL_BR_KEEP) || (rxBR == RFAL_BR_KEEP) )
 800d65e:	79bb      	ldrb	r3, [r7, #6]
 800d660:	2bff      	cmp	r3, #255	; 0xff
 800d662:	d002      	beq.n	800d66a <rfalSetMode+0x2a>
 800d664:	797b      	ldrb	r3, [r7, #5]
 800d666:	2bff      	cmp	r3, #255	; 0xff
 800d668:	d101      	bne.n	800d66e <rfalSetMode+0x2e>
    {
        return ERR_PARAM;
 800d66a:	2307      	movs	r3, #7
 800d66c:	e0f3      	b.n	800d856 <rfalSetMode+0x216>
    }
   
    switch( mode )
 800d66e:	79fb      	ldrb	r3, [r7, #7]
 800d670:	3b01      	subs	r3, #1
 800d672:	2b0c      	cmp	r3, #12
 800d674:	f200 80db 	bhi.w	800d82e <rfalSetMode+0x1ee>
 800d678:	a201      	add	r2, pc, #4	; (adr r2, 800d680 <rfalSetMode+0x40>)
 800d67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67e:	bf00      	nop
 800d680:	0800d6b5 	.word	0x0800d6b5
 800d684:	0800d6d7 	.word	0x0800d6d7
 800d688:	0800d6f9 	.word	0x0800d6f9
 800d68c:	0800d72f 	.word	0x0800d72f
 800d690:	0800d765 	.word	0x0800d765
 800d694:	0800d79b 	.word	0x0800d79b
 800d698:	0800d7bd 	.word	0x0800d7bd
 800d69c:	0800d7bd 	.word	0x0800d7bd
 800d6a0:	0800d7d7 	.word	0x0800d7d7
 800d6a4:	0800d82b 	.word	0x0800d82b
 800d6a8:	0800d82b 	.word	0x0800d82b
 800d6ac:	0800d82b 	.word	0x0800d82b
 800d6b0:	0800d801 	.word	0x0800d801
    {
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d6b4:	2104      	movs	r1, #4
 800d6b6:	2002      	movs	r0, #2
 800d6b8:	f7f4 fdcc 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443A mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443a);
 800d6bc:	2108      	movs	r1, #8
 800d6be:	2003      	movs	r0, #3
 800d6c0:	f7f4 fd7e 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d6c4:	f240 1001 	movw	r0, #257	; 0x101
 800d6c8:	f7f9 fc72 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d6cc:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d6d0:	f7f9 fc6e 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d6d4:	e0ad      	b.n	800d832 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA_T1T:
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d6d6:	2104      	movs	r1, #4
 800d6d8:	2002      	movs	r0, #2
 800d6da:	f7f4 fdbb 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Enable Topaz mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_topaz );
 800d6de:	2120      	movs	r1, #32
 800d6e0:	2003      	movs	r0, #3
 800d6e2:	f7f4 fd6d 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d6e6:	f240 1001 	movw	r0, #257	; 0x101
 800d6ea:	f7f9 fc61 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d6ee:	f44f 7081 	mov.w	r0, #258	; 0x102
 800d6f2:	f7f9 fc5d 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d6f6:	e09c      	b.n	800d832 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCB:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d6f8:	2104      	movs	r1, #4
 800d6fa:	2002      	movs	r0, #2
 800d6fc:	f7f4 fdaa 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800d700:	2110      	movs	r1, #16
 800d702:	2003      	movs	r0, #3
 800d704:	f7f4 fd5c 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800d708:	2200      	movs	r2, #0
 800d70a:	21fc      	movs	r1, #252	; 0xfc
 800d70c:	2006      	movs	r0, #6
 800d70e:	f7f4 fde2 	bl	80022d6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800d712:	2200      	movs	r2, #0
 800d714:	21f8      	movs	r1, #248	; 0xf8
 800d716:	2007      	movs	r0, #7
 800d718:	f7f4 fddd 	bl	80022d6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_eof_12_10to11etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d71c:	f240 2001 	movw	r0, #513	; 0x201
 800d720:	f7f9 fc46 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d724:	f240 2002 	movw	r0, #514	; 0x202
 800d728:	f7f9 fc42 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d72c:	e081      	b.n	800d832 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_PRIME:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d72e:	2104      	movs	r1, #4
 800d730:	2002      	movs	r0, #2
 800d732:	f7f4 fd8f 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800d736:	2110      	movs	r1, #16
 800d738:	2003      	movs	r0, #3
 800d73a:	f7f4 fd41 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800d73e:	2200      	movs	r2, #0
 800d740:	21fc      	movs	r1, #252	; 0xfc
 800d742:	2006      	movs	r0, #6
 800d744:	f7f4 fdc7 	bl	80022d6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800d748:	2228      	movs	r2, #40	; 0x28
 800d74a:	21f8      	movs	r1, #248	; 0xf8
 800d74c:	2007      	movs	r0, #7
 800d74e:	f7f4 fdc2 	bl	80022d6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_eof_12_10to12etu ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d752:	f240 2001 	movw	r0, #513	; 0x201
 800d756:	f7f9 fc2b 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d75a:	f240 2002 	movw	r0, #514	; 0x202
 800d75e:	f7f9 fc27 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d762:	e066      	b.n	800d832 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_B_CTS:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d764:	2104      	movs	r1, #4
 800d766:	2002      	movs	r0, #2
 800d768:	f7f4 fd74 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Enable ISO14443B mode */
            st25r3911WriteRegister(ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_iso14443b);
 800d76c:	2110      	movs	r1, #16
 800d76e:	2003      	movs	r0, #3
 800d770:	f7f4 fd26 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set the EGT, SOF, EOF and EOF */
            st25r3911ChangeRegisterBits(  ST25R3911_REG_ISO14443B_1, 
 800d774:	2200      	movs	r2, #0
 800d776:	21fc      	movs	r1, #252	; 0xfc
 800d778:	2006      	movs	r0, #6
 800d77a:	f7f4 fdac 	bl	80022d6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_1_mask_egt | ST25R3911_REG_ISO14443B_1_mask_sof | ST25R3911_REG_ISO14443B_1_mask_eof), 
                                      ( (0U<<ST25R3911_REG_ISO14443B_1_shift_egt) | ST25R3911_REG_ISO14443B_1_sof_0_10etu | ST25R3911_REG_ISO14443B_1_sof_1_2etu) );
                        
            /* Set the minimum TR1, clear SOF, EOF and EOF12 */
            st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443B_2, 
 800d77e:	2230      	movs	r2, #48	; 0x30
 800d780:	21f8      	movs	r1, #248	; 0xf8
 800d782:	2007      	movs	r0, #7
 800d784:	f7f4 fda7 	bl	80022d6 <st25r3911ChangeRegisterBits>
                                      (ST25R3911_REG_ISO14443B_2_mask_tr1 | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof |ST25R3911_REG_ISO14443B_2_eof_12),
                                      (ST25R3911_REG_ISO14443B_2_tr1_80fs80fs | ST25R3911_REG_ISO14443B_2_no_sof | ST25R3911_REG_ISO14443B_2_no_eof ) );


            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d788:	f240 2001 	movw	r0, #513	; 0x201
 800d78c:	f7f9 fc10 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d790:	f240 2002 	movw	r0, #514	; 0x202
 800d794:	f7f9 fc0c 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d798:	e04b      	b.n	800d832 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d79a:	2104      	movs	r1, #4
 800d79c:	2002      	movs	r0, #2
 800d79e:	f7f4 fd59 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Enable FeliCa mode */
            st25r3911WriteRegister( ST25R3911_REG_MODE, ST25R3911_REG_MODE_om_felica );
 800d7a2:	2118      	movs	r1, #24
 800d7a4:	2003      	movs	r0, #3
 800d7a6:	f7f4 fd0b 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d7aa:	f240 4001 	movw	r0, #1025	; 0x401
 800d7ae:	f7f9 fbff 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d7b2:	f240 4002 	movw	r0, #1026	; 0x402
 800d7b6:	f7f9 fbfb 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d7ba:	e03a      	b.n	800d832 <rfalSetMode+0x1f2>
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCV:
        case RFAL_MODE_POLL_PICOPASS:
        
            /* Disable wake up mode, if set */
            st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800d7bc:	2104      	movs	r1, #4
 800d7be:	2002      	movs	r0, #2
 800d7c0:	f7f4 fd48 	bl	8002254 <st25r3911ClrRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d7c4:	f241 0001 	movw	r0, #4097	; 0x1001
 800d7c8:	f7f9 fbf2 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d7cc:	f241 0002 	movw	r0, #4098	; 0x1002
 800d7d0:	f7f9 fbee 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d7d4:	e02d      	b.n	800d832 <rfalSetMode+0x1f2>

        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_nfc | ST25R3911_REG_MODE_nfc_ar) );
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	2003      	movs	r0, #3
 800d7da:	f7f4 fcf1 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800d7de:	2160      	movs	r1, #96	; 0x60
 800d7e0:	2040      	movs	r0, #64	; 0x40
 800d7e2:	f7f4 f999 	bl	8001b18 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800d7e6:	2110      	movs	r1, #16
 800d7e8:	2009      	movs	r0, #9
 800d7ea:	f7f4 fd56 	bl	800229a <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d7ee:	f640 0001 	movw	r0, #2049	; 0x801
 800d7f2:	f7f9 fbdd 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d7f6:	f640 0002 	movw	r0, #2050	; 0x802
 800d7fa:	f7f9 fbd9 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d7fe:	e018      	b.n	800d832 <rfalSetMode+0x1f2>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:

            /* Set NFCIP1 active communication initiator mode and Enable NFC Automatic Response RF Collision Avoidance */
            st25r3911WriteRegister(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ_targ | ST25R3911_REG_MODE_om_nfcip1_normal_mode | ST25R3911_REG_MODE_nfc_ar) );
 800d800:	2189      	movs	r1, #137	; 0x89
 800d802:	2003      	movs	r0, #3
 800d804:	f7f4 fcdc 	bl	80021c0 <st25r3911WriteRegister>
            
            /* Set GPT to start after end of TX, as GPT is used in active communication mode to timeout the field switching off */
            /* The field is turned off 37.76us after the end of the transmission  Trfw                                          */
            st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( RFAL_AP2P_FIELDOFF_TRFW ), ST25R3911_REG_GPT_CONTROL_gptc_etx_nfc );
 800d808:	2160      	movs	r1, #96	; 0x60
 800d80a:	2040      	movs	r0, #64	; 0x40
 800d80c:	f7f4 f984 	bl	8001b18 <st25r3911StartGPTimer_8fcs>
            
            /* Enable External Field Detector */
            st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800d810:	2110      	movs	r1, #16
 800d812:	2009      	movs	r0, #9
 800d814:	f7f4 fd41 	bl	800229a <st25r3911SetRegisterBits>
            
            /* Set Analog configurations for this mode and bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800d818:	f648 0001 	movw	r0, #34817	; 0x8801
 800d81c:	f7f9 fbc8 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800d820:	f648 0002 	movw	r0, #34818	; 0x8802
 800d824:	f7f9 fbc4 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d828:	e003      	b.n	800d832 <rfalSetMode+0x1f2>
            
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
            return ERR_NOTSUPP;
 800d82a:	2318      	movs	r3, #24
 800d82c:	e013      	b.n	800d856 <rfalSetMode+0x216>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800d82e:	230f      	movs	r3, #15
 800d830:	e011      	b.n	800d856 <rfalSetMode+0x216>
    }
    
    /* Set state as STATE_MODE_SET only if not initialized yet (PSL) */
    gRFAL.state = ((gRFAL.state < RFAL_STATE_MODE_SET) ? RFAL_STATE_MODE_SET : gRFAL.state);
 800d832:	4b0b      	ldr	r3, [pc, #44]	; (800d860 <rfalSetMode+0x220>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	2b02      	cmp	r3, #2
 800d838:	bf38      	it	cc
 800d83a:	2302      	movcc	r3, #2
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	4b08      	ldr	r3, [pc, #32]	; (800d860 <rfalSetMode+0x220>)
 800d840:	701a      	strb	r2, [r3, #0]
    gRFAL.mode  = mode;
 800d842:	4a07      	ldr	r2, [pc, #28]	; (800d860 <rfalSetMode+0x220>)
 800d844:	79fb      	ldrb	r3, [r7, #7]
 800d846:	7053      	strb	r3, [r2, #1]
    
    /* Apply the given bit rate */
    return rfalSetBitRate(txBR, rxBR);
 800d848:	797a      	ldrb	r2, [r7, #5]
 800d84a:	79bb      	ldrb	r3, [r7, #6]
 800d84c:	4611      	mov	r1, r2
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 f808 	bl	800d864 <rfalSetBitRate>
 800d854:	4603      	mov	r3, r0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	200009a8 	.word	0x200009a8

0800d864 <rfalSetBitRate>:
}


/*******************************************************************************/
ReturnCode rfalSetBitRate( rfalBitRate txBR, rfalBitRate rxBR )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b088      	sub	sp, #32
 800d868:	af00      	add	r7, sp, #0
 800d86a:	4603      	mov	r3, r0
 800d86c:	460a      	mov	r2, r1
 800d86e:	71fb      	strb	r3, [r7, #7]
 800d870:	4613      	mov	r3, r2
 800d872:	71bb      	strb	r3, [r7, #6]
    ReturnCode ret;
    
    /* Check if RFAL is not initialized */
    if( gRFAL.state == RFAL_STATE_IDLE )
 800d874:	4ba0      	ldr	r3, [pc, #640]	; (800daf8 <rfalSetBitRate+0x294>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d101      	bne.n	800d880 <rfalSetBitRate+0x1c>
    {
        return ERR_WRONG_STATE;
 800d87c:	2321      	movs	r3, #33	; 0x21
 800d87e:	e248      	b.n	800dd12 <rfalSetBitRate+0x4ae>
    }
   
    /* Store the new Bit Rates */
    gRFAL.txBR = ((txBR == RFAL_BR_KEEP) ? gRFAL.txBR : txBR);
 800d880:	79fb      	ldrb	r3, [r7, #7]
 800d882:	2bff      	cmp	r3, #255	; 0xff
 800d884:	d102      	bne.n	800d88c <rfalSetBitRate+0x28>
 800d886:	4b9c      	ldr	r3, [pc, #624]	; (800daf8 <rfalSetBitRate+0x294>)
 800d888:	789b      	ldrb	r3, [r3, #2]
 800d88a:	e000      	b.n	800d88e <rfalSetBitRate+0x2a>
 800d88c:	79fb      	ldrb	r3, [r7, #7]
 800d88e:	4a9a      	ldr	r2, [pc, #616]	; (800daf8 <rfalSetBitRate+0x294>)
 800d890:	7093      	strb	r3, [r2, #2]
    gRFAL.rxBR = ((rxBR == RFAL_BR_KEEP) ? gRFAL.rxBR : rxBR);
 800d892:	79bb      	ldrb	r3, [r7, #6]
 800d894:	2bff      	cmp	r3, #255	; 0xff
 800d896:	d102      	bne.n	800d89e <rfalSetBitRate+0x3a>
 800d898:	4b97      	ldr	r3, [pc, #604]	; (800daf8 <rfalSetBitRate+0x294>)
 800d89a:	78db      	ldrb	r3, [r3, #3]
 800d89c:	e000      	b.n	800d8a0 <rfalSetBitRate+0x3c>
 800d89e:	79bb      	ldrb	r3, [r7, #6]
 800d8a0:	4a95      	ldr	r2, [pc, #596]	; (800daf8 <rfalSetBitRate+0x294>)
 800d8a2:	70d3      	strb	r3, [r2, #3]
    
    /* Update the bitrate reg if not in NFCV mode (streaming) */
    if( (RFAL_MODE_POLL_NFCV != gRFAL.mode) && (RFAL_MODE_POLL_PICOPASS != gRFAL.mode) )
 800d8a4:	4b94      	ldr	r3, [pc, #592]	; (800daf8 <rfalSetBitRate+0x294>)
 800d8a6:	785b      	ldrb	r3, [r3, #1]
 800d8a8:	2b07      	cmp	r3, #7
 800d8aa:	d012      	beq.n	800d8d2 <rfalSetBitRate+0x6e>
 800d8ac:	4b92      	ldr	r3, [pc, #584]	; (800daf8 <rfalSetBitRate+0x294>)
 800d8ae:	785b      	ldrb	r3, [r3, #1]
 800d8b0:	2b08      	cmp	r3, #8
 800d8b2:	d00e      	beq.n	800d8d2 <rfalSetBitRate+0x6e>
    {
        EXIT_ON_ERR( ret, st25r3911SetBitrate( (uint8_t)gRFAL.txBR, (uint8_t)gRFAL.rxBR ) );
 800d8b4:	4b90      	ldr	r3, [pc, #576]	; (800daf8 <rfalSetBitRate+0x294>)
 800d8b6:	789a      	ldrb	r2, [r3, #2]
 800d8b8:	4b8f      	ldr	r3, [pc, #572]	; (800daf8 <rfalSetBitRate+0x294>)
 800d8ba:	78db      	ldrb	r3, [r3, #3]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7f4 f8a8 	bl	8001a14 <st25r3911SetBitrate>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	83fb      	strh	r3, [r7, #30]
 800d8c8:	8bfb      	ldrh	r3, [r7, #30]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <rfalSetBitRate+0x6e>
 800d8ce:	8bfb      	ldrh	r3, [r7, #30]
 800d8d0:	e21f      	b.n	800dd12 <rfalSetBitRate+0x4ae>
    }
    
    
    switch( gRFAL.mode )
 800d8d2:	4b89      	ldr	r3, [pc, #548]	; (800daf8 <rfalSetBitRate+0x294>)
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	2b0d      	cmp	r3, #13
 800d8d8:	f200 8218 	bhi.w	800dd0c <rfalSetBitRate+0x4a8>
 800d8dc:	a201      	add	r2, pc, #4	; (adr r2, 800d8e4 <rfalSetBitRate+0x80>)
 800d8de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e2:	bf00      	nop
 800d8e4:	0800dd09 	.word	0x0800dd09
 800d8e8:	0800d91d 	.word	0x0800d91d
 800d8ec:	0800d91d 	.word	0x0800d91d
 800d8f0:	0800d9a5 	.word	0x0800d9a5
 800d8f4:	0800d9a5 	.word	0x0800d9a5
 800d8f8:	0800d9a5 	.word	0x0800d9a5
 800d8fc:	0800da35 	.word	0x0800da35
 800d900:	0800dac5 	.word	0x0800dac5
 800d904:	0800dac5 	.word	0x0800dac5
 800d908:	0800dbf9 	.word	0x0800dbf9
 800d90c:	0800dd09 	.word	0x0800dd09
 800d910:	0800dd09 	.word	0x0800dd09
 800d914:	0800dd09 	.word	0x0800dd09
 800d918:	0800dc89 	.word	0x0800dc89
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCA:
        case RFAL_MODE_POLL_NFCA_T1T:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d91c:	2008      	movs	r0, #8
 800d91e:	f7f9 fb47 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d922:	4b75      	ldr	r3, [pc, #468]	; (800daf8 <rfalSetBitRate+0x294>)
 800d924:	789b      	ldrb	r3, [r3, #2]
 800d926:	2bea      	cmp	r3, #234	; 0xea
 800d928:	d90c      	bls.n	800d944 <rfalSetBitRate+0xe0>
 800d92a:	4b73      	ldr	r3, [pc, #460]	; (800daf8 <rfalSetBitRate+0x294>)
 800d92c:	789b      	ldrb	r3, [r3, #2]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	011b      	lsls	r3, r3, #4
 800d932:	b29b      	uxth	r3, r3
 800d934:	b2db      	uxtb	r3, r3
 800d936:	b29b      	uxth	r3, r3
 800d938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d93c:	f043 0301 	orr.w	r3, r3, #1
 800d940:	b29b      	uxth	r3, r3
 800d942:	e00d      	b.n	800d960 <rfalSetBitRate+0xfc>
 800d944:	4b6c      	ldr	r3, [pc, #432]	; (800daf8 <rfalSetBitRate+0x294>)
 800d946:	789b      	ldrb	r3, [r3, #2]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	3301      	adds	r3, #1
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	011b      	lsls	r3, r3, #4
 800d950:	b29b      	uxth	r3, r3
 800d952:	b2db      	uxtb	r3, r3
 800d954:	b29b      	uxth	r3, r3
 800d956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d95a:	f043 0301 	orr.w	r3, r3, #1
 800d95e:	b29b      	uxth	r3, r3
 800d960:	4618      	mov	r0, r3
 800d962:	f7f9 fb25 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d966:	4b64      	ldr	r3, [pc, #400]	; (800daf8 <rfalSetBitRate+0x294>)
 800d968:	78db      	ldrb	r3, [r3, #3]
 800d96a:	2bea      	cmp	r3, #234	; 0xea
 800d96c:	d90a      	bls.n	800d984 <rfalSetBitRate+0x120>
 800d96e:	4b62      	ldr	r3, [pc, #392]	; (800daf8 <rfalSetBitRate+0x294>)
 800d970:	78db      	ldrb	r3, [r3, #3]
 800d972:	b29b      	uxth	r3, r3
 800d974:	011b      	lsls	r3, r3, #4
 800d976:	b29b      	uxth	r3, r3
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800d980:	b29b      	uxth	r3, r3
 800d982:	e00b      	b.n	800d99c <rfalSetBitRate+0x138>
 800d984:	4b5c      	ldr	r3, [pc, #368]	; (800daf8 <rfalSetBitRate+0x294>)
 800d986:	78db      	ldrb	r3, [r3, #3]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	3301      	adds	r3, #1
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	011b      	lsls	r3, r3, #4
 800d990:	b29b      	uxth	r3, r3
 800d992:	b2db      	uxtb	r3, r3
 800d994:	b29b      	uxth	r3, r3
 800d996:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f9 fb07 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800d9a2:	e1b5      	b.n	800dd10 <rfalSetBitRate+0x4ac>
        case RFAL_MODE_POLL_NFCB:
        case RFAL_MODE_POLL_B_PRIME:
        case RFAL_MODE_POLL_B_CTS:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800d9a4:	2008      	movs	r0, #8
 800d9a6:	f7f9 fb03 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800d9aa:	4b53      	ldr	r3, [pc, #332]	; (800daf8 <rfalSetBitRate+0x294>)
 800d9ac:	789b      	ldrb	r3, [r3, #2]
 800d9ae:	2bea      	cmp	r3, #234	; 0xea
 800d9b0:	d90c      	bls.n	800d9cc <rfalSetBitRate+0x168>
 800d9b2:	4b51      	ldr	r3, [pc, #324]	; (800daf8 <rfalSetBitRate+0x294>)
 800d9b4:	789b      	ldrb	r3, [r3, #2]
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	011b      	lsls	r3, r3, #4
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d9c4:	f043 0301 	orr.w	r3, r3, #1
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	e00d      	b.n	800d9e8 <rfalSetBitRate+0x184>
 800d9cc:	4b4a      	ldr	r3, [pc, #296]	; (800daf8 <rfalSetBitRate+0x294>)
 800d9ce:	789b      	ldrb	r3, [r3, #2]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	011b      	lsls	r3, r3, #4
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d9e2:	f043 0301 	orr.w	r3, r3, #1
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7f9 fae1 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCB | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800d9ee:	4b42      	ldr	r3, [pc, #264]	; (800daf8 <rfalSetBitRate+0x294>)
 800d9f0:	78db      	ldrb	r3, [r3, #3]
 800d9f2:	2bea      	cmp	r3, #234	; 0xea
 800d9f4:	d90c      	bls.n	800da10 <rfalSetBitRate+0x1ac>
 800d9f6:	4b40      	ldr	r3, [pc, #256]	; (800daf8 <rfalSetBitRate+0x294>)
 800d9f8:	78db      	ldrb	r3, [r3, #3]
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	011b      	lsls	r3, r3, #4
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	b2db      	uxtb	r3, r3
 800da02:	b29b      	uxth	r3, r3
 800da04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da08:	f043 0302 	orr.w	r3, r3, #2
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	e00d      	b.n	800da2c <rfalSetBitRate+0x1c8>
 800da10:	4b39      	ldr	r3, [pc, #228]	; (800daf8 <rfalSetBitRate+0x294>)
 800da12:	78db      	ldrb	r3, [r3, #3]
 800da14:	b29b      	uxth	r3, r3
 800da16:	3301      	adds	r3, #1
 800da18:	b29b      	uxth	r3, r3
 800da1a:	011b      	lsls	r3, r3, #4
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	b29b      	uxth	r3, r3
 800da22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da26:	f043 0302 	orr.w	r3, r3, #2
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7f9 fabf 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800da32:	e16d      	b.n	800dd10 <rfalSetBitRate+0x4ac>
            
        /*******************************************************************************/
        case RFAL_MODE_POLL_NFCF:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800da34:	2008      	movs	r0, #8
 800da36:	f7f9 fabb 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800da3a:	4b2f      	ldr	r3, [pc, #188]	; (800daf8 <rfalSetBitRate+0x294>)
 800da3c:	789b      	ldrb	r3, [r3, #2]
 800da3e:	2bea      	cmp	r3, #234	; 0xea
 800da40:	d90c      	bls.n	800da5c <rfalSetBitRate+0x1f8>
 800da42:	4b2d      	ldr	r3, [pc, #180]	; (800daf8 <rfalSetBitRate+0x294>)
 800da44:	789b      	ldrb	r3, [r3, #2]
 800da46:	b29b      	uxth	r3, r3
 800da48:	011b      	lsls	r3, r3, #4
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	b29b      	uxth	r3, r3
 800da50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da54:	f043 0301 	orr.w	r3, r3, #1
 800da58:	b29b      	uxth	r3, r3
 800da5a:	e00d      	b.n	800da78 <rfalSetBitRate+0x214>
 800da5c:	4b26      	ldr	r3, [pc, #152]	; (800daf8 <rfalSetBitRate+0x294>)
 800da5e:	789b      	ldrb	r3, [r3, #2]
 800da60:	b29b      	uxth	r3, r3
 800da62:	3301      	adds	r3, #1
 800da64:	b29b      	uxth	r3, r3
 800da66:	011b      	lsls	r3, r3, #4
 800da68:	b29b      	uxth	r3, r3
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da72:	f043 0301 	orr.w	r3, r3, #1
 800da76:	b29b      	uxth	r3, r3
 800da78:	4618      	mov	r0, r3
 800da7a:	f7f9 fa99 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCF | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800da7e:	4b1e      	ldr	r3, [pc, #120]	; (800daf8 <rfalSetBitRate+0x294>)
 800da80:	78db      	ldrb	r3, [r3, #3]
 800da82:	2bea      	cmp	r3, #234	; 0xea
 800da84:	d90c      	bls.n	800daa0 <rfalSetBitRate+0x23c>
 800da86:	4b1c      	ldr	r3, [pc, #112]	; (800daf8 <rfalSetBitRate+0x294>)
 800da88:	78db      	ldrb	r3, [r3, #3]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	011b      	lsls	r3, r3, #4
 800da8e:	b29b      	uxth	r3, r3
 800da90:	b2db      	uxtb	r3, r3
 800da92:	b29b      	uxth	r3, r3
 800da94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da98:	f043 0302 	orr.w	r3, r3, #2
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	e00d      	b.n	800dabc <rfalSetBitRate+0x258>
 800daa0:	4b15      	ldr	r3, [pc, #84]	; (800daf8 <rfalSetBitRate+0x294>)
 800daa2:	78db      	ldrb	r3, [r3, #3]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	3301      	adds	r3, #1
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	011b      	lsls	r3, r3, #4
 800daac:	b29b      	uxth	r3, r3
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dab6:	f043 0302 	orr.w	r3, r3, #2
 800daba:	b29b      	uxth	r3, r3
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7f9 fa77 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800dac2:	e125      	b.n	800dd10 <rfalSetBitRate+0x4ac>
        
           #if !RFAL_FEATURE_NFCV
                return ERR_DISABLED;
           #else
               
                if( ((gRFAL.rxBR != RFAL_BR_26p48) && (gRFAL.rxBR != RFAL_BR_52p97) && (gRFAL.rxBR != RFAL_BR_106) && (gRFAL.rxBR != RFAL_BR_212))
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <rfalSetBitRate+0x294>)
 800dac6:	78db      	ldrb	r3, [r3, #3]
 800dac8:	2bec      	cmp	r3, #236	; 0xec
 800daca:	d00b      	beq.n	800dae4 <rfalSetBitRate+0x280>
 800dacc:	4b0a      	ldr	r3, [pc, #40]	; (800daf8 <rfalSetBitRate+0x294>)
 800dace:	78db      	ldrb	r3, [r3, #3]
 800dad0:	2beb      	cmp	r3, #235	; 0xeb
 800dad2:	d007      	beq.n	800dae4 <rfalSetBitRate+0x280>
 800dad4:	4b08      	ldr	r3, [pc, #32]	; (800daf8 <rfalSetBitRate+0x294>)
 800dad6:	78db      	ldrb	r3, [r3, #3]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <rfalSetBitRate+0x280>
 800dadc:	4b06      	ldr	r3, [pc, #24]	; (800daf8 <rfalSetBitRate+0x294>)
 800dade:	78db      	ldrb	r3, [r3, #3]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d107      	bne.n	800daf4 <rfalSetBitRate+0x290>
                        || ((gRFAL.txBR != RFAL_BR_1p66) && (gRFAL.txBR != RFAL_BR_26p48)) )
 800dae4:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <rfalSetBitRate+0x294>)
 800dae6:	789b      	ldrb	r3, [r3, #2]
 800dae8:	2bed      	cmp	r3, #237	; 0xed
 800daea:	d007      	beq.n	800dafc <rfalSetBitRate+0x298>
 800daec:	4b02      	ldr	r3, [pc, #8]	; (800daf8 <rfalSetBitRate+0x294>)
 800daee:	789b      	ldrb	r3, [r3, #2]
 800daf0:	2bec      	cmp	r3, #236	; 0xec
 800daf2:	d003      	beq.n	800dafc <rfalSetBitRate+0x298>
                {
                    return ERR_PARAM;
 800daf4:	2307      	movs	r3, #7
 800daf6:	e10c      	b.n	800dd12 <rfalSetBitRate+0x4ae>
 800daf8:	200009a8 	.word	0x200009a8
                    const struct iso15693StreamConfig *isoStreamConfig;
                    struct st25r3911StreamConfig      streamConf;
                    iso15693PhyConfig_t               config;
                    
                    /* Set the coding configuration for configuring ISO15693 */
                    config.coding     = (( gRFAL.txBR == RFAL_BR_1p66  ) ? ISO15693_VCD_CODING_1_256 : ISO15693_VCD_CODING_1_4);
 800dafc:	4b87      	ldr	r3, [pc, #540]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dafe:	789b      	ldrb	r3, [r3, #2]
 800db00:	2bed      	cmp	r3, #237	; 0xed
 800db02:	bf0c      	ite	eq
 800db04:	2301      	moveq	r3, #1
 800db06:	2300      	movne	r3, #0
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	733b      	strb	r3, [r7, #12]
                    switch (gRFAL.rxBR){
 800db0c:	4b83      	ldr	r3, [pc, #524]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800db0e:	78db      	ldrb	r3, [r3, #3]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d00a      	beq.n	800db2a <rfalSetBitRate+0x2c6>
 800db14:	2beb      	cmp	r3, #235	; 0xeb
 800db16:	d002      	beq.n	800db1e <rfalSetBitRate+0x2ba>
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d003      	beq.n	800db24 <rfalSetBitRate+0x2c0>
 800db1c:	e008      	b.n	800db30 <rfalSetBitRate+0x2cc>
                        case RFAL_BR_52p97:
                            config.speedMode = 1;
 800db1e:	2301      	movs	r3, #1
 800db20:	613b      	str	r3, [r7, #16]
                            break;
 800db22:	e008      	b.n	800db36 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_106:
                            config.speedMode = 2;
 800db24:	2302      	movs	r3, #2
 800db26:	613b      	str	r3, [r7, #16]
                            break;
 800db28:	e005      	b.n	800db36 <rfalSetBitRate+0x2d2>
                        case RFAL_BR_212:
                            config.speedMode = 3;
 800db2a:	2303      	movs	r3, #3
 800db2c:	613b      	str	r3, [r7, #16]
                            break;
 800db2e:	e002      	b.n	800db36 <rfalSetBitRate+0x2d2>
                        default:
                            config.speedMode = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	613b      	str	r3, [r7, #16]
                            break;
 800db34:	bf00      	nop
                    }
                    
                    iso15693PhyConfigure(&config, &isoStreamConfig);   /* Convert ISO15693 config into StreamConfig */
 800db36:	f107 0218 	add.w	r2, r7, #24
 800db3a:	f107 030c 	add.w	r3, r7, #12
 800db3e:	4611      	mov	r1, r2
 800db40:	4618      	mov	r0, r3
 800db42:	f7f9 fb95 	bl	8007270 <iso15693PhyConfigure>
                    
                    /* MISRA 11.3 - Cannot point directly into different object type, copy to local var */
                    streamConf.din                  = isoStreamConfig->din;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	785b      	ldrb	r3, [r3, #1]
 800db4a:	757b      	strb	r3, [r7, #21]
                    streamConf.dout                 = isoStreamConfig->dout;
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	789b      	ldrb	r3, [r3, #2]
 800db50:	75bb      	strb	r3, [r7, #22]
                    streamConf.report_period_length = isoStreamConfig->report_period_length;
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	78db      	ldrb	r3, [r3, #3]
 800db56:	75fb      	strb	r3, [r7, #23]
                    streamConf.useBPSK              = isoStreamConfig->useBPSK;
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	753b      	strb	r3, [r7, #20]
                    st25r3911StreamConfigure(&streamConf);
 800db5e:	f107 0314 	add.w	r3, r7, #20
 800db62:	4618      	mov	r0, r3
 800db64:	f7f4 f916 	bl	8001d94 <st25r3911StreamConfigure>
                }
    
                /* Set Analog configurations for this bit rate */
                rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800db68:	2008      	movs	r0, #8
 800db6a:	f7f9 fa21 	bl	8006fb0 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800db6e:	4b6b      	ldr	r3, [pc, #428]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800db70:	789b      	ldrb	r3, [r3, #2]
 800db72:	2bea      	cmp	r3, #234	; 0xea
 800db74:	d90c      	bls.n	800db90 <rfalSetBitRate+0x32c>
 800db76:	4b69      	ldr	r3, [pc, #420]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800db78:	789b      	ldrb	r3, [r3, #2]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	011b      	lsls	r3, r3, #4
 800db7e:	b29b      	uxth	r3, r3
 800db80:	b2db      	uxtb	r3, r3
 800db82:	b29b      	uxth	r3, r3
 800db84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800db88:	f043 0301 	orr.w	r3, r3, #1
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	e00d      	b.n	800dbac <rfalSetBitRate+0x348>
 800db90:	4b62      	ldr	r3, [pc, #392]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800db92:	789b      	ldrb	r3, [r3, #2]
 800db94:	b29b      	uxth	r3, r3
 800db96:	3301      	adds	r3, #1
 800db98:	b29b      	uxth	r3, r3
 800db9a:	011b      	lsls	r3, r3, #4
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7f9 f9ff 	bl	8006fb0 <rfalSetAnalogConfig>
                rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dbb2:	4b5a      	ldr	r3, [pc, #360]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dbb4:	78db      	ldrb	r3, [r3, #3]
 800dbb6:	2bea      	cmp	r3, #234	; 0xea
 800dbb8:	d90c      	bls.n	800dbd4 <rfalSetBitRate+0x370>
 800dbba:	4b58      	ldr	r3, [pc, #352]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dbbc:	78db      	ldrb	r3, [r3, #3]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	011b      	lsls	r3, r3, #4
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbcc:	f043 0302 	orr.w	r3, r3, #2
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	e00d      	b.n	800dbf0 <rfalSetBitRate+0x38c>
 800dbd4:	4b51      	ldr	r3, [pc, #324]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dbd6:	78db      	ldrb	r3, [r3, #3]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	3301      	adds	r3, #1
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	011b      	lsls	r3, r3, #4
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbea:	f043 0302 	orr.w	r3, r3, #2
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7f9 f9dd 	bl	8006fb0 <rfalSetAnalogConfig>
                break;
 800dbf6:	e08b      	b.n	800dd10 <rfalSetBitRate+0x4ac>
        
        /*******************************************************************************/
        case RFAL_MODE_POLL_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_POLL_COMMON) );
 800dbf8:	2008      	movs	r0, #8
 800dbfa:	f7f9 f9d9 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dbfe:	4b47      	ldr	r3, [pc, #284]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc00:	789b      	ldrb	r3, [r3, #2]
 800dc02:	2bea      	cmp	r3, #234	; 0xea
 800dc04:	d90c      	bls.n	800dc20 <rfalSetBitRate+0x3bc>
 800dc06:	4b45      	ldr	r3, [pc, #276]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc08:	789b      	ldrb	r3, [r3, #2]
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc18:	f043 0301 	orr.w	r3, r3, #1
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	e00d      	b.n	800dc3c <rfalSetBitRate+0x3d8>
 800dc20:	4b3e      	ldr	r3, [pc, #248]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc22:	789b      	ldrb	r3, [r3, #2]
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	3301      	adds	r3, #1
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	011b      	lsls	r3, r3, #4
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc36:	f043 0301 	orr.w	r3, r3, #1
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7f9 f9b7 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dc42:	4b36      	ldr	r3, [pc, #216]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc44:	78db      	ldrb	r3, [r3, #3]
 800dc46:	2bea      	cmp	r3, #234	; 0xea
 800dc48:	d90c      	bls.n	800dc64 <rfalSetBitRate+0x400>
 800dc4a:	4b34      	ldr	r3, [pc, #208]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc4c:	78db      	ldrb	r3, [r3, #3]
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	011b      	lsls	r3, r3, #4
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc5c:	f043 0302 	orr.w	r3, r3, #2
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	e00d      	b.n	800dc80 <rfalSetBitRate+0x41c>
 800dc64:	4b2d      	ldr	r3, [pc, #180]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc66:	78db      	ldrb	r3, [r3, #3]
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	011b      	lsls	r3, r3, #4
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc7a:	f043 0302 	orr.w	r3, r3, #2
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f9 f995 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800dc86:	e043      	b.n	800dd10 <rfalSetBitRate+0x4ac>
        
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_ACTIVE_P2P:
            
            /* Set Analog configurations for this bit rate */
            rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_LISTEN_COMMON) );
 800dc88:	2009      	movs	r0, #9
 800dc8a:	f7f9 f991 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.txBR) | RFAL_ANALOG_CONFIG_TX ) );
 800dc8e:	4b23      	ldr	r3, [pc, #140]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc90:	789b      	ldrb	r3, [r3, #2]
 800dc92:	2bea      	cmp	r3, #234	; 0xea
 800dc94:	d90a      	bls.n	800dcac <rfalSetBitRate+0x448>
 800dc96:	4b21      	ldr	r3, [pc, #132]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dc98:	789b      	ldrb	r3, [r3, #2]
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	011b      	lsls	r3, r3, #4
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	4b1e      	ldr	r3, [pc, #120]	; (800dd20 <rfalSetBitRate+0x4bc>)
 800dca6:	4313      	orrs	r3, r2
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	e00b      	b.n	800dcc4 <rfalSetBitRate+0x460>
 800dcac:	4b1b      	ldr	r3, [pc, #108]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dcae:	789b      	ldrb	r3, [r3, #2]
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	011b      	lsls	r3, r3, #4
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	4b18      	ldr	r3, [pc, #96]	; (800dd20 <rfalSetBitRate+0x4bc>)
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f9 f973 	bl	8006fb0 <rfalSetAnalogConfig>
            rfalSetAnalogConfig( (rfalAnalogConfigId)(RFAL_ANALOG_CONFIG_LISTEN | RFAL_ANALOG_CONFIG_TECH_AP2P | rfalConvBR2ACBR(gRFAL.rxBR) | RFAL_ANALOG_CONFIG_RX ) );
 800dcca:	4b14      	ldr	r3, [pc, #80]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dccc:	78db      	ldrb	r3, [r3, #3]
 800dcce:	2bea      	cmp	r3, #234	; 0xea
 800dcd0:	d90a      	bls.n	800dce8 <rfalSetBitRate+0x484>
 800dcd2:	4b12      	ldr	r3, [pc, #72]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dcd4:	78db      	ldrb	r3, [r3, #3]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	011b      	lsls	r3, r3, #4
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <rfalSetBitRate+0x4c0>)
 800dce2:	4313      	orrs	r3, r2
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	e00b      	b.n	800dd00 <rfalSetBitRate+0x49c>
 800dce8:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <rfalSetBitRate+0x4b8>)
 800dcea:	78db      	ldrb	r3, [r3, #3]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	3301      	adds	r3, #1
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	011b      	lsls	r3, r3, #4
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	4b0a      	ldr	r3, [pc, #40]	; (800dd24 <rfalSetBitRate+0x4c0>)
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7f9 f955 	bl	8006fb0 <rfalSetAnalogConfig>
            break;
 800dd06:	e003      	b.n	800dd10 <rfalSetBitRate+0x4ac>
        /*******************************************************************************/
        case RFAL_MODE_LISTEN_NFCA:
        case RFAL_MODE_LISTEN_NFCB:
        case RFAL_MODE_LISTEN_NFCF:
        case RFAL_MODE_NONE:
            return ERR_WRONG_STATE;
 800dd08:	2321      	movs	r3, #33	; 0x21
 800dd0a:	e002      	b.n	800dd12 <rfalSetBitRate+0x4ae>
            
        /*******************************************************************************/
        default:
            return ERR_NOT_IMPLEMENTED;
 800dd0c:	230f      	movs	r3, #15
 800dd0e:	e000      	b.n	800dd12 <rfalSetBitRate+0x4ae>
    }
    
    return ERR_NONE;
 800dd10:	2300      	movs	r3, #0
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3720      	adds	r7, #32
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	200009a8 	.word	0x200009a8
 800dd20:	ffff8801 	.word	0xffff8801
 800dd24:	ffff8802 	.word	0xffff8802

0800dd28 <rfalGetBitRate>:


/*******************************************************************************/
ReturnCode rfalGetBitRate( rfalBitRate *txBR, rfalBitRate *rxBR )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
    if( (gRFAL.state == RFAL_STATE_IDLE) || (gRFAL.mode == RFAL_MODE_NONE) )
 800dd32:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <rfalGetBitRate+0x48>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d003      	beq.n	800dd42 <rfalGetBitRate+0x1a>
 800dd3a:	4b0d      	ldr	r3, [pc, #52]	; (800dd70 <rfalGetBitRate+0x48>)
 800dd3c:	785b      	ldrb	r3, [r3, #1]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <rfalGetBitRate+0x1e>
    {
        return ERR_WRONG_STATE;
 800dd42:	2321      	movs	r3, #33	; 0x21
 800dd44:	e00e      	b.n	800dd64 <rfalGetBitRate+0x3c>
    }
    
    if( txBR != NULL )
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d003      	beq.n	800dd54 <rfalGetBitRate+0x2c>
    {
        *txBR = gRFAL.txBR;
 800dd4c:	4b08      	ldr	r3, [pc, #32]	; (800dd70 <rfalGetBitRate+0x48>)
 800dd4e:	789a      	ldrb	r2, [r3, #2]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	701a      	strb	r2, [r3, #0]
    }
    
    if( rxBR != NULL )
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <rfalGetBitRate+0x3a>
    {
        *rxBR = gRFAL.rxBR;
 800dd5a:	4b05      	ldr	r3, [pc, #20]	; (800dd70 <rfalGetBitRate+0x48>)
 800dd5c:	78da      	ldrb	r2, [r3, #3]
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	701a      	strb	r2, [r3, #0]
    }
    
    return ERR_NONE;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr
 800dd70:	200009a8 	.word	0x200009a8

0800dd74 <rfalSetErrorHandling>:


/*******************************************************************************/
void rfalSetErrorHandling( rfalEHandling eHandling )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	71fb      	strb	r3, [r7, #7]
    gRFAL.conf.eHandling = eHandling;
 800dd7e:	4a04      	ldr	r2, [pc, #16]	; (800dd90 <rfalSetErrorHandling+0x1c>)
 800dd80:	79fb      	ldrb	r3, [r7, #7]
 800dd82:	71d3      	strb	r3, [r2, #7]
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	200009a8 	.word	0x200009a8

0800dd94 <rfalSetFDTPoll>:
}


/*******************************************************************************/
void rfalSetFDTPoll( uint32_t FDTPoll )
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTPoll = MIN( FDTPoll, RFAL_ST25R3911_GPT_MAX_1FC );
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a06      	ldr	r2, [pc, #24]	; (800ddb8 <rfalSetFDTPoll+0x24>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	bf28      	it	cs
 800dda4:	4613      	movcs	r3, r2
 800dda6:	4a05      	ldr	r2, [pc, #20]	; (800ddbc <rfalSetFDTPoll+0x28>)
 800dda8:	6113      	str	r3, [r2, #16]
}
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	0007fff8 	.word	0x0007fff8
 800ddbc:	200009a8 	.word	0x200009a8

0800ddc0 <rfalSetFDTListen>:
}


/*******************************************************************************/
void rfalSetFDTListen( uint32_t FDTListen )
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
    gRFAL.timings.FDTListen = MIN( FDTListen, RFAL_ST25R3911_MRT_MAX_1FC);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f5b3 5f7f 	cmp.w	r3, #16320	; 0x3fc0
 800ddce:	bf28      	it	cs
 800ddd0:	f44f 537f 	movcs.w	r3, #16320	; 0x3fc0
 800ddd4:	4a03      	ldr	r2, [pc, #12]	; (800dde4 <rfalSetFDTListen+0x24>)
 800ddd6:	60d3      	str	r3, [r2, #12]
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	200009a8 	.word	0x200009a8

0800dde8 <rfalSetGT>:
{
    return gRFAL.timings.FDTListen;
}

void rfalSetGT( uint32_t GT )
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
    gRFAL.timings.GT = MIN( GT, RFAL_ST25R3911_GT_MAX_1FC );
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a06      	ldr	r2, [pc, #24]	; (800de0c <rfalSetGT+0x24>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	bf28      	it	cs
 800ddf8:	4613      	movcs	r3, r2
 800ddfa:	4a05      	ldr	r2, [pc, #20]	; (800de10 <rfalSetGT+0x28>)
 800ddfc:	6093      	str	r3, [r2, #8]
}
 800ddfe:	bf00      	nop
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	040a8bc0 	.word	0x040a8bc0
 800de10:	200009a8 	.word	0x200009a8

0800de14 <rfalIsGTExpired>:
    return gRFAL.timings.GT;
}

/*******************************************************************************/
bool rfalIsGTExpired( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
    if( gRFAL.tmr.GT != RFAL_TIMING_NONE )
 800de18:	4b09      	ldr	r3, [pc, #36]	; (800de40 <rfalIsGTExpired+0x2c>)
 800de1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00c      	beq.n	800de3a <rfalIsGTExpired+0x26>
    {
        if( !rfalTimerisExpired( gRFAL.tmr.GT ) )
 800de20:	4b07      	ldr	r3, [pc, #28]	; (800de40 <rfalIsGTExpired+0x2c>)
 800de22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de24:	4618      	mov	r0, r3
 800de26:	f7f4 fdbb 	bl	80029a0 <timerIsExpired>
 800de2a:	4603      	mov	r3, r0
 800de2c:	f083 0301 	eor.w	r3, r3, #1
 800de30:	b2db      	uxtb	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <rfalIsGTExpired+0x26>
        {
            return false;
 800de36:	2300      	movs	r3, #0
 800de38:	e000      	b.n	800de3c <rfalIsGTExpired+0x28>
        }
    }    
    return true;
 800de3a:	2301      	movs	r3, #1
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	200009a8 	.word	0x200009a8

0800de44 <rfalFieldOnAndStartGT>:

/*******************************************************************************/
ReturnCode rfalFieldOnAndStartGT( void )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
    ReturnCode  ret;
    
    /* Check if RFAL has been initialized (Oscillator should be running) and also
     * if a direct register access has been performed and left the Oscillator Off */
    if( !st25r3911IsOscOn() || (gRFAL.state < RFAL_STATE_INIT) )
 800de4a:	2280      	movs	r2, #128	; 0x80
 800de4c:	2180      	movs	r1, #128	; 0x80
 800de4e:	2002      	movs	r0, #2
 800de50:	f7f3 fe96 	bl	8001b80 <st25r3911CheckReg>
 800de54:	4603      	mov	r3, r0
 800de56:	f083 0301 	eor.w	r3, r3, #1
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d103      	bne.n	800de68 <rfalFieldOnAndStartGT+0x24>
 800de60:	4b27      	ldr	r3, [pc, #156]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <rfalFieldOnAndStartGT+0x28>
    {
        return ERR_WRONG_STATE;
 800de68:	2321      	movs	r3, #33	; 0x21
 800de6a:	e044      	b.n	800def6 <rfalFieldOnAndStartGT+0xb2>
    }
    
    ret = ERR_NONE;
 800de6c:	2300      	movs	r3, #0
 800de6e:	80fb      	strh	r3, [r7, #6]
    
    /* Set Analog configurations for Field On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_ON) );
 800de70:	2002      	movs	r0, #2
 800de72:	f7f9 f89d 	bl	8006fb0 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Perform collision avoidance and turn field On if not already On */
    if( !st25r3911IsTxEnabled() || !gRFAL.field )
 800de76:	2208      	movs	r2, #8
 800de78:	2108      	movs	r1, #8
 800de7a:	2002      	movs	r0, #2
 800de7c:	f7f3 fe80 	bl	8001b80 <st25r3911CheckReg>
 800de80:	4603      	mov	r3, r0
 800de82:	f083 0301 	eor.w	r3, r3, #1
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d106      	bne.n	800de9a <rfalFieldOnAndStartGT+0x56>
 800de8c:	4b1c      	ldr	r3, [pc, #112]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800de8e:	791b      	ldrb	r3, [r3, #4]
 800de90:	f083 0301 	eor.w	r3, r3, #1
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d016      	beq.n	800dec8 <rfalFieldOnAndStartGT+0x84>
    {
        /* Use Thresholds set by AnalogConfig */
        ret = st25r3911PerformCollisionAvoidance( ST25R3911_CMD_RESPONSE_RF_COLLISION_0, ST25R3911_THRESHOLD_DO_NOT_SET, ST25R3911_THRESHOLD_DO_NOT_SET, 0 );
 800de9a:	2300      	movs	r3, #0
 800de9c:	22ff      	movs	r2, #255	; 0xff
 800de9e:	21ff      	movs	r1, #255	; 0xff
 800dea0:	20ca      	movs	r0, #202	; 0xca
 800dea2:	f7f3 feed 	bl	8001c80 <st25r3911PerformCollisionAvoidance>
 800dea6:	4603      	mov	r3, r0
 800dea8:	80fb      	strh	r3, [r7, #6]
        
        gRFAL.field = st25r3911IsTxEnabled();
 800deaa:	2208      	movs	r2, #8
 800deac:	2108      	movs	r1, #8
 800deae:	2002      	movs	r0, #2
 800deb0:	f7f3 fe66 	bl	8001b80 <st25r3911CheckReg>
 800deb4:	4603      	mov	r3, r0
 800deb6:	461a      	mov	r2, r3
 800deb8:	4b11      	ldr	r3, [pc, #68]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800deba:	711a      	strb	r2, [r3, #4]
        
        /* Only turn on Receiver and Transmitter if field was successfully turned On */
        if(gRFAL.field)
 800debc:	4b10      	ldr	r3, [pc, #64]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800debe:	791b      	ldrb	r3, [r3, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d001      	beq.n	800dec8 <rfalFieldOnAndStartGT+0x84>
        {            
            st25r3911TxRxOn(); /* Enable Tx and Rx (Tx is already On) */
 800dec4:	f7f3 fc8b 	bl	80017de <st25r3911TxRxOn>
        }
    }
    
    /*******************************************************************************/
    /* Start GT timer in case the GT value is set */
    if( (gRFAL.timings.GT != RFAL_TIMING_NONE) )
 800dec8:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d011      	beq.n	800def4 <rfalFieldOnAndStartGT+0xb0>
    {
        /* Ensure that a SW timer doesn't have a lower value then the minimum  */
        rfalTimerStart( gRFAL.tmr.GT, rfalConv1fcToMs( MAX( (gRFAL.timings.GT), RFAL_ST25R3911_GT_MIN_1FC) ) );
 800ded0:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	f243 42f8 	movw	r2, #13560	; 0x34f8
 800ded8:	4293      	cmp	r3, r2
 800deda:	bf38      	it	cc
 800dedc:	4613      	movcc	r3, r2
 800dede:	4a09      	ldr	r2, [pc, #36]	; (800df04 <rfalFieldOnAndStartGT+0xc0>)
 800dee0:	fba2 2303 	umull	r2, r3, r2, r3
 800dee4:	0b1b      	lsrs	r3, r3, #12
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	4618      	mov	r0, r3
 800deea:	f7f4 fd4b 	bl	8002984 <timerCalculateTimer>
 800deee:	4602      	mov	r2, r0
 800def0:	4b03      	ldr	r3, [pc, #12]	; (800df00 <rfalFieldOnAndStartGT+0xbc>)
 800def2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    return ret;
 800def4:	88fb      	ldrh	r3, [r7, #6]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	200009a8 	.word	0x200009a8
 800df04:	4d542005 	.word	0x4d542005

0800df08 <rfalFieldOff>:


/*******************************************************************************/
ReturnCode rfalFieldOff( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
    /* Check whether a TxRx is not yet finished */
    if( gRFAL.TxRx.state != RFAL_TXRX_STATE_IDLE )
 800df0c:	4b08      	ldr	r3, [pc, #32]	; (800df30 <rfalFieldOff+0x28>)
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <rfalFieldOff+0x10>
    {
        rfalCleanupTransceive();
 800df14:	f000 fac8 	bl	800e4a8 <rfalCleanupTransceive>
    }
    
    /* Disable Tx and Rx */
    st25r3911TxRxOff();
 800df18:	f7f3 fc69 	bl	80017ee <st25r3911TxRxOff>
    
    /* Set Analog configurations for Field Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_FIELD_OFF) );
 800df1c:	2003      	movs	r0, #3
 800df1e:	f7f9 f847 	bl	8006fb0 <rfalSetAnalogConfig>
    gRFAL.field = false;
 800df22:	4b03      	ldr	r3, [pc, #12]	; (800df30 <rfalFieldOff+0x28>)
 800df24:	2200      	movs	r2, #0
 800df26:	711a      	strb	r2, [r3, #4]
    
    return ERR_NONE;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	200009a8 	.word	0x200009a8

0800df34 <rfalStartTransceive>:


/*******************************************************************************/
ReturnCode rfalStartTransceive( const rfalTransceiveContext *ctx )
{
 800df34:	b5b0      	push	{r4, r5, r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
    uint32_t FxTAdj;  /* FWT or FDT adjustment calculation */
    
    /* Check for valid parameters */
    if( ctx == NULL )
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d101      	bne.n	800df46 <rfalStartTransceive+0x12>
    {
        return ERR_PARAM;
 800df42:	2307      	movs	r3, #7
 800df44:	e11c      	b.n	800e180 <rfalStartTransceive+0x24c>
    }
    
    /* Ensure that RFAL is already Initialized and the mode has been set */
    if( (gRFAL.state >= RFAL_STATE_MODE_SET) /*&& (gRFAL.TxRx.state == RFAL_TXRX_STATE_INIT )*/ )
 800df46:	4b90      	ldr	r3, [pc, #576]	; (800e188 <rfalStartTransceive+0x254>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	f240 8117 	bls.w	800e17e <rfalStartTransceive+0x24a>
    {
        /*******************************************************************************/
        /* Check whether the field is already On, otherwise no TXE will be received  */
        if( !st25r3911IsTxEnabled() && (!rfalIsModePassiveListen( gRFAL.mode ) && (ctx->txBuf != NULL)) )
 800df50:	2208      	movs	r2, #8
 800df52:	2108      	movs	r1, #8
 800df54:	2002      	movs	r0, #2
 800df56:	f7f3 fe13 	bl	8001b80 <st25r3911CheckReg>
 800df5a:	4603      	mov	r3, r0
 800df5c:	f083 0301 	eor.w	r3, r3, #1
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d011      	beq.n	800df8a <rfalStartTransceive+0x56>
 800df66:	4b88      	ldr	r3, [pc, #544]	; (800e188 <rfalStartTransceive+0x254>)
 800df68:	785b      	ldrb	r3, [r3, #1]
 800df6a:	2b0a      	cmp	r3, #10
 800df6c:	d00d      	beq.n	800df8a <rfalStartTransceive+0x56>
 800df6e:	4b86      	ldr	r3, [pc, #536]	; (800e188 <rfalStartTransceive+0x254>)
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	2b0b      	cmp	r3, #11
 800df74:	d009      	beq.n	800df8a <rfalStartTransceive+0x56>
 800df76:	4b84      	ldr	r3, [pc, #528]	; (800e188 <rfalStartTransceive+0x254>)
 800df78:	785b      	ldrb	r3, [r3, #1]
 800df7a:	2b0c      	cmp	r3, #12
 800df7c:	d005      	beq.n	800df8a <rfalStartTransceive+0x56>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d001      	beq.n	800df8a <rfalStartTransceive+0x56>
        {
            return ERR_WRONG_STATE;
 800df86:	2321      	movs	r3, #33	; 0x21
 800df88:	e0fa      	b.n	800e180 <rfalStartTransceive+0x24c>
        }
        
        gRFAL.TxRx.ctx = *ctx;
 800df8a:	4b7f      	ldr	r3, [pc, #508]	; (800e188 <rfalStartTransceive+0x254>)
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	f103 041c 	add.w	r4, r3, #28
 800df92:	4615      	mov	r5, r2
 800df94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800df9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        
        /*******************************************************************************/
        if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800dfa0:	4b79      	ldr	r3, [pc, #484]	; (800e188 <rfalStartTransceive+0x254>)
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d031      	beq.n	800e00c <rfalStartTransceive+0xd8>
        {
            /* Calculate MRT adjustment accordingly to the current mode */
            FxTAdj = RFAL_FDT_LISTEN_MRT_ADJUSTMENT;
 800dfa8:	2340      	movs	r3, #64	; 0x40
 800dfaa:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800dfac:	4b76      	ldr	r3, [pc, #472]	; (800e188 <rfalStartTransceive+0x254>)
 800dfae:	785b      	ldrb	r3, [r3, #1]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d103      	bne.n	800dfbc <rfalStartTransceive+0x88>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800dfba:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_A_ADJUSTMENT; }
 800dfbc:	4b72      	ldr	r3, [pc, #456]	; (800e188 <rfalStartTransceive+0x254>)
 800dfbe:	785b      	ldrb	r3, [r3, #1]
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	d103      	bne.n	800dfcc <rfalStartTransceive+0x98>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800dfca:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_B_ADJUSTMENT; }
 800dfcc:	4b6e      	ldr	r3, [pc, #440]	; (800e188 <rfalStartTransceive+0x254>)
 800dfce:	785b      	ldrb	r3, [r3, #1]
 800dfd0:	2b03      	cmp	r3, #3
 800dfd2:	d103      	bne.n	800dfdc <rfalStartTransceive+0xa8>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800dfda:	60fb      	str	r3, [r7, #12]
            if(gRFAL.mode == RFAL_MODE_POLL_NFCV)      { FxTAdj += (uint32_t)RFAL_FDT_LISTEN_V_ADJUSTMENT; }
 800dfdc:	4b6a      	ldr	r3, [pc, #424]	; (800e188 <rfalStartTransceive+0x254>)
 800dfde:	785b      	ldrb	r3, [r3, #1]
 800dfe0:	2b07      	cmp	r3, #7
 800dfe2:	d102      	bne.n	800dfea <rfalStartTransceive+0xb6>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	3380      	adds	r3, #128	; 0x80
 800dfe8:	60fb      	str	r3, [r7, #12]
            
            
            /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
            st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( (FxTAdj > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - FxTAdj) ) );
 800dfea:	4b67      	ldr	r3, [pc, #412]	; (800e188 <rfalStartTransceive+0x254>)
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d806      	bhi.n	800e002 <rfalStartTransceive+0xce>
 800dff4:	4b64      	ldr	r3, [pc, #400]	; (800e188 <rfalStartTransceive+0x254>)
 800dff6:	68da      	ldr	r2, [r3, #12]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	099b      	lsrs	r3, r3, #6
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	e000      	b.n	800e004 <rfalStartTransceive+0xd0>
 800e002:	2304      	movs	r3, #4
 800e004:	4619      	mov	r1, r3
 800e006:	200e      	movs	r0, #14
 800e008:	f7f4 f8da 	bl	80021c0 <st25r3911WriteRegister>
        
        /*******************************************************************************/
        /* FDT Poll will be loaded in rfalPrepareTransceive() once the previous was expired */
        
        /*******************************************************************************/
        if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e00c:	4b5e      	ldr	r3, [pc, #376]	; (800e188 <rfalStartTransceive+0x254>)
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	2b09      	cmp	r3, #9
 800e012:	d053      	beq.n	800e0bc <rfalStartTransceive+0x188>
 800e014:	4b5c      	ldr	r3, [pc, #368]	; (800e188 <rfalStartTransceive+0x254>)
 800e016:	785b      	ldrb	r3, [r3, #1]
 800e018:	2b0d      	cmp	r3, #13
 800e01a:	d04f      	beq.n	800e0bc <rfalStartTransceive+0x188>
        {
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e01c:	4b5a      	ldr	r3, [pc, #360]	; (800e188 <rfalStartTransceive+0x254>)
 800e01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e020:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e024:	d046      	beq.n	800e0b4 <rfalStartTransceive+0x180>
 800e026:	4b58      	ldr	r3, [pc, #352]	; (800e188 <rfalStartTransceive+0x254>)
 800e028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d042      	beq.n	800e0b4 <rfalStartTransceive+0x180>
            {
                /* Ensure proper timing configuration */
                if( gRFAL.timings.FDTListen >= gRFAL.TxRx.ctx.fwt )
 800e02e:	4b56      	ldr	r3, [pc, #344]	; (800e188 <rfalStartTransceive+0x254>)
 800e030:	68da      	ldr	r2, [r3, #12]
 800e032:	4b55      	ldr	r3, [pc, #340]	; (800e188 <rfalStartTransceive+0x254>)
 800e034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e036:	429a      	cmp	r2, r3
 800e038:	d301      	bcc.n	800e03e <rfalStartTransceive+0x10a>
                {
                    return ERR_PARAM;
 800e03a:	2307      	movs	r3, #7
 800e03c:	e0a0      	b.n	800e180 <rfalStartTransceive+0x24c>
                }
        
                FxTAdj = RFAL_FWT_ADJUSTMENT;
 800e03e:	2340      	movs	r3, #64	; 0x40
 800e040:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA)      { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e042:	4b51      	ldr	r3, [pc, #324]	; (800e188 <rfalStartTransceive+0x254>)
 800e044:	785b      	ldrb	r3, [r3, #1]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d103      	bne.n	800e052 <rfalStartTransceive+0x11e>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e050:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCA_T1T)  { FxTAdj += (uint32_t)RFAL_FWT_A_ADJUSTMENT;    }
 800e052:	4b4d      	ldr	r3, [pc, #308]	; (800e188 <rfalStartTransceive+0x254>)
 800e054:	785b      	ldrb	r3, [r3, #1]
 800e056:	2b02      	cmp	r3, #2
 800e058:	d103      	bne.n	800e062 <rfalStartTransceive+0x12e>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e060:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCB)      { FxTAdj += (uint32_t)RFAL_FWT_B_ADJUSTMENT;    }
 800e062:	4b49      	ldr	r3, [pc, #292]	; (800e188 <rfalStartTransceive+0x254>)
 800e064:	785b      	ldrb	r3, [r3, #1]
 800e066:	2b03      	cmp	r3, #3
 800e068:	d103      	bne.n	800e072 <rfalStartTransceive+0x13e>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f503 632e 	add.w	r3, r3, #2784	; 0xae0
 800e070:	60fb      	str	r3, [r7, #12]
                if(gRFAL.mode == RFAL_MODE_POLL_NFCF)      
 800e072:	4b45      	ldr	r3, [pc, #276]	; (800e188 <rfalStartTransceive+0x254>)
 800e074:	785b      	ldrb	r3, [r3, #1]
 800e076:	2b06      	cmp	r3, #6
 800e078:	d10b      	bne.n	800e092 <rfalStartTransceive+0x15e>
                {
                    FxTAdj += (uint32_t)((gRFAL.txBR == RFAL_BR_212) ? RFAL_FWT_F_212_ADJUSTMENT : RFAL_FWT_F_424_ADJUSTMENT );
 800e07a:	4b43      	ldr	r3, [pc, #268]	; (800e188 <rfalStartTransceive+0x254>)
 800e07c:	789b      	ldrb	r3, [r3, #2]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d102      	bne.n	800e088 <rfalStartTransceive+0x154>
 800e082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e086:	e001      	b.n	800e08c <rfalStartTransceive+0x158>
 800e088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	4413      	add	r3, r2
 800e090:	60fb      	str	r3, [r7, #12]
                }
                
                /* Ensure that the given FWT doesn't exceed NRT maximum */
                gRFAL.TxRx.ctx.fwt = MIN( (gRFAL.TxRx.ctx.fwt + FxTAdj), RFAL_ST25R3911_NRT_MAX_1FC );
 800e092:	4b3d      	ldr	r3, [pc, #244]	; (800e188 <rfalStartTransceive+0x254>)
 800e094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	4413      	add	r3, r2
 800e09a:	4a3c      	ldr	r2, [pc, #240]	; (800e18c <rfalStartTransceive+0x258>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	bf28      	it	cs
 800e0a0:	4613      	movcs	r3, r2
 800e0a2:	4a39      	ldr	r2, [pc, #228]	; (800e188 <rfalStartTransceive+0x254>)
 800e0a4:	6353      	str	r3, [r2, #52]	; 0x34
                
                /* Set FWT in the NRT */
                st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( gRFAL.TxRx.ctx.fwt ) );
 800e0a6:	4b38      	ldr	r3, [pc, #224]	; (800e188 <rfalStartTransceive+0x254>)
 800e0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0aa:	099b      	lsrs	r3, r3, #6
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7f3 fda9 	bl	8001c04 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e0b2:	e006      	b.n	800e0c2 <rfalStartTransceive+0x18e>
            }
            else
            {
                /* Disable NRT, no NRE will be triggered, therefore wait endlessly for Rx */
                st25r3911SetNoResponseTime_64fcs( RFAL_ST25R3911_NRT_DISABLED );
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	f7f3 fda5 	bl	8001c04 <st25r3911SetNoResponseTime_64fcs>
            if( (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800e0ba:	e002      	b.n	800e0c2 <rfalStartTransceive+0x18e>
            }
        }
        else /* Active Comms */
        {
            /* Setup NRT timer for rf response RF collision timeout. */
            st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc(RFAL_AP2P_FIELDON_TADTTRFW) );
 800e0bc:	2080      	movs	r0, #128	; 0x80
 800e0be:	f7f3 fda1 	bl	8001c04 <st25r3911SetNoResponseTime_64fcs>
            
            /* In Active Mode No Response Timer cannot be used to measure FWT a SW timer is used instead */
        }
        
        gRFAL.state       = RFAL_STATE_TXRX;
 800e0c2:	4b31      	ldr	r3, [pc, #196]	; (800e188 <rfalStartTransceive+0x254>)
 800e0c4:	2203      	movs	r2, #3
 800e0c6:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_IDLE;
 800e0c8:	4b2f      	ldr	r3, [pc, #188]	; (800e188 <rfalStartTransceive+0x254>)
 800e0ca:	220b      	movs	r2, #11
 800e0cc:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800e0ce:	4b2e      	ldr	r3, [pc, #184]	; (800e188 <rfalStartTransceive+0x254>)
 800e0d0:	2202      	movs	r2, #2
 800e0d2:	82da      	strh	r2, [r3, #22]
        gRFAL.TxRx.rxse   = false;
 800e0d4:	4b2c      	ldr	r3, [pc, #176]	; (800e188 <rfalStartTransceive+0x254>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	761a      	strb	r2, [r3, #24]
        
    #if RFAL_FEATURE_NFCV        
        /*******************************************************************************/
        if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e0da:	4b2b      	ldr	r3, [pc, #172]	; (800e188 <rfalStartTransceive+0x254>)
 800e0dc:	785b      	ldrb	r3, [r3, #1]
 800e0de:	2b07      	cmp	r3, #7
 800e0e0:	d003      	beq.n	800e0ea <rfalStartTransceive+0x1b6>
 800e0e2:	4b29      	ldr	r3, [pc, #164]	; (800e188 <rfalStartTransceive+0x254>)
 800e0e4:	785b      	ldrb	r3, [r3, #1]
 800e0e6:	2b08      	cmp	r3, #8
 800e0e8:	d128      	bne.n	800e13c <rfalStartTransceive+0x208>
        { /* Exchange receive buffer with internal buffer */
            gRFAL.nfcvData.origCtx = gRFAL.TxRx.ctx;
 800e0ea:	4a27      	ldr	r2, [pc, #156]	; (800e188 <rfalStartTransceive+0x254>)
 800e0ec:	4b26      	ldr	r3, [pc, #152]	; (800e188 <rfalStartTransceive+0x254>)
 800e0ee:	f502 746e 	add.w	r4, r2, #952	; 0x3b8
 800e0f2:	f103 051c 	add.w	r5, r3, #28
 800e0f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e0fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            gRFAL.TxRx.ctx.rxBuf    = ((gRFAL.nfcvData.origCtx.rxBuf != NULL) ? gRFAL.nfcvData.codingBuffer : NULL);
 800e102:	4b21      	ldr	r3, [pc, #132]	; (800e188 <rfalStartTransceive+0x254>)
 800e104:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d001      	beq.n	800e110 <rfalStartTransceive+0x1dc>
 800e10c:	4b20      	ldr	r3, [pc, #128]	; (800e190 <rfalStartTransceive+0x25c>)
 800e10e:	e000      	b.n	800e112 <rfalStartTransceive+0x1de>
 800e110:	2300      	movs	r3, #0
 800e112:	4a1d      	ldr	r2, [pc, #116]	; (800e188 <rfalStartTransceive+0x254>)
 800e114:	6253      	str	r3, [r2, #36]	; 0x24
            gRFAL.TxRx.ctx.rxBufLen = (uint16_t)rfalConvBytesToBits(sizeof(gRFAL.nfcvData.codingBuffer));
 800e116:	4b1c      	ldr	r3, [pc, #112]	; (800e188 <rfalStartTransceive+0x254>)
 800e118:	f44f 5282 	mov.w	r2, #4160	; 0x1040
 800e11c:	851a      	strh	r2, [r3, #40]	; 0x28
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
                                 | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF
                                 | (uint32_t)(gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF)
 800e11e:	4b1a      	ldr	r3, [pc, #104]	; (800e188 <rfalStartTransceive+0x254>)
 800e120:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e124:	f003 0308 	and.w	r3, r3, #8
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP
                                 | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE;
 800e128:	f043 0333 	orr.w	r3, r3, #51	; 0x33
            gRFAL.TxRx.ctx.flags = (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL
 800e12c:	4a16      	ldr	r2, [pc, #88]	; (800e188 <rfalStartTransceive+0x254>)
 800e12e:	6313      	str	r3, [r2, #48]	; 0x30
            
            /* In NFCV a TxRx with a valid txBuf and txBufSize==0 indicates to send an EOF */
            /* Skip logic below that would go directly into receive                        */
            if ( gRFAL.TxRx.ctx.txBuf != NULL )
 800e130:	4b15      	ldr	r3, [pc, #84]	; (800e188 <rfalStartTransceive+0x254>)
 800e132:	69db      	ldr	r3, [r3, #28]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <rfalStartTransceive+0x208>
            {
                return  ERR_NONE;
 800e138:	2300      	movs	r3, #0
 800e13a:	e021      	b.n	800e180 <rfalStartTransceive+0x24c>
    #endif /* RFAL_FEATURE_NFCV */

        
        /*******************************************************************************/
        /* Check if the Transceive start performing Tx or goes directly to Rx          */
        if( (gRFAL.TxRx.ctx.txBuf == NULL) || (gRFAL.TxRx.ctx.txBufLen == 0U) )
 800e13c:	4b12      	ldr	r3, [pc, #72]	; (800e188 <rfalStartTransceive+0x254>)
 800e13e:	69db      	ldr	r3, [r3, #28]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d003      	beq.n	800e14c <rfalStartTransceive+0x218>
 800e144:	4b10      	ldr	r3, [pc, #64]	; (800e188 <rfalStartTransceive+0x254>)
 800e146:	8c1b      	ldrh	r3, [r3, #32]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d116      	bne.n	800e17a <rfalStartTransceive+0x246>
        {
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e14c:	f000 f9c2 	bl	800e4d4 <rfalPrepareTransceive>
            
            /* Disable our field upon a Rx reEnable on AP2P */
            if( rfalIsModeActiveComm(gRFAL.mode) )
 800e150:	4b0d      	ldr	r3, [pc, #52]	; (800e188 <rfalStartTransceive+0x254>)
 800e152:	785b      	ldrb	r3, [r3, #1]
 800e154:	2b09      	cmp	r3, #9
 800e156:	d003      	beq.n	800e160 <rfalStartTransceive+0x22c>
 800e158:	4b0b      	ldr	r3, [pc, #44]	; (800e188 <rfalStartTransceive+0x254>)
 800e15a:	785b      	ldrb	r3, [r3, #1]
 800e15c:	2b0d      	cmp	r3, #13
 800e15e:	d103      	bne.n	800e168 <rfalStartTransceive+0x234>
            {
                st25r3911TxOff();
 800e160:	2108      	movs	r1, #8
 800e162:	2002      	movs	r0, #2
 800e164:	f7f4 f876 	bl	8002254 <st25r3911ClrRegisterBits>
            }
            
            /* No Tx done, enable the Receiver */
            st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800e168:	20d1      	movs	r0, #209	; 0xd1
 800e16a:	f7f4 f9ad 	bl	80024c8 <st25r3911ExecuteCommand>

            /* Start NRT manually, if FWT = 0 (wait endlessly for Rx) chip will ignore anyhow */
            st25r3911ExecuteCommand( ST25R3911_CMD_START_NO_RESPONSE_TIMER );
 800e16e:	20e3      	movs	r0, #227	; 0xe3
 800e170:	f7f4 f9aa 	bl	80024c8 <st25r3911ExecuteCommand>
            
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800e174:	4b04      	ldr	r3, [pc, #16]	; (800e188 <rfalStartTransceive+0x254>)
 800e176:	2251      	movs	r2, #81	; 0x51
 800e178:	751a      	strb	r2, [r3, #20]
        }
        
        return ERR_NONE;
 800e17a:	2300      	movs	r3, #0
 800e17c:	e000      	b.n	800e180 <rfalStartTransceive+0x24c>
    }
    
    return ERR_WRONG_STATE;
 800e17e:	2321      	movs	r3, #33	; 0x21
}
 800e180:	4618      	mov	r0, r3
 800e182:	3710      	adds	r7, #16
 800e184:	46bd      	mov	sp, r7
 800e186:	bdb0      	pop	{r4, r5, r7, pc}
 800e188:	200009a8 	.word	0x200009a8
 800e18c:	0ffff000 	.word	0x0ffff000
 800e190:	20000b54 	.word	0x20000b54

0800e194 <rfalIsTransceiveInTx>:


/*******************************************************************************/
bool rfalIsTransceiveInTx( void )
{
 800e194:	b480      	push	{r7}
 800e196:	af00      	add	r7, sp, #0
    return ( (gRFAL.TxRx.state >= RFAL_TXRX_STATE_TX_IDLE) && (gRFAL.TxRx.state < RFAL_TXRX_STATE_RX_IDLE) );
 800e198:	4b09      	ldr	r3, [pc, #36]	; (800e1c0 <rfalIsTransceiveInTx+0x2c>)
 800e19a:	7d1b      	ldrb	r3, [r3, #20]
 800e19c:	2b0a      	cmp	r3, #10
 800e19e:	d905      	bls.n	800e1ac <rfalIsTransceiveInTx+0x18>
 800e1a0:	4b07      	ldr	r3, [pc, #28]	; (800e1c0 <rfalIsTransceiveInTx+0x2c>)
 800e1a2:	7d1b      	ldrb	r3, [r3, #20]
 800e1a4:	2b50      	cmp	r3, #80	; 0x50
 800e1a6:	d801      	bhi.n	800e1ac <rfalIsTransceiveInTx+0x18>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e000      	b.n	800e1ae <rfalIsTransceiveInTx+0x1a>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f003 0301 	and.w	r3, r3, #1
 800e1b2:	b2db      	uxtb	r3, r3
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	200009a8 	.word	0x200009a8

0800e1c4 <rfalIsTransceiveInRx>:


/*******************************************************************************/
bool rfalIsTransceiveInRx( void )
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0
    return (gRFAL.TxRx.state >= RFAL_TXRX_STATE_RX_IDLE);
 800e1c8:	4b05      	ldr	r3, [pc, #20]	; (800e1e0 <rfalIsTransceiveInRx+0x1c>)
 800e1ca:	7d1b      	ldrb	r3, [r3, #20]
 800e1cc:	2b50      	cmp	r3, #80	; 0x50
 800e1ce:	bf8c      	ite	hi
 800e1d0:	2301      	movhi	r3, #1
 800e1d2:	2300      	movls	r3, #0
 800e1d4:	b2db      	uxtb	r3, r3
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr
 800e1e0:	200009a8 	.word	0x200009a8

0800e1e4 <rfalTransceiveBlockingTx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08c      	sub	sp, #48	; 0x30
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	607a      	str	r2, [r7, #4]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	817b      	strh	r3, [r7, #10]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	813b      	strh	r3, [r7, #8]
    ReturnCode               ret;
    rfalTransceiveContext    ctx;
    
    rfalCreateByteFlagsTxRxContext( ctx, txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt );
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	613b      	str	r3, [r7, #16]
 800e1fc:	897b      	ldrh	r3, [r7, #10]
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	b29b      	uxth	r3, r3
 800e202:	82bb      	strh	r3, [r7, #20]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	61bb      	str	r3, [r7, #24]
 800e208:	893b      	ldrh	r3, [r7, #8]
 800e20a:	00db      	lsls	r3, r3, #3
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	83bb      	strh	r3, [r7, #28]
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	623b      	str	r3, [r7, #32]
 800e214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e216:	627b      	str	r3, [r7, #36]	; 0x24
 800e218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e21a:	62bb      	str	r3, [r7, #40]	; 0x28
    EXIT_ON_ERR( ret, rfalStartTransceive( &ctx ) );
 800e21c:	f107 0310 	add.w	r3, r7, #16
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff fe87 	bl	800df34 <rfalStartTransceive>
 800e226:	4603      	mov	r3, r0
 800e228:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e22a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <rfalTransceiveBlockingTx+0x50>
 800e230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e232:	e002      	b.n	800e23a <rfalTransceiveBlockingTx+0x56>
    
    return rfalTransceiveRunBlockingTx();
 800e234:	f000 f805 	bl	800e242 <rfalTransceiveRunBlockingTx>
 800e238:	4603      	mov	r3, r0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3730      	adds	r7, #48	; 0x30
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <rfalTransceiveRunBlockingTx>:


/*******************************************************************************/
static ReturnCode rfalTransceiveRunBlockingTx( void )
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b082      	sub	sp, #8
 800e246:	af00      	add	r7, sp, #0
    ReturnCode  ret;
        
    do{
        rfalWorker();
 800e248:	f000 f894 	bl	800e374 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e24c:	f000 f880 	bl	800e350 <rfalGetTransceiveStatus>
 800e250:	4603      	mov	r3, r0
 800e252:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInTx() && (ret == ERR_BUSY) );
 800e254:	f7ff ff9e 	bl	800e194 <rfalIsTransceiveInTx>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <rfalTransceiveRunBlockingTx+0x22>
 800e25e:	88fb      	ldrh	r3, [r7, #6]
 800e260:	2b02      	cmp	r3, #2
 800e262:	d0f1      	beq.n	800e248 <rfalTransceiveRunBlockingTx+0x6>
    
    if( rfalIsTransceiveInRx() )
 800e264:	f7ff ffae 	bl	800e1c4 <rfalIsTransceiveInRx>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d001      	beq.n	800e272 <rfalTransceiveRunBlockingTx+0x30>
    {
        return ERR_NONE;
 800e26e:	2300      	movs	r3, #0
 800e270:	e000      	b.n	800e274 <rfalTransceiveRunBlockingTx+0x32>
    }
    
    return ret;
 800e272:	88fb      	ldrh	r3, [r7, #6]
}
 800e274:	4618      	mov	r0, r3
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <rfalTransceiveBlockingRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingRx( void )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    do{
        rfalWorker();
 800e282:	f000 f877 	bl	800e374 <rfalWorker>
        ret = rfalGetTransceiveStatus();
 800e286:	f000 f863 	bl	800e350 <rfalGetTransceiveStatus>
 800e28a:	4603      	mov	r3, r0
 800e28c:	80fb      	strh	r3, [r7, #6]
    }
    while( rfalIsTransceiveInRx() && (ret == ERR_BUSY) );
 800e28e:	f7ff ff99 	bl	800e1c4 <rfalIsTransceiveInRx>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d002      	beq.n	800e29e <rfalTransceiveBlockingRx+0x22>
 800e298:	88fb      	ldrh	r3, [r7, #6]
 800e29a:	2b02      	cmp	r3, #2
 800e29c:	d0f1      	beq.n	800e282 <rfalTransceiveBlockingRx+0x6>
        
    return ret;
 800e29e:	88fb      	ldrh	r3, [r7, #6]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <rfalTransceiveBlockingTxRx>:


/*******************************************************************************/
ReturnCode rfalTransceiveBlockingTxRx( uint8_t* txBuf, uint16_t txBufLen, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* actLen, uint32_t flags, uint32_t fwt )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b08a      	sub	sp, #40	; 0x28
 800e2ac:	af04      	add	r7, sp, #16
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	607a      	str	r2, [r7, #4]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	817b      	strh	r3, [r7, #10]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	813b      	strh	r3, [r7, #8]
    ReturnCode ret;
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTx( txBuf, txBufLen, rxBuf, rxBufLen, actLen, flags, fwt ) );
 800e2bc:	893a      	ldrh	r2, [r7, #8]
 800e2be:	8979      	ldrh	r1, [r7, #10]
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	9302      	str	r3, [sp, #8]
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c6:	9301      	str	r3, [sp, #4]
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff ff87 	bl	800e1e4 <rfalTransceiveBlockingTx>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	82fb      	strh	r3, [r7, #22]
 800e2da:	8afb      	ldrh	r3, [r7, #22]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <rfalTransceiveBlockingTxRx+0x3c>
 800e2e0:	8afb      	ldrh	r3, [r7, #22]
 800e2e2:	e00e      	b.n	800e302 <rfalTransceiveBlockingTxRx+0x5a>
    ret = rfalTransceiveBlockingRx();
 800e2e4:	f7ff ffca 	bl	800e27c <rfalTransceiveBlockingRx>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	82fb      	strh	r3, [r7, #22]
    
    /* Convert received bits to bytes */
    if( actLen != NULL )
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d006      	beq.n	800e300 <rfalTransceiveBlockingTxRx+0x58>
    {
        *actLen =  rfalConvBitsToBytes(*actLen);
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	3307      	adds	r3, #7
 800e2f8:	08db      	lsrs	r3, r3, #3
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	801a      	strh	r2, [r3, #0]
    }
    
    return ret;
 800e300:	8afb      	ldrh	r3, [r7, #22]
}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
	...

0800e30c <rfalRunTransceiveWorker>:


/*******************************************************************************/
static ReturnCode rfalRunTransceiveWorker( void )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	af00      	add	r7, sp, #0
    if( gRFAL.state == RFAL_STATE_TXRX )
 800e310:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <rfalRunTransceiveWorker+0x40>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b03      	cmp	r3, #3
 800e316:	d115      	bne.n	800e344 <rfalRunTransceiveWorker+0x38>
    {     
        /* Run Tx or Rx state machines */
        if( rfalIsTransceiveInTx() )
 800e318:	f7ff ff3c 	bl	800e194 <rfalIsTransceiveInTx>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d005      	beq.n	800e32e <rfalRunTransceiveWorker+0x22>
        {
            rfalTransceiveTx();
 800e322:	f000 f96d 	bl	800e600 <rfalTransceiveTx>
            return rfalGetTransceiveStatus();
 800e326:	f000 f813 	bl	800e350 <rfalGetTransceiveStatus>
 800e32a:	4603      	mov	r3, r0
 800e32c:	e00b      	b.n	800e346 <rfalRunTransceiveWorker+0x3a>
        }
        
        if( rfalIsTransceiveInRx() )
 800e32e:	f7ff ff49 	bl	800e1c4 <rfalIsTransceiveInRx>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d005      	beq.n	800e344 <rfalRunTransceiveWorker+0x38>
        {
            rfalTransceiveRx();
 800e338:	f000 fbae 	bl	800ea98 <rfalTransceiveRx>
            return rfalGetTransceiveStatus();
 800e33c:	f000 f808 	bl	800e350 <rfalGetTransceiveStatus>
 800e340:	4603      	mov	r3, r0
 800e342:	e000      	b.n	800e346 <rfalRunTransceiveWorker+0x3a>
        }
    }    
    return ERR_WRONG_STATE;
 800e344:	2321      	movs	r3, #33	; 0x21
}
 800e346:	4618      	mov	r0, r3
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	200009a8 	.word	0x200009a8

0800e350 <rfalGetTransceiveStatus>:
{
    return gRFAL.TxRx.state;
}

ReturnCode rfalGetTransceiveStatus( void )
{
 800e350:	b480      	push	{r7}
 800e352:	af00      	add	r7, sp, #0
    return ((gRFAL.TxRx.state == RFAL_TXRX_STATE_IDLE) ? gRFAL.TxRx.status : ERR_BUSY);
 800e354:	4b06      	ldr	r3, [pc, #24]	; (800e370 <rfalGetTransceiveStatus+0x20>)
 800e356:	7d1b      	ldrb	r3, [r3, #20]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <rfalGetTransceiveStatus+0x12>
 800e35c:	4b04      	ldr	r3, [pc, #16]	; (800e370 <rfalGetTransceiveStatus+0x20>)
 800e35e:	8adb      	ldrh	r3, [r3, #22]
 800e360:	e000      	b.n	800e364 <rfalGetTransceiveStatus+0x14>
 800e362:	2302      	movs	r3, #2
}
 800e364:	4618      	mov	r0, r3
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	200009a8 	.word	0x200009a8

0800e374 <rfalWorker>:
}


/*******************************************************************************/
void rfalWorker( void )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	af00      	add	r7, sp, #0
    platformProtectWorker();               /* Protect RFAL Worker/Task/Process */
    
    switch( gRFAL.state )
 800e378:	4b07      	ldr	r3, [pc, #28]	; (800e398 <rfalWorker+0x24>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b03      	cmp	r3, #3
 800e37e:	d002      	beq.n	800e386 <rfalWorker+0x12>
 800e380:	2b05      	cmp	r3, #5
 800e382:	d003      	beq.n	800e38c <rfalWorker+0x18>
    #endif /* RFAL_FEATURE_WAKEUP_MODE */
            
        /* Nothing to be done */
        default:            
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800e384:	e005      	b.n	800e392 <rfalWorker+0x1e>
            rfalRunTransceiveWorker();
 800e386:	f7ff ffc1 	bl	800e30c <rfalRunTransceiveWorker>
            break;
 800e38a:	e002      	b.n	800e392 <rfalWorker+0x1e>
            rfalRunWakeUpModeWorker();
 800e38c:	f001 fc66 	bl	800fc5c <rfalRunWakeUpModeWorker>
            break;
 800e390:	bf00      	nop
    }
    
    platformUnprotectWorker();             /* Unprotect RFAL Worker/Task/Process */
}
 800e392:	bf00      	nop
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	200009a8 	.word	0x200009a8

0800e39c <rfalErrorHandling>:


/*******************************************************************************/
static void rfalErrorHandling( void )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
    bool    rxHasIncParError;
    uint8_t fifoBytesToRead;
    uint8_t reEnRx[] = { ST25R3911_CMD_CLEAR_FIFO, ST25R3911_CMD_UNMASK_RECEIVE_DATA };
 800e3a2:	4b3f      	ldr	r3, [pc, #252]	; (800e4a0 <rfalErrorHandling+0x104>)
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	80bb      	strh	r3, [r7, #4]
    

    fifoBytesToRead = rfalFIFOStatusGetNumBytes();
 800e3a8:	f000 fede 	bl	800f168 <rfalFIFOStatusGetNumBytes>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	71fb      	strb	r3, [r7, #7]
    
    
    /*******************************************************************************/
    /* EMVCo                                                                       */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e3b0:	4b3c      	ldr	r3, [pc, #240]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e3b2:	79db      	ldrb	r3, [r3, #7]
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	d141      	bne.n	800e43c <rfalErrorHandling+0xa0>
        /*   - Parity error                                                            */
        /*   - CRC error                                                               */
        /*******************************************************************************/        
     
        /* Check if reception has incompete bytes or parity error */
        rxHasIncParError = ( rfalFIFOStatusIsIncompleteByte() ? true : rfalFIFOStatusIsMissingPar() );   /* MISRA 13.5 */
 800e3b8:	f000 fee2 	bl	800f180 <rfalFIFOStatusIsIncompleteByte>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d104      	bne.n	800e3cc <rfalErrorHandling+0x30>
 800e3c2:	f000 feef 	bl	800f1a4 <rfalFIFOStatusIsMissingPar>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <rfalErrorHandling+0x34>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e000      	b.n	800e3d2 <rfalErrorHandling+0x36>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	71bb      	strb	r3, [r7, #6]
        
        /* In case there are residual bits decrement FIFO bytes */
        if( (fifoBytesToRead > 0U) && rxHasIncParError)
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d005      	beq.n	800e3e6 <rfalErrorHandling+0x4a>
 800e3da:	79bb      	ldrb	r3, [r7, #6]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <rfalErrorHandling+0x4a>
        {
            fifoBytesToRead--;
 800e3e0:	79fb      	ldrb	r3, [r7, #7]
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	71fb      	strb	r3, [r7, #7]
        }
            
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 800e3e6:	4b2f      	ldr	r3, [pc, #188]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e3e8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	2b03      	cmp	r3, #3
 800e3f2:	dc51      	bgt.n	800e498 <rfalErrorHandling+0xfc>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800e3f4:	4b2b      	ldr	r3, [pc, #172]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e3f6:	8adb      	ldrh	r3, [r3, #22]
        if( ( (gRFAL.fifo.bytesTotal + fifoBytesToRead) < RFAL_EMVCO_RX_MAXLEN )            &&
 800e3f8:	2b1d      	cmp	r3, #29
 800e3fa:	d00e      	beq.n	800e41a <rfalErrorHandling+0x7e>
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800e3fc:	4b29      	ldr	r3, [pc, #164]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e3fe:	8adb      	ldrh	r3, [r3, #22]
 800e400:	2b09      	cmp	r3, #9
 800e402:	d00a      	beq.n	800e41a <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 800e404:	4b27      	ldr	r3, [pc, #156]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e406:	8adb      	ldrh	r3, [r3, #22]
            ( (gRFAL.TxRx.status == ERR_RF_COLLISION) || (gRFAL.TxRx.status == ERR_FRAMING) || 
 800e408:	2b1b      	cmp	r3, #27
 800e40a:	d006      	beq.n	800e41a <rfalErrorHandling+0x7e>
              (gRFAL.TxRx.status == ERR_PAR)          || (gRFAL.TxRx.status == ERR_CRC)     || 
 800e40c:	4b25      	ldr	r3, [pc, #148]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e40e:	8adb      	ldrh	r3, [r3, #22]
 800e410:	2b15      	cmp	r3, #21
 800e412:	d002      	beq.n	800e41a <rfalErrorHandling+0x7e>
 800e414:	79bb      	ldrb	r3, [r7, #6]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d03e      	beq.n	800e498 <rfalErrorHandling+0xfc>
              rxHasIncParError                                                               ) )
        {
            /* Ignore this reception, ReEnable receiver */
            st25r3911ExecuteCommands( reEnRx, sizeof(reEnRx) );
 800e41a:	1d3b      	adds	r3, r7, #4
 800e41c:	2102      	movs	r1, #2
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f4 f8a0 	bl	8002564 <st25r3911ExecuteCommands>
            
            rfalFIFOStatusClear();
 800e424:	f000 fe92 	bl	800f14c <rfalFIFOStatusClear>
            gRFAL.fifo.bytesTotal = 0;
 800e428:	4b1e      	ldr	r3, [pc, #120]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	875a      	strh	r2, [r3, #58]	; 0x3a
            gRFAL.TxRx.status = ERR_BUSY;
 800e42e:	4b1d      	ldr	r3, [pc, #116]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e430:	2202      	movs	r2, #2
 800e432:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800e434:	4b1b      	ldr	r3, [pc, #108]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e436:	2253      	movs	r2, #83	; 0x53
 800e438:	751a      	strb	r2, [r3, #20]
 800e43a:	e02e      	b.n	800e49a <rfalErrorHandling+0xfe>
    }

    /*******************************************************************************/
    /* ISO14443A Mode                                                              */
    /*******************************************************************************/
    if( gRFAL.mode == RFAL_MODE_POLL_NFCA )
 800e43c:	4b19      	ldr	r3, [pc, #100]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e43e:	785b      	ldrb	r3, [r3, #1]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d12a      	bne.n	800e49a <rfalErrorHandling+0xfe>
        /*******************************************************************************/
        /* If we received one incomplete byte (not a block and a incomplete byte at    *
         * the end) we will raise a specific error ( support for T2T 4 bit ACK / NAK )   *
         * Otherwise just leave it as an CRC/FRAMING/PAR error                         */    
        /*******************************************************************************/
        if( (gRFAL.TxRx.status == ERR_PAR) || (gRFAL.TxRx.status == ERR_CRC) )
 800e444:	4b17      	ldr	r3, [pc, #92]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e446:	8adb      	ldrh	r3, [r3, #22]
 800e448:	2b1b      	cmp	r3, #27
 800e44a:	d003      	beq.n	800e454 <rfalErrorHandling+0xb8>
 800e44c:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e44e:	8adb      	ldrh	r3, [r3, #22]
 800e450:	2b15      	cmp	r3, #21
 800e452:	d122      	bne.n	800e49a <rfalErrorHandling+0xfe>
        {
            if( rfalFIFOStatusIsIncompleteByte() && (fifoBytesToRead == RFAL_NFC_RX_INCOMPLETE_LEN) )
 800e454:	f000 fe94 	bl	800f180 <rfalFIFOStatusIsIncompleteByte>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d01d      	beq.n	800e49a <rfalErrorHandling+0xfe>
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d11a      	bne.n	800e49a <rfalErrorHandling+0xfe>
            {
                st25r3911ReadFifo( (uint8_t*)(gRFAL.TxRx.ctx.rxBuf), fifoBytesToRead );
 800e464:	4b0f      	ldr	r3, [pc, #60]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e468:	79fa      	ldrb	r2, [r7, #7]
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7f3 ffe3 	bl	8002438 <st25r3911ReadFifo>
                if( (gRFAL.TxRx.ctx.rxRcvdLen) != NULL )
 800e472:	4b0c      	ldr	r3, [pc, #48]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d007      	beq.n	800e48a <rfalErrorHandling+0xee>
                {
                    *gRFAL.TxRx.ctx.rxRcvdLen = rfalFIFOGetNumIncompleteBits();
 800e47a:	f000 fea5 	bl	800f1c8 <rfalFIFOGetNumIncompleteBits>
 800e47e:	4603      	mov	r3, r0
 800e480:	461a      	mov	r2, r3
 800e482:	4b08      	ldr	r3, [pc, #32]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e486:	b292      	uxth	r2, r2
 800e488:	801a      	strh	r2, [r3, #0]
                }
                
                gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800e48a:	4b06      	ldr	r3, [pc, #24]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e48c:	2228      	movs	r2, #40	; 0x28
 800e48e:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800e490:	4b04      	ldr	r3, [pc, #16]	; (800e4a4 <rfalErrorHandling+0x108>)
 800e492:	225a      	movs	r2, #90	; 0x5a
 800e494:	751a      	strb	r2, [r3, #20]
 800e496:	e000      	b.n	800e49a <rfalErrorHandling+0xfe>
        return;
 800e498:	bf00      	nop
            }
        }
    }
    
}
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	0801151c 	.word	0x0801151c
 800e4a4:	200009a8 	.word	0x200009a8

0800e4a8 <rfalCleanupTransceive>:


/*******************************************************************************/
static void rfalCleanupTransceive( void )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	af00      	add	r7, sp, #0
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    /* Restore default settings on NFCIP1 mode, Receiving parity + CRC bits and manual Tx Parity*/
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0) );
 800e4ac:	21e0      	movs	r1, #224	; 0xe0
 800e4ae:	2005      	movs	r0, #5
 800e4b0:	f7f3 fed0 	bl	8002254 <st25r3911ClrRegisterBits>
    
    /* Restore AGC enabled */
    st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800e4b4:	2110      	movs	r1, #16
 800e4b6:	200b      	movs	r0, #11
 800e4b8:	f7f3 feef 	bl	800229a <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Execute Post Transceive Callback                                            */
    /*******************************************************************************/
    if( gRFAL.callbacks.postTxRx != NULL )
 800e4bc:	4b04      	ldr	r3, [pc, #16]	; (800e4d0 <rfalCleanupTransceive+0x28>)
 800e4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <rfalCleanupTransceive+0x22>
    {
        gRFAL.callbacks.postTxRx();
 800e4c4:	4b02      	ldr	r3, [pc, #8]	; (800e4d0 <rfalCleanupTransceive+0x28>)
 800e4c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4c8:	4798      	blx	r3
    }
    /*******************************************************************************/

}
 800e4ca:	bf00      	nop
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	200009a8 	.word	0x200009a8

0800e4d4 <rfalPrepareTransceive>:


/*******************************************************************************/
static void rfalPrepareTransceive( void )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
    uint8_t  reg;
    
    /*******************************************************************************/
    /* In the EMVCo mode the NRT will continue to run.                             *
     * For the clear to stop it, the EMV mode has to be disabled before            */
    st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800e4da:	2102      	movs	r1, #2
 800e4dc:	2011      	movs	r0, #17
 800e4de:	f7f3 feb9 	bl	8002254 <st25r3911ClrRegisterBits>
    
    /* Reset receive logic */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
 800e4e2:	20c2      	movs	r0, #194	; 0xc2
 800e4e4:	f7f3 fff0 	bl	80024c8 <st25r3911ExecuteCommand>
    
    /* Reset Rx Gain */
    st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800e4e8:	20d5      	movs	r0, #213	; 0xd5
 800e4ea:	f7f3 ffed 	bl	80024c8 <st25r3911ExecuteCommand>
    
    
    /*******************************************************************************/
    /* FDT Poll                                                                    */
    /*******************************************************************************/
    if( rfalIsModePassiveComm( gRFAL.mode ) )  /* Passive Comms */
 800e4ee:	4b42      	ldr	r3, [pc, #264]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e4f0:	785b      	ldrb	r3, [r3, #1]
 800e4f2:	2b09      	cmp	r3, #9
 800e4f4:	d01c      	beq.n	800e530 <rfalPrepareTransceive+0x5c>
 800e4f6:	4b40      	ldr	r3, [pc, #256]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e4f8:	785b      	ldrb	r3, [r3, #1]
 800e4fa:	2b0d      	cmp	r3, #13
 800e4fc:	d018      	beq.n	800e530 <rfalPrepareTransceive+0x5c>
    {
       /* In Passive communications General Purpose Timer is used to measure FDT Poll */
       if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800e4fe:	4b3e      	ldr	r3, [pc, #248]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d014      	beq.n	800e530 <rfalPrepareTransceive+0x5c>
       {
           /* Configure GPT to start at RX end */
           st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800e506:	4b3c      	ldr	r3, [pc, #240]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e508:	691b      	ldr	r3, [r3, #16]
 800e50a:	f240 423b 	movw	r2, #1083	; 0x43b
 800e50e:	4293      	cmp	r3, r2
 800e510:	d804      	bhi.n	800e51c <rfalPrepareTransceive+0x48>
 800e512:	4b39      	ldr	r3, [pc, #228]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	08db      	lsrs	r3, r3, #3
 800e518:	b29b      	uxth	r3, r3
 800e51a:	e005      	b.n	800e528 <rfalPrepareTransceive+0x54>
 800e51c:	4b36      	ldr	r3, [pc, #216]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800e524:	08db      	lsrs	r3, r3, #3
 800e526:	b29b      	uxth	r3, r3
 800e528:	2120      	movs	r1, #32
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7f3 faf4 	bl	8001b18 <st25r3911StartGPTimer_8fcs>
    
    
    /*******************************************************************************/
    /* Execute Pre Transceive Callback                                             */
    /*******************************************************************************/
    if( gRFAL.callbacks.preTxRx != NULL )
 800e530:	4b31      	ldr	r3, [pc, #196]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <rfalPrepareTransceive+0x6a>
    {
        gRFAL.callbacks.preTxRx();
 800e538:	4b2f      	ldr	r3, [pc, #188]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e53a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e53c:	4798      	blx	r3
    }
    /*******************************************************************************/
    
    maskInterrupts = ( ST25R3911_IRQ_MASK_FWL  | ST25R3911_IRQ_MASK_TXE  |
 800e53e:	4b2f      	ldr	r3, [pc, #188]	; (800e5fc <rfalPrepareTransceive+0x128>)
 800e540:	607b      	str	r3, [r7, #4]
    
    /*******************************************************************************/
    /* Transceive flags                                                            */
    /*******************************************************************************/
    
    reg = (ST25R3911_REG_ISO14443A_NFC_no_tx_par_off | ST25R3911_REG_ISO14443A_NFC_no_rx_par_off | ST25R3911_REG_ISO14443A_NFC_nfc_f0_off);
 800e542:	2300      	movs	r3, #0
 800e544:	70fb      	strb	r3, [r7, #3]
    
    /* Check if NFCIP1 mode is to be enabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_NFCIP1_ON) != 0U )
 800e546:	4b2c      	ldr	r3, [pc, #176]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54a:	f003 0304 	and.w	r3, r3, #4
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <rfalPrepareTransceive+0x86>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_nfc_f0;
 800e552:	78fb      	ldrb	r3, [r7, #3]
 800e554:	f043 0320 	orr.w	r3, r3, #32
 800e558:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Check if Parity check is to be skipped and to keep the parity + CRC bits in FIFO */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP) != 0U )
 800e55a:	4b27      	ldr	r3, [pc, #156]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55e:	f003 0310 	and.w	r3, r3, #16
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <rfalPrepareTransceive+0x9a>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_rx_par;
 800e566:	78fb      	ldrb	r3, [r7, #3]
 800e568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e56c:	70fb      	strb	r3, [r7, #3]
    }

    /* Check if automatic Parity bits is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_PAR_TX_NONE) != 0U )
 800e56e:	4b22      	ldr	r3, [pc, #136]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e572:	f003 0320 	and.w	r3, r3, #32
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <rfalPrepareTransceive+0xae>
    {
        reg |= ST25R3911_REG_ISO14443A_NFC_no_tx_par;
 800e57a:	78fb      	ldrb	r3, [r7, #3]
 800e57c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e580:	70fb      	strb	r3, [r7, #3]
    }
    
    /* Apply current TxRx flags on ISO14443A and NFC 106kb/s Settings Register */
    st25r3911ChangeRegisterBits( ST25R3911_REG_ISO14443A_NFC, (ST25R3911_REG_ISO14443A_NFC_no_tx_par | ST25R3911_REG_ISO14443A_NFC_no_rx_par | ST25R3911_REG_ISO14443A_NFC_nfc_f0), reg );
 800e582:	78fb      	ldrb	r3, [r7, #3]
 800e584:	461a      	mov	r2, r3
 800e586:	21e0      	movs	r1, #224	; 0xe0
 800e588:	2005      	movs	r0, #5
 800e58a:	f7f3 fea4 	bl	80022d6 <st25r3911ChangeRegisterBits>
    
    
    /* Check if AGC is to be disabled */
    if( (gRFAL.TxRx.ctx.flags & (uint8_t)RFAL_TXRX_FLAGS_AGC_OFF) != 0U )
 800e58e:	4b1a      	ldr	r3, [pc, #104]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e592:	f003 0308 	and.w	r3, r3, #8
 800e596:	2b00      	cmp	r3, #0
 800e598:	d004      	beq.n	800e5a4 <rfalPrepareTransceive+0xd0>
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800e59a:	2110      	movs	r1, #16
 800e59c:	200b      	movs	r0, #11
 800e59e:	f7f3 fe59 	bl	8002254 <st25r3911ClrRegisterBits>
 800e5a2:	e003      	b.n	800e5ac <rfalPrepareTransceive+0xd8>
    }
    else
    {
        st25r3911SetRegisterBits( ST25R3911_REG_RX_CONF2, ST25R3911_REG_RX_CONF2_agc_en );
 800e5a4:	2110      	movs	r1, #16
 800e5a6:	200b      	movs	r0, #11
 800e5a8:	f7f3 fe77 	bl	800229a <st25r3911SetRegisterBits>
    

    /*******************************************************************************/
    /* EMVCo NRT mode                                                              */
    /*******************************************************************************/
    if( gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO )
 800e5ac:	4b12      	ldr	r3, [pc, #72]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e5ae:	79db      	ldrb	r3, [r3, #7]
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d104      	bne.n	800e5be <rfalPrepareTransceive+0xea>
    {
        st25r3911SetRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800e5b4:	2102      	movs	r1, #2
 800e5b6:	2011      	movs	r0, #17
 800e5b8:	f7f3 fe6f 	bl	800229a <st25r3911SetRegisterBits>
 800e5bc:	e003      	b.n	800e5c6 <rfalPrepareTransceive+0xf2>
    }
    else
    {
        st25r3911ClrRegisterBits( ST25R3911_REG_GPT_CONTROL, ST25R3911_REG_GPT_CONTROL_nrt_emv );
 800e5be:	2102      	movs	r1, #2
 800e5c0:	2011      	movs	r0, #17
 800e5c2:	f7f3 fe47 	bl	8002254 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    
    /* In Active comms enable also External Field interrupts  */
    if( rfalIsModeActiveComm( gRFAL.mode ) )
 800e5c6:	4b0c      	ldr	r3, [pc, #48]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e5c8:	785b      	ldrb	r3, [r3, #1]
 800e5ca:	2b09      	cmp	r3, #9
 800e5cc:	d003      	beq.n	800e5d6 <rfalPrepareTransceive+0x102>
 800e5ce:	4b0a      	ldr	r3, [pc, #40]	; (800e5f8 <rfalPrepareTransceive+0x124>)
 800e5d0:	785b      	ldrb	r3, [r3, #1]
 800e5d2:	2b0d      	cmp	r3, #13
 800e5d4:	d103      	bne.n	800e5de <rfalPrepareTransceive+0x10a>
    {
        maskInterrupts |= ( ST25R3911_IRQ_MASK_EOF  | ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC );
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f443 53f0 	orr.w	r3, r3, #7680	; 0x1e00
 800e5dc:	607b      	str	r3, [r7, #4]
    }
    
    
    /*******************************************************************************/
    /* clear and enable these interrupts */
    st25r3911GetInterrupt( maskInterrupts );
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7f4 f94e 	bl	8002880 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( maskInterrupts );
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7f4 f983 	bl	80028f0 <st25r3911EnableInterrupts>
    
    /* Clear FIFO status local copy */
    rfalFIFOStatusClear();
 800e5ea:	f000 fdaf 	bl	800f14c <rfalFIFOStatusClear>
}
 800e5ee:	bf00      	nop
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	200009a8 	.word	0x200009a8
 800e5fc:	00f04078 	.word	0x00f04078

0800e600 <rfalTransceiveTx>:

/*******************************************************************************/
static void rfalTransceiveTx( void )
{
 800e600:	b5b0      	push	{r4, r5, r7, lr}
 800e602:	b08a      	sub	sp, #40	; 0x28
 800e604:	af06      	add	r7, sp, #24
    volatile uint32_t irqs;
    uint16_t          tmp;
    ReturnCode        ret;
    
    /* Supress warning in case NFC-V feature is disabled */
    ret = ERR_NONE;
 800e606:	2300      	movs	r3, #0
 800e608:	81fb      	strh	r3, [r7, #14]
    NO_WARNING(ret);
    
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800e60a:	2300      	movs	r3, #0
 800e60c:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800e60e:	4b95      	ldr	r3, [pc, #596]	; (800e864 <rfalTransceiveTx+0x264>)
 800e610:	7d1a      	ldrb	r2, [r3, #20]
 800e612:	4b94      	ldr	r3, [pc, #592]	; (800e864 <rfalTransceiveTx+0x264>)
 800e614:	7d5b      	ldrb	r3, [r3, #21]
 800e616:	429a      	cmp	r2, r3
 800e618:	d003      	beq.n	800e622 <rfalTransceiveTx+0x22>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800e61a:	4b92      	ldr	r3, [pc, #584]	; (800e864 <rfalTransceiveTx+0x264>)
 800e61c:	7d1a      	ldrb	r2, [r3, #20]
 800e61e:	4b91      	ldr	r3, [pc, #580]	; (800e864 <rfalTransceiveTx+0x264>)
 800e620:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800e622:	4b90      	ldr	r3, [pc, #576]	; (800e864 <rfalTransceiveTx+0x264>)
 800e624:	7d1b      	ldrb	r3, [r3, #20]
 800e626:	3b0b      	subs	r3, #11
 800e628:	2b08      	cmp	r3, #8
 800e62a:	f200 8217 	bhi.w	800ea5c <rfalTransceiveTx+0x45c>
 800e62e:	a201      	add	r2, pc, #4	; (adr r2, 800e634 <rfalTransceiveTx+0x34>)
 800e630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e634:	0800e659 	.word	0x0800e659
 800e638:	0800e65f 	.word	0x0800e65f
 800e63c:	0800e67d 	.word	0x0800e67d
 800e640:	0800e6a5 	.word	0x0800e6a5
 800e644:	0800e7f7 	.word	0x0800e7f7
 800e648:	0800e833 	.word	0x0800e833
 800e64c:	0800e977 	.word	0x0800e977
 800e650:	0800e9ed 	.word	0x0800e9ed
 800e654:	0800ea33 	.word	0x0800ea33
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_IDLE:
            
            /* Nothing to do */
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_GT ;
 800e658:	4b82      	ldr	r3, [pc, #520]	; (800e864 <rfalTransceiveTx+0x264>)
 800e65a:	220c      	movs	r2, #12
 800e65c:	751a      	strb	r2, [r3, #20]
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_GT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            if( !rfalIsGTExpired() )
 800e65e:	f7ff fbd9 	bl	800de14 <rfalIsGTExpired>
 800e662:	4603      	mov	r3, r0
 800e664:	f083 0301 	eor.w	r3, r3, #1
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f040 81fd 	bne.w	800ea6a <rfalTransceiveTx+0x46a>
            {
                break;
            }
            
            gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800e670:	4b7c      	ldr	r3, [pc, #496]	; (800e864 <rfalTransceiveTx+0x264>)
 800e672:	2200      	movs	r2, #0
 800e674:	641a      	str	r2, [r3, #64]	; 0x40
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_WAIT_FDT;
 800e676:	4b7b      	ldr	r3, [pc, #492]	; (800e864 <rfalTransceiveTx+0x264>)
 800e678:	220d      	movs	r2, #13
 800e67a:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_FDT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Only in Passive communications GPT is used to measure FDT Poll */
            if( rfalIsModePassiveComm( gRFAL.mode ) )
 800e67c:	4b79      	ldr	r3, [pc, #484]	; (800e864 <rfalTransceiveTx+0x264>)
 800e67e:	785b      	ldrb	r3, [r3, #1]
 800e680:	2b09      	cmp	r3, #9
 800e682:	d00c      	beq.n	800e69e <rfalTransceiveTx+0x9e>
 800e684:	4b77      	ldr	r3, [pc, #476]	; (800e864 <rfalTransceiveTx+0x264>)
 800e686:	785b      	ldrb	r3, [r3, #1]
 800e688:	2b0d      	cmp	r3, #13
 800e68a:	d008      	beq.n	800e69e <rfalTransceiveTx+0x9e>
            {
                if( st25r3911IsGPTRunning() )
 800e68c:	2204      	movs	r2, #4
 800e68e:	2104      	movs	r1, #4
 800e690:	202b      	movs	r0, #43	; 0x2b
 800e692:	f7f3 fa75 	bl	8001b80 <st25r3911CheckReg>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f040 81e8 	bne.w	800ea6e <rfalTransceiveTx+0x46e>
                {                
                   break;
                }
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_TRANSMIT;
 800e69e:	4b71      	ldr	r3, [pc, #452]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6a0:	220e      	movs	r2, #14
 800e6a2:	751a      	strb	r2, [r3, #20]
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_TRANSMIT:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* Clear FIFO, Clear and Enable the Interrupts */
            rfalPrepareTransceive( );
 800e6a4:	f7ff ff16 	bl	800e4d4 <rfalPrepareTransceive>

            /* Calculate when Water Level Interrupt will be triggered */
            gRFAL.fifo.expWL = (uint16_t)( st25r3911CheckReg( ST25R3911_REG_IO_CONF1, ST25R3911_REG_IO_CONF1_fifo_lt, ST25R3911_REG_IO_CONF1_fifo_lt_16bytes) ? RFAL_FIFO_OUT_LT_16 : RFAL_FIFO_OUT_LT_32 );
 800e6a8:	2210      	movs	r2, #16
 800e6aa:	2110      	movs	r1, #16
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	f7f3 fa67 	bl	8001b80 <st25r3911CheckReg>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d001      	beq.n	800e6bc <rfalTransceiveTx+0xbc>
 800e6b8:	2250      	movs	r2, #80	; 0x50
 800e6ba:	e000      	b.n	800e6be <rfalTransceiveTx+0xbe>
 800e6bc:	2240      	movs	r2, #64	; 0x40
 800e6be:	4b69      	ldr	r3, [pc, #420]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6c0:	871a      	strh	r2, [r3, #56]	; 0x38
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e6c2:	4b68      	ldr	r3, [pc, #416]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6c4:	785b      	ldrb	r3, [r3, #1]
 800e6c6:	2b07      	cmp	r3, #7
 800e6c8:	d003      	beq.n	800e6d2 <rfalTransceiveTx+0xd2>
 800e6ca:	4b66      	ldr	r3, [pc, #408]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	2b08      	cmp	r3, #8
 800e6d0:	d151      	bne.n	800e776 <rfalTransceiveTx+0x176>
                /* Debugging code: output the payload bits by writing into the FIFO and subsequent clearing */
                st25r3911WriteFifo(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen));
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_FIFO );
            #endif
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.nfcvData.nfcvOffset = 0;
 800e6d2:	4b64      	ldr	r3, [pc, #400]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true),(((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e6da:	4b62      	ldr	r3, [pc, #392]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6dc:	69d8      	ldr	r0, [r3, #28]
 800e6de:	4b61      	ldr	r3, [pc, #388]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6e0:	8c1b      	ldrh	r3, [r3, #32]
 800e6e2:	3307      	adds	r3, #7
 800e6e4:	08db      	lsrs	r3, r3, #3
 800e6e6:	b299      	uxth	r1, r3
 800e6e8:	4b5e      	ldr	r3, [pc, #376]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6ea:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bf0c      	ite	eq
 800e6f6:	2301      	moveq	r3, #1
 800e6f8:	2300      	movne	r3, #0
 800e6fa:	b2dc      	uxtb	r4, r3
 800e6fc:	4b59      	ldr	r3, [pc, #356]	; (800e864 <rfalTransceiveTx+0x264>)
 800e6fe:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e706:	2b00      	cmp	r3, #0
 800e708:	bf0c      	ite	eq
 800e70a:	2301      	moveq	r3, #1
 800e70c:	2300      	movne	r3, #0
 800e70e:	b2dd      	uxtb	r5, r3
 800e710:	4b54      	ldr	r3, [pc, #336]	; (800e864 <rfalTransceiveTx+0x264>)
 800e712:	785b      	ldrb	r3, [r3, #1]
 800e714:	2b08      	cmp	r3, #8
 800e716:	bf0c      	ite	eq
 800e718:	2301      	moveq	r3, #1
 800e71a:	2300      	movne	r3, #0
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	4a52      	ldr	r2, [pc, #328]	; (800e868 <rfalTransceiveTx+0x268>)
 800e720:	9205      	str	r2, [sp, #20]
 800e722:	2260      	movs	r2, #96	; 0x60
 800e724:	9204      	str	r2, [sp, #16]
 800e726:	4a51      	ldr	r2, [pc, #324]	; (800e86c <rfalTransceiveTx+0x26c>)
 800e728:	9203      	str	r2, [sp, #12]
 800e72a:	4a51      	ldr	r2, [pc, #324]	; (800e870 <rfalTransceiveTx+0x270>)
 800e72c:	9202      	str	r2, [sp, #8]
 800e72e:	4a51      	ldr	r2, [pc, #324]	; (800e874 <rfalTransceiveTx+0x274>)
 800e730:	9201      	str	r2, [sp, #4]
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	462b      	mov	r3, r5
 800e736:	4622      	mov	r2, r4
 800e738:	f7f8 fdc0 	bl	80072bc <iso15693VCDCode>
 800e73c:	4603      	mov	r3, r0
 800e73e:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, MIN( (uint16_t)ST25R3911_FIFO_DEPTH, (uint16_t)sizeof(gRFAL.nfcvData.codingBuffer) ), &gRFAL.fifo.bytesWritten);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e740:	89fb      	ldrh	r3, [r7, #14]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d009      	beq.n	800e75a <rfalTransceiveTx+0x15a>
 800e746:	89fb      	ldrh	r3, [r7, #14]
 800e748:	2b0d      	cmp	r3, #13
 800e74a:	d006      	beq.n	800e75a <rfalTransceiveTx+0x15a>
                {
                    gRFAL.TxRx.status = ret;
 800e74c:	4a45      	ldr	r2, [pc, #276]	; (800e864 <rfalTransceiveTx+0x264>)
 800e74e:	89fb      	ldrh	r3, [r7, #14]
 800e750:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e752:	4b44      	ldr	r3, [pc, #272]	; (800e864 <rfalTransceiveTx+0x264>)
 800e754:	2213      	movs	r2, #19
 800e756:	751a      	strb	r2, [r3, #20]
                    break;
 800e758:	e190      	b.n	800ea7c <rfalTransceiveTx+0x47c>
                }
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( rfalConvBytesToBits(gRFAL.fifo.bytesTotal) );
 800e75a:	4b42      	ldr	r3, [pc, #264]	; (800e864 <rfalTransceiveTx+0x264>)
 800e75c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e75e:	00db      	lsls	r3, r3, #3
 800e760:	4618      	mov	r0, r3
 800e762:	f7f3 fb02 	bl	8001d6a <st25r3911SetNumTxBits>

                /* Load FIFO with coded bytes */
                /* TODO: check bytesWritten does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)gRFAL.fifo.bytesWritten );
 800e766:	4b3f      	ldr	r3, [pc, #252]	; (800e864 <rfalTransceiveTx+0x264>)
 800e768:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	4619      	mov	r1, r3
 800e76e:	483f      	ldr	r0, [pc, #252]	; (800e86c <rfalTransceiveTx+0x26c>)
 800e770:	f7f3 fe1a 	bl	80023a8 <st25r3911WriteFifo>
 800e774:	e01c      	b.n	800e7b0 <rfalTransceiveTx+0x1b0>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                gRFAL.fifo.bytesTotal = (uint16_t)rfalCalcNumBytes(gRFAL.TxRx.ctx.txBufLen);
 800e776:	4b3b      	ldr	r3, [pc, #236]	; (800e864 <rfalTransceiveTx+0x264>)
 800e778:	8c1b      	ldrh	r3, [r3, #32]
 800e77a:	3307      	adds	r3, #7
 800e77c:	08db      	lsrs	r3, r3, #3
 800e77e:	b29a      	uxth	r2, r3
 800e780:	4b38      	ldr	r3, [pc, #224]	; (800e864 <rfalTransceiveTx+0x264>)
 800e782:	875a      	strh	r2, [r3, #58]	; 0x3a
                
                /* Set the number of full bytes and bits to be transmitted */
                st25r3911SetNumTxBits( gRFAL.TxRx.ctx.txBufLen );
 800e784:	4b37      	ldr	r3, [pc, #220]	; (800e864 <rfalTransceiveTx+0x264>)
 800e786:	8c1b      	ldrh	r3, [r3, #32]
 800e788:	4618      	mov	r0, r3
 800e78a:	f7f3 faee 	bl	8001d6a <st25r3911SetNumTxBits>
                
                /* Load FIFO with total length or FIFO's maximum */
                gRFAL.fifo.bytesWritten = MIN( gRFAL.fifo.bytesTotal, ST25R3911_FIFO_DEPTH );
 800e78e:	4b35      	ldr	r3, [pc, #212]	; (800e864 <rfalTransceiveTx+0x264>)
 800e790:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e792:	2b60      	cmp	r3, #96	; 0x60
 800e794:	bf28      	it	cs
 800e796:	2360      	movcs	r3, #96	; 0x60
 800e798:	b29a      	uxth	r2, r3
 800e79a:	4b32      	ldr	r3, [pc, #200]	; (800e864 <rfalTransceiveTx+0x264>)
 800e79c:	879a      	strh	r2, [r3, #60]	; 0x3c
                st25r3911WriteFifo( gRFAL.TxRx.ctx.txBuf, (uint8_t)gRFAL.fifo.bytesWritten );
 800e79e:	4b31      	ldr	r3, [pc, #196]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7a0:	69da      	ldr	r2, [r3, #28]
 800e7a2:	4b30      	ldr	r3, [pc, #192]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	4610      	mov	r0, r2
 800e7ac:	f7f3 fdfc 	bl	80023a8 <st25r3911WriteFifo>
            }
        
            /*Check if Observation Mode is enabled and set it on ST25R391x */
            rfalCheckEnableObsModeTx(); 
 800e7b0:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7b2:	795b      	ldrb	r3, [r3, #5]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d005      	beq.n	800e7c4 <rfalTransceiveTx+0x1c4>
 800e7b8:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7ba:	795b      	ldrb	r3, [r3, #5]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	2001      	movs	r0, #1
 800e7c0:	f7f3 fcba 	bl	8002138 <st25r3911WriteTestRegister>
            
            /*******************************************************************************/
            /* Trigger/Start transmission                                                  */
            if( (gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U )
 800e7c4:	4b27      	ldr	r3, [pc, #156]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d003      	beq.n	800e7d8 <rfalTransceiveTx+0x1d8>
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITHOUT_CRC );
 800e7d0:	20c5      	movs	r0, #197	; 0xc5
 800e7d2:	f7f3 fe79 	bl	80024c8 <st25r3911ExecuteCommand>
 800e7d6:	e002      	b.n	800e7de <rfalTransceiveTx+0x1de>
            }
            else
            {
                st25r3911ExecuteCommand( ST25R3911_CMD_TRANSMIT_WITH_CRC );
 800e7d8:	20c4      	movs	r0, #196	; 0xc4
 800e7da:	f7f3 fe75 	bl	80024c8 <st25r3911ExecuteCommand>
            }
             
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e7de:	4b21      	ldr	r3, [pc, #132]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7e0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e7e2:	4b20      	ldr	r3, [pc, #128]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7e4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d201      	bcs.n	800e7ee <rfalTransceiveTx+0x1ee>
 800e7ea:	220f      	movs	r2, #15
 800e7ec:	e000      	b.n	800e7f0 <rfalTransceiveTx+0x1f0>
 800e7ee:	2211      	movs	r2, #17
 800e7f0:	4b1c      	ldr	r3, [pc, #112]	; (800e864 <rfalTransceiveTx+0x264>)
 800e7f2:	751a      	strb	r2, [r3, #20]
            break;
 800e7f4:	e142      	b.n	800ea7c <rfalTransceiveTx+0x47c>

        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_WL:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );            
 800e7f6:	2048      	movs	r0, #72	; 0x48
 800e7f8:	f7f4 f842 	bl	8002880 <st25r3911GetInterrupt>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 8135 	beq.w	800ea72 <rfalTransceiveTx+0x472>
            {
               break;  /* No interrupt to process */
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_TXE) == 0U) )
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d008      	beq.n	800e824 <rfalTransceiveTx+0x224>
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f003 0308 	and.w	r3, r3, #8
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d103      	bne.n	800e824 <rfalTransceiveTx+0x224>
            {
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_RELOAD_FIFO;
 800e81c:	4b11      	ldr	r3, [pc, #68]	; (800e864 <rfalTransceiveTx+0x264>)
 800e81e:	2210      	movs	r2, #16
 800e820:	751a      	strb	r2, [r3, #20]
 800e822:	e006      	b.n	800e832 <rfalTransceiveTx+0x232>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800e824:	4b0f      	ldr	r3, [pc, #60]	; (800e864 <rfalTransceiveTx+0x264>)
 800e826:	2203      	movs	r2, #3
 800e828:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e82a:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <rfalTransceiveTx+0x264>)
 800e82c:	2213      	movs	r2, #19
 800e82e:	751a      	strb	r2, [r3, #20]
                break;
 800e830:	e124      	b.n	800ea7c <rfalTransceiveTx+0x47c>
        case RFAL_TXRX_STATE_TX_RELOAD_FIFO:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* In NFC-V streaming mode, the FIFO needs to be loaded with the coded bits    */
            if( (RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) )
 800e832:	4b0c      	ldr	r3, [pc, #48]	; (800e864 <rfalTransceiveTx+0x264>)
 800e834:	785b      	ldrb	r3, [r3, #1]
 800e836:	2b07      	cmp	r3, #7
 800e838:	d003      	beq.n	800e842 <rfalTransceiveTx+0x242>
 800e83a:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <rfalTransceiveTx+0x264>)
 800e83c:	785b      	ldrb	r3, [r3, #1]
 800e83e:	2b08      	cmp	r3, #8
 800e840:	d16d      	bne.n	800e91e <rfalTransceiveTx+0x31e>
            {
                uint16_t maxLen;
                                
                /* Load FIFO with the remaining length or maximum available (which fit on the coding buffer) */
                maxLen = (uint16_t)MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);
 800e842:	4b08      	ldr	r3, [pc, #32]	; (800e864 <rfalTransceiveTx+0x264>)
 800e844:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e846:	461a      	mov	r2, r3
 800e848:	4b06      	ldr	r3, [pc, #24]	; (800e864 <rfalTransceiveTx+0x264>)
 800e84a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	4a05      	ldr	r2, [pc, #20]	; (800e864 <rfalTransceiveTx+0x264>)
 800e850:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 800e852:	4293      	cmp	r3, r2
 800e854:	da10      	bge.n	800e878 <rfalTransceiveTx+0x278>
 800e856:	4b03      	ldr	r3, [pc, #12]	; (800e864 <rfalTransceiveTx+0x264>)
 800e858:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800e85a:	4b02      	ldr	r3, [pc, #8]	; (800e864 <rfalTransceiveTx+0x264>)
 800e85c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	b29b      	uxth	r3, r3
 800e862:	e00b      	b.n	800e87c <rfalTransceiveTx+0x27c>
 800e864:	200009a8 	.word	0x200009a8
 800e868:	200009e4 	.word	0x200009e4
 800e86c:	20000b54 	.word	0x20000b54
 800e870:	20000d5c 	.word	0x20000d5c
 800e874:	200009e2 	.word	0x200009e2
 800e878:	4b82      	ldr	r3, [pc, #520]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e87a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e87c:	81bb      	strh	r3, [r7, #12]
                maxLen = (uint16_t)MIN( maxLen, sizeof(gRFAL.nfcvData.codingBuffer) );
 800e87e:	89bb      	ldrh	r3, [r7, #12]
 800e880:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800e884:	bf28      	it	cs
 800e886:	f44f 7302 	movcs.w	r3, #520	; 0x208
 800e88a:	81bb      	strh	r3, [r7, #12]
                tmp    = 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	80fb      	strh	r3, [r7, #6]

                /* Calculate the bytes needed to be Written into FIFO (a incomplete byte will be added as 1byte) */
                ret = iso15693VCDCode(gRFAL.TxRx.ctx.txBuf, rfalConvBitsToBytes(gRFAL.TxRx.ctx.txBufLen), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL) != 0U)?false:true), (((gRFAL.nfcvData.origCtx.flags & (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL) != 0U)?false:true), (RFAL_MODE_POLL_PICOPASS == gRFAL.mode),
 800e890:	4b7c      	ldr	r3, [pc, #496]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e892:	69d8      	ldr	r0, [r3, #28]
 800e894:	4b7b      	ldr	r3, [pc, #492]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e896:	8c1b      	ldrh	r3, [r3, #32]
 800e898:	3307      	adds	r3, #7
 800e89a:	08db      	lsrs	r3, r3, #3
 800e89c:	b299      	uxth	r1, r3
 800e89e:	4b79      	ldr	r3, [pc, #484]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e8a0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	bf0c      	ite	eq
 800e8ac:	2301      	moveq	r3, #1
 800e8ae:	2300      	movne	r3, #0
 800e8b0:	b2dc      	uxtb	r4, r3
 800e8b2:	4b74      	ldr	r3, [pc, #464]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e8b4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800e8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	bf0c      	ite	eq
 800e8c0:	2301      	moveq	r3, #1
 800e8c2:	2300      	movne	r3, #0
 800e8c4:	b2dd      	uxtb	r5, r3
 800e8c6:	4b6f      	ldr	r3, [pc, #444]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e8c8:	785b      	ldrb	r3, [r3, #1]
 800e8ca:	2b08      	cmp	r3, #8
 800e8cc:	bf0c      	ite	eq
 800e8ce:	2301      	moveq	r3, #1
 800e8d0:	2300      	movne	r3, #0
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	1dba      	adds	r2, r7, #6
 800e8d6:	9205      	str	r2, [sp, #20]
 800e8d8:	89ba      	ldrh	r2, [r7, #12]
 800e8da:	9204      	str	r2, [sp, #16]
 800e8dc:	4a6a      	ldr	r2, [pc, #424]	; (800ea88 <rfalTransceiveTx+0x488>)
 800e8de:	9203      	str	r2, [sp, #12]
 800e8e0:	4a6a      	ldr	r2, [pc, #424]	; (800ea8c <rfalTransceiveTx+0x48c>)
 800e8e2:	9202      	str	r2, [sp, #8]
 800e8e4:	4a6a      	ldr	r2, [pc, #424]	; (800ea90 <rfalTransceiveTx+0x490>)
 800e8e6:	9201      	str	r2, [sp, #4]
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	f7f8 fce5 	bl	80072bc <iso15693VCDCode>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	81fb      	strh	r3, [r7, #14]
                          &gRFAL.fifo.bytesTotal, &gRFAL.nfcvData.nfcvOffset, gRFAL.nfcvData.codingBuffer, maxLen, &tmp);

                if( (ret != ERR_NONE) && (ret != ERR_AGAIN) )
 800e8f6:	89fb      	ldrh	r3, [r7, #14]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d009      	beq.n	800e910 <rfalTransceiveTx+0x310>
 800e8fc:	89fb      	ldrh	r3, [r7, #14]
 800e8fe:	2b0d      	cmp	r3, #13
 800e900:	d006      	beq.n	800e910 <rfalTransceiveTx+0x310>
                {
                    gRFAL.TxRx.status = ret;
 800e902:	4a60      	ldr	r2, [pc, #384]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e904:	89fb      	ldrh	r3, [r7, #14]
 800e906:	82d3      	strh	r3, [r2, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e908:	4b5e      	ldr	r3, [pc, #376]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e90a:	2213      	movs	r2, #19
 800e90c:	751a      	strb	r2, [r3, #20]
                    break;
 800e90e:	e0b5      	b.n	800ea7c <rfalTransceiveTx+0x47c>
                }

                /* Load FIFO with coded bytes */
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( gRFAL.nfcvData.codingBuffer, (uint8_t)tmp );
 800e910:	88fb      	ldrh	r3, [r7, #6]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	4619      	mov	r1, r3
 800e916:	485c      	ldr	r0, [pc, #368]	; (800ea88 <rfalTransceiveTx+0x488>)
 800e918:	f7f3 fd46 	bl	80023a8 <st25r3911WriteFifo>
            {
 800e91c:	e018      	b.n	800e950 <rfalTransceiveTx+0x350>
            /*******************************************************************************/
            else
        #endif /* RFAL_FEATURE_NFCV */
            {
                /* Load FIFO with the remaining length or maximum available */
                tmp = MIN( (gRFAL.fifo.bytesTotal - gRFAL.fifo.bytesWritten), gRFAL.fifo.expWL);       /* tmp holds the number of bytes written on this iteration */
 800e91e:	4b59      	ldr	r3, [pc, #356]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e920:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e922:	461a      	mov	r2, r3
 800e924:	4b57      	ldr	r3, [pc, #348]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e926:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e928:	4619      	mov	r1, r3
 800e92a:	4b56      	ldr	r3, [pc, #344]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e92c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e92e:	1acb      	subs	r3, r1, r3
 800e930:	4293      	cmp	r3, r2
 800e932:	bfa8      	it	ge
 800e934:	4613      	movge	r3, r2
 800e936:	b29b      	uxth	r3, r3
 800e938:	80fb      	strh	r3, [r7, #6]
                /* TODO: check tmp does not exceed 255 */
                st25r3911WriteFifo( &gRFAL.TxRx.ctx.txBuf[gRFAL.fifo.bytesWritten], (uint8_t)tmp );
 800e93a:	4b52      	ldr	r3, [pc, #328]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e93c:	69db      	ldr	r3, [r3, #28]
 800e93e:	4a51      	ldr	r2, [pc, #324]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e940:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800e942:	4413      	add	r3, r2
 800e944:	88fa      	ldrh	r2, [r7, #6]
 800e946:	b2d2      	uxtb	r2, r2
 800e948:	4611      	mov	r1, r2
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7f3 fd2c 	bl	80023a8 <st25r3911WriteFifo>
            }
            
            /* Update total written bytes to FIFO */
            gRFAL.fifo.bytesWritten += tmp;
 800e950:	4b4c      	ldr	r3, [pc, #304]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e952:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e954:	88fb      	ldrh	r3, [r7, #6]
 800e956:	4413      	add	r3, r2
 800e958:	b29a      	uxth	r2, r3
 800e95a:	4b4a      	ldr	r3, [pc, #296]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e95c:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /* Check if a WL level is expected or TXE should come */
            gRFAL.TxRx.state = (( gRFAL.fifo.bytesWritten < gRFAL.fifo.bytesTotal ) ? RFAL_TXRX_STATE_TX_WAIT_WL : RFAL_TXRX_STATE_TX_WAIT_TXE);
 800e95e:	4b49      	ldr	r3, [pc, #292]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e960:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800e962:	4b48      	ldr	r3, [pc, #288]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e964:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e966:	429a      	cmp	r2, r3
 800e968:	d201      	bcs.n	800e96e <rfalTransceiveTx+0x36e>
 800e96a:	220f      	movs	r2, #15
 800e96c:	e000      	b.n	800e970 <rfalTransceiveTx+0x370>
 800e96e:	2211      	movs	r2, #17
 800e970:	4b44      	ldr	r3, [pc, #272]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e972:	751a      	strb	r2, [r3, #20]
            break;
 800e974:	e082      	b.n	800ea7c <rfalTransceiveTx+0x47c>
            
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_WAIT_TXE:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_TXE) );
 800e976:	2048      	movs	r0, #72	; 0x48
 800e978:	f7f3 ff82 	bl	8002880 <st25r3911GetInterrupt>
 800e97c:	4603      	mov	r3, r0
 800e97e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d077      	beq.n	800ea76 <rfalTransceiveTx+0x476>
            {
               break;  /* No interrupt to process */
            }
                        
            
            if( (irqs & ST25R3911_IRQ_MASK_TXE) != 0U )
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	f003 0308 	and.w	r3, r3, #8
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d021      	beq.n	800e9d4 <rfalTransceiveTx+0x3d4>
            {
                /* In Active comm start SW timer to measure FWT */
                if( rfalIsModeActiveComm( gRFAL.mode) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) ) 
 800e990:	4b3c      	ldr	r3, [pc, #240]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e992:	785b      	ldrb	r3, [r3, #1]
 800e994:	2b09      	cmp	r3, #9
 800e996:	d003      	beq.n	800e9a0 <rfalTransceiveTx+0x3a0>
 800e998:	4b3a      	ldr	r3, [pc, #232]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e99a:	785b      	ldrb	r3, [r3, #1]
 800e99c:	2b0d      	cmp	r3, #13
 800e99e:	d115      	bne.n	800e9cc <rfalTransceiveTx+0x3cc>
 800e9a0:	4b38      	ldr	r3, [pc, #224]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d010      	beq.n	800e9cc <rfalTransceiveTx+0x3cc>
 800e9aa:	4b36      	ldr	r3, [pc, #216]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00c      	beq.n	800e9cc <rfalTransceiveTx+0x3cc>
                {
                    rfalTimerStart( gRFAL.tmr.FWT, rfalConv1fcToMs( gRFAL.TxRx.ctx.fwt ) );
 800e9b2:	4b34      	ldr	r3, [pc, #208]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9b6:	4a37      	ldr	r2, [pc, #220]	; (800ea94 <rfalTransceiveTx+0x494>)
 800e9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e9bc:	0b1b      	lsrs	r3, r3, #12
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7f3 ffdf 	bl	8002984 <timerCalculateTimer>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	4b2e      	ldr	r3, [pc, #184]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9ca:	645a      	str	r2, [r3, #68]	; 0x44
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_TX_DONE;
 800e9cc:	4b2d      	ldr	r3, [pc, #180]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9ce:	2212      	movs	r2, #18
 800e9d0:	751a      	strb	r2, [r3, #20]
 800e9d2:	e00b      	b.n	800e9ec <rfalTransceiveTx+0x3ec>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_FWL) != 0U )
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d14d      	bne.n	800ea7a <rfalTransceiveTx+0x47a>
                /*******************************************************************************/
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800e9de:	4b29      	ldr	r3, [pc, #164]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9e0:	2203      	movs	r2, #3
 800e9e2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800e9e4:	4b27      	ldr	r3, [pc, #156]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9e6:	2213      	movs	r2, #19
 800e9e8:	751a      	strb	r2, [r3, #20]
               break;
 800e9ea:	e047      	b.n	800ea7c <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /* If no rxBuf is provided do not wait/expect Rx */
            if( gRFAL.TxRx.ctx.rxBuf == NULL )
 800e9ec:	4b25      	ldr	r3, [pc, #148]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d110      	bne.n	800ea16 <rfalTransceiveTx+0x416>
            {
                /*Check if Observation Mode was enabled and disable it on ST25R391x */
                rfalCheckDisableObsMode();
 800e9f4:	4b23      	ldr	r3, [pc, #140]	; (800ea84 <rfalTransceiveTx+0x484>)
 800e9f6:	799b      	ldrb	r3, [r3, #6]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d003      	beq.n	800ea04 <rfalTransceiveTx+0x404>
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	2001      	movs	r0, #1
 800ea00:	f7f3 fb9a 	bl	8002138 <st25r3911WriteTestRegister>
                
                /* Clean up Transceive */
                rfalCleanupTransceive();
 800ea04:	f7ff fd50 	bl	800e4a8 <rfalCleanupTransceive>
                                
                gRFAL.TxRx.status = ERR_NONE;
 800ea08:	4b1e      	ldr	r3, [pc, #120]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  =  RFAL_TXRX_STATE_IDLE;
 800ea0e:	4b1d      	ldr	r3, [pc, #116]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	751a      	strb	r2, [r3, #20]
                break;
 800ea14:	e032      	b.n	800ea7c <rfalTransceiveTx+0x47c>
            }
            
            rfalCheckEnableObsModeRx();
 800ea16:	4b1b      	ldr	r3, [pc, #108]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea18:	799b      	ldrb	r3, [r3, #6]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d005      	beq.n	800ea2a <rfalTransceiveTx+0x42a>
 800ea1e:	4b19      	ldr	r3, [pc, #100]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea20:	799b      	ldrb	r3, [r3, #6]
 800ea22:	4619      	mov	r1, r3
 800ea24:	2001      	movs	r0, #1
 800ea26:	f7f3 fb87 	bl	8002138 <st25r3911WriteTestRegister>
            
            /* Goto Rx */
            gRFAL.TxRx.state  =  RFAL_TXRX_STATE_RX_IDLE;
 800ea2a:	4b16      	ldr	r3, [pc, #88]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea2c:	2251      	movs	r2, #81	; 0x51
 800ea2e:	751a      	strb	r2, [r3, #20]
            break;
 800ea30:	e024      	b.n	800ea7c <rfalTransceiveTx+0x47c>
           
        /*******************************************************************************/
        case RFAL_TXRX_STATE_TX_FAIL:
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800ea32:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea34:	8adb      	ldrh	r3, [r3, #22]
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d102      	bne.n	800ea40 <rfalTransceiveTx+0x440>
            {
                gRFAL.TxRx.status = ERR_SYSTEM;
 800ea3a:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea3c:	2208      	movs	r2, #8
 800ea3e:	82da      	strh	r2, [r3, #22]
            }
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ea40:	4b10      	ldr	r3, [pc, #64]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea42:	799b      	ldrb	r3, [r3, #6]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d003      	beq.n	800ea50 <rfalTransceiveTx+0x450>
 800ea48:	2100      	movs	r1, #0
 800ea4a:	2001      	movs	r0, #1
 800ea4c:	f7f3 fb74 	bl	8002138 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ea50:	f7ff fd2a 	bl	800e4a8 <rfalCleanupTransceive>
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800ea54:	4b0b      	ldr	r3, [pc, #44]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	751a      	strb	r2, [r3, #20]
            break;
 800ea5a:	e00f      	b.n	800ea7c <rfalTransceiveTx+0x47c>
        
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800ea5c:	4b09      	ldr	r3, [pc, #36]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea5e:	2208      	movs	r2, #8
 800ea60:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_TX_FAIL;
 800ea62:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <rfalTransceiveTx+0x484>)
 800ea64:	2213      	movs	r2, #19
 800ea66:	751a      	strb	r2, [r3, #20]
            break;
 800ea68:	e008      	b.n	800ea7c <rfalTransceiveTx+0x47c>
                break;
 800ea6a:	bf00      	nop
 800ea6c:	e006      	b.n	800ea7c <rfalTransceiveTx+0x47c>
                   break;
 800ea6e:	bf00      	nop
 800ea70:	e004      	b.n	800ea7c <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 800ea72:	bf00      	nop
 800ea74:	e002      	b.n	800ea7c <rfalTransceiveTx+0x47c>
               break;  /* No interrupt to process */
 800ea76:	bf00      	nop
 800ea78:	e000      	b.n	800ea7c <rfalTransceiveTx+0x47c>
                break;  /* Ignore ST25R3911 FIFO WL if total TxLen is already on the FIFO */
 800ea7a:	bf00      	nop
    }
}
 800ea7c:	bf00      	nop
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bdb0      	pop	{r4, r5, r7, pc}
 800ea84:	200009a8 	.word	0x200009a8
 800ea88:	20000b54 	.word	0x20000b54
 800ea8c:	20000d5c 	.word	0x20000d5c
 800ea90:	200009e2 	.word	0x200009e2
 800ea94:	4d542005 	.word	0x4d542005

0800ea98 <rfalTransceiveRx>:


/*******************************************************************************/
static void rfalTransceiveRx( void )
{
 800ea98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea9a:	b089      	sub	sp, #36	; 0x24
 800ea9c:	af04      	add	r7, sp, #16
    volatile uint32_t irqs;
    uint8_t           tmp;
    uint8_t           aux;
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	60bb      	str	r3, [r7, #8]
    
    if( gRFAL.TxRx.state != gRFAL.TxRx.lastState )
 800eaa2:	4baa      	ldr	r3, [pc, #680]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eaa4:	7d1a      	ldrb	r2, [r3, #20]
 800eaa6:	4ba9      	ldr	r3, [pc, #676]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eaa8:	7d5b      	ldrb	r3, [r3, #21]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d003      	beq.n	800eab6 <rfalTransceiveRx+0x1e>
    {        
        /* rfalLogD( "RFAL: lastSt: %d curSt: %d \r\n", gRFAL.TxRx.lastState, gRFAL.TxRx.state ); */
        gRFAL.TxRx.lastState = gRFAL.TxRx.state;
 800eaae:	4ba7      	ldr	r3, [pc, #668]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eab0:	7d1a      	ldrb	r2, [r3, #20]
 800eab2:	4ba6      	ldr	r3, [pc, #664]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eab4:	755a      	strb	r2, [r3, #21]
    }
    
    switch( gRFAL.TxRx.state )
 800eab6:	4ba5      	ldr	r3, [pc, #660]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eab8:	7d1b      	ldrb	r3, [r3, #20]
 800eaba:	3b51      	subs	r3, #81	; 0x51
 800eabc:	2b09      	cmp	r3, #9
 800eabe:	f200 831c 	bhi.w	800f0fa <rfalTransceiveRx+0x662>
 800eac2:	a201      	add	r2, pc, #4	; (adr r2, 800eac8 <rfalTransceiveRx+0x30>)
 800eac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac8:	0800eaf1 	.word	0x0800eaf1
 800eacc:	0800f077 	.word	0x0800f077
 800ead0:	0800eb29 	.word	0x0800eb29
 800ead4:	0800ec35 	.word	0x0800ec35
 800ead8:	0800efb5 	.word	0x0800efb5
 800eadc:	0800ec89 	.word	0x0800ec89
 800eae0:	0800ed9f 	.word	0x0800ed9f
 800eae4:	0800f0b1 	.word	0x0800f0b1
 800eae8:	0800ef8f 	.word	0x0800ef8f
 800eaec:	0800f04d 	.word	0x0800f04d
    {
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_IDLE:
            
            /* Clear rx counters */
            gRFAL.fifo.bytesWritten   = 0;    // Total bytes written on RxBuffer
 800eaf0:	4b96      	ldr	r3, [pc, #600]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	879a      	strh	r2, [r3, #60]	; 0x3c
            gRFAL.fifo.bytesTotal     = 0;    // Total bytes in FIFO will now be from Rx
 800eaf6:	4b95      	ldr	r3, [pc, #596]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	875a      	strh	r2, [r3, #58]	; 0x3a
            if( gRFAL.TxRx.ctx.rxRcvdLen != NULL )
 800eafc:	4b93      	ldr	r3, [pc, #588]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d003      	beq.n	800eb0c <rfalTransceiveRx+0x74>
            {
                *gRFAL.TxRx.ctx.rxRcvdLen = 0;
 800eb04:	4b91      	ldr	r3, [pc, #580]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb08:	2200      	movs	r2, #0
 800eb0a:	801a      	strh	r2, [r3, #0]
            }
            
            gRFAL.TxRx.state = ( rfalIsModeActiveComm( gRFAL.mode ) ? RFAL_TXRX_STATE_RX_WAIT_EON : RFAL_TXRX_STATE_RX_WAIT_RXS );
 800eb0c:	4b8f      	ldr	r3, [pc, #572]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb0e:	785b      	ldrb	r3, [r3, #1]
 800eb10:	2b09      	cmp	r3, #9
 800eb12:	d003      	beq.n	800eb1c <rfalTransceiveRx+0x84>
 800eb14:	4b8d      	ldr	r3, [pc, #564]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb16:	785b      	ldrb	r3, [r3, #1]
 800eb18:	2b0d      	cmp	r3, #13
 800eb1a:	d101      	bne.n	800eb20 <rfalTransceiveRx+0x88>
 800eb1c:	2252      	movs	r2, #82	; 0x52
 800eb1e:	e000      	b.n	800eb22 <rfalTransceiveRx+0x8a>
 800eb20:	2253      	movs	r2, #83	; 0x53
 800eb22:	4b8a      	ldr	r3, [pc, #552]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb24:	751a      	strb	r2, [r3, #20]
            break;
 800eb26:	e2f8      	b.n	800f11a <rfalTransceiveRx+0x682>
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_WAIT_RXS:
        
            /*******************************************************************************/
            /* If in Active comm, Check if FWT SW timer has expired */
            if( rfalIsModeActiveComm( gRFAL.mode ) && (gRFAL.TxRx.ctx.fwt != RFAL_FWT_NONE) && (gRFAL.TxRx.ctx.fwt != 0U) )
 800eb28:	4b88      	ldr	r3, [pc, #544]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb2a:	785b      	ldrb	r3, [r3, #1]
 800eb2c:	2b09      	cmp	r3, #9
 800eb2e:	d003      	beq.n	800eb38 <rfalTransceiveRx+0xa0>
 800eb30:	4b86      	ldr	r3, [pc, #536]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb32:	785b      	ldrb	r3, [r3, #1]
 800eb34:	2b0d      	cmp	r3, #13
 800eb36:	d117      	bne.n	800eb68 <rfalTransceiveRx+0xd0>
 800eb38:	4b84      	ldr	r3, [pc, #528]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb40:	d012      	beq.n	800eb68 <rfalTransceiveRx+0xd0>
 800eb42:	4b82      	ldr	r3, [pc, #520]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00e      	beq.n	800eb68 <rfalTransceiveRx+0xd0>
            {
                if( rfalTimerisExpired( gRFAL.tmr.FWT ) )  
 800eb4a:	4b80      	ldr	r3, [pc, #512]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7f3 ff26 	bl	80029a0 <timerIsExpired>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d006      	beq.n	800eb68 <rfalTransceiveRx+0xd0>
                {
                    gRFAL.TxRx.status = ERR_TIMEOUT;
 800eb5a:	4b7c      	ldr	r3, [pc, #496]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb5c:	2204      	movs	r2, #4
 800eb5e:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eb60:	4b7a      	ldr	r3, [pc, #488]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb62:	225a      	movs	r2, #90	; 0x5a
 800eb64:	751a      	strb	r2, [r3, #20]
                    break;
 800eb66:	e2d8      	b.n	800f11a <rfalTransceiveRx+0x682>
                }
            }
            
            /*******************************************************************************/
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_RXS | ST25R3911_IRQ_MASK_NRE | ST25R3911_IRQ_MASK_EOF | ST25R3911_IRQ_MASK_RXE) );
 800eb68:	f644 0030 	movw	r0, #18480	; 0x4830
 800eb6c:	f7f3 fe88 	bl	8002880 <st25r3911GetInterrupt>
 800eb70:	4603      	mov	r3, r0
 800eb72:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f000 82c6 	beq.w	800f108 <rfalTransceiveRx+0x670>
            /* NRE interrupt may be triggered twice                                        */
            /* Ignore NRE if is detected together with no Rx Start                         */
            /*******************************************************************************/
            
            /* Only raise Timeout if NRE is detected with no Rx Start (NRT EMV mode)       */
            if( ((irqs & ST25R3911_IRQ_MASK_NRE) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00b      	beq.n	800eb9e <rfalTransceiveRx+0x106>
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	f003 0320 	and.w	r3, r3, #32
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d106      	bne.n	800eb9e <rfalTransceiveRx+0x106>
            {
                gRFAL.TxRx.status = ERR_TIMEOUT;
 800eb90:	4b6e      	ldr	r3, [pc, #440]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb92:	2204      	movs	r2, #4
 800eb94:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800eb96:	4b6d      	ldr	r3, [pc, #436]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eb98:	225a      	movs	r2, #90	; 0x5a
 800eb9a:	751a      	strb	r2, [r3, #20]
                break;
 800eb9c:	e2bd      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            
            /* Only raise Link Loss if EOF is detected with no Rx Start */
            if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXS) == 0U) )
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d015      	beq.n	800ebd4 <rfalTransceiveRx+0x13c>
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	f003 0320 	and.w	r3, r3, #32
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d110      	bne.n	800ebd4 <rfalTransceiveRx+0x13c>
            {
                /* In AP2P a Field On has already occurred - treat this as timeout | mute */
                gRFAL.TxRx.status = ( rfalIsModeActiveComm( gRFAL.mode ) ? ERR_TIMEOUT : ERR_LINK_LOSS );
 800ebb2:	4b66      	ldr	r3, [pc, #408]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ebb4:	785b      	ldrb	r3, [r3, #1]
 800ebb6:	2b09      	cmp	r3, #9
 800ebb8:	d003      	beq.n	800ebc2 <rfalTransceiveRx+0x12a>
 800ebba:	4b64      	ldr	r3, [pc, #400]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ebbc:	785b      	ldrb	r3, [r3, #1]
 800ebbe:	2b0d      	cmp	r3, #13
 800ebc0:	d101      	bne.n	800ebc6 <rfalTransceiveRx+0x12e>
 800ebc2:	2204      	movs	r2, #4
 800ebc4:	e000      	b.n	800ebc8 <rfalTransceiveRx+0x130>
 800ebc6:	2225      	movs	r2, #37	; 0x25
 800ebc8:	4b60      	ldr	r3, [pc, #384]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ebca:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ebcc:	4b5f      	ldr	r3, [pc, #380]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ebce:	225a      	movs	r2, #90	; 0x5a
 800ebd0:	751a      	strb	r2, [r3, #20]
                break;
 800ebd2:	e2a2      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_RXS) != 0U )
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f003 0320 	and.w	r3, r3, #32
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d015      	beq.n	800ec0a <rfalTransceiveRx+0x172>
            {
                /* If we got RXS + RXE together, jump directly into RFAL_TXRX_STATE_RX_ERR_CHECK */
                if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f003 0310 	and.w	r3, r3, #16
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d006      	beq.n	800ebf6 <rfalTransceiveRx+0x15e>
                {
                    gRFAL.TxRx.rxse  = true;
 800ebe8:	4b58      	ldr	r3, [pc, #352]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ebea:	2201      	movs	r2, #1
 800ebec:	761a      	strb	r2, [r3, #24]
                    gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800ebee:	4b57      	ldr	r3, [pc, #348]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ebf0:	2256      	movs	r2, #86	; 0x56
 800ebf2:	751a      	strb	r2, [r3, #20]
                    break;
 800ebf4:	e291      	b.n	800f11a <rfalTransceiveRx+0x682>
                {
                    /*******************************************************************************/
                    /* REMARK: Silicon workaround ST25R3911 Errata #1.1                            */
                    /* Rarely on corrupted frames I_rxs gets signaled but I_rxe is not signaled    */
                    /* Use a SW timer to handle an eventual missing RXE                            */
                    rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800ebf6:	200a      	movs	r0, #10
 800ebf8:	f7f3 fec4 	bl	8002984 <timerCalculateTimer>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	4b53      	ldr	r3, [pc, #332]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec00:	649a      	str	r2, [r3, #72]	; 0x48
                    /*******************************************************************************/
                    
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800ec02:	4b52      	ldr	r3, [pc, #328]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec04:	2254      	movs	r2, #84	; 0x54
 800ec06:	751a      	strb	r2, [r3, #20]
 800ec08:	e014      	b.n	800ec34 <rfalTransceiveRx+0x19c>
                }
            }
            else if( (irqs & ST25R3911_IRQ_MASK_RXE) != 0U )
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f003 0310 	and.w	r3, r3, #16
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d008      	beq.n	800ec26 <rfalTransceiveRx+0x18e>
                /* REMARK: Silicon workaround ST25R3911 Errata #1.9                            */
                /* ST25R3911 may indicate RXE without RXS previously, this happens upon some   */
                /* noise or incomplete byte frames with less than 4 bits                       */
                /*******************************************************************************/
                
                gRFAL.TxRx.status = ERR_IO;
 800ec14:	4b4d      	ldr	r3, [pc, #308]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec16:	2203      	movs	r2, #3
 800ec18:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ec1a:	4b4c      	ldr	r3, [pc, #304]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec1c:	225a      	movs	r2, #90	; 0x5a
 800ec1e:	751a      	strb	r2, [r3, #20]
                
                rfalErrorHandling();
 800ec20:	f7ff fbbc 	bl	800e39c <rfalErrorHandling>
                break;
 800ec24:	e279      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            else
            {
               gRFAL.TxRx.status = ERR_IO;
 800ec26:	4b49      	ldr	r3, [pc, #292]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec28:	2203      	movs	r2, #3
 800ec2a:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ec2c:	4b47      	ldr	r3, [pc, #284]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec2e:	225a      	movs	r2, #90	; 0x5a
 800ec30:	751a      	strb	r2, [r3, #20]
               break;
 800ec32:	e272      	b.n	800f11a <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_RXE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_RXE | ST25R3911_IRQ_MASK_FWL | ST25R3911_IRQ_MASK_EOF) );
 800ec34:	f44f 6005 	mov.w	r0, #2128	; 0x850
 800ec38:	f7f3 fe22 	bl	8002880 <st25r3911GetInterrupt>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10f      	bne.n	800ec66 <rfalTransceiveRx+0x1ce>
                /*******************************************************************************/
                /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
                /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
                /* corrupted frames.                                                           */
                /* SW timer is used to timeout upon a missing RXE                              */
                if( rfalTimerisExpired( gRFAL.tmr.RXE ) )
 800ec46:	4b41      	ldr	r3, [pc, #260]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7f3 fea8 	bl	80029a0 <timerIsExpired>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f000 825a 	beq.w	800f10c <rfalTransceiveRx+0x674>
                {
                    gRFAL.TxRx.status = ERR_FRAMING;
 800ec58:	4b3c      	ldr	r3, [pc, #240]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec5a:	2209      	movs	r2, #9
 800ec5c:	82da      	strh	r2, [r3, #22]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ec5e:	4b3b      	ldr	r3, [pc, #236]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec60:	225a      	movs	r2, #90	; 0x5a
 800ec62:	751a      	strb	r2, [r3, #20]
                }
                /*******************************************************************************/
                    
                break;  /* No interrupt to process */
 800ec64:	e252      	b.n	800f10c <rfalTransceiveRx+0x674>
            }
            
            if( ((irqs & ST25R3911_IRQ_MASK_FWL) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d008      	beq.n	800ec82 <rfalTransceiveRx+0x1ea>
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	f003 0310 	and.w	r3, r3, #16
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d103      	bne.n	800ec82 <rfalTransceiveRx+0x1ea>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_FIFO;
 800ec7a:	4b34      	ldr	r3, [pc, #208]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec7c:	2255      	movs	r2, #85	; 0x55
 800ec7e:	751a      	strb	r2, [r3, #20]
                break;
 800ec80:	e24b      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_ERR_CHECK;
 800ec82:	4b32      	ldr	r3, [pc, #200]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ec84:	2256      	movs	r2, #86	; 0x56
 800ec86:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_ERR_CHECK:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
        
            /* Retrieve and check for any error irqs */
            irqs |= st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CRC | ST25R3911_IRQ_MASK_PAR | ST25R3911_IRQ_MASK_ERR1 | ST25R3911_IRQ_MASK_ERR2 | ST25R3911_IRQ_MASK_COL) );
 800ec88:	4831      	ldr	r0, [pc, #196]	; (800ed50 <rfalTransceiveRx+0x2b8>)
 800ec8a:	f7f3 fdf9 	bl	8002880 <st25r3911GetInterrupt>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60bb      	str	r3, [r7, #8]
        
            if( (irqs & ST25R3911_IRQ_MASK_ERR1) != 0U )
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d008      	beq.n	800ecb2 <rfalTransceiveRx+0x21a>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800eca0:	4b2a      	ldr	r3, [pc, #168]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eca2:	2209      	movs	r2, #9
 800eca4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800eca6:	4b29      	ldr	r3, [pc, #164]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eca8:	2257      	movs	r2, #87	; 0x57
 800ecaa:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ecac:	f7ff fb76 	bl	800e39c <rfalErrorHandling>
                break;
 800ecb0:	e233      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            /* Discard Soft Framing errors if not in EMVCo error handling */
            else if( ((irqs & ST25R3911_IRQ_MASK_ERR2) != 0U) && (gRFAL.conf.eHandling == RFAL_ERRORHANDLING_EMVCO) )
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d00c      	beq.n	800ecd6 <rfalTransceiveRx+0x23e>
 800ecbc:	4b23      	ldr	r3, [pc, #140]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ecbe:	79db      	ldrb	r3, [r3, #7]
 800ecc0:	2b02      	cmp	r3, #2
 800ecc2:	d108      	bne.n	800ecd6 <rfalTransceiveRx+0x23e>
            {
                gRFAL.TxRx.status = ERR_FRAMING;
 800ecc4:	4b21      	ldr	r3, [pc, #132]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ecc6:	2209      	movs	r2, #9
 800ecc8:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ecca:	4b20      	ldr	r3, [pc, #128]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800eccc:	2257      	movs	r2, #87	; 0x57
 800ecce:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ecd0:	f7ff fb64 	bl	800e39c <rfalErrorHandling>
                break;
 800ecd4:	e221      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_PAR) != 0U )
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d008      	beq.n	800ecf2 <rfalTransceiveRx+0x25a>
            {
                gRFAL.TxRx.status = ERR_PAR;
 800ece0:	4b1a      	ldr	r3, [pc, #104]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ece2:	221b      	movs	r2, #27
 800ece4:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ece6:	4b19      	ldr	r3, [pc, #100]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ece8:	2257      	movs	r2, #87	; 0x57
 800ecea:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ecec:	f7ff fb56 	bl	800e39c <rfalErrorHandling>
                break;
 800ecf0:	e213      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_CRC) != 0U )
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d008      	beq.n	800ed0e <rfalTransceiveRx+0x276>
            {
                gRFAL.TxRx.status = ERR_CRC;
 800ecfc:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ecfe:	2215      	movs	r2, #21
 800ed00:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ed02:	4b12      	ldr	r3, [pc, #72]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ed04:	2257      	movs	r2, #87	; 0x57
 800ed06:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ed08:	f7ff fb48 	bl	800e39c <rfalErrorHandling>
                break;
 800ed0c:	e205      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            else if( (irqs & ST25R3911_IRQ_MASK_COL) != 0U )
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	f003 0304 	and.w	r3, r3, #4
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d008      	beq.n	800ed2a <rfalTransceiveRx+0x292>
            {
                gRFAL.TxRx.status = ERR_RF_COLLISION;
 800ed18:	4b0c      	ldr	r3, [pc, #48]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ed1a:	221d      	movs	r2, #29
 800ed1c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_READ_DATA;
 800ed1e:	4b0b      	ldr	r3, [pc, #44]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ed20:	2257      	movs	r2, #87	; 0x57
 800ed22:	751a      	strb	r2, [r3, #20]
                
                /* Check if there's a specific error handling for this */
                rfalErrorHandling();
 800ed24:	f7ff fb3a 	bl	800e39c <rfalErrorHandling>
                break;
 800ed28:	e1f7      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_EOF) != 0U) && ((irqs & ST25R3911_IRQ_MASK_RXE) == 0U) )
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00f      	beq.n	800ed54 <rfalTransceiveRx+0x2bc>
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	f003 0310 	and.w	r3, r3, #16
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <rfalTransceiveRx+0x2bc>
            {
                 gRFAL.TxRx.status = ERR_LINK_LOSS;
 800ed3e:	4b03      	ldr	r3, [pc, #12]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ed40:	2225      	movs	r2, #37	; 0x25
 800ed42:	82da      	strh	r2, [r3, #22]
                 gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ed44:	4b01      	ldr	r3, [pc, #4]	; (800ed4c <rfalTransceiveRx+0x2b4>)
 800ed46:	225a      	movs	r2, #90	; 0x5a
 800ed48:	751a      	strb	r2, [r3, #20]
                 break;
 800ed4a:	e1e6      	b.n	800f11a <rfalTransceiveRx+0x682>
 800ed4c:	200009a8 	.word	0x200009a8
 800ed50:	00f00004 	.word	0x00f00004
            }
            else if( ((irqs & ST25R3911_IRQ_MASK_RXE) != 0U) || (gRFAL.TxRx.rxse) )
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	f003 0310 	and.w	r3, r3, #16
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d103      	bne.n	800ed66 <rfalTransceiveRx+0x2ce>
 800ed5e:	4b94      	ldr	r3, [pc, #592]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ed60:	7e1b      	ldrb	r3, [r3, #24]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d014      	beq.n	800ed90 <rfalTransceiveRx+0x2f8>
            {
                /* Reception ended without any error indication,                  *
                 * check FIFO status for malformed or incomplete frames           */
                
                /* Check if the reception ends with an incomplete byte (residual bits) */
                if( rfalFIFOStatusIsIncompleteByte() )
 800ed66:	f000 fa0b 	bl	800f180 <rfalFIFOStatusIsIncompleteByte>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d003      	beq.n	800ed78 <rfalTransceiveRx+0x2e0>
                {
                   gRFAL.TxRx.status = ERR_INCOMPLETE_BYTE;
 800ed70:	4b8f      	ldr	r3, [pc, #572]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ed72:	2228      	movs	r2, #40	; 0x28
 800ed74:	82da      	strh	r2, [r3, #22]
 800ed76:	e007      	b.n	800ed88 <rfalTransceiveRx+0x2f0>
                }
                /* Check if the reception ends with missing parity bit */
                else if( rfalFIFOStatusIsMissingPar() )
 800ed78:	f000 fa14 	bl	800f1a4 <rfalFIFOStatusIsMissingPar>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <rfalTransceiveRx+0x2f0>
                {
                   gRFAL.TxRx.status = ERR_FRAMING;
 800ed82:	4b8b      	ldr	r3, [pc, #556]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ed84:	2209      	movs	r2, #9
 800ed86:	82da      	strh	r2, [r3, #22]
                else
                {
                    /* MISRA 15.7 - Empty else */
                }
                
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_READ_DATA;
 800ed88:	4b89      	ldr	r3, [pc, #548]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ed8a:	2257      	movs	r2, #87	; 0x57
 800ed8c:	751a      	strb	r2, [r3, #20]
 800ed8e:	e006      	b.n	800ed9e <rfalTransceiveRx+0x306>
            }
            else
            {
                gRFAL.TxRx.status = ERR_IO;
 800ed90:	4b87      	ldr	r3, [pc, #540]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ed92:	2203      	movs	r2, #3
 800ed94:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ed96:	4b86      	ldr	r3, [pc, #536]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ed98:	225a      	movs	r2, #90	; 0x5a
 800ed9a:	751a      	strb	r2, [r3, #20]
                break;
 800ed9c:	e1bd      	b.n	800f11a <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_READ_DATA:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
                        
            tmp = rfalFIFOStatusGetNumBytes();
 800ed9e:	f000 f9e3 	bl	800f168 <rfalFIFOStatusGetNumBytes>
 800eda2:	4603      	mov	r3, r0
 800eda4:	73fb      	strb	r3, [r7, #15]
                        
            /*******************************************************************************/
            /* Check if CRC should not be placed in rxBuf                                  */
            if( ((gRFAL.TxRx.ctx.flags & (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP) == 0U) )
 800eda6:	4b82      	ldr	r3, [pc, #520]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edaa:	f003 0302 	and.w	r3, r3, #2
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d11f      	bne.n	800edf2 <rfalTransceiveRx+0x35a>
            {
                /* Check if CRC is being placed into the FIFO and if received frame was bigger than CRC */
                if( st25r3911IsCRCinFIFO() && ((gRFAL.fifo.bytesTotal + tmp) > 0U) )
 800edb2:	2240      	movs	r2, #64	; 0x40
 800edb4:	2140      	movs	r1, #64	; 0x40
 800edb6:	2009      	movs	r0, #9
 800edb8:	f7f2 fee2 	bl	8001b80 <st25r3911CheckReg>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d017      	beq.n	800edf2 <rfalTransceiveRx+0x35a>
 800edc2:	4b7b      	ldr	r3, [pc, #492]	; (800efb0 <rfalTransceiveRx+0x518>)
 800edc4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800edc6:	461a      	mov	r2, r3
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	4413      	add	r3, r2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d010      	beq.n	800edf2 <rfalTransceiveRx+0x35a>
                {
                    /* By default CRC will not be placed into the rxBuffer */
                    if( ( tmp > (uint8_t)RFAL_CRC_LEN) )  
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d903      	bls.n	800edde <rfalTransceiveRx+0x346>
                    {
                        tmp -= (uint8_t)RFAL_CRC_LEN;
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	3b02      	subs	r3, #2
 800edda:	73fb      	strb	r3, [r7, #15]
 800eddc:	e009      	b.n	800edf2 <rfalTransceiveRx+0x35a>
                    }
                    /* If the CRC was already placed into rxBuffer (due to WL interrupt where CRC was already in FIFO Read)
                     * cannot remove it from rxBuf. Can only remove it from rxBufLen not indicate the presence of CRC    */ 
                    else if(gRFAL.fifo.bytesTotal > (uint16_t)RFAL_CRC_LEN)                       
 800edde:	4b74      	ldr	r3, [pc, #464]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ede0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ede2:	2b02      	cmp	r3, #2
 800ede4:	d905      	bls.n	800edf2 <rfalTransceiveRx+0x35a>
                    {                        
                        gRFAL.fifo.bytesTotal -= (uint16_t)RFAL_CRC_LEN;
 800ede6:	4b72      	ldr	r3, [pc, #456]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ede8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800edea:	3b02      	subs	r3, #2
 800edec:	b29a      	uxth	r2, r3
 800edee:	4b70      	ldr	r3, [pc, #448]	; (800efb0 <rfalTransceiveRx+0x518>)
 800edf0:	875a      	strh	r2, [r3, #58]	; 0x3a
                        /* MISRA 15.7 - Empty else */
                    }
                }
            }
            
            gRFAL.fifo.bytesTotal += tmp;                    /* add to total bytes counter */
 800edf2:	4b6f      	ldr	r3, [pc, #444]	; (800efb0 <rfalTransceiveRx+0x518>)
 800edf4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	4413      	add	r3, r2
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	4b6c      	ldr	r3, [pc, #432]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee00:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Check if remaining bytes fit on the rxBuf available                         */
            if( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) )
 800ee02:	4b6b      	ldr	r3, [pc, #428]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee04:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800ee06:	4b6a      	ldr	r3, [pc, #424]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee0a:	3307      	adds	r3, #7
 800ee0c:	08db      	lsrs	r3, r3, #3
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d90f      	bls.n	800ee34 <rfalTransceiveRx+0x39c>
            {
                tmp = (uint8_t)( rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten);
 800ee14:	4b66      	ldr	r3, [pc, #408]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee18:	3307      	adds	r3, #7
 800ee1a:	08db      	lsrs	r3, r3, #3
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	4b64      	ldr	r3, [pc, #400]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee20:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	73fb      	strb	r3, [r7, #15]
                
                gRFAL.TxRx.status = ERR_NOMEM;
 800ee28:	4b61      	ldr	r3, [pc, #388]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800ee2e:	4b60      	ldr	r3, [pc, #384]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee30:	225a      	movs	r2, #90	; 0x5a
 800ee32:	751a      	strb	r2, [r3, #20]
            }

            /*******************************************************************************/
            /* Retrieve remaining bytes from FIFO to rxBuf, and assign total length rcvd   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], tmp);
 800ee34:	4b5e      	ldr	r3, [pc, #376]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee38:	4a5d      	ldr	r2, [pc, #372]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee3a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800ee3c:	4413      	add	r3, r2
 800ee3e:	7bfa      	ldrb	r2, [r7, #15]
 800ee40:	4611      	mov	r1, r2
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7f3 faf8 	bl	8002438 <st25r3911ReadFifo>
            if( (gRFAL.TxRx.ctx.rxRcvdLen != NULL) )
 800ee48:	4b59      	ldr	r3, [pc, #356]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d019      	beq.n	800ee84 <rfalTransceiveRx+0x3ec>
            {
                (*gRFAL.TxRx.ctx.rxRcvdLen) = (uint16_t)rfalConvBytesToBits( gRFAL.fifo.bytesTotal );
 800ee50:	4b57      	ldr	r3, [pc, #348]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee52:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800ee54:	4b56      	ldr	r3, [pc, #344]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	00d2      	lsls	r2, r2, #3
 800ee5a:	b292      	uxth	r2, r2
 800ee5c:	801a      	strh	r2, [r3, #0]
                if( rfalFIFOStatusIsIncompleteByte() )
 800ee5e:	f000 f98f 	bl	800f180 <rfalFIFOStatusIsIncompleteByte>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00d      	beq.n	800ee84 <rfalTransceiveRx+0x3ec>
                {
                    (*gRFAL.TxRx.ctx.rxRcvdLen) -= (RFAL_BITS_IN_BYTE - rfalFIFOGetNumIncompleteBits());
 800ee68:	f000 f9ae 	bl	800f1c8 <rfalFIFOGetNumIncompleteBits>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	f1c3 0208 	rsb	r2, r3, #8
 800ee72:	4b4f      	ldr	r3, [pc, #316]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee76:	8819      	ldrh	r1, [r3, #0]
 800ee78:	b292      	uxth	r2, r2
 800ee7a:	4b4d      	ldr	r3, [pc, #308]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	1a8a      	subs	r2, r1, r2
 800ee80:	b292      	uxth	r2, r2
 800ee82:	801a      	strh	r2, [r3, #0]
            }
            
        #if RFAL_FEATURE_NFCV
            /*******************************************************************************/
            /* Decode sub bit stream into payload bits for NFCV, if no error found so far  */
            if( ((RFAL_MODE_POLL_NFCV == gRFAL.mode) || (RFAL_MODE_POLL_PICOPASS == gRFAL.mode)) && (gRFAL.TxRx.status == ERR_BUSY) )
 800ee84:	4b4a      	ldr	r3, [pc, #296]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee86:	785b      	ldrb	r3, [r3, #1]
 800ee88:	2b07      	cmp	r3, #7
 800ee8a:	d003      	beq.n	800ee94 <rfalTransceiveRx+0x3fc>
 800ee8c:	4b48      	ldr	r3, [pc, #288]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee8e:	785b      	ldrb	r3, [r3, #1]
 800ee90:	2b08      	cmp	r3, #8
 800ee92:	d165      	bne.n	800ef60 <rfalTransceiveRx+0x4c8>
 800ee94:	4b46      	ldr	r3, [pc, #280]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ee96:	8adb      	ldrh	r3, [r3, #22]
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	d161      	bne.n	800ef60 <rfalTransceiveRx+0x4c8>
            {
                ReturnCode ret;
                uint16_t offset = 0;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	80fb      	strh	r3, [r7, #6]

                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800eea0:	4b43      	ldr	r3, [pc, #268]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eea2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800eea4:	4b42      	ldr	r3, [pc, #264]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eea6:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 800eea8:	4b41      	ldr	r3, [pc, #260]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eeaa:	f8d3 53c0 	ldr.w	r5, [r3, #960]	; 0x3c0
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800eeae:	4b40      	ldr	r3, [pc, #256]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eeb0:	f8b3 33c4 	ldrh.w	r3, [r3, #964]	; 0x3c4
 800eeb4:	3307      	adds	r3, #7
 800eeb6:	08db      	lsrs	r3, r3, #3
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800eeb8:	b29e      	uxth	r6, r3
 800eeba:	4b3d      	ldr	r3, [pc, #244]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eebc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eec0:	4a3b      	ldr	r2, [pc, #236]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eec2:	f8b2 23d4 	ldrh.w	r2, [r2, #980]	; 0x3d4
                        gRFAL.nfcvData.origCtx.rxBuf, rfalConvBitsToBytes(gRFAL.nfcvData.origCtx.rxBufLen), &offset, gRFAL.nfcvData.origCtx.rxRcvdLen, gRFAL.nfcvData.ignoreBits, (RFAL_MODE_POLL_PICOPASS == gRFAL.mode) );
 800eec6:	493a      	ldr	r1, [pc, #232]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eec8:	7849      	ldrb	r1, [r1, #1]
                ret = iso15693VICCDecode(gRFAL.TxRx.ctx.rxBuf, gRFAL.fifo.bytesTotal,
 800eeca:	2908      	cmp	r1, #8
 800eecc:	bf0c      	ite	eq
 800eece:	2101      	moveq	r1, #1
 800eed0:	2100      	movne	r1, #0
 800eed2:	b2c9      	uxtb	r1, r1
 800eed4:	9103      	str	r1, [sp, #12]
 800eed6:	9202      	str	r2, [sp, #8]
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	1dbb      	adds	r3, r7, #6
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	4633      	mov	r3, r6
 800eee0:	462a      	mov	r2, r5
 800eee2:	4621      	mov	r1, r4
 800eee4:	f7f8 fb60 	bl	80075a8 <iso15693VICCDecode>
 800eee8:	4603      	mov	r3, r0
 800eeea:	81bb      	strh	r3, [r7, #12]

                if( ((ERR_NONE == ret) || (ERR_CRC == ret))
 800eeec:	89bb      	ldrh	r3, [r7, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <rfalTransceiveRx+0x460>
 800eef2:	89bb      	ldrh	r3, [r7, #12]
 800eef4:	2b15      	cmp	r3, #21
 800eef6:	d11f      	bne.n	800ef38 <rfalTransceiveRx+0x4a0>
                     && (((uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP & gRFAL.nfcvData.origCtx.flags) == 0U)
 800eef8:	4b2d      	ldr	r3, [pc, #180]	; (800efb0 <rfalTransceiveRx+0x518>)
 800eefa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800eefe:	f003 0302 	and.w	r3, r3, #2
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d118      	bne.n	800ef38 <rfalTransceiveRx+0x4a0>
                     &&  ((*gRFAL.nfcvData.origCtx.rxRcvdLen % RFAL_BITS_IN_BYTE) == 0U)
 800ef06:	4b2a      	ldr	r3, [pc, #168]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef08:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	f003 0307 	and.w	r3, r3, #7
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10f      	bne.n	800ef38 <rfalTransceiveRx+0x4a0>
                     &&  (*gRFAL.nfcvData.origCtx.rxRcvdLen >= rfalConvBytesToBits(RFAL_CRC_LEN) )
 800ef18:	4b25      	ldr	r3, [pc, #148]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef1e:	881b      	ldrh	r3, [r3, #0]
 800ef20:	2b0f      	cmp	r3, #15
 800ef22:	d909      	bls.n	800ef38 <rfalTransceiveRx+0x4a0>
                   )
                {
                   *gRFAL.nfcvData.origCtx.rxRcvdLen -= (uint16_t)rfalConvBytesToBits(RFAL_CRC_LEN); /* Remove CRC */
 800ef24:	4b22      	ldr	r3, [pc, #136]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef2a:	881a      	ldrh	r2, [r3, #0]
 800ef2c:	4b20      	ldr	r3, [pc, #128]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef32:	3a10      	subs	r2, #16
 800ef34:	b292      	uxth	r2, r2
 800ef36:	801a      	strh	r2, [r3, #0]
                }
                
                /* Restore original ctx */
                gRFAL.TxRx.ctx    = gRFAL.nfcvData.origCtx;
 800ef38:	4a1d      	ldr	r2, [pc, #116]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef3a:	4b1d      	ldr	r3, [pc, #116]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef3c:	f102 041c 	add.w	r4, r2, #28
 800ef40:	f503 756e 	add.w	r5, r3, #952	; 0x3b8
 800ef44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ef4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                gRFAL.TxRx.status = ((ret != ERR_NONE) ? ret : ERR_BUSY);
 800ef50:	89bb      	ldrh	r3, [r7, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d001      	beq.n	800ef5a <rfalTransceiveRx+0x4c2>
 800ef56:	89bb      	ldrh	r3, [r7, #12]
 800ef58:	e000      	b.n	800ef5c <rfalTransceiveRx+0x4c4>
 800ef5a:	2302      	movs	r3, #2
 800ef5c:	4a14      	ldr	r2, [pc, #80]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef5e:	82d3      	strh	r3, [r2, #22]
            }
        #endif /* RFAL_FEATURE_NFCV */
            
            /*******************************************************************************/
            /* If an error as been marked/detected don't fall into to RX_DONE  */
            if( gRFAL.TxRx.status != ERR_BUSY )
 800ef60:	4b13      	ldr	r3, [pc, #76]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef62:	8adb      	ldrh	r3, [r3, #22]
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d003      	beq.n	800ef70 <rfalTransceiveRx+0x4d8>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_FAIL;
 800ef68:	4b11      	ldr	r3, [pc, #68]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef6a:	225a      	movs	r2, #90	; 0x5a
 800ef6c:	751a      	strb	r2, [r3, #20]
                break;
 800ef6e:	e0d4      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            
            if( rfalIsModeActiveComm( gRFAL.mode ) )
 800ef70:	4b0f      	ldr	r3, [pc, #60]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	2b09      	cmp	r3, #9
 800ef76:	d003      	beq.n	800ef80 <rfalTransceiveRx+0x4e8>
 800ef78:	4b0d      	ldr	r3, [pc, #52]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef7a:	785b      	ldrb	r3, [r3, #1]
 800ef7c:	2b0d      	cmp	r3, #13
 800ef7e:	d103      	bne.n	800ef88 <rfalTransceiveRx+0x4f0>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_EOF;
 800ef80:	4b0b      	ldr	r3, [pc, #44]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef82:	2258      	movs	r2, #88	; 0x58
 800ef84:	751a      	strb	r2, [r3, #20]
                break;
 800ef86:	e0c8      	b.n	800f11a <rfalTransceiveRx+0x682>
            }
            
            gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800ef88:	4b09      	ldr	r3, [pc, #36]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef8a:	2259      	movs	r2, #89	; 0x59
 800ef8c:	751a      	strb	r2, [r3, #20]
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_DONE:   /*  PRQA S 2003 # MISRA 16.3 - Intentional fall through */
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800ef8e:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <rfalTransceiveRx+0x518>)
 800ef90:	799b      	ldrb	r3, [r3, #6]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <rfalTransceiveRx+0x506>
 800ef96:	2100      	movs	r1, #0
 800ef98:	2001      	movs	r0, #1
 800ef9a:	f7f3 f8cd 	bl	8002138 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800ef9e:	f7ff fa83 	bl	800e4a8 <rfalCleanupTransceive>

            
            gRFAL.TxRx.status = ERR_NONE;
 800efa2:	4b03      	ldr	r3, [pc, #12]	; (800efb0 <rfalTransceiveRx+0x518>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_IDLE;
 800efa8:	4b01      	ldr	r3, [pc, #4]	; (800efb0 <rfalTransceiveRx+0x518>)
 800efaa:	2200      	movs	r2, #0
 800efac:	751a      	strb	r2, [r3, #20]
            break;
 800efae:	e0b4      	b.n	800f11a <rfalTransceiveRx+0x682>
 800efb0:	200009a8 	.word	0x200009a8
            /*******************************************************************************/
            /* REMARK: Silicon workaround ST25R3911B Errata #1.1                           */
            /* ST25R3911 may indicate RXS without RXE afterwards, this happens rarely on   */
            /* corrupted frames.                                                           */
            /* Re-Start SW timer to handle an eventual missing RXE                         */
            rfalTimerStart( gRFAL.tmr.RXE, RFAL_NORXE_TOUT );
 800efb4:	200a      	movs	r0, #10
 800efb6:	f7f3 fce5 	bl	8002984 <timerCalculateTimer>
 800efba:	4602      	mov	r2, r0
 800efbc:	4b59      	ldr	r3, [pc, #356]	; (800f124 <rfalTransceiveRx+0x68c>)
 800efbe:	649a      	str	r2, [r3, #72]	; 0x48
            /*******************************************************************************/        
                    
        
            tmp = rfalFIFOStatusGetNumBytes();
 800efc0:	f000 f8d2 	bl	800f168 <rfalFIFOStatusGetNumBytes>
 800efc4:	4603      	mov	r3, r0
 800efc6:	73fb      	strb	r3, [r7, #15]
            gRFAL.fifo.bytesTotal += tmp;
 800efc8:	4b56      	ldr	r3, [pc, #344]	; (800f124 <rfalTransceiveRx+0x68c>)
 800efca:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800efcc:	7bfb      	ldrb	r3, [r7, #15]
 800efce:	b29b      	uxth	r3, r3
 800efd0:	4413      	add	r3, r2
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	4b53      	ldr	r3, [pc, #332]	; (800f124 <rfalTransceiveRx+0x68c>)
 800efd6:	875a      	strh	r2, [r3, #58]	; 0x3a
            
            /*******************************************************************************/
            /* Calculate the amount of bytes that still fits in rxBuf                      */
            aux = (uint8_t)(( gRFAL.fifo.bytesTotal > rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) ) ? (rfalConvBitsToBytes(gRFAL.TxRx.ctx.rxBufLen) - gRFAL.fifo.bytesWritten) : tmp);
 800efd8:	4b52      	ldr	r3, [pc, #328]	; (800f124 <rfalTransceiveRx+0x68c>)
 800efda:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800efdc:	4b51      	ldr	r3, [pc, #324]	; (800f124 <rfalTransceiveRx+0x68c>)
 800efde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efe0:	3307      	adds	r3, #7
 800efe2:	08db      	lsrs	r3, r3, #3
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d90a      	bls.n	800f000 <rfalTransceiveRx+0x568>
 800efea:	4b4e      	ldr	r3, [pc, #312]	; (800f124 <rfalTransceiveRx+0x68c>)
 800efec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efee:	3307      	adds	r3, #7
 800eff0:	08db      	lsrs	r3, r3, #3
 800eff2:	b2da      	uxtb	r2, r3
 800eff4:	4b4b      	ldr	r3, [pc, #300]	; (800f124 <rfalTransceiveRx+0x68c>)
 800eff6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	b2db      	uxtb	r3, r3
 800effe:	e000      	b.n	800f002 <rfalTransceiveRx+0x56a>
 800f000:	7bfb      	ldrb	r3, [r7, #15]
 800f002:	73bb      	strb	r3, [r7, #14]
            
            /*******************************************************************************/
            /* Retrieve incoming bytes from FIFO to rxBuf, and store already read amount   */
            st25r3911ReadFifo( &gRFAL.TxRx.ctx.rxBuf[gRFAL.fifo.bytesWritten], aux);
 800f004:	4b47      	ldr	r3, [pc, #284]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	4a46      	ldr	r2, [pc, #280]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f00a:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800f00c:	4413      	add	r3, r2
 800f00e:	7bba      	ldrb	r2, [r7, #14]
 800f010:	4611      	mov	r1, r2
 800f012:	4618      	mov	r0, r3
 800f014:	f7f3 fa10 	bl	8002438 <st25r3911ReadFifo>
            gRFAL.fifo.bytesWritten += aux;
 800f018:	4b42      	ldr	r3, [pc, #264]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f01a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	4413      	add	r3, r2
 800f022:	b29a      	uxth	r2, r3
 800f024:	4b3f      	ldr	r3, [pc, #252]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f026:	879a      	strh	r2, [r3, #60]	; 0x3c
            
            /*******************************************************************************/
            /* If the bytes already read were not the full FIFO WL, dump the remaining     *
             * FIFO so that ST25R391x can continue with reception                          */
            if( aux < tmp )
 800f028:	7bba      	ldrb	r2, [r7, #14]
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d207      	bcs.n	800f040 <rfalTransceiveRx+0x5a8>
            {
                st25r3911ReadFifo( NULL, (tmp - aux) );
 800f030:	7bfa      	ldrb	r2, [r7, #15]
 800f032:	7bbb      	ldrb	r3, [r7, #14]
 800f034:	1ad3      	subs	r3, r2, r3
 800f036:	b2db      	uxtb	r3, r3
 800f038:	4619      	mov	r1, r3
 800f03a:	2000      	movs	r0, #0
 800f03c:	f7f3 f9fc 	bl	8002438 <st25r3911ReadFifo>
            }
            
            rfalFIFOStatusClear();
 800f040:	f000 f884 	bl	800f14c <rfalFIFOStatusClear>
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_WAIT_RXE;
 800f044:	4b37      	ldr	r3, [pc, #220]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f046:	2254      	movs	r2, #84	; 0x54
 800f048:	751a      	strb	r2, [r3, #20]
            break;
 800f04a:	e066      	b.n	800f11a <rfalTransceiveRx+0x682>
            
        /*******************************************************************************/
        case RFAL_TXRX_STATE_RX_FAIL:
            
            /*Check if Observation Mode was enabled and disable it on ST25R391x */
            rfalCheckDisableObsMode();
 800f04c:	4b35      	ldr	r3, [pc, #212]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f04e:	799b      	ldrb	r3, [r3, #6]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d003      	beq.n	800f05c <rfalTransceiveRx+0x5c4>
 800f054:	2100      	movs	r1, #0
 800f056:	2001      	movs	r0, #1
 800f058:	f7f3 f86e 	bl	8002138 <st25r3911WriteTestRegister>
            
            /* Clean up Transceive */
            rfalCleanupTransceive();
 800f05c:	f7ff fa24 	bl	800e4a8 <rfalCleanupTransceive>
            
            /* Error should be assigned by previous state */
            if( gRFAL.TxRx.status == ERR_BUSY )
 800f060:	4b30      	ldr	r3, [pc, #192]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f062:	8adb      	ldrh	r3, [r3, #22]
 800f064:	2b02      	cmp	r3, #2
 800f066:	d102      	bne.n	800f06e <rfalTransceiveRx+0x5d6>
            {                
                gRFAL.TxRx.status = ERR_SYSTEM;
 800f068:	4b2e      	ldr	r3, [pc, #184]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f06a:	2208      	movs	r2, #8
 800f06c:	82da      	strh	r2, [r3, #22]
            }
             
            /*rfalLogD( "RFAL: curSt: %d  Error: %d \r\n", gRFAL.TxRx.state, gRFAL.TxRx.status );*/
            gRFAL.TxRx.state = RFAL_TXRX_STATE_IDLE;
 800f06e:	4b2d      	ldr	r3, [pc, #180]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f070:	2200      	movs	r2, #0
 800f072:	751a      	strb	r2, [r3, #20]
            break;
 800f074:	e051      	b.n	800f11a <rfalTransceiveRx+0x682>
        
        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EON:
            
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_EON | ST25R3911_IRQ_MASK_NRE) );
 800f076:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800f07a:	f7f3 fc01 	bl	8002880 <st25r3911GetInterrupt>
 800f07e:	4603      	mov	r3, r0
 800f080:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d043      	beq.n	800f110 <rfalTransceiveRx+0x678>
            {
                break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_EON) != 0U )
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d002      	beq.n	800f098 <rfalTransceiveRx+0x600>
            {
                gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_WAIT_RXS;
 800f092:	4b24      	ldr	r3, [pc, #144]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f094:	2253      	movs	r2, #83	; 0x53
 800f096:	751a      	strb	r2, [r3, #20]
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_NRE) != 0U )
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d038      	beq.n	800f114 <rfalTransceiveRx+0x67c>
            {
                /* ST25R3911 uses the NRT to measure other device's Field On max time: Tadt + (n x Trfw)  */
                gRFAL.TxRx.status = ERR_LINK_LOSS;
 800f0a2:	4b20      	ldr	r3, [pc, #128]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0a4:	2225      	movs	r2, #37	; 0x25
 800f0a6:	82da      	strh	r2, [r3, #22]
                gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f0a8:	4b1e      	ldr	r3, [pc, #120]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0aa:	225a      	movs	r2, #90	; 0x5a
 800f0ac:	751a      	strb	r2, [r3, #20]
            }
            break;
 800f0ae:	e031      	b.n	800f114 <rfalTransceiveRx+0x67c>

        
        /*******************************************************************************/    
        case RFAL_TXRX_STATE_RX_WAIT_EOF:
           
            irqs = st25r3911GetInterrupt( (ST25R3911_IRQ_MASK_CAT | ST25R3911_IRQ_MASK_CAC) );
 800f0b0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800f0b4:	f7f3 fbe4 	bl	8002880 <st25r3911GetInterrupt>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	60bb      	str	r3, [r7, #8]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d02a      	beq.n	800f118 <rfalTransceiveRx+0x680>
            {
               break;  /* No interrupt to process */
            }
            
            if( (irqs & ST25R3911_IRQ_MASK_CAT) != 0U )
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d003      	beq.n	800f0d4 <rfalTransceiveRx+0x63c>
            {
               gRFAL.TxRx.state = RFAL_TXRX_STATE_RX_DONE;
 800f0cc:	4b15      	ldr	r3, [pc, #84]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0ce:	2259      	movs	r2, #89	; 0x59
 800f0d0:	751a      	strb	r2, [r3, #20]
            else
            {
               gRFAL.TxRx.status = ERR_IO;
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
            }
            break;
 800f0d2:	e022      	b.n	800f11a <rfalTransceiveRx+0x682>
            else if( (irqs & ST25R3911_IRQ_MASK_CAC) != 0U )
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d006      	beq.n	800f0ec <rfalTransceiveRx+0x654>
               gRFAL.TxRx.status = ERR_RF_COLLISION;
 800f0de:	4b11      	ldr	r3, [pc, #68]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0e0:	221d      	movs	r2, #29
 800f0e2:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f0e4:	4b0f      	ldr	r3, [pc, #60]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0e6:	225a      	movs	r2, #90	; 0x5a
 800f0e8:	751a      	strb	r2, [r3, #20]
            break;
 800f0ea:	e016      	b.n	800f11a <rfalTransceiveRx+0x682>
               gRFAL.TxRx.status = ERR_IO;
 800f0ec:	4b0d      	ldr	r3, [pc, #52]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0ee:	2203      	movs	r2, #3
 800f0f0:	82da      	strh	r2, [r3, #22]
               gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f0f2:	4b0c      	ldr	r3, [pc, #48]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0f4:	225a      	movs	r2, #90	; 0x5a
 800f0f6:	751a      	strb	r2, [r3, #20]
            break;
 800f0f8:	e00f      	b.n	800f11a <rfalTransceiveRx+0x682>
            
            
        /*******************************************************************************/
        default:
            gRFAL.TxRx.status = ERR_SYSTEM;
 800f0fa:	4b0a      	ldr	r3, [pc, #40]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f0fc:	2208      	movs	r2, #8
 800f0fe:	82da      	strh	r2, [r3, #22]
            gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_FAIL;
 800f100:	4b08      	ldr	r3, [pc, #32]	; (800f124 <rfalTransceiveRx+0x68c>)
 800f102:	225a      	movs	r2, #90	; 0x5a
 800f104:	751a      	strb	r2, [r3, #20]
            break;           
 800f106:	e008      	b.n	800f11a <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 800f108:	bf00      	nop
 800f10a:	e006      	b.n	800f11a <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 800f10c:	bf00      	nop
 800f10e:	e004      	b.n	800f11a <rfalTransceiveRx+0x682>
                break;  /* No interrupt to process */
 800f110:	bf00      	nop
 800f112:	e002      	b.n	800f11a <rfalTransceiveRx+0x682>
            break;
 800f114:	bf00      	nop
 800f116:	e000      	b.n	800f11a <rfalTransceiveRx+0x682>
               break;  /* No interrupt to process */
 800f118:	bf00      	nop
    }    
}
 800f11a:	bf00      	nop
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f122:	bf00      	nop
 800f124:	200009a8 	.word	0x200009a8

0800f128 <rfalFIFOStatusUpdate>:

/*******************************************************************************/
static void rfalFIFOStatusUpdate( void )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	af00      	add	r7, sp, #0
    if(gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] == RFAL_FIFO_STATUS_INVALID)
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <rfalFIFOStatusUpdate+0x1c>)
 800f12e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f132:	2bff      	cmp	r3, #255	; 0xff
 800f134:	d104      	bne.n	800f140 <rfalFIFOStatusUpdate+0x18>
    {
        st25r3911ReadMultipleRegisters( ST25R3911_REG_FIFO_RX_STATUS1, gRFAL.fifo.status, ST25R3911_FIFO_STATUS_LEN );
 800f136:	2202      	movs	r2, #2
 800f138:	4903      	ldr	r1, [pc, #12]	; (800f148 <rfalFIFOStatusUpdate+0x20>)
 800f13a:	201a      	movs	r0, #26
 800f13c:	f7f2 ff62 	bl	8002004 <st25r3911ReadMultipleRegisters>
    }
}
 800f140:	bf00      	nop
 800f142:	bd80      	pop	{r7, pc}
 800f144:	200009a8 	.word	0x200009a8
 800f148:	200009e6 	.word	0x200009e6

0800f14c <rfalFIFOStatusClear>:


/*******************************************************************************/
static void rfalFIFOStatusClear( void )
{
 800f14c:	b480      	push	{r7}
 800f14e:	af00      	add	r7, sp, #0
    gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] = RFAL_FIFO_STATUS_INVALID;
 800f150:	4b04      	ldr	r3, [pc, #16]	; (800f164 <rfalFIFOStatusClear+0x18>)
 800f152:	22ff      	movs	r2, #255	; 0xff
 800f154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 800f158:	bf00      	nop
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	200009a8 	.word	0x200009a8

0800f168 <rfalFIFOStatusGetNumBytes>:


/*******************************************************************************/
static uint8_t rfalFIFOStatusGetNumBytes( void )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f16c:	f7ff ffdc 	bl	800f128 <rfalFIFOStatusUpdate>
    
    return gRFAL.fifo.status[RFAL_FIFO_STATUS_REG1]; 
 800f170:	4b02      	ldr	r3, [pc, #8]	; (800f17c <rfalFIFOStatusGetNumBytes+0x14>)
 800f172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   
}
 800f176:	4618      	mov	r0, r3
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	200009a8 	.word	0x200009a8

0800f180 <rfalFIFOStatusIsIncompleteByte>:


/*******************************************************************************/
static bool rfalFIFOStatusIsIncompleteByte( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f184:	f7ff ffd0 	bl	800f128 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & (ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb | ST25R3911_REG_FIFO_RX_STATUS2_fifo_ncp)) != 0U);
 800f188:	4b05      	ldr	r3, [pc, #20]	; (800f1a0 <rfalFIFOStatusIsIncompleteByte+0x20>)
 800f18a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f18e:	f003 031e 	and.w	r3, r3, #30
 800f192:	2b00      	cmp	r3, #0
 800f194:	bf14      	ite	ne
 800f196:	2301      	movne	r3, #1
 800f198:	2300      	moveq	r3, #0
 800f19a:	b2db      	uxtb	r3, r3
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	200009a8 	.word	0x200009a8

0800f1a4 <rfalFIFOStatusIsMissingPar>:


/*******************************************************************************/
static bool rfalFIFOStatusIsMissingPar( void )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f1a8:	f7ff ffbe 	bl	800f128 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_np_lb) != 0U);
 800f1ac:	4b05      	ldr	r3, [pc, #20]	; (800f1c4 <rfalFIFOStatusIsMissingPar+0x20>)
 800f1ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f1b2:	f003 0301 	and.w	r3, r3, #1
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	bf14      	ite	ne
 800f1ba:	2301      	movne	r3, #1
 800f1bc:	2300      	moveq	r3, #0
 800f1be:	b2db      	uxtb	r3, r3
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	200009a8 	.word	0x200009a8

0800f1c8 <rfalFIFOGetNumIncompleteBits>:


/*******************************************************************************/
static uint8_t rfalFIFOGetNumIncompleteBits( void )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	af00      	add	r7, sp, #0
    rfalFIFOStatusUpdate();
 800f1cc:	f7ff ffac 	bl	800f128 <rfalFIFOStatusUpdate>
    return ((gRFAL.fifo.status[RFAL_FIFO_STATUS_REG2] & ST25R3911_REG_FIFO_RX_STATUS2_mask_fifo_lb) >> ST25R3911_REG_FIFO_RX_STATUS2_shift_fifo_lb);
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <rfalFIFOGetNumIncompleteBits+0x1c>)
 800f1d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f1d6:	085b      	lsrs	r3, r3, #1
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	f003 0307 	and.w	r3, r3, #7
 800f1de:	b2db      	uxtb	r3, r3
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	200009a8 	.word	0x200009a8

0800f1e8 <rfalISO14443ATransceiveShortFrame>:

#if RFAL_FEATURE_NFCA

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveShortFrame( rfal14443AShortFrameCmd txCmd, uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* rxRcvdLen, uint32_t fwt )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60b9      	str	r1, [r7, #8]
 800f1f0:	607b      	str	r3, [r7, #4]
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	73fb      	strb	r3, [r7, #15]
 800f1f6:	4613      	mov	r3, r2
 800f1f8:	73bb      	strb	r3, [r7, #14]
    ReturnCode ret;
    uint8_t    directCmd;

    /* Check if RFAL is properly initialized */
    if( !st25r3911IsTxEnabled() || (gRFAL.state < RFAL_STATE_MODE_SET) || (( gRFAL.mode != RFAL_MODE_POLL_NFCA ) && ( gRFAL.mode != RFAL_MODE_POLL_NFCA_T1T )) )
 800f1fa:	2208      	movs	r2, #8
 800f1fc:	2108      	movs	r1, #8
 800f1fe:	2002      	movs	r0, #2
 800f200:	f7f2 fcbe 	bl	8001b80 <st25r3911CheckReg>
 800f204:	4603      	mov	r3, r0
 800f206:	f083 0301 	eor.w	r3, r3, #1
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10b      	bne.n	800f228 <rfalISO14443ATransceiveShortFrame+0x40>
 800f210:	4b70      	ldr	r3, [pc, #448]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d907      	bls.n	800f228 <rfalISO14443ATransceiveShortFrame+0x40>
 800f218:	4b6e      	ldr	r3, [pc, #440]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f21a:	785b      	ldrb	r3, [r3, #1]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d005      	beq.n	800f22c <rfalISO14443ATransceiveShortFrame+0x44>
 800f220:	4b6c      	ldr	r3, [pc, #432]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f222:	785b      	ldrb	r3, [r3, #1]
 800f224:	2b02      	cmp	r3, #2
 800f226:	d001      	beq.n	800f22c <rfalISO14443ATransceiveShortFrame+0x44>
    {
        return ERR_WRONG_STATE;
 800f228:	2321      	movs	r3, #33	; 0x21
 800f22a:	e0cf      	b.n	800f3cc <rfalISO14443ATransceiveShortFrame+0x1e4>
    }    
    
    /* Check for valid parameters */
    if( (rxBuf == NULL) || (rxRcvdLen == NULL) || (fwt == RFAL_FWT_NONE) )
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d006      	beq.n	800f240 <rfalISO14443ATransceiveShortFrame+0x58>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d003      	beq.n	800f240 <rfalISO14443ATransceiveShortFrame+0x58>
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23e:	d101      	bne.n	800f244 <rfalISO14443ATransceiveShortFrame+0x5c>
    {
        return ERR_PARAM;
 800f240:	2307      	movs	r3, #7
 800f242:	e0c3      	b.n	800f3cc <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    /*******************************************************************************/
    /* Select the Direct Command to be performed                                   */
    switch (txCmd)
 800f244:	7bfb      	ldrb	r3, [r7, #15]
 800f246:	2b26      	cmp	r3, #38	; 0x26
 800f248:	d004      	beq.n	800f254 <rfalISO14443ATransceiveShortFrame+0x6c>
 800f24a:	2b52      	cmp	r3, #82	; 0x52
 800f24c:	d105      	bne.n	800f25a <rfalISO14443ATransceiveShortFrame+0x72>
    {
        case RFAL_14443A_SHORTFRAME_CMD_WUPA:
            directCmd = ST25R3911_CMD_TRANSMIT_WUPA;
 800f24e:	23c7      	movs	r3, #199	; 0xc7
 800f250:	757b      	strb	r3, [r7, #21]
            break;
 800f252:	e004      	b.n	800f25e <rfalISO14443ATransceiveShortFrame+0x76>
            
        case RFAL_14443A_SHORTFRAME_CMD_REQA:
            directCmd = ST25R3911_CMD_TRANSMIT_REQA;
 800f254:	23c6      	movs	r3, #198	; 0xc6
 800f256:	757b      	strb	r3, [r7, #21]
            break;
 800f258:	e001      	b.n	800f25e <rfalISO14443ATransceiveShortFrame+0x76>
            
        default:
            return ERR_PARAM;
 800f25a:	2307      	movs	r3, #7
 800f25c:	e0b6      	b.n	800f3cc <rfalISO14443ATransceiveShortFrame+0x1e4>
    }
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl);
 800f25e:	2101      	movs	r1, #1
 800f260:	2005      	movs	r0, #5
 800f262:	f7f3 f81a 	bl	800229a <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving since ATQA has no CRC included */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800f266:	2180      	movs	r1, #128	; 0x80
 800f268:	2009      	movs	r0, #9
 800f26a:	f7f3 f816 	bl	800229a <st25r3911SetRegisterBits>
    
    
    /*******************************************************************************/
    /* Wait for GT and FDT */
    while( !rfalIsGTExpired() )      { /* MISRA 15.6: mandatory brackets */ };
 800f26e:	bf00      	nop
 800f270:	f7fe fdd0 	bl	800de14 <rfalIsGTExpired>
 800f274:	4603      	mov	r3, r0
 800f276:	f083 0301 	eor.w	r3, r3, #1
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1f7      	bne.n	800f270 <rfalISO14443ATransceiveShortFrame+0x88>
    while( st25r3911IsGPTRunning() ) { /* MISRA 15.6: mandatory brackets */ };
 800f280:	bf00      	nop
 800f282:	2204      	movs	r2, #4
 800f284:	2104      	movs	r1, #4
 800f286:	202b      	movs	r0, #43	; 0x2b
 800f288:	f7f2 fc7a 	bl	8001b80 <st25r3911CheckReg>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1f7      	bne.n	800f282 <rfalISO14443ATransceiveShortFrame+0x9a>
    
    gRFAL.tmr.GT = RFAL_TIMING_NONE;
 800f292:	4b50      	ldr	r3, [pc, #320]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f294:	2200      	movs	r2, #0
 800f296:	641a      	str	r2, [r3, #64]	; 0x40

    
    /*******************************************************************************/
    /* Prepare for Transceive, Receive only (bypass Tx states) */
    gRFAL.TxRx.ctx.flags     = ((uint32_t) RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP );
 800f298:	4b4e      	ldr	r3, [pc, #312]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f29a:	2203      	movs	r2, #3
 800f29c:	631a      	str	r2, [r3, #48]	; 0x30
    gRFAL.TxRx.ctx.rxBuf     = rxBuf;
 800f29e:	4a4d      	ldr	r2, [pc, #308]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	6253      	str	r3, [r2, #36]	; 0x24
    gRFAL.TxRx.ctx.rxBufLen  = rxBufLen;
 800f2a4:	7bbb      	ldrb	r3, [r7, #14]
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	4b4a      	ldr	r3, [pc, #296]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2aa:	851a      	strh	r2, [r3, #40]	; 0x28
    gRFAL.TxRx.ctx.rxRcvdLen = rxRcvdLen;
 800f2ac:	4a49      	ldr	r2, [pc, #292]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /*******************************************************************************/
    /* Load NRT with FWT */
    st25r3911SetNoResponseTime_64fcs( rfalConv1fcTo64fc( MIN( (fwt + RFAL_FWT_ADJUSTMENT + RFAL_FWT_A_ADJUSTMENT), RFAL_ST25R3911_NRT_MAX_1FC ) ) );
 800f2b2:	6a3b      	ldr	r3, [r7, #32]
 800f2b4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800f2b8:	4a47      	ldr	r2, [pc, #284]	; (800f3d8 <rfalISO14443ATransceiveShortFrame+0x1f0>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	bf28      	it	cs
 800f2be:	4613      	movcs	r3, r2
 800f2c0:	099b      	lsrs	r3, r3, #6
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7f2 fc9e 	bl	8001c04 <st25r3911SetNoResponseTime_64fcs>
    
    if( gRFAL.timings.FDTListen != RFAL_TIMING_NONE )
 800f2c8:	4b42      	ldr	r3, [pc, #264]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d010      	beq.n	800f2f2 <rfalISO14443ATransceiveShortFrame+0x10a>
    {
        /* Set Minimum FDT(Listen) in which PICC is not allowed to send a response */
        st25r3911WriteRegister( ST25R3911_REG_MASK_RX_TIMER, (uint8_t)rfalConv1fcTo64fc( ((RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT) > gRFAL.timings.FDTListen) ? RFAL_ST25R3911_MRT_MIN_1FC : (gRFAL.timings.FDTListen - (RFAL_FDT_LISTEN_MRT_ADJUSTMENT + RFAL_FDT_LISTEN_A_ADJUSTMENT)) ) );
 800f2d0:	4b40      	ldr	r3, [pc, #256]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800f2d8:	d306      	bcc.n	800f2e8 <rfalISO14443ATransceiveShortFrame+0x100>
 800f2da:	4b3e      	ldr	r3, [pc, #248]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800f2e2:	099b      	lsrs	r3, r3, #6
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	e000      	b.n	800f2ea <rfalISO14443ATransceiveShortFrame+0x102>
 800f2e8:	2304      	movs	r3, #4
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	200e      	movs	r0, #14
 800f2ee:	f7f2 ff67 	bl	80021c0 <st25r3911WriteRegister>
    }
    
    /* In Passive communications General Purpose Timer is used to measure FDT Poll */
    if( gRFAL.timings.FDTPoll != RFAL_TIMING_NONE )
 800f2f2:	4b38      	ldr	r3, [pc, #224]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d014      	beq.n	800f324 <rfalISO14443ATransceiveShortFrame+0x13c>
    {
        /* Configure GPT to start at RX end */
        st25r3911StartGPTimer_8fcs( (uint16_t)rfalConv1fcTo8fc( MIN( gRFAL.timings.FDTPoll, (gRFAL.timings.FDTPoll - RFAL_FDT_POLL_ADJUSTMENT) ) ), ST25R3911_REG_GPT_CONTROL_gptc_erx );
 800f2fa:	4b36      	ldr	r3, [pc, #216]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f2fc:	691b      	ldr	r3, [r3, #16]
 800f2fe:	f240 423b 	movw	r2, #1083	; 0x43b
 800f302:	4293      	cmp	r3, r2
 800f304:	d804      	bhi.n	800f310 <rfalISO14443ATransceiveShortFrame+0x128>
 800f306:	4b33      	ldr	r3, [pc, #204]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	08db      	lsrs	r3, r3, #3
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	e005      	b.n	800f31c <rfalISO14443ATransceiveShortFrame+0x134>
 800f310:	4b30      	ldr	r3, [pc, #192]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 800f318:	08db      	lsrs	r3, r3, #3
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	2120      	movs	r1, #32
 800f31e:	4618      	mov	r0, r3
 800f320:	f7f2 fbfa 	bl	8001b18 <st25r3911StartGPTimer_8fcs>
    }
    
    /*******************************************************************************/
    rfalPrepareTransceive();
 800f324:	f7ff f8d6 	bl	800e4d4 <rfalPrepareTransceive>
    
    /* Also enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800f328:	2004      	movs	r0, #4
 800f32a:	f7f3 faa9 	bl	8002880 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800f32e:	2004      	movs	r0, #4
 800f330:	f7f3 fade 	bl	80028f0 <st25r3911EnableInterrupts>
    
    /*Check if Observation Mode is enabled and set it on ST25R391x */
    rfalCheckEnableObsModeTx();
 800f334:	4b27      	ldr	r3, [pc, #156]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f336:	795b      	ldrb	r3, [r3, #5]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d005      	beq.n	800f348 <rfalISO14443ATransceiveShortFrame+0x160>
 800f33c:	4b25      	ldr	r3, [pc, #148]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f33e:	795b      	ldrb	r3, [r3, #5]
 800f340:	4619      	mov	r1, r3
 800f342:	2001      	movs	r0, #1
 800f344:	f7f2 fef8 	bl	8002138 <st25r3911WriteTestRegister>
    
    /*******************************************************************************/
    /* Chip bug: Clear nbtx bits before sending WUPA/REQA - otherwise ST25R3911 will report parity error */
    st25r3911WriteRegister( ST25R3911_REG_NUM_TX_BYTES2, 0);
 800f348:	2100      	movs	r1, #0
 800f34a:	201e      	movs	r0, #30
 800f34c:	f7f2 ff38 	bl	80021c0 <st25r3911WriteRegister>

    /* Send either WUPA or REQA. All affected tags will backscatter ATQA and change to READY state */
    st25r3911ExecuteCommand( directCmd );
 800f350:	7d7b      	ldrb	r3, [r7, #21]
 800f352:	4618      	mov	r0, r3
 800f354:	f7f3 f8b8 	bl	80024c8 <st25r3911ExecuteCommand>
    
    /* Wait for TXE */
    if( st25r3911WaitForInterruptsTimed( ST25R3911_IRQ_MASK_TXE, (uint16_t)MAX( rfalConv1fcToMs( fwt ), RFAL_ST25R3911_SW_TMR_MIN_1MS ) ) == 0U)
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	f646 12ef 	movw	r2, #27119	; 0x69ef
 800f35e:	4293      	cmp	r3, r2
 800f360:	d906      	bls.n	800f370 <rfalISO14443ATransceiveShortFrame+0x188>
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	4a1d      	ldr	r2, [pc, #116]	; (800f3dc <rfalISO14443ATransceiveShortFrame+0x1f4>)
 800f366:	fba2 2303 	umull	r2, r3, r2, r3
 800f36a:	0b1b      	lsrs	r3, r3, #12
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	e000      	b.n	800f372 <rfalISO14443ATransceiveShortFrame+0x18a>
 800f370:	2301      	movs	r3, #1
 800f372:	4619      	mov	r1, r3
 800f374:	2008      	movs	r0, #8
 800f376:	f7f3 fa33 	bl	80027e0 <st25r3911WaitForInterruptsTimed>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <rfalISO14443ATransceiveShortFrame+0x19e>
    {
        ret = ERR_IO;
 800f380:	2303      	movs	r3, #3
 800f382:	82fb      	strh	r3, [r7, #22]
 800f384:	e016      	b.n	800f3b4 <rfalISO14443ATransceiveShortFrame+0x1cc>
    }
    else
    {
        /*Check if Observation Mode is enabled and set it on ST25R391x */
        rfalCheckEnableObsModeRx();
 800f386:	4b13      	ldr	r3, [pc, #76]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f388:	799b      	ldrb	r3, [r3, #6]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d005      	beq.n	800f39a <rfalISO14443ATransceiveShortFrame+0x1b2>
 800f38e:	4b11      	ldr	r3, [pc, #68]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f390:	799b      	ldrb	r3, [r3, #6]
 800f392:	4619      	mov	r1, r3
 800f394:	2001      	movs	r0, #1
 800f396:	f7f2 fecf 	bl	8002138 <st25r3911WriteTestRegister>
        
        /* Jump into a transceive Rx state for reception (bypass Tx states) */
        gRFAL.state       = RFAL_STATE_TXRX;
 800f39a:	4b0e      	ldr	r3, [pc, #56]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f39c:	2203      	movs	r2, #3
 800f39e:	701a      	strb	r2, [r3, #0]
        gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800f3a0:	4b0c      	ldr	r3, [pc, #48]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f3a2:	2251      	movs	r2, #81	; 0x51
 800f3a4:	751a      	strb	r2, [r3, #20]
        gRFAL.TxRx.status = ERR_BUSY;
 800f3a6:	4b0b      	ldr	r3, [pc, #44]	; (800f3d4 <rfalISO14443ATransceiveShortFrame+0x1ec>)
 800f3a8:	2202      	movs	r2, #2
 800f3aa:	82da      	strh	r2, [r3, #22]
        
        /* Execute Transceive Rx blocking */
        ret = rfalTransceiveBlockingRx();
 800f3ac:	f7fe ff66 	bl	800e27c <rfalTransceiveBlockingRx>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	82fb      	strh	r3, [r7, #22]
    }
    
    
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800f3b4:	2004      	movs	r0, #4
 800f3b6:	f7f3 faa7 	bl	8002908 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	2005      	movs	r0, #5
 800f3be:	f7f2 ff49 	bl	8002254 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits(ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800f3c2:	2180      	movs	r1, #128	; 0x80
 800f3c4:	2009      	movs	r0, #9
 800f3c6:	f7f2 ff45 	bl	8002254 <st25r3911ClrRegisterBits>
    
    return ret;
 800f3ca:	8afb      	ldrh	r3, [r7, #22]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	200009a8 	.word	0x200009a8
 800f3d8:	0ffff000 	.word	0x0ffff000
 800f3dc:	4d542005 	.word	0x4d542005

0800f3e0 <rfalISO14443ATransceiveAnticollisionFrame>:

/*******************************************************************************/
ReturnCode rfalISO14443ATransceiveAnticollisionFrame( uint8_t *buf, uint8_t *bytesToSend, uint8_t *bitsToSend, uint16_t *rxLength, uint32_t fwt )
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b08e      	sub	sp, #56	; 0x38
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	603b      	str	r3, [r7, #0]
    rfalTransceiveContext ctx;
    uint8_t               collByte;
    uint8_t               collData;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCA ) )
 800f3ee:	4b77      	ldr	r3, [pc, #476]	; (800f5cc <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d903      	bls.n	800f3fe <rfalISO14443ATransceiveAnticollisionFrame+0x1e>
 800f3f6:	4b75      	ldr	r3, [pc, #468]	; (800f5cc <rfalISO14443ATransceiveAnticollisionFrame+0x1ec>)
 800f3f8:	785b      	ldrb	r3, [r3, #1]
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d001      	beq.n	800f402 <rfalISO14443ATransceiveAnticollisionFrame+0x22>
    {
        return ERR_WRONG_STATE;
 800f3fe:	2321      	movs	r3, #33	; 0x21
 800f400:	e0df      	b.n	800f5c2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /* Check for valid parameters */
    if( (buf == NULL) || (bytesToSend == NULL) || (bitsToSend == NULL) || (rxLength == NULL) )
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d008      	beq.n	800f41a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d005      	beq.n	800f41a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <rfalISO14443ATransceiveAnticollisionFrame+0x3a>
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <rfalISO14443ATransceiveAnticollisionFrame+0x3e>
    {
        return ERR_PARAM;
 800f41a:	2307      	movs	r3, #7
 800f41c:	e0d1      	b.n	800f5c2 <rfalISO14443ATransceiveAnticollisionFrame+0x1e2>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800f41e:	f240 1003 	movw	r0, #259	; 0x103
 800f422:	f7f7 fdc5 	bl	8006fb0 <rfalSetAnalogConfig>
    
    
    /*******************************************************************************/
    /* Enable anti collision to recognise collision in first byte of SENS_REQ */
    st25r3911SetRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800f426:	2101      	movs	r1, #1
 800f428:	2005      	movs	r0, #5
 800f42a:	f7f2 ff36 	bl	800229a <st25r3911SetRegisterBits>
    
    /* Disable CRC while receiving */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800f42e:	2180      	movs	r1, #128	; 0x80
 800f430:	2009      	movs	r0, #9
 800f432:	f7f2 ff32 	bl	800229a <st25r3911SetRegisterBits>
    
    
    
    /*******************************************************************************/
    /* Prepare for Transceive                                                      */
    ctx.flags     = ( (uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF );  /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800f436:	230b      	movs	r3, #11
 800f438:	62fb      	str	r3, [r7, #44]	; 0x2c
    ctx.txBuf     = buf;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	61bb      	str	r3, [r7, #24]
    ctx.txBufLen  = (uint16_t)(rfalConvBytesToBits( *bytesToSend ) + *bitsToSend );
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	b29b      	uxth	r3, r3
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	b29a      	uxth	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	4413      	add	r3, r2
 800f450:	b29b      	uxth	r3, r3
 800f452:	83bb      	strh	r3, [r7, #28]
    ctx.rxBuf     = &buf[*bytesToSend];
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	461a      	mov	r2, r3
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	4413      	add	r3, r2
 800f45e:	623b      	str	r3, [r7, #32]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits( RFAL_ISO14443A_SDD_RES_LEN );
 800f460:	2328      	movs	r3, #40	; 0x28
 800f462:	84bb      	strh	r3, [r7, #36]	; 0x24
    ctx.rxRcvdLen = rxLength;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	62bb      	str	r3, [r7, #40]	; 0x28
    ctx.fwt       = fwt;
 800f468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f46a:	633b      	str	r3, [r7, #48]	; 0x30
    
    rfalStartTransceive( &ctx );
 800f46c:	f107 0318 	add.w	r3, r7, #24
 800f470:	4618      	mov	r0, r3
 800f472:	f7fe fd5f 	bl	800df34 <rfalStartTransceive>
    
    /* Additionally enable bit collision interrupt */
    st25r3911GetInterrupt( ST25R3911_IRQ_MASK_COL );
 800f476:	2004      	movs	r0, #4
 800f478:	f7f3 fa02 	bl	8002880 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( ST25R3911_IRQ_MASK_COL );
 800f47c:	2004      	movs	r0, #4
 800f47e:	f7f3 fa37 	bl	80028f0 <st25r3911EnableInterrupts>
    
    /*******************************************************************************/
    collByte = 0;
 800f482:	2300      	movs	r3, #0
 800f484:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    
    /* save the collision byte */
    if ((*bitsToSend) > 0U)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02d      	beq.n	800f4ec <rfalISO14443ATransceiveAnticollisionFrame+0x10c>
    {
        buf[(*bytesToSend)] <<= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	461a      	mov	r2, r3
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	4413      	add	r3, r2
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	461a      	mov	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	f1c3 0308 	rsb	r3, r3, #8
 800f4a6:	409a      	lsls	r2, r3
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	440b      	add	r3, r1
 800f4b2:	b2d2      	uxtb	r2, r2
 800f4b4:	701a      	strb	r2, [r3, #0]
        buf[(*bytesToSend)] >>= (RFAL_BITS_IN_BYTE - (*bitsToSend));
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	f1c3 0308 	rsb	r3, r3, #8
 800f4cc:	411a      	asrs	r2, r3
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	440b      	add	r3, r1
 800f4d8:	b2d2      	uxtb	r2, r2
 800f4da:	701a      	strb	r2, [r3, #0]
        collByte = buf[(*bytesToSend)];
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }
    
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f4ec:	f7fe fea9 	bl	800e242 <rfalTransceiveRunBlockingTx>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	86fb      	strh	r3, [r7, #54]	; 0x36
    if( ret == ERR_NONE)
 800f4f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d14f      	bne.n	800f59a <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
    {
       ret = rfalTransceiveBlockingRx();
 800f4fa:	f7fe febf 	bl	800e27c <rfalTransceiveBlockingRx>
 800f4fe:	4603      	mov	r3, r0
 800f500:	86fb      	strh	r3, [r7, #54]	; 0x36
    
       /*******************************************************************************/
       if ((*bitsToSend) > 0U)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d031      	beq.n	800f56e <rfalISO14443ATransceiveAnticollisionFrame+0x18e>
       {
           buf[(*bytesToSend)] >>= (*bitsToSend);
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	4413      	add	r3, r2
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	411a      	asrs	r2, r3
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	4619      	mov	r1, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	440b      	add	r3, r1
 800f528:	b2d2      	uxtb	r2, r2
 800f52a:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] <<= (*bitsToSend);
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	4413      	add	r3, r2
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	461a      	mov	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	409a      	lsls	r2, r3
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	4619      	mov	r1, r3
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	440b      	add	r3, r1
 800f54a:	b2d2      	uxtb	r2, r2
 800f54c:	701a      	strb	r2, [r3, #0]
           buf[(*bytesToSend)] |= collByte;
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	4413      	add	r3, r2
 800f558:	7819      	ldrb	r1, [r3, #0]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	461a      	mov	r2, r3
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4413      	add	r3, r2
 800f564:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f568:	430a      	orrs	r2, r1
 800f56a:	b2d2      	uxtb	r2, r2
 800f56c:	701a      	strb	r2, [r3, #0]
       }
       
       if( (ERR_RF_COLLISION == ret) )
 800f56e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f570:	2b1d      	cmp	r3, #29
 800f572:	d112      	bne.n	800f59a <rfalISO14443ATransceiveAnticollisionFrame+0x1ba>
       {
           /* read out collision register */
           st25r3911ReadRegister( ST25R3911_REG_COLLISION_STATUS, &collData);
 800f574:	f107 0317 	add.w	r3, r7, #23
 800f578:	4619      	mov	r1, r3
 800f57a:	201c      	movs	r0, #28
 800f57c:	f7f2 fcf8 	bl	8001f70 <st25r3911ReadRegister>

           (*bytesToSend) = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_byte) & 0x0FU); // 4-bits Byte information
 800f580:	7dfb      	ldrb	r3, [r7, #23]
 800f582:	091b      	lsrs	r3, r3, #4
 800f584:	b2da      	uxtb	r2, r3
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	701a      	strb	r2, [r3, #0]
           (*bitsToSend)  = ((collData >> ST25R3911_REG_COLLISION_STATUS_shift_c_bit)  & 0x07U); // 3-bits bit information
 800f58a:	7dfb      	ldrb	r3, [r7, #23]
 800f58c:	085b      	lsrs	r3, r3, #1
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	f003 0307 	and.w	r3, r3, #7
 800f594:	b2da      	uxtb	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	701a      	strb	r2, [r3, #0]
    }
    
   
    /*******************************************************************************/
    /* Disable Collision interrupt */
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_COL) );
 800f59a:	2004      	movs	r0, #4
 800f59c:	f7f3 f9b4 	bl	8002908 <st25r3911DisableInterrupts>
    
    /* Disable anti collision again */
    st25r3911ClrRegisterBits( ST25R3911_REG_ISO14443A_NFC, ST25R3911_REG_ISO14443A_NFC_antcl );
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	2005      	movs	r0, #5
 800f5a4:	f7f2 fe56 	bl	8002254 <st25r3911ClrRegisterBits>
    
    /* ReEnable CRC on Rx */
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_no_crc_rx );
 800f5a8:	2180      	movs	r1, #128	; 0x80
 800f5aa:	2009      	movs	r0, #9
 800f5ac:	f7f2 fe52 	bl	8002254 <st25r3911ClrRegisterBits>
    /*******************************************************************************/
    
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800f5b0:	f240 1001 	movw	r0, #257	; 0x101
 800f5b4:	f7f7 fcfc 	bl	8006fb0 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCA | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800f5b8:	f44f 7081 	mov.w	r0, #258	; 0x102
 800f5bc:	f7f7 fcf8 	bl	8006fb0 <rfalSetAnalogConfig>
    
    return ret;
 800f5c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3738      	adds	r7, #56	; 0x38
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	200009a8 	.word	0x200009a8

0800f5d0 <rfalISO15693TransceiveAnticollisionFrame>:

#if RFAL_FEATURE_NFCV

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveAnticollisionFrame( uint8_t *txBuf, uint8_t txBufLen, uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b08c      	sub	sp, #48	; 0x30
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	607a      	str	r2, [r7, #4]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	460b      	mov	r3, r1
 800f5de:	72fb      	strb	r3, [r7, #11]
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	72bb      	strb	r3, [r7, #10]
    ReturnCode            ret;
    rfalTransceiveContext ctx;
    
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCV ) )
 800f5e4:	4b29      	ldr	r3, [pc, #164]	; (800f68c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d903      	bls.n	800f5f4 <rfalISO15693TransceiveAnticollisionFrame+0x24>
 800f5ec:	4b27      	ldr	r3, [pc, #156]	; (800f68c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800f5ee:	785b      	ldrb	r3, [r3, #1]
 800f5f0:	2b07      	cmp	r3, #7
 800f5f2:	d001      	beq.n	800f5f8 <rfalISO15693TransceiveAnticollisionFrame+0x28>
    {
        return ERR_WRONG_STATE;
 800f5f4:	2321      	movs	r3, #33	; 0x21
 800f5f6:	e045      	b.n	800f684 <rfalISO15693TransceiveAnticollisionFrame+0xb4>
    }
    
    /*******************************************************************************/
    /* Set speficic Analog Config for Anticolission if needed */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_ANTICOL) );
 800f5f8:	f241 0003 	movw	r0, #4099	; 0x1003
 800f5fc:	f7f7 fcd8 	bl	8006fb0 <rfalSetAnalogConfig>

    
    /* Ignoring collisions before the UID (RES_FLAG + DSFID) */
    gRFAL.nfcvData.ignoreBits = (uint16_t)RFAL_ISO15693_IGNORE_BITS;
 800f600:	4b22      	ldr	r3, [pc, #136]	; (800f68c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800f602:	2210      	movs	r2, #16
 800f604:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    
    /*******************************************************************************/
    /* Prepare for Transceive  */
    ctx.flags     = ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO) | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_AGC_OFF | ((txBufLen==0U)?(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL:(uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO); /* Disable Automatic Gain Control (AGC) for better detection of collision */
 800f608:	7afb      	ldrb	r3, [r7, #11]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d101      	bne.n	800f612 <rfalISO15693TransceiveAnticollisionFrame+0x42>
 800f60e:	220b      	movs	r2, #11
 800f610:	e000      	b.n	800f614 <rfalISO15693TransceiveAnticollisionFrame+0x44>
 800f612:	220a      	movs	r2, #10
 800f614:	7afb      	ldrb	r3, [r7, #11]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <rfalISO15693TransceiveAnticollisionFrame+0x4e>
 800f61a:	2340      	movs	r3, #64	; 0x40
 800f61c:	e000      	b.n	800f620 <rfalISO15693TransceiveAnticollisionFrame+0x50>
 800f61e:	2300      	movs	r3, #0
 800f620:	4313      	orrs	r3, r2
 800f622:	627b      	str	r3, [r7, #36]	; 0x24
    ctx.txBuf     = txBuf;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	613b      	str	r3, [r7, #16]
    ctx.txBufLen  = (uint16_t)rfalConvBytesToBits(txBufLen);
 800f628:	7afb      	ldrb	r3, [r7, #11]
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	b29b      	uxth	r3, r3
 800f630:	82bb      	strh	r3, [r7, #20]
    ctx.rxBuf     = rxBuf;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	61bb      	str	r3, [r7, #24]
    ctx.rxBufLen  = (uint16_t)rfalConvBytesToBits(rxBufLen);
 800f636:	7abb      	ldrb	r3, [r7, #10]
 800f638:	b29b      	uxth	r3, r3
 800f63a:	00db      	lsls	r3, r3, #3
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	83bb      	strh	r3, [r7, #28]
    ctx.rxRcvdLen = actLen;
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	623b      	str	r3, [r7, #32]
    ctx.fwt       = rfalConv64fcTo1fc(ISO15693_FWT);
 800f644:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 800f648:	62bb      	str	r3, [r7, #40]	; 0x28
    
    rfalStartTransceive( &ctx );
 800f64a:	f107 0310 	add.w	r3, r7, #16
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fe fc70 	bl	800df34 <rfalStartTransceive>
    
    /*******************************************************************************/
    /* Run Transceive blocking */
    ret = rfalTransceiveRunBlockingTx();
 800f654:	f7fe fdf5 	bl	800e242 <rfalTransceiveRunBlockingTx>
 800f658:	4603      	mov	r3, r0
 800f65a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if( ret == ERR_NONE)
 800f65c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d103      	bne.n	800f66a <rfalISO15693TransceiveAnticollisionFrame+0x9a>
    {
        ret = rfalTransceiveBlockingRx();
 800f662:	f7fe fe0b 	bl	800e27c <rfalTransceiveBlockingRx>
 800f666:	4603      	mov	r3, r0
 800f668:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    
    /* Restore common Analog configurations for this mode */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_TX) );
 800f66a:	f241 0001 	movw	r0, #4097	; 0x1001
 800f66e:	f7f7 fc9f 	bl	8006fb0 <rfalSetAnalogConfig>
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_POLL | RFAL_ANALOG_CONFIG_TECH_NFCV | RFAL_ANALOG_CONFIG_BITRATE_COMMON | RFAL_ANALOG_CONFIG_RX) );
 800f672:	f241 0002 	movw	r0, #4098	; 0x1002
 800f676:	f7f7 fc9b 	bl	8006fb0 <rfalSetAnalogConfig>
        
    gRFAL.nfcvData.ignoreBits = 0;
 800f67a:	4b04      	ldr	r3, [pc, #16]	; (800f68c <rfalISO15693TransceiveAnticollisionFrame+0xbc>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    return ret;
 800f682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800f684:	4618      	mov	r0, r3
 800f686:	3730      	adds	r7, #48	; 0x30
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	200009a8 	.word	0x200009a8

0800f690 <rfalISO15693TransceiveEOFAnticollision>:

/*******************************************************************************/
ReturnCode rfalISO15693TransceiveEOFAnticollision( uint8_t *rxBuf, uint8_t rxBufLen, uint16_t *actLen )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b088      	sub	sp, #32
 800f694:	af02      	add	r7, sp, #8
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	460b      	mov	r3, r1
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy;

    return rfalISO15693TransceiveAnticollisionFrame( &dummy, 0, rxBuf, rxBufLen, actLen );
 800f69e:	7afa      	ldrb	r2, [r7, #11]
 800f6a0:	f107 0017 	add.w	r0, r7, #23
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	f7ff ff8f 	bl	800f5d0 <rfalISO15693TransceiveAnticollisionFrame>
 800f6b2:	4603      	mov	r3, r0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <rfalFeliCaPoll>:

#if RFAL_FEATURE_NFCF

/*******************************************************************************/
ReturnCode rfalFeliCaPoll( rfalFeliCaPollSlots slots, uint16_t sysCode, uint8_t reqCode, rfalFeliCaPollRes* pollResList, uint8_t pollResListSize, uint8_t *devicesDetected, uint8_t *collisionsDetected )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08c      	sub	sp, #48	; 0x30
 800f6c0:	af04      	add	r7, sp, #16
 800f6c2:	603b      	str	r3, [r7, #0]
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	71fb      	strb	r3, [r7, #7]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	80bb      	strh	r3, [r7, #4]
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	71bb      	strb	r3, [r7, #6]
    uint8_t           colDetected;
    rfalEHandling     curHandling;
    uint8_t           nbSlots;
        
    /* Check if RFAL is properly initialized */
    if( (gRFAL.state < RFAL_STATE_MODE_SET) || ( gRFAL.mode != RFAL_MODE_POLL_NFCF ) )
 800f6d0:	4b70      	ldr	r3, [pc, #448]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	2b01      	cmp	r3, #1
 800f6d6:	d903      	bls.n	800f6e0 <rfalFeliCaPoll+0x24>
 800f6d8:	4b6e      	ldr	r3, [pc, #440]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f6da:	785b      	ldrb	r3, [r3, #1]
 800f6dc:	2b06      	cmp	r3, #6
 800f6de:	d001      	beq.n	800f6e4 <rfalFeliCaPoll+0x28>
    {
        return ERR_WRONG_STATE;
 800f6e0:	2321      	movs	r3, #33	; 0x21
 800f6e2:	e0d3      	b.n	800f88c <rfalFeliCaPoll+0x1d0>
    }
    
    frameIdx    = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	767b      	strb	r3, [r7, #25]
    colDetected = 0;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	773b      	strb	r3, [r7, #28]
    devDetected = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	777b      	strb	r3, [r7, #29]
    nbSlots     = (uint8_t)slots;
 800f6f0:	79fb      	ldrb	r3, [r7, #7]
 800f6f2:	76fb      	strb	r3, [r7, #27]
    
    /*******************************************************************************/
    /* Compute SENSF_REQ frame */
    frame[frameIdx++] = (uint8_t)FELICA_CMD_POLLING; /* CMD: SENF_REQ                       */
 800f6f4:	7e7b      	ldrb	r3, [r7, #25]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	767a      	strb	r2, [r7, #25]
 800f6fa:	f107 0220 	add.w	r2, r7, #32
 800f6fe:	4413      	add	r3, r2
 800f700:	2200      	movs	r2, #0
 800f702:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode >> 8);     /* System Code (SC)                    */
 800f706:	88bb      	ldrh	r3, [r7, #4]
 800f708:	0a1b      	lsrs	r3, r3, #8
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	7e7b      	ldrb	r3, [r7, #25]
 800f70e:	1c59      	adds	r1, r3, #1
 800f710:	7679      	strb	r1, [r7, #25]
 800f712:	b2d2      	uxtb	r2, r2
 800f714:	f107 0120 	add.w	r1, r7, #32
 800f718:	440b      	add	r3, r1
 800f71a:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = (uint8_t)(sysCode & 0xFFU);  /* System Code (SC)                    */
 800f71e:	7e7b      	ldrb	r3, [r7, #25]
 800f720:	1c5a      	adds	r2, r3, #1
 800f722:	767a      	strb	r2, [r7, #25]
 800f724:	88ba      	ldrh	r2, [r7, #4]
 800f726:	b2d2      	uxtb	r2, r2
 800f728:	f107 0120 	add.w	r1, r7, #32
 800f72c:	440b      	add	r3, r1
 800f72e:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = reqCode;                     /* Communication Parameter Request (RC)*/
 800f732:	7e7b      	ldrb	r3, [r7, #25]
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	767a      	strb	r2, [r7, #25]
 800f738:	f107 0220 	add.w	r2, r7, #32
 800f73c:	4413      	add	r3, r2
 800f73e:	79ba      	ldrb	r2, [r7, #6]
 800f740:	f803 2c10 	strb.w	r2, [r3, #-16]
    frame[frameIdx++] = nbSlots;                     /* TimeSlot (TSN)                      */
 800f744:	7e7b      	ldrb	r3, [r7, #25]
 800f746:	1c5a      	adds	r2, r3, #1
 800f748:	767a      	strb	r2, [r7, #25]
 800f74a:	f107 0220 	add.w	r2, r7, #32
 800f74e:	4413      	add	r3, r2
 800f750:	7efa      	ldrb	r2, [r7, #27]
 800f752:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    
    /*******************************************************************************/
    /* NRT should not stop on reception - Use EMVCo mode to run NRT in nrt_emv     *
     * ERRORHANDLING_EMVCO has no special handling for NFC-F mode                  */
    curHandling = gRFAL.conf.eHandling;
 800f756:	4b4f      	ldr	r3, [pc, #316]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f758:	79db      	ldrb	r3, [r3, #7]
 800f75a:	763b      	strb	r3, [r7, #24]
    rfalSetErrorHandling( RFAL_ERRORHANDLING_EMVCO );
 800f75c:	2002      	movs	r0, #2
 800f75e:	f7fe fb09 	bl	800dd74 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Run transceive blocking, 
     * Calculate Total Response Time in(64/fc): 
     *                       512 PICC process time + (n * 256 Time Slot duration)  */
    ret = rfalTransceiveBlockingTx( frame, 
 800f762:	7e7b      	ldrb	r3, [r7, #25]
 800f764:	b299      	uxth	r1, r3
                                    (uint16_t)frameIdx, 
                                    (uint8_t*)gRFAL.nfcfData.pollResponses, 
                                    RFAL_FELICA_POLL_RES_LEN, 
                                    &actLen,
                                    (RFAL_TXRX_FLAGS_DEFAULT),
                                    rfalConv64fcTo1fc( RFAL_FELICA_POLL_DELAY_TIME + (RFAL_FELICA_POLL_SLOT_TIME * ((uint32_t)nbSlots + 1U)) ) );
 800f766:	7efb      	ldrb	r3, [r7, #27]
    ret = rfalTransceiveBlockingTx( frame, 
 800f768:	3303      	adds	r3, #3
 800f76a:	039b      	lsls	r3, r3, #14
 800f76c:	f107 0010 	add.w	r0, r7, #16
 800f770:	9302      	str	r3, [sp, #8]
 800f772:	2300      	movs	r3, #0
 800f774:	9301      	str	r3, [sp, #4]
 800f776:	f107 030e 	add.w	r3, r7, #14
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	2314      	movs	r3, #20
 800f77e:	4a46      	ldr	r2, [pc, #280]	; (800f898 <rfalFeliCaPoll+0x1dc>)
 800f780:	f7fe fd30 	bl	800e1e4 <rfalTransceiveBlockingTx>
 800f784:	4603      	mov	r3, r0
 800f786:	83fb      	strh	r3, [r7, #30]
    
    /*******************************************************************************/
    /* If Tx OK, Wait for all responses, store them as soon as they appear         */
    if( ret == ERR_NONE )
 800f788:	8bfb      	ldrh	r3, [r7, #30]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d145      	bne.n	800f81a <rfalFeliCaPoll+0x15e>
    {
        bool timeout;

        do 
        {
            ret = rfalTransceiveBlockingRx();
 800f78e:	f7fe fd75 	bl	800e27c <rfalTransceiveBlockingRx>
 800f792:	4603      	mov	r3, r0
 800f794:	83fb      	strh	r3, [r7, #30]
            if( ret == ERR_TIMEOUT )
 800f796:	8bfb      	ldrh	r3, [r7, #30]
 800f798:	2b04      	cmp	r3, #4
 800f79a:	d102      	bne.n	800f7a2 <rfalFeliCaPoll+0xe6>
            {
                /* Upon timeout the full Poll Delay + (Slot time)*(nbSlots) has expired */
                timeout = true;
 800f79c:	2301      	movs	r3, #1
 800f79e:	76bb      	strb	r3, [r7, #26]
 800f7a0:	e030      	b.n	800f804 <rfalFeliCaPoll+0x148>
            }
            else
            {
                /* Reception done, reEnabled Rx for following Slot */
                st25r3911ExecuteCommand( ST25R3911_CMD_UNMASK_RECEIVE_DATA );
 800f7a2:	20d1      	movs	r0, #209	; 0xd1
 800f7a4:	f7f2 fe90 	bl	80024c8 <st25r3911ExecuteCommand>
                st25r3911ExecuteCommand( ST25R3911_CMD_CLEAR_SQUELCH );
 800f7a8:	20d5      	movs	r0, #213	; 0xd5
 800f7aa:	f7f2 fe8d 	bl	80024c8 <st25r3911ExecuteCommand>
                
                /* If the reception was OK, new device found */
                if( ret == ERR_NONE )
 800f7ae:	8bfb      	ldrh	r3, [r7, #30]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d10e      	bne.n	800f7d2 <rfalFeliCaPoll+0x116>
                {
                   devDetected++;
 800f7b4:	7f7b      	ldrb	r3, [r7, #29]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	777b      	strb	r3, [r7, #29]
                   
                   /* Overwrite the Transceive context for the next reception */
                   gRFAL.TxRx.ctx.rxBuf = (uint8_t*)gRFAL.nfcfData.pollResponses[devDetected];
 800f7ba:	7f7a      	ldrb	r2, [r7, #29]
 800f7bc:	4613      	mov	r3, r2
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	4413      	add	r3, r2
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	3368      	adds	r3, #104	; 0x68
 800f7c6:	4a33      	ldr	r2, [pc, #204]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f7c8:	4413      	add	r3, r2
 800f7ca:	3302      	adds	r3, #2
 800f7cc:	4a31      	ldr	r2, [pc, #196]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f7ce:	6253      	str	r3, [r2, #36]	; 0x24
 800f7d0:	e002      	b.n	800f7d8 <rfalFeliCaPoll+0x11c>
                }
                /* If the reception was not OK, mark as collision */
                else
                {
                    colDetected++;
 800f7d2:	7f3b      	ldrb	r3, [r7, #28]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	773b      	strb	r3, [r7, #28]
                }
                
                /* Check whether NRT has expired meanwhile  */
                timeout = st25r3911CheckReg( ST25R3911_REG_REGULATOR_RESULT, ST25R3911_REG_REGULATOR_RESULT_nrt_on, 0x00 );
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2102      	movs	r1, #2
 800f7dc:	202b      	movs	r0, #43	; 0x2b
 800f7de:	f7f2 f9cf 	bl	8001b80 <st25r3911CheckReg>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	76bb      	strb	r3, [r7, #26]
                if( !timeout )
 800f7e6:	7ebb      	ldrb	r3, [r7, #26]
 800f7e8:	f083 0301 	eor.w	r3, r3, #1
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d008      	beq.n	800f804 <rfalFeliCaPoll+0x148>
                {
                    /* Jump again into transceive Rx state for the following reception */
                    gRFAL.TxRx.status = ERR_BUSY;
 800f7f2:	4b28      	ldr	r3, [pc, #160]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	82da      	strh	r2, [r3, #22]
                    gRFAL.state       = RFAL_STATE_TXRX;
 800f7f8:	4b26      	ldr	r3, [pc, #152]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f7fa:	2203      	movs	r2, #3
 800f7fc:	701a      	strb	r2, [r3, #0]
                    gRFAL.TxRx.state  = RFAL_TXRX_STATE_RX_IDLE;
 800f7fe:	4b25      	ldr	r3, [pc, #148]	; (800f894 <rfalFeliCaPoll+0x1d8>)
 800f800:	2251      	movs	r2, #81	; 0x51
 800f802:	751a      	strb	r2, [r3, #20]
                }
            }
        }while( ((nbSlots--) != 0U) && !timeout );
 800f804:	7efb      	ldrb	r3, [r7, #27]
 800f806:	1e5a      	subs	r2, r3, #1
 800f808:	76fa      	strb	r2, [r7, #27]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d005      	beq.n	800f81a <rfalFeliCaPoll+0x15e>
 800f80e:	7ebb      	ldrb	r3, [r7, #26]
 800f810:	f083 0301 	eor.w	r3, r3, #1
 800f814:	b2db      	uxtb	r3, r3
 800f816:	2b00      	cmp	r3, #0
 800f818:	d1b9      	bne.n	800f78e <rfalFeliCaPoll+0xd2>
    }
    
    /*******************************************************************************/
    /* Restore NRT to normal mode - back to previous error handling */
    rfalSetErrorHandling( curHandling );
 800f81a:	7e3b      	ldrb	r3, [r7, #24]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe faa9 	bl	800dd74 <rfalSetErrorHandling>
    
    /*******************************************************************************/
    /* Assign output parameters if requested                                       */
    
    if( (pollResList != NULL) && (pollResListSize > 0U) && (devDetected > 0U) )
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01c      	beq.n	800f862 <rfalFeliCaPoll+0x1a6>
 800f828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d018      	beq.n	800f862 <rfalFeliCaPoll+0x1a6>
 800f830:	7f7b      	ldrb	r3, [r7, #29]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d015      	beq.n	800f862 <rfalFeliCaPoll+0x1a6>
    {
        ST_MEMCPY( pollResList, gRFAL.nfcfData.pollResponses, (RFAL_FELICA_POLL_RES_LEN * (uint32_t)MIN(pollResListSize, devDetected) ) );
 800f836:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f83a:	7f7b      	ldrb	r3, [r7, #29]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d206      	bcs.n	800f84e <rfalFeliCaPoll+0x192>
 800f840:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f844:	4613      	mov	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	e004      	b.n	800f858 <rfalFeliCaPoll+0x19c>
 800f84e:	7f7a      	ldrb	r2, [r7, #29]
 800f850:	4613      	mov	r3, r2
 800f852:	009b      	lsls	r3, r3, #2
 800f854:	4413      	add	r3, r2
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	461a      	mov	r2, r3
 800f85a:	490f      	ldr	r1, [pc, #60]	; (800f898 <rfalFeliCaPoll+0x1dc>)
 800f85c:	6838      	ldr	r0, [r7, #0]
 800f85e:	f000 fd16 	bl	801028e <memcpy>
    }
    
    if( devicesDetected != NULL )
 800f862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f864:	2b00      	cmp	r3, #0
 800f866:	d002      	beq.n	800f86e <rfalFeliCaPoll+0x1b2>
    {
        *devicesDetected = devDetected;
 800f868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86a:	7f7a      	ldrb	r2, [r7, #29]
 800f86c:	701a      	strb	r2, [r3, #0]
    }
    
    if( collisionsDetected != NULL )
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	2b00      	cmp	r3, #0
 800f872:	d002      	beq.n	800f87a <rfalFeliCaPoll+0x1be>
    {
        *collisionsDetected = colDetected;
 800f874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f876:	7f3a      	ldrb	r2, [r7, #28]
 800f878:	701a      	strb	r2, [r3, #0]
    }
    
    return (( (colDetected != 0U) || (devDetected != 0U)) ? ERR_NONE : ret);
 800f87a:	7f3b      	ldrb	r3, [r7, #28]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d104      	bne.n	800f88a <rfalFeliCaPoll+0x1ce>
 800f880:	7f7b      	ldrb	r3, [r7, #29]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <rfalFeliCaPoll+0x1ce>
 800f886:	8bfb      	ldrh	r3, [r7, #30]
 800f888:	e000      	b.n	800f88c <rfalFeliCaPoll+0x1d0>
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3720      	adds	r7, #32
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	200009a8 	.word	0x200009a8
 800f898:	20000a12 	.word	0x20000a12

0800f89c <rfalWakeUpModeStart>:

#if RFAL_FEATURE_WAKEUP_MODE

/*******************************************************************************/
ReturnCode rfalWakeUpModeStart( const rfalWakeUpConfig *config )
{
 800f89c:	b5b0      	push	{r4, r5, r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
    uint8_t                reg;
    uint32_t               irqs;
    
    /* The Wake-Up procedure is explained in detail in Application Note: AN4985 */
    
    if( config == NULL )
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d130      	bne.n	800f90c <rfalWakeUpModeStart+0x70>
    {
        gRFAL.wum.cfg.period      = RFAL_WUM_PERIOD_500MS;
 800f8aa:	4bad      	ldr	r3, [pc, #692]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8ac:	2214      	movs	r2, #20
 800f8ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        gRFAL.wum.cfg.irqTout     = false;
 800f8b2:	4bab      	ldr	r3, [pc, #684]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
        gRFAL.wum.cfg.swTagDetect = false;
 800f8ba:	4ba9      	ldr	r3, [pc, #676]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      
        gRFAL.wum.cfg.indAmp.enabled   = true;
 800f8c2:	4ba7      	ldr	r3, [pc, #668]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        gRFAL.wum.cfg.indPha.enabled   = true;
 800f8ca:	4ba5      	ldr	r3, [pc, #660]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8cc:	2201      	movs	r2, #1
 800f8ce:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        gRFAL.wum.cfg.cap.enabled      = false;
 800f8d2:	4ba3      	ldr	r3, [pc, #652]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        gRFAL.wum.cfg.indAmp.delta     = 2U;
 800f8da:	4ba1      	ldr	r3, [pc, #644]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8dc:	2202      	movs	r2, #2
 800f8de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
        gRFAL.wum.cfg.indAmp.reference = RFAL_WUM_REFERENCE_AUTO;
 800f8e2:	4b9f      	ldr	r3, [pc, #636]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8e4:	22ff      	movs	r2, #255	; 0xff
 800f8e6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
        gRFAL.wum.cfg.indAmp.autoAvg   = false;
 800f8ea:	4b9d      	ldr	r3, [pc, #628]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
        gRFAL.wum.cfg.indPha.delta     = 2U;
 800f8f2:	4b9b      	ldr	r3, [pc, #620]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
        gRFAL.wum.cfg.indPha.reference = RFAL_WUM_REFERENCE_AUTO;
 800f8fa:	4b99      	ldr	r3, [pc, #612]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f8fc:	22ff      	movs	r2, #255	; 0xff
 800f8fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        gRFAL.wum.cfg.indPha.autoAvg   = false;
 800f902:	4b97      	ldr	r3, [pc, #604]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800f90a:	e00e      	b.n	800f92a <rfalWakeUpModeStart+0x8e>
    }
    else
    {
        gRFAL.wum.cfg = *config;
 800f90c:	4b94      	ldr	r3, [pc, #592]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	3355      	adds	r3, #85	; 0x55
 800f912:	6811      	ldr	r1, [r2, #0]
 800f914:	6855      	ldr	r5, [r2, #4]
 800f916:	6894      	ldr	r4, [r2, #8]
 800f918:	68d0      	ldr	r0, [r2, #12]
 800f91a:	6019      	str	r1, [r3, #0]
 800f91c:	605d      	str	r5, [r3, #4]
 800f91e:	609c      	str	r4, [r3, #8]
 800f920:	60d8      	str	r0, [r3, #12]
 800f922:	6911      	ldr	r1, [r2, #16]
 800f924:	6119      	str	r1, [r3, #16]
 800f926:	7d12      	ldrb	r2, [r2, #20]
 800f928:	751a      	strb	r2, [r3, #20]
    }
    
    
    /* Check for valid configuration */
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800f92a:	4b8d      	ldr	r3, [pc, #564]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f92c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f930:	2b00      	cmp	r3, #0
 800f932:	d009      	beq.n	800f948 <rfalWakeUpModeStart+0xac>
 800f934:	4b8a      	ldr	r3, [pc, #552]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f936:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d121      	bne.n	800f982 <rfalWakeUpModeStart+0xe6>
 800f93e:	4b88      	ldr	r3, [pc, #544]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f940:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800f944:	2b00      	cmp	r3, #0
 800f946:	d11c      	bne.n	800f982 <rfalWakeUpModeStart+0xe6>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f948:	4b85      	ldr	r3, [pc, #532]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f94a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f94e:	f083 0301 	eor.w	r3, r3, #1
 800f952:	b2db      	uxtb	r3, r3
    if( (gRFAL.wum.cfg.cap.enabled  && (gRFAL.wum.cfg.indAmp.enabled || gRFAL.wum.cfg.indPha.enabled))  || 
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00f      	beq.n	800f978 <rfalWakeUpModeStart+0xdc>
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f958:	4b81      	ldr	r3, [pc, #516]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f95a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f95e:	f083 0301 	eor.w	r3, r3, #1
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d007      	beq.n	800f978 <rfalWakeUpModeStart+0xdc>
 800f968:	4b7d      	ldr	r3, [pc, #500]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f96a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800f96e:	f083 0301 	eor.w	r3, r3, #1
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	d104      	bne.n	800f982 <rfalWakeUpModeStart+0xe6>
         gRFAL.wum.cfg.swTagDetect                                                                         )
 800f978:	4b79      	ldr	r3, [pc, #484]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f97a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
        (!gRFAL.wum.cfg.cap.enabled && !gRFAL.wum.cfg.indAmp.enabled && !gRFAL.wum.cfg.indPha.enabled)  ||
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <rfalWakeUpModeStart+0xea>
    {
        return ERR_PARAM;
 800f982:	2307      	movs	r3, #7
 800f984:	e14f      	b.n	800fc26 <rfalWakeUpModeStart+0x38a>
    }
    
    irqs = ST25R3911_IRQ_MASK_NONE;
 800f986:	2300      	movs	r3, #0
 800f988:	613b      	str	r3, [r7, #16]
    
    
    /* Disable Tx, Rx, External Field Detector and set default ISO14443A mode */
    st25r3911TxRxOff();
 800f98a:	f7f1 ff30 	bl	80017ee <st25r3911TxRxOff>
    st25r3911ClrRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800f98e:	2110      	movs	r1, #16
 800f990:	2009      	movs	r0, #9
 800f992:	f7f2 fc5f 	bl	8002254 <st25r3911ClrRegisterBits>
    st25r3911ChangeRegisterBits(ST25R3911_REG_MODE, (ST25R3911_REG_MODE_targ | ST25R3911_REG_MODE_mask_om), (ST25R3911_REG_MODE_targ_init | ST25R3911_REG_MODE_om_iso14443a) );
 800f996:	2208      	movs	r2, #8
 800f998:	21f8      	movs	r1, #248	; 0xf8
 800f99a:	2003      	movs	r0, #3
 800f99c:	f7f2 fc9b 	bl	80022d6 <st25r3911ChangeRegisterBits>
    
    /* Set Analog configurations for Wake-up On event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_ON) );
 800f9a0:	2004      	movs	r0, #4
 800f9a2:	f7f7 fb05 	bl	8006fb0 <rfalSetAnalogConfig>
    
    /*******************************************************************************/
    /* Prepare Wake-Up Timer Control Register */
    reg  = (uint8_t)(((uint8_t)gRFAL.wum.cfg.period & 0x0FU) << ST25R3911_REG_WUP_TIMER_CONTROL_shift_wut);
 800f9a6:	4b6e      	ldr	r3, [pc, #440]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f9a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f9ac:	011b      	lsls	r3, r3, #4
 800f9ae:	75fb      	strb	r3, [r7, #23]
    reg |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.period < (uint8_t)RFAL_WUM_PERIOD_100MS) ? ST25R3911_REG_WUP_TIMER_CONTROL_wur : 0x00U);
 800f9b0:	4b6b      	ldr	r3, [pc, #428]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f9b2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f9b6:	2b0f      	cmp	r3, #15
 800f9b8:	d802      	bhi.n	800f9c0 <rfalWakeUpModeStart+0x124>
 800f9ba:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f9be:	e000      	b.n	800f9c2 <rfalWakeUpModeStart+0x126>
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	b25b      	sxtb	r3, r3
 800f9ca:	75fb      	strb	r3, [r7, #23]
    
    if(gRFAL.wum.cfg.irqTout)
 800f9cc:	4b64      	ldr	r3, [pc, #400]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f9ce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d007      	beq.n	800f9e6 <rfalWakeUpModeStart+0x14a>
    {
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wto;
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
 800f9d8:	f043 0308 	orr.w	r3, r3, #8
 800f9dc:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WT;
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9e4:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Amplitude is to be performed */
    if( gRFAL.wum.cfg.indAmp.enabled )
 800f9e6:	4b5e      	ldr	r3, [pc, #376]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f9e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d04c      	beq.n	800fa8a <rfalWakeUpModeStart+0x1ee>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indAmp.delta) << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_d);
 800f9f0:	4b5b      	ldr	r3, [pc, #364]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f9f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f9f6:	011b      	lsls	r3, r3, #4
 800f9f8:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.aaInclMeas ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_aam : 0x00U);
 800f9fa:	4b59      	ldr	r3, [pc, #356]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800f9fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d001      	beq.n	800fa08 <rfalWakeUpModeStart+0x16c>
 800fa04:	2208      	movs	r2, #8
 800fa06:	e000      	b.n	800fa0a <rfalWakeUpModeStart+0x16e>
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	b25b      	sxtb	r3, r3
 800fa12:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indAmp.aaWeight << ST25R3911_REG_AMPLITUDE_MEASURE_CONF_shift_am_aew) & ST25R3911_REG_AMPLITUDE_MEASURE_CONF_mask_am_aew);
 800fa14:	4b52      	ldr	r3, [pc, #328]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	b25b      	sxtb	r3, r3
 800fa20:	f003 0306 	and.w	r3, r3, #6
 800fa24:	b25a      	sxtb	r2, r3
 800fa26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	b25b      	sxtb	r3, r3
 800fa2e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indAmp.autoAvg ? ST25R3911_REG_AMPLITUDE_MEASURE_CONF_am_ae : 0x00U);
 800fa30:	4b4b      	ldr	r3, [pc, #300]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa32:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fa36:	b25a      	sxtb	r2, r3
 800fa38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	b25b      	sxtb	r3, r3
 800fa40:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_CONF, aux );
 800fa42:	7bfb      	ldrb	r3, [r7, #15]
 800fa44:	4619      	mov	r1, r3
 800fa46:	2032      	movs	r0, #50	; 0x32
 800fa48:	f7f2 fbba 	bl	80021c0 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indAmp.autoAvg )
 800fa4c:	4b44      	ldr	r3, [pc, #272]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa4e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800fa52:	f083 0301 	eor.w	r3, r3, #1
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00e      	beq.n	800fa7a <rfalWakeUpModeStart+0x1de>
        {
            if( gRFAL.wum.cfg.indAmp.reference == RFAL_WUM_REFERENCE_AUTO )
 800fa5c:	4b40      	ldr	r3, [pc, #256]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa5e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800fa62:	2bff      	cmp	r3, #255	; 0xff
 800fa64:	d102      	bne.n	800fa6c <rfalWakeUpModeStart+0x1d0>
            {
                st25r3911MeasureAmplitude( &gRFAL.wum.cfg.indAmp.reference );
 800fa66:	483f      	ldr	r0, [pc, #252]	; (800fb64 <rfalWakeUpModeStart+0x2c8>)
 800fa68:	f7f1 ff6f 	bl	800194a <st25r3911MeasureAmplitude>
            }
            st25r3911WriteRegister( ST25R3911_REG_AMPLITUDE_MEASURE_REF, gRFAL.wum.cfg.indAmp.reference );
 800fa6c:	4b3c      	ldr	r3, [pc, #240]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa6e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800fa72:	4619      	mov	r1, r3
 800fa74:	2033      	movs	r0, #51	; 0x33
 800fa76:	f7f2 fba3 	bl	80021c0 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wam;
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
 800fa7c:	f043 0304 	orr.w	r3, r3, #4
 800fa80:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WAM;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa88:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Inductive Phase is to be performed */
    if( gRFAL.wum.cfg.indPha.enabled )
 800fa8a:	4b35      	ldr	r3, [pc, #212]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa8c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d04c      	beq.n	800fb2e <rfalWakeUpModeStart+0x292>
    {
        aux  = (uint8_t)((gRFAL.wum.cfg.indPha.delta) << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_d);
 800fa94:	4b32      	ldr	r3, [pc, #200]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fa96:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800fa9a:	011b      	lsls	r3, r3, #4
 800fa9c:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.aaInclMeas ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_aam : 0x00U);
 800fa9e:	4b30      	ldr	r3, [pc, #192]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800faa0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d001      	beq.n	800faac <rfalWakeUpModeStart+0x210>
 800faa8:	2208      	movs	r2, #8
 800faaa:	e000      	b.n	800faae <rfalWakeUpModeStart+0x212>
 800faac:	2200      	movs	r2, #0
 800faae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fab2:	4313      	orrs	r3, r2
 800fab4:	b25b      	sxtb	r3, r3
 800fab6:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.indPha.aaWeight << ST25R3911_REG_PHASE_MEASURE_CONF_shift_pm_aew) & ST25R3911_REG_PHASE_MEASURE_CONF_mask_pm_aew);
 800fab8:	4b29      	ldr	r3, [pc, #164]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800faba:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800fabe:	005b      	lsls	r3, r3, #1
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	b25b      	sxtb	r3, r3
 800fac4:	f003 0306 	and.w	r3, r3, #6
 800fac8:	b25a      	sxtb	r2, r3
 800faca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800face:	4313      	orrs	r3, r2
 800fad0:	b25b      	sxtb	r3, r3
 800fad2:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.indPha.autoAvg ? ST25R3911_REG_PHASE_MEASURE_CONF_pm_ae : 0x00U);
 800fad4:	4b22      	ldr	r3, [pc, #136]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fad6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fada:	b25a      	sxtb	r2, r3
 800fadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	b25b      	sxtb	r3, r3
 800fae4:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_CONF, aux );
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	4619      	mov	r1, r3
 800faea:	2036      	movs	r0, #54	; 0x36
 800faec:	f7f2 fb68 	bl	80021c0 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.indPha.autoAvg )
 800faf0:	4b1b      	ldr	r3, [pc, #108]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800faf2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800faf6:	f083 0301 	eor.w	r3, r3, #1
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00e      	beq.n	800fb1e <rfalWakeUpModeStart+0x282>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800fb00:	4b17      	ldr	r3, [pc, #92]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fb02:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fb06:	2bff      	cmp	r3, #255	; 0xff
 800fb08:	d102      	bne.n	800fb10 <rfalWakeUpModeStart+0x274>
            {
                st25r3911MeasurePhase( &gRFAL.wum.cfg.indPha.reference );
 800fb0a:	4817      	ldr	r0, [pc, #92]	; (800fb68 <rfalWakeUpModeStart+0x2cc>)
 800fb0c:	f7f1 ff2b 	bl	8001966 <st25r3911MeasurePhase>
            }
            st25r3911WriteRegister( ST25R3911_REG_PHASE_MEASURE_REF, gRFAL.wum.cfg.indPha.reference );
 800fb10:	4b13      	ldr	r3, [pc, #76]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fb12:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fb16:	4619      	mov	r1, r3
 800fb18:	2037      	movs	r0, #55	; 0x37
 800fb1a:	f7f2 fb51 	bl	80021c0 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wph;
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	f043 0302 	orr.w	r3, r3, #2
 800fb24:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WPH;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb2c:	613b      	str	r3, [r7, #16]
    }
    
    /*******************************************************************************/
    /* Check if Capacitive is to be performed */
    if( gRFAL.wum.cfg.cap.enabled )
 800fb2e:	4b0c      	ldr	r3, [pc, #48]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fb30:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d05a      	beq.n	800fbee <rfalWakeUpModeStart+0x352>
    {
        /*******************************************************************************/
        /* Perform Capacitive sensor calibration */
        
        /* Disable Oscillator and Field */
        st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_tx_en) );
 800fb38:	2188      	movs	r1, #136	; 0x88
 800fb3a:	2002      	movs	r0, #2
 800fb3c:	f7f2 fb8a 	bl	8002254 <st25r3911ClrRegisterBits>
        
        /* Sensor gain should be configured on Analog Config */
        
        /* Perform calibration procedure */
        st25r3911CalibrateCapacitiveSensor( NULL );
 800fb40:	2000      	movs	r0, #0
 800fb42:	f7f1 ff3a 	bl	80019ba <st25r3911CalibrateCapacitiveSensor>
        
        
        /*******************************************************************************/
        aux  = (uint8_t)((gRFAL.wum.cfg.cap.delta) << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_d);
 800fb46:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fb48:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800fb4c:	011b      	lsls	r3, r3, #4
 800fb4e:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.aaInclMeas ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_aam : 0x00U);
 800fb50:	4b03      	ldr	r3, [pc, #12]	; (800fb60 <rfalWakeUpModeStart+0x2c4>)
 800fb52:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d008      	beq.n	800fb6c <rfalWakeUpModeStart+0x2d0>
 800fb5a:	2208      	movs	r2, #8
 800fb5c:	e007      	b.n	800fb6e <rfalWakeUpModeStart+0x2d2>
 800fb5e:	bf00      	nop
 800fb60:	200009a8 	.word	0x200009a8
 800fb64:	20000a02 	.word	0x20000a02
 800fb68:	20000a08 	.word	0x20000a08
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	b25b      	sxtb	r3, r3
 800fb76:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(((uint8_t)gRFAL.wum.cfg.cap.aaWeight << ST25R3911_REG_CAPACITANCE_MEASURE_CONF_shift_cm_aew) & ST25R3911_REG_CAPACITANCE_MEASURE_CONF_mask_cm_aew);
 800fb78:	4b2d      	ldr	r3, [pc, #180]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fb7a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800fb7e:	005b      	lsls	r3, r3, #1
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	b25b      	sxtb	r3, r3
 800fb84:	f003 0306 	and.w	r3, r3, #6
 800fb88:	b25a      	sxtb	r2, r3
 800fb8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	b25b      	sxtb	r3, r3
 800fb92:	73fb      	strb	r3, [r7, #15]
        aux |= (uint8_t)(gRFAL.wum.cfg.cap.autoAvg ? ST25R3911_REG_CAPACITANCE_MEASURE_CONF_cm_ae : 0x00U);
 800fb94:	4b26      	ldr	r3, [pc, #152]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fb96:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800fb9a:	b25a      	sxtb	r2, r3
 800fb9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	b25b      	sxtb	r3, r3
 800fba4:	73fb      	strb	r3, [r7, #15]
        
        st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_CONF, aux );
 800fba6:	7bfb      	ldrb	r3, [r7, #15]
 800fba8:	4619      	mov	r1, r3
 800fbaa:	203a      	movs	r0, #58	; 0x3a
 800fbac:	f7f2 fb08 	bl	80021c0 <st25r3911WriteRegister>
        
        /* Only need to set the reference if not using Auto Average */
        if( !gRFAL.wum.cfg.cap.autoAvg )
 800fbb0:	4b1f      	ldr	r3, [pc, #124]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fbb2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800fbb6:	f083 0301 	eor.w	r3, r3, #1
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00e      	beq.n	800fbde <rfalWakeUpModeStart+0x342>
        {
            if( gRFAL.wum.cfg.indPha.reference == RFAL_WUM_REFERENCE_AUTO )
 800fbc0:	4b1b      	ldr	r3, [pc, #108]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fbc2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fbc6:	2bff      	cmp	r3, #255	; 0xff
 800fbc8:	d102      	bne.n	800fbd0 <rfalWakeUpModeStart+0x334>
            {
                st25r3911MeasureCapacitance( &gRFAL.wum.cfg.cap.reference );
 800fbca:	481a      	ldr	r0, [pc, #104]	; (800fc34 <rfalWakeUpModeStart+0x398>)
 800fbcc:	f7f1 fed9 	bl	8001982 <st25r3911MeasureCapacitance>
            }
            st25r3911WriteRegister( ST25R3911_REG_CAPACITANCE_MEASURE_REF, gRFAL.wum.cfg.cap.reference );
 800fbd0:	4b17      	ldr	r3, [pc, #92]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fbd2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	203b      	movs	r0, #59	; 0x3b
 800fbda:	f7f2 faf1 	bl	80021c0 <st25r3911WriteRegister>
        }
        
        reg  |= ST25R3911_REG_WUP_TIMER_CONTROL_wcap;
 800fbde:	7dfb      	ldrb	r3, [r7, #23]
 800fbe0:	f043 0301 	orr.w	r3, r3, #1
 800fbe4:	75fb      	strb	r3, [r7, #23]
        irqs |= ST25R3911_IRQ_MASK_WCAP;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fbec:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable and clear all interrupts except Wake-Up IRQs */
    st25r3911DisableInterrupts( ST25R3911_IRQ_MASK_ALL );
 800fbee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fbf2:	f7f2 fe89 	bl	8002908 <st25r3911DisableInterrupts>
    st25r3911GetInterrupt( irqs );
 800fbf6:	6938      	ldr	r0, [r7, #16]
 800fbf8:	f7f2 fe42 	bl	8002880 <st25r3911GetInterrupt>
    st25r3911EnableInterrupts( irqs );
 800fbfc:	6938      	ldr	r0, [r7, #16]
 800fbfe:	f7f2 fe77 	bl	80028f0 <st25r3911EnableInterrupts>
    
    /* Enable Low Power Wake-Up Mode */
    st25r3911WriteRegister( ST25R3911_REG_WUP_TIMER_CONTROL, reg );
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	4619      	mov	r1, r3
 800fc06:	2031      	movs	r0, #49	; 0x31
 800fc08:	f7f2 fada 	bl	80021c0 <st25r3911WriteRegister>
    st25r3911ChangeRegisterBits( ST25R3911_REG_OP_CONTROL, (ST25R3911_REG_OP_CONTROL_en | ST25R3911_REG_OP_CONTROL_wu), ST25R3911_REG_OP_CONTROL_wu );
 800fc0c:	2204      	movs	r2, #4
 800fc0e:	2184      	movs	r1, #132	; 0x84
 800fc10:	2002      	movs	r0, #2
 800fc12:	f7f2 fb60 	bl	80022d6 <st25r3911ChangeRegisterBits>
    
    gRFAL.wum.state = RFAL_WUM_STATE_ENABLED;
 800fc16:	4b06      	ldr	r3, [pc, #24]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fc18:	2201      	movs	r2, #1
 800fc1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    gRFAL.state     = RFAL_STATE_WUM;  
 800fc1e:	4b04      	ldr	r3, [pc, #16]	; (800fc30 <rfalWakeUpModeStart+0x394>)
 800fc20:	2205      	movs	r2, #5
 800fc22:	701a      	strb	r2, [r3, #0]
      
    return ERR_NONE;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3718      	adds	r7, #24
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bdb0      	pop	{r4, r5, r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	200009a8 	.word	0x200009a8
 800fc34:	20000a0e 	.word	0x20000a0e

0800fc38 <rfalWakeUpModeHasWoke>:


/*******************************************************************************/
bool rfalWakeUpModeHasWoke( void )
{   
 800fc38:	b480      	push	{r7}
 800fc3a:	af00      	add	r7, sp, #0
    return (gRFAL.wum.state >= RFAL_WUM_STATE_ENABLED_WOKE);
 800fc3c:	4b06      	ldr	r3, [pc, #24]	; (800fc58 <rfalWakeUpModeHasWoke+0x20>)
 800fc3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	bf8c      	ite	hi
 800fc46:	2301      	movhi	r3, #1
 800fc48:	2300      	movls	r3, #0
 800fc4a:	b2db      	uxtb	r3, r3
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
 800fc56:	bf00      	nop
 800fc58:	200009a8 	.word	0x200009a8

0800fc5c <rfalRunWakeUpModeWorker>:


/*******************************************************************************/
static void rfalRunWakeUpModeWorker( void )
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
    uint32_t irqs;
    
    if( gRFAL.state != RFAL_STATE_WUM )
 800fc62:	4b1c      	ldr	r3, [pc, #112]	; (800fcd4 <rfalRunWakeUpModeWorker+0x78>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b05      	cmp	r3, #5
 800fc68:	d129      	bne.n	800fcbe <rfalRunWakeUpModeWorker+0x62>
    {
        return;
    }
    
    switch( gRFAL.wum.state )
 800fc6a:	4b1a      	ldr	r3, [pc, #104]	; (800fcd4 <rfalRunWakeUpModeWorker+0x78>)
 800fc6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fc70:	3b01      	subs	r3, #1
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d825      	bhi.n	800fcc2 <rfalRunWakeUpModeWorker+0x66>
    {
        case RFAL_WUM_STATE_ENABLED:
        case RFAL_WUM_STATE_ENABLED_WOKE:
            
            irqs = st25r3911GetInterrupt( ( ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP ) );
 800fc76:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800fc7a:	f7f2 fe01 	bl	8002880 <st25r3911GetInterrupt>
 800fc7e:	6078      	str	r0, [r7, #4]
            if( irqs == ST25R3911_IRQ_MASK_NONE )
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d01f      	beq.n	800fcc6 <rfalRunWakeUpModeWorker+0x6a>
               break;  /* No interrupt to process */
            }
            
            /*******************************************************************************/
            /* Check and mark which measurement(s) cause interrupt */
            if((irqs & ST25R3911_IRQ_MASK_WAM) != 0U)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d003      	beq.n	800fc98 <rfalRunWakeUpModeWorker+0x3c>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fc90:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <rfalRunWakeUpModeWorker+0x78>)
 800fc92:	2202      	movs	r2, #2
 800fc94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WPH) != 0U)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d003      	beq.n	800fcaa <rfalRunWakeUpModeWorker+0x4e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fca2:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <rfalRunWakeUpModeWorker+0x78>)
 800fca4:	2202      	movs	r2, #2
 800fca6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }
            
            if((irqs & ST25R3911_IRQ_MASK_WCAP) != 0U)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d00a      	beq.n	800fcca <rfalRunWakeUpModeWorker+0x6e>
            {
                gRFAL.wum.state = RFAL_WUM_STATE_ENABLED_WOKE;
 800fcb4:	4b07      	ldr	r3, [pc, #28]	; (800fcd4 <rfalRunWakeUpModeWorker+0x78>)
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }
            break;
 800fcbc:	e005      	b.n	800fcca <rfalRunWakeUpModeWorker+0x6e>
        return;
 800fcbe:	bf00      	nop
 800fcc0:	e004      	b.n	800fccc <rfalRunWakeUpModeWorker+0x70>
            
        default:
            /* MISRA 16.4: no empty default statement (a comment being enough) */
            break;
 800fcc2:	bf00      	nop
 800fcc4:	e002      	b.n	800fccc <rfalRunWakeUpModeWorker+0x70>
               break;  /* No interrupt to process */
 800fcc6:	bf00      	nop
 800fcc8:	e000      	b.n	800fccc <rfalRunWakeUpModeWorker+0x70>
            break;
 800fcca:	bf00      	nop
    }
}
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	200009a8 	.word	0x200009a8

0800fcd8 <rfalWakeUpModeStop>:


/*******************************************************************************/
ReturnCode rfalWakeUpModeStop( void )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	af00      	add	r7, sp, #0
    if( gRFAL.wum.state == RFAL_WUM_STATE_NOT_INIT )
 800fcdc:	4b0f      	ldr	r3, [pc, #60]	; (800fd1c <rfalWakeUpModeStop+0x44>)
 800fcde:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <rfalWakeUpModeStop+0x12>
    {
        return ERR_WRONG_STATE;
 800fce6:	2321      	movs	r3, #33	; 0x21
 800fce8:	e015      	b.n	800fd16 <rfalWakeUpModeStop+0x3e>
    }
    
    gRFAL.wum.state = RFAL_WUM_STATE_NOT_INIT;
 800fcea:	4b0c      	ldr	r3, [pc, #48]	; (800fd1c <rfalWakeUpModeStop+0x44>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    
    /* Re-Enable External Field Detector */
    st25r3911SetRegisterBits( ST25R3911_REG_AUX, ST25R3911_REG_AUX_en_fd );
 800fcf2:	2110      	movs	r1, #16
 800fcf4:	2009      	movs	r0, #9
 800fcf6:	f7f2 fad0 	bl	800229a <st25r3911SetRegisterBits>
    
    /* Disable Wake-Up Mode */
    st25r3911ClrRegisterBits( ST25R3911_REG_OP_CONTROL, ST25R3911_REG_OP_CONTROL_wu );
 800fcfa:	2104      	movs	r1, #4
 800fcfc:	2002      	movs	r0, #2
 800fcfe:	f7f2 faa9 	bl	8002254 <st25r3911ClrRegisterBits>
    st25r3911DisableInterrupts( (ST25R3911_IRQ_MASK_WT | ST25R3911_IRQ_MASK_WAM | ST25R3911_IRQ_MASK_WPH | ST25R3911_IRQ_MASK_WCAP) );
 800fd02:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800fd06:	f7f2 fdff 	bl	8002908 <st25r3911DisableInterrupts>
    
    /* Re-Enable the Oscillator */
    st25r3911OscOn();
 800fd0a:	f7f1 fd78 	bl	80017fe <st25r3911OscOn>
    
    /* Set Analog configurations for Wake-up Off event */
    rfalSetAnalogConfig( (RFAL_ANALOG_CONFIG_TECH_CHIP | RFAL_ANALOG_CONFIG_CHIP_WAKEUP_OFF) );
 800fd0e:	2005      	movs	r0, #5
 800fd10:	f7f7 f94e 	bl	8006fb0 <rfalSetAnalogConfig>
      
    return ERR_NONE;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	200009a8 	.word	0x200009a8

0800fd20 <rfalChipChangeRegBits>:
}


/*******************************************************************************/
ReturnCode rfalChipChangeRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	4603      	mov	r3, r0
 800fd28:	80fb      	strh	r3, [r7, #6]
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	717b      	strb	r3, [r7, #5]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeRegisterBits( (uint8_t)reg, valueMask, value );
 800fd32:	88fb      	ldrh	r3, [r7, #6]
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	793a      	ldrb	r2, [r7, #4]
 800fd38:	7979      	ldrb	r1, [r7, #5]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7f2 facb 	bl	80022d6 <st25r3911ChangeRegisterBits>
    return ERR_NONE;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3708      	adds	r7, #8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <rfalChipChangeTestRegBits>:


/*******************************************************************************/
ReturnCode rfalChipChangeTestRegBits( uint16_t reg, uint8_t valueMask, uint8_t value )
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	4603      	mov	r3, r0
 800fd52:	80fb      	strh	r3, [r7, #6]
 800fd54:	460b      	mov	r3, r1
 800fd56:	717b      	strb	r3, [r7, #5]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	713b      	strb	r3, [r7, #4]
    st25r3911ChangeTestRegisterBits( (uint8_t)reg, valueMask, value );
 800fd5c:	88fb      	ldrh	r3, [r7, #6]
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	793a      	ldrb	r2, [r7, #4]
 800fd62:	7979      	ldrb	r1, [r7, #5]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f2 faf5 	bl	8002354 <st25r3911ChangeTestRegisterBits>
    return ERR_NONE;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <rfalSt25tbPollerDoCollisionResolution>:
******************************************************************************
*/


static bool rfalSt25tbPollerDoCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	73fb      	strb	r3, [r7, #15]
    uint8_t    i;
    uint8_t    chipId;
    ReturnCode ret;
    bool col;

    col = false;
 800fd82:	2300      	movs	r3, #0
 800fd84:	74fb      	strb	r3, [r7, #19]
    
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800fd86:	2300      	movs	r3, #0
 800fd88:	75fb      	strb	r3, [r7, #23]
 800fd8a:	e072      	b.n	800fe72 <rfalSt25tbPollerDoCollisionResolution+0xfe>
    {
        platformDelay(1);  /* Wait t2: Answer to new request delay  */
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	f7f2 fe53 	bl	8002a38 <HAL_Delay>
        
        if( i==0U )
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d107      	bne.n	800fda8 <rfalSt25tbPollerDoCollisionResolution+0x34>
        {
            /* Step 2: Send Pcall16 */
            ret = rfalSt25tbPollerPcall( &chipId );
 800fd98:	f107 0312 	add.w	r3, r7, #18
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f000 f8c6 	bl	800ff2e <rfalSt25tbPollerPcall>
 800fda2:	4603      	mov	r3, r0
 800fda4:	82bb      	strh	r3, [r7, #20]
 800fda6:	e008      	b.n	800fdba <rfalSt25tbPollerDoCollisionResolution+0x46>
        }
        else
        {
            /* Step 3-17: Send Pcall16 */
            ret = rfalSt25tbPollerSlotMarker( i, &chipId );
 800fda8:	f107 0212 	add.w	r2, r7, #18
 800fdac:	7dfb      	ldrb	r3, [r7, #23]
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f000 f8e2 	bl	800ff7a <rfalSt25tbPollerSlotMarker>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	82bb      	strh	r3, [r7, #20]
        }
        
        if( ret == ERR_NONE )
 800fdba:	8abb      	ldrh	r3, [r7, #20]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d148      	bne.n	800fe52 <rfalSt25tbPollerDoCollisionResolution+0xde>
        {
            /* Found another device */
            st25tbDevList[*devCnt].chipID       = chipId;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	461a      	mov	r2, r3
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	4413      	add	r3, r2
 800fdd4:	7cba      	ldrb	r2, [r7, #18]
 800fdd6:	701a      	strb	r2, [r3, #0]
            st25tbDevList[*devCnt].isDeselected = false;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	461a      	mov	r2, r3
 800fdde:	4613      	mov	r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	4413      	add	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	461a      	mov	r2, r3
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	4413      	add	r3, r2
 800fdec:	2200      	movs	r2, #0
 800fdee:	725a      	strb	r2, [r3, #9]
            
            /* Select Device, retrieve its UID  */
            ret = rfalSt25tbPollerSelect( chipId );
 800fdf0:	7cbb      	ldrb	r3, [r7, #18]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f000 f8f4 	bl	800ffe0 <rfalSt25tbPollerSelect>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	82bb      	strh	r3, [r7, #20]

            /* By Selecting this device, the previous gets Deselected */
            if( (*devCnt) > 0U )
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00b      	beq.n	800fe1c <rfalSt25tbPollerDoCollisionResolution+0xa8>
            {
                st25tbDevList[(*devCnt)-1U].isDeselected = true;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	4413      	add	r3, r2
 800fe10:	005b      	lsls	r3, r3, #1
 800fe12:	3b0a      	subs	r3, #10
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	4413      	add	r3, r2
 800fe18:	2201      	movs	r2, #1
 800fe1a:	725a      	strb	r2, [r3, #9]
            }

            if( ERR_NONE == ret )
 800fe1c:	8abb      	ldrh	r3, [r7, #20]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10d      	bne.n	800fe3e <rfalSt25tbPollerDoCollisionResolution+0xca>
            {
                rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	461a      	mov	r2, r3
 800fe28:	4613      	mov	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4413      	add	r3, r2
 800fe2e:	005b      	lsls	r3, r3, #1
 800fe30:	461a      	mov	r2, r3
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	4413      	add	r3, r2
 800fe36:	3301      	adds	r3, #1
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 f8fd 	bl	8010038 <rfalSt25tbPollerGetUID>
            }

            if( ERR_NONE == ret )
 800fe3e:	8abb      	ldrh	r3, [r7, #20]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10e      	bne.n	800fe62 <rfalSt25tbPollerDoCollisionResolution+0xee>
            {
                (*devCnt)++;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	701a      	strb	r2, [r3, #0]
 800fe50:	e007      	b.n	800fe62 <rfalSt25tbPollerDoCollisionResolution+0xee>
            }
        }
        else if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800fe52:	8abb      	ldrh	r3, [r7, #20]
 800fe54:	2b15      	cmp	r3, #21
 800fe56:	d002      	beq.n	800fe5e <rfalSt25tbPollerDoCollisionResolution+0xea>
 800fe58:	8abb      	ldrh	r3, [r7, #20]
 800fe5a:	2b09      	cmp	r3, #9
 800fe5c:	d101      	bne.n	800fe62 <rfalSt25tbPollerDoCollisionResolution+0xee>
        {
            col = true;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	74fb      	strb	r3, [r7, #19]
        else
        {
            /* MISRA 15.7 - Empty else */
        }
        
        if( *devCnt >= devLimit )
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	7bfa      	ldrb	r2, [r7, #15]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d906      	bls.n	800fe7a <rfalSt25tbPollerDoCollisionResolution+0x106>
    for(i = 0; i < RFAL_ST25TB_SLOTS; i++)
 800fe6c:	7dfb      	ldrb	r3, [r7, #23]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	75fb      	strb	r3, [r7, #23]
 800fe72:	7dfb      	ldrb	r3, [r7, #23]
 800fe74:	2b0f      	cmp	r3, #15
 800fe76:	d989      	bls.n	800fd8c <rfalSt25tbPollerDoCollisionResolution+0x18>
 800fe78:	e000      	b.n	800fe7c <rfalSt25tbPollerDoCollisionResolution+0x108>
        {
            break;
 800fe7a:	bf00      	nop
        }
    }
    return col;
 800fe7c:	7cfb      	ldrb	r3, [r7, #19]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <rfalSt25tbPollerInitialize>:
******************************************************************************
*/

/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitialize( void )
{
 800fe86:	b580      	push	{r7, lr}
 800fe88:	af00      	add	r7, sp, #0
    return rfalNfcbPollerInitialize();
 800fe8a:	f7fc fc3b 	bl	800c704 <rfalNfcbPollerInitialize>
 800fe8e:	4603      	mov	r3, r0
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <rfalSt25tbPollerCheckPresence>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCheckPresence( uint8_t *chipId )
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
    ReturnCode ret;
    uint8_t    chipIdRes;

    chipIdRes = 0x00;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	737b      	strb	r3, [r7, #13]
   
    /* Send Initiate Request */
    ret = rfalSt25tbPollerInitiate( &chipIdRes );
 800fea0:	f107 030d 	add.w	r3, r7, #13
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 f815 	bl	800fed4 <rfalSt25tbPollerInitiate>
 800feaa:	4603      	mov	r3, r0
 800feac:	81fb      	strh	r3, [r7, #14]
    
    /*  Check if a transmission error was detected */
    if( (ret == ERR_CRC) || (ret == ERR_FRAMING) )
 800feae:	89fb      	ldrh	r3, [r7, #14]
 800feb0:	2b15      	cmp	r3, #21
 800feb2:	d002      	beq.n	800feba <rfalSt25tbPollerCheckPresence+0x26>
 800feb4:	89fb      	ldrh	r3, [r7, #14]
 800feb6:	2b09      	cmp	r3, #9
 800feb8:	d101      	bne.n	800febe <rfalSt25tbPollerCheckPresence+0x2a>
    {
        return ERR_NONE;
 800feba:	2300      	movs	r3, #0
 800febc:	e006      	b.n	800fecc <rfalSt25tbPollerCheckPresence+0x38>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d002      	beq.n	800feca <rfalSt25tbPollerCheckPresence+0x36>
    {
        *chipId = chipIdRes;
 800fec4:	7b7a      	ldrb	r2, [r7, #13]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 800feca:	89fb      	ldrh	r3, [r7, #14]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <rfalSt25tbPollerInitiate>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerInitiate( uint8_t *chipId )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b08a      	sub	sp, #40	; 0x28
 800fed8:	af04      	add	r7, sp, #16
 800feda:	6078      	str	r0, [r7, #4]
    uint16_t              rxLen;
    rfalSt25tbInitiateReq initiateReq;
    uint8_t               rxBuf[RFAL_ST25TB_CHIP_ID_LEN + RFAL_ST25TB_CRC_LEN]; /* In case we receive less data that CRC, RF layer will not remove the CRC from buffer */
    
    /* Compute Initiate Request */
    initiateReq.cmd1   = RFAL_ST25TB_INITIATE_CMD1;
 800fedc:	2306      	movs	r3, #6
 800fede:	743b      	strb	r3, [r7, #16]
    initiateReq.cmd2   = RFAL_ST25TB_INITIATE_CMD2;
 800fee0:	2300      	movs	r3, #0
 800fee2:	747b      	strb	r3, [r7, #17]
    
    /* Send Initiate Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&initiateReq, sizeof(rfalSt25tbInitiateReq), (uint8_t*)rxBuf, sizeof(rxBuf), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800fee4:	f107 020c 	add.w	r2, r7, #12
 800fee8:	f107 0010 	add.w	r0, r7, #16
 800feec:	f241 036d 	movw	r3, #4205	; 0x106d
 800fef0:	9302      	str	r3, [sp, #8]
 800fef2:	2300      	movs	r3, #0
 800fef4:	9301      	str	r3, [sp, #4]
 800fef6:	f107 0314 	add.w	r3, r7, #20
 800fefa:	9300      	str	r3, [sp, #0]
 800fefc:	2303      	movs	r3, #3
 800fefe:	2102      	movs	r1, #2
 800ff00:	f7fe f9d2 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800ff04:	4603      	mov	r3, r0
 800ff06:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800ff08:	8afb      	ldrh	r3, [r7, #22]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d104      	bne.n	800ff18 <rfalSt25tbPollerInitiate+0x44>
 800ff0e:	8abb      	ldrh	r3, [r7, #20]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d001      	beq.n	800ff18 <rfalSt25tbPollerInitiate+0x44>
    {
        return ERR_PROTO;
 800ff14:	230b      	movs	r3, #11
 800ff16:	e006      	b.n	800ff26 <rfalSt25tbPollerInitiate+0x52>
    }
    
    /* Copy chip ID if requested */
    if( chipId != NULL )
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d002      	beq.n	800ff24 <rfalSt25tbPollerInitiate+0x50>
    {
        *chipId = *rxBuf;
 800ff1e:	7b3a      	ldrb	r2, [r7, #12]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	701a      	strb	r2, [r3, #0]
    }
    
    return ret;
 800ff24:	8afb      	ldrh	r3, [r7, #22]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <rfalSt25tbPollerPcall>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerPcall( uint8_t *chipId )
{
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b088      	sub	sp, #32
 800ff32:	af04      	add	r7, sp, #16
 800ff34:	6078      	str	r0, [r7, #4]
    ReturnCode         ret;
    uint16_t           rxLen;
    rfalSt25tbPcallReq pcallReq;

    /* Compute Pcal16 Request */
    pcallReq.cmd1   = RFAL_ST25TB_PCALL_CMD1;
 800ff36:	2306      	movs	r3, #6
 800ff38:	723b      	strb	r3, [r7, #8]
    pcallReq.cmd2   = RFAL_ST25TB_PCALL_CMD2;
 800ff3a:	2304      	movs	r3, #4
 800ff3c:	727b      	strb	r3, [r7, #9]
    
    /* Send Pcal16 Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&pcallReq, sizeof(rfalSt25tbPcallReq), (uint8_t*)chipId, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800ff3e:	f107 0008 	add.w	r0, r7, #8
 800ff42:	f241 036d 	movw	r3, #4205	; 0x106d
 800ff46:	9302      	str	r3, [sp, #8]
 800ff48:	2300      	movs	r3, #0
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	f107 030c 	add.w	r3, r7, #12
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	2301      	movs	r3, #1
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	2102      	movs	r1, #2
 800ff58:	f7fe f9a6 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800ff60:	89fb      	ldrh	r3, [r7, #14]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d104      	bne.n	800ff70 <rfalSt25tbPollerPcall+0x42>
 800ff66:	89bb      	ldrh	r3, [r7, #12]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d001      	beq.n	800ff70 <rfalSt25tbPollerPcall+0x42>
    {
        return ERR_PROTO;
 800ff6c:	230b      	movs	r3, #11
 800ff6e:	e000      	b.n	800ff72 <rfalSt25tbPollerPcall+0x44>
    }
    
    return ret;
 800ff70:	89fb      	ldrh	r3, [r7, #14]
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}

0800ff7a <rfalSt25tbPollerSlotMarker>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSlotMarker( uint8_t slotNum, uint8_t *chipIdRes )
{
 800ff7a:	b580      	push	{r7, lr}
 800ff7c:	b088      	sub	sp, #32
 800ff7e:	af04      	add	r7, sp, #16
 800ff80:	4603      	mov	r3, r0
 800ff82:	6039      	str	r1, [r7, #0]
 800ff84:	71fb      	strb	r3, [r7, #7]
    ReturnCode ret;
    uint16_t   rxLen;
    uint8_t    slotMarker;

    if( (slotNum == 0U) || (slotNum > 15U) )
 800ff86:	79fb      	ldrb	r3, [r7, #7]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <rfalSt25tbPollerSlotMarker+0x18>
 800ff8c:	79fb      	ldrb	r3, [r7, #7]
 800ff8e:	2b0f      	cmp	r3, #15
 800ff90:	d901      	bls.n	800ff96 <rfalSt25tbPollerSlotMarker+0x1c>
    {
        return ERR_PARAM;
 800ff92:	2307      	movs	r3, #7
 800ff94:	e020      	b.n	800ffd8 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    /* Compute SlotMarker */
    slotMarker = ( ((slotNum & RFAL_ST25TB_SLOTNUM_MASK) << RFAL_ST25TB_SLOTNUM_SHIFT) | RFAL_ST25TB_PCALL_CMD1 );
 800ff96:	79fb      	ldrb	r3, [r7, #7]
 800ff98:	011b      	lsls	r3, r3, #4
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	f043 0306 	orr.w	r3, r3, #6
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	72fb      	strb	r3, [r7, #11]
    
    
    /* Send SlotMarker */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&slotMarker, RFAL_ST25TB_CMD_LEN, (uint8_t*)chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800ffa4:	f107 000b 	add.w	r0, r7, #11
 800ffa8:	f241 036d 	movw	r3, #4205	; 0x106d
 800ffac:	9302      	str	r3, [sp, #8]
 800ffae:	2300      	movs	r3, #0
 800ffb0:	9301      	str	r3, [sp, #4]
 800ffb2:	f107 030c 	add.w	r3, r7, #12
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	2301      	movs	r3, #1
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	f7fe f973 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid ChipID Response   */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_CHIP_ID_LEN) )
 800ffc6:	89fb      	ldrh	r3, [r7, #14]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d104      	bne.n	800ffd6 <rfalSt25tbPollerSlotMarker+0x5c>
 800ffcc:	89bb      	ldrh	r3, [r7, #12]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d001      	beq.n	800ffd6 <rfalSt25tbPollerSlotMarker+0x5c>
    {
        return ERR_PROTO;
 800ffd2:	230b      	movs	r3, #11
 800ffd4:	e000      	b.n	800ffd8 <rfalSt25tbPollerSlotMarker+0x5e>
    }
    
    return ret;
 800ffd6:	89fb      	ldrh	r3, [r7, #14]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3710      	adds	r7, #16
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <rfalSt25tbPollerSelect>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerSelect( uint8_t chipId )
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b08a      	sub	sp, #40	; 0x28
 800ffe4:	af04      	add	r7, sp, #16
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	71fb      	strb	r3, [r7, #7]
    uint16_t            rxLen;    
    rfalSt25tbSelectReq selectReq;
    uint8_t             chipIdRes;

    /* Compute Select Request */
    selectReq.cmd    = RFAL_ST25TB_SELECT_CMD;
 800ffea:	230e      	movs	r3, #14
 800ffec:	743b      	strb	r3, [r7, #16]
    selectReq.chipId = chipId;
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	747b      	strb	r3, [r7, #17]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&selectReq, sizeof(rfalSt25tbSelectReq), (uint8_t*)&chipIdRes, RFAL_ST25TB_CHIP_ID_LEN, &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 800fff2:	f107 020f 	add.w	r2, r7, #15
 800fff6:	f107 0010 	add.w	r0, r7, #16
 800fffa:	f241 036d 	movw	r3, #4205	; 0x106d
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	2300      	movs	r3, #0
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	f107 0314 	add.w	r3, r7, #20
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	2301      	movs	r3, #1
 801000c:	2102      	movs	r1, #2
 801000e:	f7fe f94b 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 8010012:	4603      	mov	r3, r0
 8010014:	82fb      	strh	r3, [r7, #22]
    
    /* Check for valid Select Response   */
    if( (ret == ERR_NONE) && ((rxLen != RFAL_ST25TB_CHIP_ID_LEN) || (chipIdRes != chipId)) )
 8010016:	8afb      	ldrh	r3, [r7, #22]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d108      	bne.n	801002e <rfalSt25tbPollerSelect+0x4e>
 801001c:	8abb      	ldrh	r3, [r7, #20]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d103      	bne.n	801002a <rfalSt25tbPollerSelect+0x4a>
 8010022:	7bfb      	ldrb	r3, [r7, #15]
 8010024:	79fa      	ldrb	r2, [r7, #7]
 8010026:	429a      	cmp	r2, r3
 8010028:	d001      	beq.n	801002e <rfalSt25tbPollerSelect+0x4e>
    {
        return ERR_PROTO;
 801002a:	230b      	movs	r3, #11
 801002c:	e000      	b.n	8010030 <rfalSt25tbPollerSelect+0x50>
    }
    
    return ret;
 801002e:	8afb      	ldrh	r3, [r7, #22]
}
 8010030:	4618      	mov	r0, r3
 8010032:	3718      	adds	r7, #24
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <rfalSt25tbPollerGetUID>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerGetUID( rfalSt25tbUID *UID )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af04      	add	r7, sp, #16
 801003e:	6078      	str	r0, [r7, #4]
    uint16_t   rxLen;
    uint8_t    getUidReq;
    

    /* Compute Get UID Request */
    getUidReq = RFAL_ST25TB_GET_UID_CMD;
 8010040:	230b      	movs	r3, #11
 8010042:	72fb      	strb	r3, [r7, #11]
    
    /* Send Select Request */
    ret = rfalTransceiveBlockingTxRx( (uint8_t*)&getUidReq, RFAL_ST25TB_CMD_LEN, (uint8_t*)UID, sizeof(rfalSt25tbUID), &rxLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_ST25TB_FWT );
 8010044:	f107 000b 	add.w	r0, r7, #11
 8010048:	f241 036d 	movw	r3, #4205	; 0x106d
 801004c:	9302      	str	r3, [sp, #8]
 801004e:	2300      	movs	r3, #0
 8010050:	9301      	str	r3, [sp, #4]
 8010052:	f107 030c 	add.w	r3, r7, #12
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	2308      	movs	r3, #8
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	2101      	movs	r1, #1
 801005e:	f7fe f923 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 8010062:	4603      	mov	r3, r0
 8010064:	81fb      	strh	r3, [r7, #14]
    
    /* Check for valid UID Response */
    if( (ret == ERR_NONE) && (rxLen != RFAL_ST25TB_UID_LEN) )
 8010066:	89fb      	ldrh	r3, [r7, #14]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d104      	bne.n	8010076 <rfalSt25tbPollerGetUID+0x3e>
 801006c:	89bb      	ldrh	r3, [r7, #12]
 801006e:	2b08      	cmp	r3, #8
 8010070:	d001      	beq.n	8010076 <rfalSt25tbPollerGetUID+0x3e>
    {
        return ERR_PROTO;
 8010072:	230b      	movs	r3, #11
 8010074:	e000      	b.n	8010078 <rfalSt25tbPollerGetUID+0x40>
    }
    
    return ret;
 8010076:	89fb      	ldrh	r3, [r7, #14]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <rfalSt25tbPollerCollisionResolution>:


/*******************************************************************************/
ReturnCode rfalSt25tbPollerCollisionResolution( uint8_t devLimit, rfalSt25tbListenDevice *st25tbDevList, uint8_t *devCnt )
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	4603      	mov	r3, r0
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
 801008c:	73fb      	strb	r3, [r7, #15]
    
    uint8_t    chipId;
    ReturnCode ret;
    bool       detected;  /* collision or device was detected */
    
    if( (st25tbDevList == NULL) || (devCnt == NULL) || (devLimit == 0U) )
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d005      	beq.n	80100a0 <rfalSt25tbPollerCollisionResolution+0x20>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d002      	beq.n	80100a0 <rfalSt25tbPollerCollisionResolution+0x20>
 801009a:	7bfb      	ldrb	r3, [r7, #15]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <rfalSt25tbPollerCollisionResolution+0x24>
    {
        return ERR_PARAM;
 80100a0:	2307      	movs	r3, #7
 80100a2:	e05c      	b.n	801015e <rfalSt25tbPollerCollisionResolution+0xde>
    }
    
    *devCnt = 0;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
    
    /* Step 1: Send Initiate */
    ret = rfalSt25tbPollerInitiate( &chipId );
 80100aa:	f107 0314 	add.w	r3, r7, #20
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7ff ff10 	bl	800fed4 <rfalSt25tbPollerInitiate>
 80100b4:	4603      	mov	r3, r0
 80100b6:	82fb      	strh	r3, [r7, #22]
    if( ret == ERR_NONE )
 80100b8:	8afb      	ldrh	r3, [r7, #22]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d139      	bne.n	8010132 <rfalSt25tbPollerCollisionResolution+0xb2>
    {
        /* If only 1 answer is detected */
        st25tbDevList[*devCnt].chipID       = chipId;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	4613      	mov	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	4413      	add	r3, r2
 80100ca:	005b      	lsls	r3, r3, #1
 80100cc:	461a      	mov	r2, r3
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	4413      	add	r3, r2
 80100d2:	7d3a      	ldrb	r2, [r7, #20]
 80100d4:	701a      	strb	r2, [r3, #0]
        st25tbDevList[*devCnt].isDeselected = false;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	4613      	mov	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4413      	add	r3, r2
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	461a      	mov	r2, r3
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	4413      	add	r3, r2
 80100ea:	2200      	movs	r2, #0
 80100ec:	725a      	strb	r2, [r3, #9]
        
        /* Retrieve its UID and keep it Selected*/
        ret = rfalSt25tbPollerSelect( chipId );
 80100ee:	7d3b      	ldrb	r3, [r7, #20]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff ff75 	bl	800ffe0 <rfalSt25tbPollerSelect>
 80100f6:	4603      	mov	r3, r0
 80100f8:	82fb      	strh	r3, [r7, #22]
        
        if( ERR_NONE == ret )
 80100fa:	8afb      	ldrh	r3, [r7, #22]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10f      	bne.n	8010120 <rfalSt25tbPollerCollisionResolution+0xa0>
        {
            ret = rfalSt25tbPollerGetUID( &st25tbDevList[*devCnt].UID );
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	4613      	mov	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4413      	add	r3, r2
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	461a      	mov	r2, r3
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	4413      	add	r3, r2
 8010114:	3301      	adds	r3, #1
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff ff8e 	bl	8010038 <rfalSt25tbPollerGetUID>
 801011c:	4603      	mov	r3, r0
 801011e:	82fb      	strh	r3, [r7, #22]
        }
        
        if( ERR_NONE == ret )
 8010120:	8afb      	ldrh	r3, [r7, #22]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d105      	bne.n	8010132 <rfalSt25tbPollerCollisionResolution+0xb2>
        {
            (*devCnt)++;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	3301      	adds	r3, #1
 801012c:	b2da      	uxtb	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	701a      	strb	r2, [r3, #0]
        }
    }
    /* Always proceed to Pcall16 anticollision as phase differences of tags can lead to no tag recognized, even if there is one */
    if( *devCnt < devLimit )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	7bfa      	ldrb	r2, [r7, #15]
 8010138:	429a      	cmp	r2, r3
 801013a:	d90f      	bls.n	801015c <rfalSt25tbPollerCollisionResolution+0xdc>
    {
        /* Multiple device responses */
        do
        {
            detected = rfalSt25tbPollerDoCollisionResolution( devLimit, st25tbDevList, devCnt );
 801013c:	7bfb      	ldrb	r3, [r7, #15]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	68b9      	ldr	r1, [r7, #8]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fe16 	bl	800fd74 <rfalSt25tbPollerDoCollisionResolution>
 8010148:	4603      	mov	r3, r0
 801014a:	757b      	strb	r3, [r7, #21]
        }
        while( (detected == true) && (*devCnt < devLimit) );
 801014c:	7d7b      	ldrb	r3, [r7, #21]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d004      	beq.n	801015c <rfalSt25tbPollerCollisionResolution+0xdc>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	7bfa      	ldrb	r2, [r7, #15]
 8010158:	429a      	cmp	r2, r3
 801015a:	d8ef      	bhi.n	801013c <rfalSt25tbPollerCollisionResolution+0xbc>
    }

    return ERR_NONE;
 801015c:	2300      	movs	r3, #0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <rfalT1TPollerInitialize>:
* GLOBAL FUNCTIONS
******************************************************************************
*/

ReturnCode rfalT1TPollerInitialize( void )
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
    ReturnCode ret;
    
    EXIT_ON_ERR(ret, rfalSetMode( RFAL_MODE_POLL_NFCA_T1T, RFAL_BR_106, RFAL_BR_106 ) );
 801016c:	2200      	movs	r2, #0
 801016e:	2100      	movs	r1, #0
 8010170:	2002      	movs	r0, #2
 8010172:	f7fd fa65 	bl	800d640 <rfalSetMode>
 8010176:	4603      	mov	r3, r0
 8010178:	80fb      	strh	r3, [r7, #6]
 801017a:	88fb      	ldrh	r3, [r7, #6]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d001      	beq.n	8010184 <rfalT1TPollerInitialize+0x1e>
 8010180:	88fb      	ldrh	r3, [r7, #6]
 8010182:	e00e      	b.n	80101a2 <rfalT1TPollerInitialize+0x3c>
    rfalSetErrorHandling( RFAL_ERRORHANDLING_NFC );
 8010184:	2001      	movs	r0, #1
 8010186:	f7fd fdf5 	bl	800dd74 <rfalSetErrorHandling>
    
    rfalSetGT( RFAL_GT_NONE );                          /* T1T should only be initialized after NFC-A mode, therefore the GT has been fulfilled */ 
 801018a:	2000      	movs	r0, #0
 801018c:	f7fd fe2c 	bl	800dde8 <rfalSetGT>
    rfalSetFDTListen( RFAL_FDT_LISTEN_NFCA_POLLER );    /* T1T uses NFC-A FDT Listen with n=9   Digital 1.1  10.7.2                             */
 8010190:	f240 4094 	movw	r0, #1172	; 0x494
 8010194:	f7fd fe14 	bl	800ddc0 <rfalSetFDTListen>
    rfalSetFDTPoll( RFAL_FDT_POLL_NFCA_T1T_POLLER );
 8010198:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801019c:	f7fd fdfa 	bl	800dd94 <rfalSetFDTPoll>
    
    return ERR_NONE;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <rfalT1TPollerRid>:


/*******************************************************************************/
ReturnCode rfalT1TPollerRid( rfalT1TRidRes *ridRes )
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b08a      	sub	sp, #40	; 0x28
 80101ae:	af04      	add	r7, sp, #16
 80101b0:	6078      	str	r0, [r7, #4]
    ReturnCode     ret;
    rfalT1TRidReq  ridReq;
    uint16_t       rcvdLen;
    
    if( ridRes == NULL )
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <rfalT1TPollerRid+0x12>
    {
        return ERR_PARAM;
 80101b8:	2307      	movs	r3, #7
 80101ba:	e02a      	b.n	8010212 <rfalT1TPollerRid+0x68>
    }
    
    /* Compute RID command and set Undefined Values to 0x00    Digital 1.1 10.6.1 */
    ST_MEMSET( &ridReq, 0x00, sizeof(rfalT1TRidReq) );
 80101bc:	f107 030c 	add.w	r3, r7, #12
 80101c0:	2207      	movs	r2, #7
 80101c2:	2100      	movs	r1, #0
 80101c4:	4618      	mov	r0, r3
 80101c6:	f000 f886 	bl	80102d6 <memset>
    ridReq.cmd = (uint8_t)RFAL_T1T_CMD_RID;
 80101ca:	2378      	movs	r3, #120	; 0x78
 80101cc:	733b      	strb	r3, [r7, #12]
    
    EXIT_ON_ERR( ret, rfalTransceiveBlockingTxRx( (uint8_t*)&ridReq, sizeof(rfalT1TRidReq), (uint8_t*)ridRes, sizeof(rfalT1TRidRes), &rcvdLen, RFAL_TXRX_FLAGS_DEFAULT, RFAL_T1T_DRD_READ ) );
 80101ce:	f107 000c 	add.w	r0, r7, #12
 80101d2:	f640 13a8 	movw	r3, #2472	; 0x9a8
 80101d6:	9302      	str	r3, [sp, #8]
 80101d8:	2300      	movs	r3, #0
 80101da:	9301      	str	r3, [sp, #4]
 80101dc:	f107 030a 	add.w	r3, r7, #10
 80101e0:	9300      	str	r3, [sp, #0]
 80101e2:	2306      	movs	r3, #6
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	2107      	movs	r1, #7
 80101e8:	f7fe f85e 	bl	800e2a8 <rfalTransceiveBlockingTxRx>
 80101ec:	4603      	mov	r3, r0
 80101ee:	82fb      	strh	r3, [r7, #22]
 80101f0:	8afb      	ldrh	r3, [r7, #22]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d001      	beq.n	80101fa <rfalT1TPollerRid+0x50>
 80101f6:	8afb      	ldrh	r3, [r7, #22]
 80101f8:	e00b      	b.n	8010212 <rfalT1TPollerRid+0x68>
    
    /* Check expected RID response length and the HR0   Digital 2.0 (Candidate) 11.6.2.1 */
    if( (rcvdLen != sizeof(rfalT1TRidRes)) || ((ridRes->hr0 & RFAL_T1T_RID_RES_HR0_MASK) != RFAL_T1T_RID_RES_HR0_VAL) )
 80101fa:	897b      	ldrh	r3, [r7, #10]
 80101fc:	2b06      	cmp	r3, #6
 80101fe:	d105      	bne.n	801020c <rfalT1TPollerRid+0x62>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010208:	2b10      	cmp	r3, #16
 801020a:	d001      	beq.n	8010210 <rfalT1TPollerRid+0x66>
    {
        return ERR_PROTO;
 801020c:	230b      	movs	r3, #11
 801020e:	e000      	b.n	8010212 <rfalT1TPollerRid+0x68>
    }
    
    return ERR_NONE;
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3718      	adds	r7, #24
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
	...

0801021c <__errno>:
 801021c:	4b01      	ldr	r3, [pc, #4]	; (8010224 <__errno+0x8>)
 801021e:	6818      	ldr	r0, [r3, #0]
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	20000038 	.word	0x20000038

08010228 <__libc_init_array>:
 8010228:	b570      	push	{r4, r5, r6, lr}
 801022a:	4e0d      	ldr	r6, [pc, #52]	; (8010260 <__libc_init_array+0x38>)
 801022c:	4c0d      	ldr	r4, [pc, #52]	; (8010264 <__libc_init_array+0x3c>)
 801022e:	1ba4      	subs	r4, r4, r6
 8010230:	10a4      	asrs	r4, r4, #2
 8010232:	2500      	movs	r5, #0
 8010234:	42a5      	cmp	r5, r4
 8010236:	d109      	bne.n	801024c <__libc_init_array+0x24>
 8010238:	4e0b      	ldr	r6, [pc, #44]	; (8010268 <__libc_init_array+0x40>)
 801023a:	4c0c      	ldr	r4, [pc, #48]	; (801026c <__libc_init_array+0x44>)
 801023c:	f000 fffe 	bl	801123c <_init>
 8010240:	1ba4      	subs	r4, r4, r6
 8010242:	10a4      	asrs	r4, r4, #2
 8010244:	2500      	movs	r5, #0
 8010246:	42a5      	cmp	r5, r4
 8010248:	d105      	bne.n	8010256 <__libc_init_array+0x2e>
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010250:	4798      	blx	r3
 8010252:	3501      	adds	r5, #1
 8010254:	e7ee      	b.n	8010234 <__libc_init_array+0xc>
 8010256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801025a:	4798      	blx	r3
 801025c:	3501      	adds	r5, #1
 801025e:	e7f2      	b.n	8010246 <__libc_init_array+0x1e>
 8010260:	080117ac 	.word	0x080117ac
 8010264:	080117ac 	.word	0x080117ac
 8010268:	080117ac 	.word	0x080117ac
 801026c:	080117b0 	.word	0x080117b0

08010270 <memcmp>:
 8010270:	b530      	push	{r4, r5, lr}
 8010272:	2400      	movs	r4, #0
 8010274:	42a2      	cmp	r2, r4
 8010276:	d101      	bne.n	801027c <memcmp+0xc>
 8010278:	2000      	movs	r0, #0
 801027a:	e007      	b.n	801028c <memcmp+0x1c>
 801027c:	5d03      	ldrb	r3, [r0, r4]
 801027e:	3401      	adds	r4, #1
 8010280:	190d      	adds	r5, r1, r4
 8010282:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010286:	42ab      	cmp	r3, r5
 8010288:	d0f4      	beq.n	8010274 <memcmp+0x4>
 801028a:	1b58      	subs	r0, r3, r5
 801028c:	bd30      	pop	{r4, r5, pc}

0801028e <memcpy>:
 801028e:	b510      	push	{r4, lr}
 8010290:	1e43      	subs	r3, r0, #1
 8010292:	440a      	add	r2, r1
 8010294:	4291      	cmp	r1, r2
 8010296:	d100      	bne.n	801029a <memcpy+0xc>
 8010298:	bd10      	pop	{r4, pc}
 801029a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801029e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102a2:	e7f7      	b.n	8010294 <memcpy+0x6>

080102a4 <memmove>:
 80102a4:	4288      	cmp	r0, r1
 80102a6:	b510      	push	{r4, lr}
 80102a8:	eb01 0302 	add.w	r3, r1, r2
 80102ac:	d807      	bhi.n	80102be <memmove+0x1a>
 80102ae:	1e42      	subs	r2, r0, #1
 80102b0:	4299      	cmp	r1, r3
 80102b2:	d00a      	beq.n	80102ca <memmove+0x26>
 80102b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80102bc:	e7f8      	b.n	80102b0 <memmove+0xc>
 80102be:	4283      	cmp	r3, r0
 80102c0:	d9f5      	bls.n	80102ae <memmove+0xa>
 80102c2:	1881      	adds	r1, r0, r2
 80102c4:	1ad2      	subs	r2, r2, r3
 80102c6:	42d3      	cmn	r3, r2
 80102c8:	d100      	bne.n	80102cc <memmove+0x28>
 80102ca:	bd10      	pop	{r4, pc}
 80102cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80102d4:	e7f7      	b.n	80102c6 <memmove+0x22>

080102d6 <memset>:
 80102d6:	4402      	add	r2, r0
 80102d8:	4603      	mov	r3, r0
 80102da:	4293      	cmp	r3, r2
 80102dc:	d100      	bne.n	80102e0 <memset+0xa>
 80102de:	4770      	bx	lr
 80102e0:	f803 1b01 	strb.w	r1, [r3], #1
 80102e4:	e7f9      	b.n	80102da <memset+0x4>
	...

080102e8 <_puts_r>:
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	460e      	mov	r6, r1
 80102ec:	4605      	mov	r5, r0
 80102ee:	b118      	cbz	r0, 80102f8 <_puts_r+0x10>
 80102f0:	6983      	ldr	r3, [r0, #24]
 80102f2:	b90b      	cbnz	r3, 80102f8 <_puts_r+0x10>
 80102f4:	f000 fa46 	bl	8010784 <__sinit>
 80102f8:	69ab      	ldr	r3, [r5, #24]
 80102fa:	68ac      	ldr	r4, [r5, #8]
 80102fc:	b913      	cbnz	r3, 8010304 <_puts_r+0x1c>
 80102fe:	4628      	mov	r0, r5
 8010300:	f000 fa40 	bl	8010784 <__sinit>
 8010304:	4b23      	ldr	r3, [pc, #140]	; (8010394 <_puts_r+0xac>)
 8010306:	429c      	cmp	r4, r3
 8010308:	d117      	bne.n	801033a <_puts_r+0x52>
 801030a:	686c      	ldr	r4, [r5, #4]
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	071b      	lsls	r3, r3, #28
 8010310:	d51d      	bpl.n	801034e <_puts_r+0x66>
 8010312:	6923      	ldr	r3, [r4, #16]
 8010314:	b1db      	cbz	r3, 801034e <_puts_r+0x66>
 8010316:	3e01      	subs	r6, #1
 8010318:	68a3      	ldr	r3, [r4, #8]
 801031a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801031e:	3b01      	subs	r3, #1
 8010320:	60a3      	str	r3, [r4, #8]
 8010322:	b9e9      	cbnz	r1, 8010360 <_puts_r+0x78>
 8010324:	2b00      	cmp	r3, #0
 8010326:	da2e      	bge.n	8010386 <_puts_r+0x9e>
 8010328:	4622      	mov	r2, r4
 801032a:	210a      	movs	r1, #10
 801032c:	4628      	mov	r0, r5
 801032e:	f000 f879 	bl	8010424 <__swbuf_r>
 8010332:	3001      	adds	r0, #1
 8010334:	d011      	beq.n	801035a <_puts_r+0x72>
 8010336:	200a      	movs	r0, #10
 8010338:	e011      	b.n	801035e <_puts_r+0x76>
 801033a:	4b17      	ldr	r3, [pc, #92]	; (8010398 <_puts_r+0xb0>)
 801033c:	429c      	cmp	r4, r3
 801033e:	d101      	bne.n	8010344 <_puts_r+0x5c>
 8010340:	68ac      	ldr	r4, [r5, #8]
 8010342:	e7e3      	b.n	801030c <_puts_r+0x24>
 8010344:	4b15      	ldr	r3, [pc, #84]	; (801039c <_puts_r+0xb4>)
 8010346:	429c      	cmp	r4, r3
 8010348:	bf08      	it	eq
 801034a:	68ec      	ldreq	r4, [r5, #12]
 801034c:	e7de      	b.n	801030c <_puts_r+0x24>
 801034e:	4621      	mov	r1, r4
 8010350:	4628      	mov	r0, r5
 8010352:	f000 f8b9 	bl	80104c8 <__swsetup_r>
 8010356:	2800      	cmp	r0, #0
 8010358:	d0dd      	beq.n	8010316 <_puts_r+0x2e>
 801035a:	f04f 30ff 	mov.w	r0, #4294967295
 801035e:	bd70      	pop	{r4, r5, r6, pc}
 8010360:	2b00      	cmp	r3, #0
 8010362:	da04      	bge.n	801036e <_puts_r+0x86>
 8010364:	69a2      	ldr	r2, [r4, #24]
 8010366:	429a      	cmp	r2, r3
 8010368:	dc06      	bgt.n	8010378 <_puts_r+0x90>
 801036a:	290a      	cmp	r1, #10
 801036c:	d004      	beq.n	8010378 <_puts_r+0x90>
 801036e:	6823      	ldr	r3, [r4, #0]
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	6022      	str	r2, [r4, #0]
 8010374:	7019      	strb	r1, [r3, #0]
 8010376:	e7cf      	b.n	8010318 <_puts_r+0x30>
 8010378:	4622      	mov	r2, r4
 801037a:	4628      	mov	r0, r5
 801037c:	f000 f852 	bl	8010424 <__swbuf_r>
 8010380:	3001      	adds	r0, #1
 8010382:	d1c9      	bne.n	8010318 <_puts_r+0x30>
 8010384:	e7e9      	b.n	801035a <_puts_r+0x72>
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	200a      	movs	r0, #10
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	6022      	str	r2, [r4, #0]
 801038e:	7018      	strb	r0, [r3, #0]
 8010390:	e7e5      	b.n	801035e <_puts_r+0x76>
 8010392:	bf00      	nop
 8010394:	08011730 	.word	0x08011730
 8010398:	08011750 	.word	0x08011750
 801039c:	08011710 	.word	0x08011710

080103a0 <puts>:
 80103a0:	4b02      	ldr	r3, [pc, #8]	; (80103ac <puts+0xc>)
 80103a2:	4601      	mov	r1, r0
 80103a4:	6818      	ldr	r0, [r3, #0]
 80103a6:	f7ff bf9f 	b.w	80102e8 <_puts_r>
 80103aa:	bf00      	nop
 80103ac:	20000038 	.word	0x20000038

080103b0 <_vsniprintf_r>:
 80103b0:	b530      	push	{r4, r5, lr}
 80103b2:	1e14      	subs	r4, r2, #0
 80103b4:	4605      	mov	r5, r0
 80103b6:	b09b      	sub	sp, #108	; 0x6c
 80103b8:	4618      	mov	r0, r3
 80103ba:	da05      	bge.n	80103c8 <_vsniprintf_r+0x18>
 80103bc:	238b      	movs	r3, #139	; 0x8b
 80103be:	602b      	str	r3, [r5, #0]
 80103c0:	f04f 30ff 	mov.w	r0, #4294967295
 80103c4:	b01b      	add	sp, #108	; 0x6c
 80103c6:	bd30      	pop	{r4, r5, pc}
 80103c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80103cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80103d0:	bf14      	ite	ne
 80103d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80103d6:	4623      	moveq	r3, r4
 80103d8:	9302      	str	r3, [sp, #8]
 80103da:	9305      	str	r3, [sp, #20]
 80103dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103e0:	9100      	str	r1, [sp, #0]
 80103e2:	9104      	str	r1, [sp, #16]
 80103e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80103e8:	4602      	mov	r2, r0
 80103ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80103ec:	4669      	mov	r1, sp
 80103ee:	4628      	mov	r0, r5
 80103f0:	f000 fbb8 	bl	8010b64 <_svfiprintf_r>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	bfbc      	itt	lt
 80103f8:	238b      	movlt	r3, #139	; 0x8b
 80103fa:	602b      	strlt	r3, [r5, #0]
 80103fc:	2c00      	cmp	r4, #0
 80103fe:	d0e1      	beq.n	80103c4 <_vsniprintf_r+0x14>
 8010400:	9b00      	ldr	r3, [sp, #0]
 8010402:	2200      	movs	r2, #0
 8010404:	701a      	strb	r2, [r3, #0]
 8010406:	e7dd      	b.n	80103c4 <_vsniprintf_r+0x14>

08010408 <vsniprintf>:
 8010408:	b507      	push	{r0, r1, r2, lr}
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	4613      	mov	r3, r2
 801040e:	460a      	mov	r2, r1
 8010410:	4601      	mov	r1, r0
 8010412:	4803      	ldr	r0, [pc, #12]	; (8010420 <vsniprintf+0x18>)
 8010414:	6800      	ldr	r0, [r0, #0]
 8010416:	f7ff ffcb 	bl	80103b0 <_vsniprintf_r>
 801041a:	b003      	add	sp, #12
 801041c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010420:	20000038 	.word	0x20000038

08010424 <__swbuf_r>:
 8010424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010426:	460e      	mov	r6, r1
 8010428:	4614      	mov	r4, r2
 801042a:	4605      	mov	r5, r0
 801042c:	b118      	cbz	r0, 8010436 <__swbuf_r+0x12>
 801042e:	6983      	ldr	r3, [r0, #24]
 8010430:	b90b      	cbnz	r3, 8010436 <__swbuf_r+0x12>
 8010432:	f000 f9a7 	bl	8010784 <__sinit>
 8010436:	4b21      	ldr	r3, [pc, #132]	; (80104bc <__swbuf_r+0x98>)
 8010438:	429c      	cmp	r4, r3
 801043a:	d12a      	bne.n	8010492 <__swbuf_r+0x6e>
 801043c:	686c      	ldr	r4, [r5, #4]
 801043e:	69a3      	ldr	r3, [r4, #24]
 8010440:	60a3      	str	r3, [r4, #8]
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	071a      	lsls	r2, r3, #28
 8010446:	d52e      	bpl.n	80104a6 <__swbuf_r+0x82>
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	b363      	cbz	r3, 80104a6 <__swbuf_r+0x82>
 801044c:	6923      	ldr	r3, [r4, #16]
 801044e:	6820      	ldr	r0, [r4, #0]
 8010450:	1ac0      	subs	r0, r0, r3
 8010452:	6963      	ldr	r3, [r4, #20]
 8010454:	b2f6      	uxtb	r6, r6
 8010456:	4283      	cmp	r3, r0
 8010458:	4637      	mov	r7, r6
 801045a:	dc04      	bgt.n	8010466 <__swbuf_r+0x42>
 801045c:	4621      	mov	r1, r4
 801045e:	4628      	mov	r0, r5
 8010460:	f000 f926 	bl	80106b0 <_fflush_r>
 8010464:	bb28      	cbnz	r0, 80104b2 <__swbuf_r+0x8e>
 8010466:	68a3      	ldr	r3, [r4, #8]
 8010468:	3b01      	subs	r3, #1
 801046a:	60a3      	str	r3, [r4, #8]
 801046c:	6823      	ldr	r3, [r4, #0]
 801046e:	1c5a      	adds	r2, r3, #1
 8010470:	6022      	str	r2, [r4, #0]
 8010472:	701e      	strb	r6, [r3, #0]
 8010474:	6963      	ldr	r3, [r4, #20]
 8010476:	3001      	adds	r0, #1
 8010478:	4283      	cmp	r3, r0
 801047a:	d004      	beq.n	8010486 <__swbuf_r+0x62>
 801047c:	89a3      	ldrh	r3, [r4, #12]
 801047e:	07db      	lsls	r3, r3, #31
 8010480:	d519      	bpl.n	80104b6 <__swbuf_r+0x92>
 8010482:	2e0a      	cmp	r6, #10
 8010484:	d117      	bne.n	80104b6 <__swbuf_r+0x92>
 8010486:	4621      	mov	r1, r4
 8010488:	4628      	mov	r0, r5
 801048a:	f000 f911 	bl	80106b0 <_fflush_r>
 801048e:	b190      	cbz	r0, 80104b6 <__swbuf_r+0x92>
 8010490:	e00f      	b.n	80104b2 <__swbuf_r+0x8e>
 8010492:	4b0b      	ldr	r3, [pc, #44]	; (80104c0 <__swbuf_r+0x9c>)
 8010494:	429c      	cmp	r4, r3
 8010496:	d101      	bne.n	801049c <__swbuf_r+0x78>
 8010498:	68ac      	ldr	r4, [r5, #8]
 801049a:	e7d0      	b.n	801043e <__swbuf_r+0x1a>
 801049c:	4b09      	ldr	r3, [pc, #36]	; (80104c4 <__swbuf_r+0xa0>)
 801049e:	429c      	cmp	r4, r3
 80104a0:	bf08      	it	eq
 80104a2:	68ec      	ldreq	r4, [r5, #12]
 80104a4:	e7cb      	b.n	801043e <__swbuf_r+0x1a>
 80104a6:	4621      	mov	r1, r4
 80104a8:	4628      	mov	r0, r5
 80104aa:	f000 f80d 	bl	80104c8 <__swsetup_r>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d0cc      	beq.n	801044c <__swbuf_r+0x28>
 80104b2:	f04f 37ff 	mov.w	r7, #4294967295
 80104b6:	4638      	mov	r0, r7
 80104b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ba:	bf00      	nop
 80104bc:	08011730 	.word	0x08011730
 80104c0:	08011750 	.word	0x08011750
 80104c4:	08011710 	.word	0x08011710

080104c8 <__swsetup_r>:
 80104c8:	4b32      	ldr	r3, [pc, #200]	; (8010594 <__swsetup_r+0xcc>)
 80104ca:	b570      	push	{r4, r5, r6, lr}
 80104cc:	681d      	ldr	r5, [r3, #0]
 80104ce:	4606      	mov	r6, r0
 80104d0:	460c      	mov	r4, r1
 80104d2:	b125      	cbz	r5, 80104de <__swsetup_r+0x16>
 80104d4:	69ab      	ldr	r3, [r5, #24]
 80104d6:	b913      	cbnz	r3, 80104de <__swsetup_r+0x16>
 80104d8:	4628      	mov	r0, r5
 80104da:	f000 f953 	bl	8010784 <__sinit>
 80104de:	4b2e      	ldr	r3, [pc, #184]	; (8010598 <__swsetup_r+0xd0>)
 80104e0:	429c      	cmp	r4, r3
 80104e2:	d10f      	bne.n	8010504 <__swsetup_r+0x3c>
 80104e4:	686c      	ldr	r4, [r5, #4]
 80104e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	0715      	lsls	r5, r2, #28
 80104ee:	d42c      	bmi.n	801054a <__swsetup_r+0x82>
 80104f0:	06d0      	lsls	r0, r2, #27
 80104f2:	d411      	bmi.n	8010518 <__swsetup_r+0x50>
 80104f4:	2209      	movs	r2, #9
 80104f6:	6032      	str	r2, [r6, #0]
 80104f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104fc:	81a3      	strh	r3, [r4, #12]
 80104fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010502:	e03e      	b.n	8010582 <__swsetup_r+0xba>
 8010504:	4b25      	ldr	r3, [pc, #148]	; (801059c <__swsetup_r+0xd4>)
 8010506:	429c      	cmp	r4, r3
 8010508:	d101      	bne.n	801050e <__swsetup_r+0x46>
 801050a:	68ac      	ldr	r4, [r5, #8]
 801050c:	e7eb      	b.n	80104e6 <__swsetup_r+0x1e>
 801050e:	4b24      	ldr	r3, [pc, #144]	; (80105a0 <__swsetup_r+0xd8>)
 8010510:	429c      	cmp	r4, r3
 8010512:	bf08      	it	eq
 8010514:	68ec      	ldreq	r4, [r5, #12]
 8010516:	e7e6      	b.n	80104e6 <__swsetup_r+0x1e>
 8010518:	0751      	lsls	r1, r2, #29
 801051a:	d512      	bpl.n	8010542 <__swsetup_r+0x7a>
 801051c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801051e:	b141      	cbz	r1, 8010532 <__swsetup_r+0x6a>
 8010520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010524:	4299      	cmp	r1, r3
 8010526:	d002      	beq.n	801052e <__swsetup_r+0x66>
 8010528:	4630      	mov	r0, r6
 801052a:	f000 fa19 	bl	8010960 <_free_r>
 801052e:	2300      	movs	r3, #0
 8010530:	6363      	str	r3, [r4, #52]	; 0x34
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010538:	81a3      	strh	r3, [r4, #12]
 801053a:	2300      	movs	r3, #0
 801053c:	6063      	str	r3, [r4, #4]
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	f043 0308 	orr.w	r3, r3, #8
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	6923      	ldr	r3, [r4, #16]
 801054c:	b94b      	cbnz	r3, 8010562 <__swsetup_r+0x9a>
 801054e:	89a3      	ldrh	r3, [r4, #12]
 8010550:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010558:	d003      	beq.n	8010562 <__swsetup_r+0x9a>
 801055a:	4621      	mov	r1, r4
 801055c:	4630      	mov	r0, r6
 801055e:	f000 f9bf 	bl	80108e0 <__smakebuf_r>
 8010562:	89a2      	ldrh	r2, [r4, #12]
 8010564:	f012 0301 	ands.w	r3, r2, #1
 8010568:	d00c      	beq.n	8010584 <__swsetup_r+0xbc>
 801056a:	2300      	movs	r3, #0
 801056c:	60a3      	str	r3, [r4, #8]
 801056e:	6963      	ldr	r3, [r4, #20]
 8010570:	425b      	negs	r3, r3
 8010572:	61a3      	str	r3, [r4, #24]
 8010574:	6923      	ldr	r3, [r4, #16]
 8010576:	b953      	cbnz	r3, 801058e <__swsetup_r+0xc6>
 8010578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801057c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010580:	d1ba      	bne.n	80104f8 <__swsetup_r+0x30>
 8010582:	bd70      	pop	{r4, r5, r6, pc}
 8010584:	0792      	lsls	r2, r2, #30
 8010586:	bf58      	it	pl
 8010588:	6963      	ldrpl	r3, [r4, #20]
 801058a:	60a3      	str	r3, [r4, #8]
 801058c:	e7f2      	b.n	8010574 <__swsetup_r+0xac>
 801058e:	2000      	movs	r0, #0
 8010590:	e7f7      	b.n	8010582 <__swsetup_r+0xba>
 8010592:	bf00      	nop
 8010594:	20000038 	.word	0x20000038
 8010598:	08011730 	.word	0x08011730
 801059c:	08011750 	.word	0x08011750
 80105a0:	08011710 	.word	0x08011710

080105a4 <__sflush_r>:
 80105a4:	898a      	ldrh	r2, [r1, #12]
 80105a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105aa:	4605      	mov	r5, r0
 80105ac:	0710      	lsls	r0, r2, #28
 80105ae:	460c      	mov	r4, r1
 80105b0:	d458      	bmi.n	8010664 <__sflush_r+0xc0>
 80105b2:	684b      	ldr	r3, [r1, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	dc05      	bgt.n	80105c4 <__sflush_r+0x20>
 80105b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	dc02      	bgt.n	80105c4 <__sflush_r+0x20>
 80105be:	2000      	movs	r0, #0
 80105c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105c6:	2e00      	cmp	r6, #0
 80105c8:	d0f9      	beq.n	80105be <__sflush_r+0x1a>
 80105ca:	2300      	movs	r3, #0
 80105cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105d0:	682f      	ldr	r7, [r5, #0]
 80105d2:	6a21      	ldr	r1, [r4, #32]
 80105d4:	602b      	str	r3, [r5, #0]
 80105d6:	d032      	beq.n	801063e <__sflush_r+0x9a>
 80105d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105da:	89a3      	ldrh	r3, [r4, #12]
 80105dc:	075a      	lsls	r2, r3, #29
 80105de:	d505      	bpl.n	80105ec <__sflush_r+0x48>
 80105e0:	6863      	ldr	r3, [r4, #4]
 80105e2:	1ac0      	subs	r0, r0, r3
 80105e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105e6:	b10b      	cbz	r3, 80105ec <__sflush_r+0x48>
 80105e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105ea:	1ac0      	subs	r0, r0, r3
 80105ec:	2300      	movs	r3, #0
 80105ee:	4602      	mov	r2, r0
 80105f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105f2:	6a21      	ldr	r1, [r4, #32]
 80105f4:	4628      	mov	r0, r5
 80105f6:	47b0      	blx	r6
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	89a3      	ldrh	r3, [r4, #12]
 80105fc:	d106      	bne.n	801060c <__sflush_r+0x68>
 80105fe:	6829      	ldr	r1, [r5, #0]
 8010600:	291d      	cmp	r1, #29
 8010602:	d848      	bhi.n	8010696 <__sflush_r+0xf2>
 8010604:	4a29      	ldr	r2, [pc, #164]	; (80106ac <__sflush_r+0x108>)
 8010606:	40ca      	lsrs	r2, r1
 8010608:	07d6      	lsls	r6, r2, #31
 801060a:	d544      	bpl.n	8010696 <__sflush_r+0xf2>
 801060c:	2200      	movs	r2, #0
 801060e:	6062      	str	r2, [r4, #4]
 8010610:	04d9      	lsls	r1, r3, #19
 8010612:	6922      	ldr	r2, [r4, #16]
 8010614:	6022      	str	r2, [r4, #0]
 8010616:	d504      	bpl.n	8010622 <__sflush_r+0x7e>
 8010618:	1c42      	adds	r2, r0, #1
 801061a:	d101      	bne.n	8010620 <__sflush_r+0x7c>
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	b903      	cbnz	r3, 8010622 <__sflush_r+0x7e>
 8010620:	6560      	str	r0, [r4, #84]	; 0x54
 8010622:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010624:	602f      	str	r7, [r5, #0]
 8010626:	2900      	cmp	r1, #0
 8010628:	d0c9      	beq.n	80105be <__sflush_r+0x1a>
 801062a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801062e:	4299      	cmp	r1, r3
 8010630:	d002      	beq.n	8010638 <__sflush_r+0x94>
 8010632:	4628      	mov	r0, r5
 8010634:	f000 f994 	bl	8010960 <_free_r>
 8010638:	2000      	movs	r0, #0
 801063a:	6360      	str	r0, [r4, #52]	; 0x34
 801063c:	e7c0      	b.n	80105c0 <__sflush_r+0x1c>
 801063e:	2301      	movs	r3, #1
 8010640:	4628      	mov	r0, r5
 8010642:	47b0      	blx	r6
 8010644:	1c41      	adds	r1, r0, #1
 8010646:	d1c8      	bne.n	80105da <__sflush_r+0x36>
 8010648:	682b      	ldr	r3, [r5, #0]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d0c5      	beq.n	80105da <__sflush_r+0x36>
 801064e:	2b1d      	cmp	r3, #29
 8010650:	d001      	beq.n	8010656 <__sflush_r+0xb2>
 8010652:	2b16      	cmp	r3, #22
 8010654:	d101      	bne.n	801065a <__sflush_r+0xb6>
 8010656:	602f      	str	r7, [r5, #0]
 8010658:	e7b1      	b.n	80105be <__sflush_r+0x1a>
 801065a:	89a3      	ldrh	r3, [r4, #12]
 801065c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010660:	81a3      	strh	r3, [r4, #12]
 8010662:	e7ad      	b.n	80105c0 <__sflush_r+0x1c>
 8010664:	690f      	ldr	r7, [r1, #16]
 8010666:	2f00      	cmp	r7, #0
 8010668:	d0a9      	beq.n	80105be <__sflush_r+0x1a>
 801066a:	0793      	lsls	r3, r2, #30
 801066c:	680e      	ldr	r6, [r1, #0]
 801066e:	bf08      	it	eq
 8010670:	694b      	ldreq	r3, [r1, #20]
 8010672:	600f      	str	r7, [r1, #0]
 8010674:	bf18      	it	ne
 8010676:	2300      	movne	r3, #0
 8010678:	eba6 0807 	sub.w	r8, r6, r7
 801067c:	608b      	str	r3, [r1, #8]
 801067e:	f1b8 0f00 	cmp.w	r8, #0
 8010682:	dd9c      	ble.n	80105be <__sflush_r+0x1a>
 8010684:	4643      	mov	r3, r8
 8010686:	463a      	mov	r2, r7
 8010688:	6a21      	ldr	r1, [r4, #32]
 801068a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801068c:	4628      	mov	r0, r5
 801068e:	47b0      	blx	r6
 8010690:	2800      	cmp	r0, #0
 8010692:	dc06      	bgt.n	80106a2 <__sflush_r+0xfe>
 8010694:	89a3      	ldrh	r3, [r4, #12]
 8010696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801069a:	81a3      	strh	r3, [r4, #12]
 801069c:	f04f 30ff 	mov.w	r0, #4294967295
 80106a0:	e78e      	b.n	80105c0 <__sflush_r+0x1c>
 80106a2:	4407      	add	r7, r0
 80106a4:	eba8 0800 	sub.w	r8, r8, r0
 80106a8:	e7e9      	b.n	801067e <__sflush_r+0xda>
 80106aa:	bf00      	nop
 80106ac:	20400001 	.word	0x20400001

080106b0 <_fflush_r>:
 80106b0:	b538      	push	{r3, r4, r5, lr}
 80106b2:	690b      	ldr	r3, [r1, #16]
 80106b4:	4605      	mov	r5, r0
 80106b6:	460c      	mov	r4, r1
 80106b8:	b1db      	cbz	r3, 80106f2 <_fflush_r+0x42>
 80106ba:	b118      	cbz	r0, 80106c4 <_fflush_r+0x14>
 80106bc:	6983      	ldr	r3, [r0, #24]
 80106be:	b90b      	cbnz	r3, 80106c4 <_fflush_r+0x14>
 80106c0:	f000 f860 	bl	8010784 <__sinit>
 80106c4:	4b0c      	ldr	r3, [pc, #48]	; (80106f8 <_fflush_r+0x48>)
 80106c6:	429c      	cmp	r4, r3
 80106c8:	d109      	bne.n	80106de <_fflush_r+0x2e>
 80106ca:	686c      	ldr	r4, [r5, #4]
 80106cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d0:	b17b      	cbz	r3, 80106f2 <_fflush_r+0x42>
 80106d2:	4621      	mov	r1, r4
 80106d4:	4628      	mov	r0, r5
 80106d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106da:	f7ff bf63 	b.w	80105a4 <__sflush_r>
 80106de:	4b07      	ldr	r3, [pc, #28]	; (80106fc <_fflush_r+0x4c>)
 80106e0:	429c      	cmp	r4, r3
 80106e2:	d101      	bne.n	80106e8 <_fflush_r+0x38>
 80106e4:	68ac      	ldr	r4, [r5, #8]
 80106e6:	e7f1      	b.n	80106cc <_fflush_r+0x1c>
 80106e8:	4b05      	ldr	r3, [pc, #20]	; (8010700 <_fflush_r+0x50>)
 80106ea:	429c      	cmp	r4, r3
 80106ec:	bf08      	it	eq
 80106ee:	68ec      	ldreq	r4, [r5, #12]
 80106f0:	e7ec      	b.n	80106cc <_fflush_r+0x1c>
 80106f2:	2000      	movs	r0, #0
 80106f4:	bd38      	pop	{r3, r4, r5, pc}
 80106f6:	bf00      	nop
 80106f8:	08011730 	.word	0x08011730
 80106fc:	08011750 	.word	0x08011750
 8010700:	08011710 	.word	0x08011710

08010704 <std>:
 8010704:	2300      	movs	r3, #0
 8010706:	b510      	push	{r4, lr}
 8010708:	4604      	mov	r4, r0
 801070a:	e9c0 3300 	strd	r3, r3, [r0]
 801070e:	6083      	str	r3, [r0, #8]
 8010710:	8181      	strh	r1, [r0, #12]
 8010712:	6643      	str	r3, [r0, #100]	; 0x64
 8010714:	81c2      	strh	r2, [r0, #14]
 8010716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801071a:	6183      	str	r3, [r0, #24]
 801071c:	4619      	mov	r1, r3
 801071e:	2208      	movs	r2, #8
 8010720:	305c      	adds	r0, #92	; 0x5c
 8010722:	f7ff fdd8 	bl	80102d6 <memset>
 8010726:	4b05      	ldr	r3, [pc, #20]	; (801073c <std+0x38>)
 8010728:	6263      	str	r3, [r4, #36]	; 0x24
 801072a:	4b05      	ldr	r3, [pc, #20]	; (8010740 <std+0x3c>)
 801072c:	62a3      	str	r3, [r4, #40]	; 0x28
 801072e:	4b05      	ldr	r3, [pc, #20]	; (8010744 <std+0x40>)
 8010730:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010732:	4b05      	ldr	r3, [pc, #20]	; (8010748 <std+0x44>)
 8010734:	6224      	str	r4, [r4, #32]
 8010736:	6323      	str	r3, [r4, #48]	; 0x30
 8010738:	bd10      	pop	{r4, pc}
 801073a:	bf00      	nop
 801073c:	08011085 	.word	0x08011085
 8010740:	080110a7 	.word	0x080110a7
 8010744:	080110df 	.word	0x080110df
 8010748:	08011103 	.word	0x08011103

0801074c <_cleanup_r>:
 801074c:	4901      	ldr	r1, [pc, #4]	; (8010754 <_cleanup_r+0x8>)
 801074e:	f000 b885 	b.w	801085c <_fwalk_reent>
 8010752:	bf00      	nop
 8010754:	080106b1 	.word	0x080106b1

08010758 <__sfmoreglue>:
 8010758:	b570      	push	{r4, r5, r6, lr}
 801075a:	1e4a      	subs	r2, r1, #1
 801075c:	2568      	movs	r5, #104	; 0x68
 801075e:	4355      	muls	r5, r2
 8010760:	460e      	mov	r6, r1
 8010762:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010766:	f000 f949 	bl	80109fc <_malloc_r>
 801076a:	4604      	mov	r4, r0
 801076c:	b140      	cbz	r0, 8010780 <__sfmoreglue+0x28>
 801076e:	2100      	movs	r1, #0
 8010770:	e9c0 1600 	strd	r1, r6, [r0]
 8010774:	300c      	adds	r0, #12
 8010776:	60a0      	str	r0, [r4, #8]
 8010778:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801077c:	f7ff fdab 	bl	80102d6 <memset>
 8010780:	4620      	mov	r0, r4
 8010782:	bd70      	pop	{r4, r5, r6, pc}

08010784 <__sinit>:
 8010784:	6983      	ldr	r3, [r0, #24]
 8010786:	b510      	push	{r4, lr}
 8010788:	4604      	mov	r4, r0
 801078a:	bb33      	cbnz	r3, 80107da <__sinit+0x56>
 801078c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010790:	6503      	str	r3, [r0, #80]	; 0x50
 8010792:	4b12      	ldr	r3, [pc, #72]	; (80107dc <__sinit+0x58>)
 8010794:	4a12      	ldr	r2, [pc, #72]	; (80107e0 <__sinit+0x5c>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6282      	str	r2, [r0, #40]	; 0x28
 801079a:	4298      	cmp	r0, r3
 801079c:	bf04      	itt	eq
 801079e:	2301      	moveq	r3, #1
 80107a0:	6183      	streq	r3, [r0, #24]
 80107a2:	f000 f81f 	bl	80107e4 <__sfp>
 80107a6:	6060      	str	r0, [r4, #4]
 80107a8:	4620      	mov	r0, r4
 80107aa:	f000 f81b 	bl	80107e4 <__sfp>
 80107ae:	60a0      	str	r0, [r4, #8]
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 f817 	bl	80107e4 <__sfp>
 80107b6:	2200      	movs	r2, #0
 80107b8:	60e0      	str	r0, [r4, #12]
 80107ba:	2104      	movs	r1, #4
 80107bc:	6860      	ldr	r0, [r4, #4]
 80107be:	f7ff ffa1 	bl	8010704 <std>
 80107c2:	2201      	movs	r2, #1
 80107c4:	2109      	movs	r1, #9
 80107c6:	68a0      	ldr	r0, [r4, #8]
 80107c8:	f7ff ff9c 	bl	8010704 <std>
 80107cc:	2202      	movs	r2, #2
 80107ce:	2112      	movs	r1, #18
 80107d0:	68e0      	ldr	r0, [r4, #12]
 80107d2:	f7ff ff97 	bl	8010704 <std>
 80107d6:	2301      	movs	r3, #1
 80107d8:	61a3      	str	r3, [r4, #24]
 80107da:	bd10      	pop	{r4, pc}
 80107dc:	0801170c 	.word	0x0801170c
 80107e0:	0801074d 	.word	0x0801074d

080107e4 <__sfp>:
 80107e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e6:	4b1b      	ldr	r3, [pc, #108]	; (8010854 <__sfp+0x70>)
 80107e8:	681e      	ldr	r6, [r3, #0]
 80107ea:	69b3      	ldr	r3, [r6, #24]
 80107ec:	4607      	mov	r7, r0
 80107ee:	b913      	cbnz	r3, 80107f6 <__sfp+0x12>
 80107f0:	4630      	mov	r0, r6
 80107f2:	f7ff ffc7 	bl	8010784 <__sinit>
 80107f6:	3648      	adds	r6, #72	; 0x48
 80107f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80107fc:	3b01      	subs	r3, #1
 80107fe:	d503      	bpl.n	8010808 <__sfp+0x24>
 8010800:	6833      	ldr	r3, [r6, #0]
 8010802:	b133      	cbz	r3, 8010812 <__sfp+0x2e>
 8010804:	6836      	ldr	r6, [r6, #0]
 8010806:	e7f7      	b.n	80107f8 <__sfp+0x14>
 8010808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801080c:	b16d      	cbz	r5, 801082a <__sfp+0x46>
 801080e:	3468      	adds	r4, #104	; 0x68
 8010810:	e7f4      	b.n	80107fc <__sfp+0x18>
 8010812:	2104      	movs	r1, #4
 8010814:	4638      	mov	r0, r7
 8010816:	f7ff ff9f 	bl	8010758 <__sfmoreglue>
 801081a:	6030      	str	r0, [r6, #0]
 801081c:	2800      	cmp	r0, #0
 801081e:	d1f1      	bne.n	8010804 <__sfp+0x20>
 8010820:	230c      	movs	r3, #12
 8010822:	603b      	str	r3, [r7, #0]
 8010824:	4604      	mov	r4, r0
 8010826:	4620      	mov	r0, r4
 8010828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801082a:	4b0b      	ldr	r3, [pc, #44]	; (8010858 <__sfp+0x74>)
 801082c:	6665      	str	r5, [r4, #100]	; 0x64
 801082e:	e9c4 5500 	strd	r5, r5, [r4]
 8010832:	60a5      	str	r5, [r4, #8]
 8010834:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010838:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801083c:	2208      	movs	r2, #8
 801083e:	4629      	mov	r1, r5
 8010840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010844:	f7ff fd47 	bl	80102d6 <memset>
 8010848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801084c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010850:	e7e9      	b.n	8010826 <__sfp+0x42>
 8010852:	bf00      	nop
 8010854:	0801170c 	.word	0x0801170c
 8010858:	ffff0001 	.word	0xffff0001

0801085c <_fwalk_reent>:
 801085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010860:	4680      	mov	r8, r0
 8010862:	4689      	mov	r9, r1
 8010864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010868:	2600      	movs	r6, #0
 801086a:	b914      	cbnz	r4, 8010872 <_fwalk_reent+0x16>
 801086c:	4630      	mov	r0, r6
 801086e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010872:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010876:	3f01      	subs	r7, #1
 8010878:	d501      	bpl.n	801087e <_fwalk_reent+0x22>
 801087a:	6824      	ldr	r4, [r4, #0]
 801087c:	e7f5      	b.n	801086a <_fwalk_reent+0xe>
 801087e:	89ab      	ldrh	r3, [r5, #12]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d907      	bls.n	8010894 <_fwalk_reent+0x38>
 8010884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010888:	3301      	adds	r3, #1
 801088a:	d003      	beq.n	8010894 <_fwalk_reent+0x38>
 801088c:	4629      	mov	r1, r5
 801088e:	4640      	mov	r0, r8
 8010890:	47c8      	blx	r9
 8010892:	4306      	orrs	r6, r0
 8010894:	3568      	adds	r5, #104	; 0x68
 8010896:	e7ee      	b.n	8010876 <_fwalk_reent+0x1a>

08010898 <__swhatbuf_r>:
 8010898:	b570      	push	{r4, r5, r6, lr}
 801089a:	460e      	mov	r6, r1
 801089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a0:	2900      	cmp	r1, #0
 80108a2:	b096      	sub	sp, #88	; 0x58
 80108a4:	4614      	mov	r4, r2
 80108a6:	461d      	mov	r5, r3
 80108a8:	da07      	bge.n	80108ba <__swhatbuf_r+0x22>
 80108aa:	2300      	movs	r3, #0
 80108ac:	602b      	str	r3, [r5, #0]
 80108ae:	89b3      	ldrh	r3, [r6, #12]
 80108b0:	061a      	lsls	r2, r3, #24
 80108b2:	d410      	bmi.n	80108d6 <__swhatbuf_r+0x3e>
 80108b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108b8:	e00e      	b.n	80108d8 <__swhatbuf_r+0x40>
 80108ba:	466a      	mov	r2, sp
 80108bc:	f000 fc48 	bl	8011150 <_fstat_r>
 80108c0:	2800      	cmp	r0, #0
 80108c2:	dbf2      	blt.n	80108aa <__swhatbuf_r+0x12>
 80108c4:	9a01      	ldr	r2, [sp, #4]
 80108c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80108ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80108ce:	425a      	negs	r2, r3
 80108d0:	415a      	adcs	r2, r3
 80108d2:	602a      	str	r2, [r5, #0]
 80108d4:	e7ee      	b.n	80108b4 <__swhatbuf_r+0x1c>
 80108d6:	2340      	movs	r3, #64	; 0x40
 80108d8:	2000      	movs	r0, #0
 80108da:	6023      	str	r3, [r4, #0]
 80108dc:	b016      	add	sp, #88	; 0x58
 80108de:	bd70      	pop	{r4, r5, r6, pc}

080108e0 <__smakebuf_r>:
 80108e0:	898b      	ldrh	r3, [r1, #12]
 80108e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108e4:	079d      	lsls	r5, r3, #30
 80108e6:	4606      	mov	r6, r0
 80108e8:	460c      	mov	r4, r1
 80108ea:	d507      	bpl.n	80108fc <__smakebuf_r+0x1c>
 80108ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108f0:	6023      	str	r3, [r4, #0]
 80108f2:	6123      	str	r3, [r4, #16]
 80108f4:	2301      	movs	r3, #1
 80108f6:	6163      	str	r3, [r4, #20]
 80108f8:	b002      	add	sp, #8
 80108fa:	bd70      	pop	{r4, r5, r6, pc}
 80108fc:	ab01      	add	r3, sp, #4
 80108fe:	466a      	mov	r2, sp
 8010900:	f7ff ffca 	bl	8010898 <__swhatbuf_r>
 8010904:	9900      	ldr	r1, [sp, #0]
 8010906:	4605      	mov	r5, r0
 8010908:	4630      	mov	r0, r6
 801090a:	f000 f877 	bl	80109fc <_malloc_r>
 801090e:	b948      	cbnz	r0, 8010924 <__smakebuf_r+0x44>
 8010910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010914:	059a      	lsls	r2, r3, #22
 8010916:	d4ef      	bmi.n	80108f8 <__smakebuf_r+0x18>
 8010918:	f023 0303 	bic.w	r3, r3, #3
 801091c:	f043 0302 	orr.w	r3, r3, #2
 8010920:	81a3      	strh	r3, [r4, #12]
 8010922:	e7e3      	b.n	80108ec <__smakebuf_r+0xc>
 8010924:	4b0d      	ldr	r3, [pc, #52]	; (801095c <__smakebuf_r+0x7c>)
 8010926:	62b3      	str	r3, [r6, #40]	; 0x28
 8010928:	89a3      	ldrh	r3, [r4, #12]
 801092a:	6020      	str	r0, [r4, #0]
 801092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010930:	81a3      	strh	r3, [r4, #12]
 8010932:	9b00      	ldr	r3, [sp, #0]
 8010934:	6163      	str	r3, [r4, #20]
 8010936:	9b01      	ldr	r3, [sp, #4]
 8010938:	6120      	str	r0, [r4, #16]
 801093a:	b15b      	cbz	r3, 8010954 <__smakebuf_r+0x74>
 801093c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010940:	4630      	mov	r0, r6
 8010942:	f000 fc17 	bl	8011174 <_isatty_r>
 8010946:	b128      	cbz	r0, 8010954 <__smakebuf_r+0x74>
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	f023 0303 	bic.w	r3, r3, #3
 801094e:	f043 0301 	orr.w	r3, r3, #1
 8010952:	81a3      	strh	r3, [r4, #12]
 8010954:	89a3      	ldrh	r3, [r4, #12]
 8010956:	431d      	orrs	r5, r3
 8010958:	81a5      	strh	r5, [r4, #12]
 801095a:	e7cd      	b.n	80108f8 <__smakebuf_r+0x18>
 801095c:	0801074d 	.word	0x0801074d

08010960 <_free_r>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4605      	mov	r5, r0
 8010964:	2900      	cmp	r1, #0
 8010966:	d045      	beq.n	80109f4 <_free_r+0x94>
 8010968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801096c:	1f0c      	subs	r4, r1, #4
 801096e:	2b00      	cmp	r3, #0
 8010970:	bfb8      	it	lt
 8010972:	18e4      	addlt	r4, r4, r3
 8010974:	f000 fc20 	bl	80111b8 <__malloc_lock>
 8010978:	4a1f      	ldr	r2, [pc, #124]	; (80109f8 <_free_r+0x98>)
 801097a:	6813      	ldr	r3, [r2, #0]
 801097c:	4610      	mov	r0, r2
 801097e:	b933      	cbnz	r3, 801098e <_free_r+0x2e>
 8010980:	6063      	str	r3, [r4, #4]
 8010982:	6014      	str	r4, [r2, #0]
 8010984:	4628      	mov	r0, r5
 8010986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801098a:	f000 bc16 	b.w	80111ba <__malloc_unlock>
 801098e:	42a3      	cmp	r3, r4
 8010990:	d90c      	bls.n	80109ac <_free_r+0x4c>
 8010992:	6821      	ldr	r1, [r4, #0]
 8010994:	1862      	adds	r2, r4, r1
 8010996:	4293      	cmp	r3, r2
 8010998:	bf04      	itt	eq
 801099a:	681a      	ldreq	r2, [r3, #0]
 801099c:	685b      	ldreq	r3, [r3, #4]
 801099e:	6063      	str	r3, [r4, #4]
 80109a0:	bf04      	itt	eq
 80109a2:	1852      	addeq	r2, r2, r1
 80109a4:	6022      	streq	r2, [r4, #0]
 80109a6:	6004      	str	r4, [r0, #0]
 80109a8:	e7ec      	b.n	8010984 <_free_r+0x24>
 80109aa:	4613      	mov	r3, r2
 80109ac:	685a      	ldr	r2, [r3, #4]
 80109ae:	b10a      	cbz	r2, 80109b4 <_free_r+0x54>
 80109b0:	42a2      	cmp	r2, r4
 80109b2:	d9fa      	bls.n	80109aa <_free_r+0x4a>
 80109b4:	6819      	ldr	r1, [r3, #0]
 80109b6:	1858      	adds	r0, r3, r1
 80109b8:	42a0      	cmp	r0, r4
 80109ba:	d10b      	bne.n	80109d4 <_free_r+0x74>
 80109bc:	6820      	ldr	r0, [r4, #0]
 80109be:	4401      	add	r1, r0
 80109c0:	1858      	adds	r0, r3, r1
 80109c2:	4282      	cmp	r2, r0
 80109c4:	6019      	str	r1, [r3, #0]
 80109c6:	d1dd      	bne.n	8010984 <_free_r+0x24>
 80109c8:	6810      	ldr	r0, [r2, #0]
 80109ca:	6852      	ldr	r2, [r2, #4]
 80109cc:	605a      	str	r2, [r3, #4]
 80109ce:	4401      	add	r1, r0
 80109d0:	6019      	str	r1, [r3, #0]
 80109d2:	e7d7      	b.n	8010984 <_free_r+0x24>
 80109d4:	d902      	bls.n	80109dc <_free_r+0x7c>
 80109d6:	230c      	movs	r3, #12
 80109d8:	602b      	str	r3, [r5, #0]
 80109da:	e7d3      	b.n	8010984 <_free_r+0x24>
 80109dc:	6820      	ldr	r0, [r4, #0]
 80109de:	1821      	adds	r1, r4, r0
 80109e0:	428a      	cmp	r2, r1
 80109e2:	bf04      	itt	eq
 80109e4:	6811      	ldreq	r1, [r2, #0]
 80109e6:	6852      	ldreq	r2, [r2, #4]
 80109e8:	6062      	str	r2, [r4, #4]
 80109ea:	bf04      	itt	eq
 80109ec:	1809      	addeq	r1, r1, r0
 80109ee:	6021      	streq	r1, [r4, #0]
 80109f0:	605c      	str	r4, [r3, #4]
 80109f2:	e7c7      	b.n	8010984 <_free_r+0x24>
 80109f4:	bd38      	pop	{r3, r4, r5, pc}
 80109f6:	bf00      	nop
 80109f8:	20000d80 	.word	0x20000d80

080109fc <_malloc_r>:
 80109fc:	b570      	push	{r4, r5, r6, lr}
 80109fe:	1ccd      	adds	r5, r1, #3
 8010a00:	f025 0503 	bic.w	r5, r5, #3
 8010a04:	3508      	adds	r5, #8
 8010a06:	2d0c      	cmp	r5, #12
 8010a08:	bf38      	it	cc
 8010a0a:	250c      	movcc	r5, #12
 8010a0c:	2d00      	cmp	r5, #0
 8010a0e:	4606      	mov	r6, r0
 8010a10:	db01      	blt.n	8010a16 <_malloc_r+0x1a>
 8010a12:	42a9      	cmp	r1, r5
 8010a14:	d903      	bls.n	8010a1e <_malloc_r+0x22>
 8010a16:	230c      	movs	r3, #12
 8010a18:	6033      	str	r3, [r6, #0]
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	bd70      	pop	{r4, r5, r6, pc}
 8010a1e:	f000 fbcb 	bl	80111b8 <__malloc_lock>
 8010a22:	4a21      	ldr	r2, [pc, #132]	; (8010aa8 <_malloc_r+0xac>)
 8010a24:	6814      	ldr	r4, [r2, #0]
 8010a26:	4621      	mov	r1, r4
 8010a28:	b991      	cbnz	r1, 8010a50 <_malloc_r+0x54>
 8010a2a:	4c20      	ldr	r4, [pc, #128]	; (8010aac <_malloc_r+0xb0>)
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	b91b      	cbnz	r3, 8010a38 <_malloc_r+0x3c>
 8010a30:	4630      	mov	r0, r6
 8010a32:	f000 fb17 	bl	8011064 <_sbrk_r>
 8010a36:	6020      	str	r0, [r4, #0]
 8010a38:	4629      	mov	r1, r5
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	f000 fb12 	bl	8011064 <_sbrk_r>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d124      	bne.n	8010a8e <_malloc_r+0x92>
 8010a44:	230c      	movs	r3, #12
 8010a46:	6033      	str	r3, [r6, #0]
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f000 fbb6 	bl	80111ba <__malloc_unlock>
 8010a4e:	e7e4      	b.n	8010a1a <_malloc_r+0x1e>
 8010a50:	680b      	ldr	r3, [r1, #0]
 8010a52:	1b5b      	subs	r3, r3, r5
 8010a54:	d418      	bmi.n	8010a88 <_malloc_r+0x8c>
 8010a56:	2b0b      	cmp	r3, #11
 8010a58:	d90f      	bls.n	8010a7a <_malloc_r+0x7e>
 8010a5a:	600b      	str	r3, [r1, #0]
 8010a5c:	50cd      	str	r5, [r1, r3]
 8010a5e:	18cc      	adds	r4, r1, r3
 8010a60:	4630      	mov	r0, r6
 8010a62:	f000 fbaa 	bl	80111ba <__malloc_unlock>
 8010a66:	f104 000b 	add.w	r0, r4, #11
 8010a6a:	1d23      	adds	r3, r4, #4
 8010a6c:	f020 0007 	bic.w	r0, r0, #7
 8010a70:	1ac3      	subs	r3, r0, r3
 8010a72:	d0d3      	beq.n	8010a1c <_malloc_r+0x20>
 8010a74:	425a      	negs	r2, r3
 8010a76:	50e2      	str	r2, [r4, r3]
 8010a78:	e7d0      	b.n	8010a1c <_malloc_r+0x20>
 8010a7a:	428c      	cmp	r4, r1
 8010a7c:	684b      	ldr	r3, [r1, #4]
 8010a7e:	bf16      	itet	ne
 8010a80:	6063      	strne	r3, [r4, #4]
 8010a82:	6013      	streq	r3, [r2, #0]
 8010a84:	460c      	movne	r4, r1
 8010a86:	e7eb      	b.n	8010a60 <_malloc_r+0x64>
 8010a88:	460c      	mov	r4, r1
 8010a8a:	6849      	ldr	r1, [r1, #4]
 8010a8c:	e7cc      	b.n	8010a28 <_malloc_r+0x2c>
 8010a8e:	1cc4      	adds	r4, r0, #3
 8010a90:	f024 0403 	bic.w	r4, r4, #3
 8010a94:	42a0      	cmp	r0, r4
 8010a96:	d005      	beq.n	8010aa4 <_malloc_r+0xa8>
 8010a98:	1a21      	subs	r1, r4, r0
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f000 fae2 	bl	8011064 <_sbrk_r>
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	d0cf      	beq.n	8010a44 <_malloc_r+0x48>
 8010aa4:	6025      	str	r5, [r4, #0]
 8010aa6:	e7db      	b.n	8010a60 <_malloc_r+0x64>
 8010aa8:	20000d80 	.word	0x20000d80
 8010aac:	20000d84 	.word	0x20000d84

08010ab0 <__ssputs_r>:
 8010ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab4:	688e      	ldr	r6, [r1, #8]
 8010ab6:	429e      	cmp	r6, r3
 8010ab8:	4682      	mov	sl, r0
 8010aba:	460c      	mov	r4, r1
 8010abc:	4690      	mov	r8, r2
 8010abe:	4699      	mov	r9, r3
 8010ac0:	d837      	bhi.n	8010b32 <__ssputs_r+0x82>
 8010ac2:	898a      	ldrh	r2, [r1, #12]
 8010ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ac8:	d031      	beq.n	8010b2e <__ssputs_r+0x7e>
 8010aca:	6825      	ldr	r5, [r4, #0]
 8010acc:	6909      	ldr	r1, [r1, #16]
 8010ace:	1a6f      	subs	r7, r5, r1
 8010ad0:	6965      	ldr	r5, [r4, #20]
 8010ad2:	2302      	movs	r3, #2
 8010ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ad8:	fb95 f5f3 	sdiv	r5, r5, r3
 8010adc:	f109 0301 	add.w	r3, r9, #1
 8010ae0:	443b      	add	r3, r7
 8010ae2:	429d      	cmp	r5, r3
 8010ae4:	bf38      	it	cc
 8010ae6:	461d      	movcc	r5, r3
 8010ae8:	0553      	lsls	r3, r2, #21
 8010aea:	d530      	bpl.n	8010b4e <__ssputs_r+0x9e>
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7ff ff85 	bl	80109fc <_malloc_r>
 8010af2:	4606      	mov	r6, r0
 8010af4:	b950      	cbnz	r0, 8010b0c <__ssputs_r+0x5c>
 8010af6:	230c      	movs	r3, #12
 8010af8:	f8ca 3000 	str.w	r3, [sl]
 8010afc:	89a3      	ldrh	r3, [r4, #12]
 8010afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b02:	81a3      	strh	r3, [r4, #12]
 8010b04:	f04f 30ff 	mov.w	r0, #4294967295
 8010b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b0c:	463a      	mov	r2, r7
 8010b0e:	6921      	ldr	r1, [r4, #16]
 8010b10:	f7ff fbbd 	bl	801028e <memcpy>
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b1e:	81a3      	strh	r3, [r4, #12]
 8010b20:	6126      	str	r6, [r4, #16]
 8010b22:	6165      	str	r5, [r4, #20]
 8010b24:	443e      	add	r6, r7
 8010b26:	1bed      	subs	r5, r5, r7
 8010b28:	6026      	str	r6, [r4, #0]
 8010b2a:	60a5      	str	r5, [r4, #8]
 8010b2c:	464e      	mov	r6, r9
 8010b2e:	454e      	cmp	r6, r9
 8010b30:	d900      	bls.n	8010b34 <__ssputs_r+0x84>
 8010b32:	464e      	mov	r6, r9
 8010b34:	4632      	mov	r2, r6
 8010b36:	4641      	mov	r1, r8
 8010b38:	6820      	ldr	r0, [r4, #0]
 8010b3a:	f7ff fbb3 	bl	80102a4 <memmove>
 8010b3e:	68a3      	ldr	r3, [r4, #8]
 8010b40:	1b9b      	subs	r3, r3, r6
 8010b42:	60a3      	str	r3, [r4, #8]
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	441e      	add	r6, r3
 8010b48:	6026      	str	r6, [r4, #0]
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	e7dc      	b.n	8010b08 <__ssputs_r+0x58>
 8010b4e:	462a      	mov	r2, r5
 8010b50:	f000 fb34 	bl	80111bc <_realloc_r>
 8010b54:	4606      	mov	r6, r0
 8010b56:	2800      	cmp	r0, #0
 8010b58:	d1e2      	bne.n	8010b20 <__ssputs_r+0x70>
 8010b5a:	6921      	ldr	r1, [r4, #16]
 8010b5c:	4650      	mov	r0, sl
 8010b5e:	f7ff feff 	bl	8010960 <_free_r>
 8010b62:	e7c8      	b.n	8010af6 <__ssputs_r+0x46>

08010b64 <_svfiprintf_r>:
 8010b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b68:	461d      	mov	r5, r3
 8010b6a:	898b      	ldrh	r3, [r1, #12]
 8010b6c:	061f      	lsls	r7, r3, #24
 8010b6e:	b09d      	sub	sp, #116	; 0x74
 8010b70:	4680      	mov	r8, r0
 8010b72:	460c      	mov	r4, r1
 8010b74:	4616      	mov	r6, r2
 8010b76:	d50f      	bpl.n	8010b98 <_svfiprintf_r+0x34>
 8010b78:	690b      	ldr	r3, [r1, #16]
 8010b7a:	b96b      	cbnz	r3, 8010b98 <_svfiprintf_r+0x34>
 8010b7c:	2140      	movs	r1, #64	; 0x40
 8010b7e:	f7ff ff3d 	bl	80109fc <_malloc_r>
 8010b82:	6020      	str	r0, [r4, #0]
 8010b84:	6120      	str	r0, [r4, #16]
 8010b86:	b928      	cbnz	r0, 8010b94 <_svfiprintf_r+0x30>
 8010b88:	230c      	movs	r3, #12
 8010b8a:	f8c8 3000 	str.w	r3, [r8]
 8010b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b92:	e0c8      	b.n	8010d26 <_svfiprintf_r+0x1c2>
 8010b94:	2340      	movs	r3, #64	; 0x40
 8010b96:	6163      	str	r3, [r4, #20]
 8010b98:	2300      	movs	r3, #0
 8010b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b9c:	2320      	movs	r3, #32
 8010b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ba2:	2330      	movs	r3, #48	; 0x30
 8010ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ba8:	9503      	str	r5, [sp, #12]
 8010baa:	f04f 0b01 	mov.w	fp, #1
 8010bae:	4637      	mov	r7, r6
 8010bb0:	463d      	mov	r5, r7
 8010bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010bb6:	b10b      	cbz	r3, 8010bbc <_svfiprintf_r+0x58>
 8010bb8:	2b25      	cmp	r3, #37	; 0x25
 8010bba:	d13e      	bne.n	8010c3a <_svfiprintf_r+0xd6>
 8010bbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8010bc0:	d00b      	beq.n	8010bda <_svfiprintf_r+0x76>
 8010bc2:	4653      	mov	r3, sl
 8010bc4:	4632      	mov	r2, r6
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	4640      	mov	r0, r8
 8010bca:	f7ff ff71 	bl	8010ab0 <__ssputs_r>
 8010bce:	3001      	adds	r0, #1
 8010bd0:	f000 80a4 	beq.w	8010d1c <_svfiprintf_r+0x1b8>
 8010bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd6:	4453      	add	r3, sl
 8010bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8010bda:	783b      	ldrb	r3, [r7, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f000 809d 	beq.w	8010d1c <_svfiprintf_r+0x1b8>
 8010be2:	2300      	movs	r3, #0
 8010be4:	f04f 32ff 	mov.w	r2, #4294967295
 8010be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bec:	9304      	str	r3, [sp, #16]
 8010bee:	9307      	str	r3, [sp, #28]
 8010bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8010bf6:	462f      	mov	r7, r5
 8010bf8:	2205      	movs	r2, #5
 8010bfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010bfe:	4850      	ldr	r0, [pc, #320]	; (8010d40 <_svfiprintf_r+0x1dc>)
 8010c00:	f7ef faee 	bl	80001e0 <memchr>
 8010c04:	9b04      	ldr	r3, [sp, #16]
 8010c06:	b9d0      	cbnz	r0, 8010c3e <_svfiprintf_r+0xda>
 8010c08:	06d9      	lsls	r1, r3, #27
 8010c0a:	bf44      	itt	mi
 8010c0c:	2220      	movmi	r2, #32
 8010c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010c12:	071a      	lsls	r2, r3, #28
 8010c14:	bf44      	itt	mi
 8010c16:	222b      	movmi	r2, #43	; 0x2b
 8010c18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010c1c:	782a      	ldrb	r2, [r5, #0]
 8010c1e:	2a2a      	cmp	r2, #42	; 0x2a
 8010c20:	d015      	beq.n	8010c4e <_svfiprintf_r+0xea>
 8010c22:	9a07      	ldr	r2, [sp, #28]
 8010c24:	462f      	mov	r7, r5
 8010c26:	2000      	movs	r0, #0
 8010c28:	250a      	movs	r5, #10
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c30:	3b30      	subs	r3, #48	; 0x30
 8010c32:	2b09      	cmp	r3, #9
 8010c34:	d94d      	bls.n	8010cd2 <_svfiprintf_r+0x16e>
 8010c36:	b1b8      	cbz	r0, 8010c68 <_svfiprintf_r+0x104>
 8010c38:	e00f      	b.n	8010c5a <_svfiprintf_r+0xf6>
 8010c3a:	462f      	mov	r7, r5
 8010c3c:	e7b8      	b.n	8010bb0 <_svfiprintf_r+0x4c>
 8010c3e:	4a40      	ldr	r2, [pc, #256]	; (8010d40 <_svfiprintf_r+0x1dc>)
 8010c40:	1a80      	subs	r0, r0, r2
 8010c42:	fa0b f000 	lsl.w	r0, fp, r0
 8010c46:	4318      	orrs	r0, r3
 8010c48:	9004      	str	r0, [sp, #16]
 8010c4a:	463d      	mov	r5, r7
 8010c4c:	e7d3      	b.n	8010bf6 <_svfiprintf_r+0x92>
 8010c4e:	9a03      	ldr	r2, [sp, #12]
 8010c50:	1d11      	adds	r1, r2, #4
 8010c52:	6812      	ldr	r2, [r2, #0]
 8010c54:	9103      	str	r1, [sp, #12]
 8010c56:	2a00      	cmp	r2, #0
 8010c58:	db01      	blt.n	8010c5e <_svfiprintf_r+0xfa>
 8010c5a:	9207      	str	r2, [sp, #28]
 8010c5c:	e004      	b.n	8010c68 <_svfiprintf_r+0x104>
 8010c5e:	4252      	negs	r2, r2
 8010c60:	f043 0302 	orr.w	r3, r3, #2
 8010c64:	9207      	str	r2, [sp, #28]
 8010c66:	9304      	str	r3, [sp, #16]
 8010c68:	783b      	ldrb	r3, [r7, #0]
 8010c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8010c6c:	d10c      	bne.n	8010c88 <_svfiprintf_r+0x124>
 8010c6e:	787b      	ldrb	r3, [r7, #1]
 8010c70:	2b2a      	cmp	r3, #42	; 0x2a
 8010c72:	d133      	bne.n	8010cdc <_svfiprintf_r+0x178>
 8010c74:	9b03      	ldr	r3, [sp, #12]
 8010c76:	1d1a      	adds	r2, r3, #4
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	9203      	str	r2, [sp, #12]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	bfb8      	it	lt
 8010c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c84:	3702      	adds	r7, #2
 8010c86:	9305      	str	r3, [sp, #20]
 8010c88:	4d2e      	ldr	r5, [pc, #184]	; (8010d44 <_svfiprintf_r+0x1e0>)
 8010c8a:	7839      	ldrb	r1, [r7, #0]
 8010c8c:	2203      	movs	r2, #3
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f7ef faa6 	bl	80001e0 <memchr>
 8010c94:	b138      	cbz	r0, 8010ca6 <_svfiprintf_r+0x142>
 8010c96:	2340      	movs	r3, #64	; 0x40
 8010c98:	1b40      	subs	r0, r0, r5
 8010c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8010c9e:	9b04      	ldr	r3, [sp, #16]
 8010ca0:	4303      	orrs	r3, r0
 8010ca2:	3701      	adds	r7, #1
 8010ca4:	9304      	str	r3, [sp, #16]
 8010ca6:	7839      	ldrb	r1, [r7, #0]
 8010ca8:	4827      	ldr	r0, [pc, #156]	; (8010d48 <_svfiprintf_r+0x1e4>)
 8010caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cae:	2206      	movs	r2, #6
 8010cb0:	1c7e      	adds	r6, r7, #1
 8010cb2:	f7ef fa95 	bl	80001e0 <memchr>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d038      	beq.n	8010d2c <_svfiprintf_r+0x1c8>
 8010cba:	4b24      	ldr	r3, [pc, #144]	; (8010d4c <_svfiprintf_r+0x1e8>)
 8010cbc:	bb13      	cbnz	r3, 8010d04 <_svfiprintf_r+0x1a0>
 8010cbe:	9b03      	ldr	r3, [sp, #12]
 8010cc0:	3307      	adds	r3, #7
 8010cc2:	f023 0307 	bic.w	r3, r3, #7
 8010cc6:	3308      	adds	r3, #8
 8010cc8:	9303      	str	r3, [sp, #12]
 8010cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ccc:	444b      	add	r3, r9
 8010cce:	9309      	str	r3, [sp, #36]	; 0x24
 8010cd0:	e76d      	b.n	8010bae <_svfiprintf_r+0x4a>
 8010cd2:	fb05 3202 	mla	r2, r5, r2, r3
 8010cd6:	2001      	movs	r0, #1
 8010cd8:	460f      	mov	r7, r1
 8010cda:	e7a6      	b.n	8010c2a <_svfiprintf_r+0xc6>
 8010cdc:	2300      	movs	r3, #0
 8010cde:	3701      	adds	r7, #1
 8010ce0:	9305      	str	r3, [sp, #20]
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	250a      	movs	r5, #10
 8010ce6:	4638      	mov	r0, r7
 8010ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cec:	3a30      	subs	r2, #48	; 0x30
 8010cee:	2a09      	cmp	r2, #9
 8010cf0:	d903      	bls.n	8010cfa <_svfiprintf_r+0x196>
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d0c8      	beq.n	8010c88 <_svfiprintf_r+0x124>
 8010cf6:	9105      	str	r1, [sp, #20]
 8010cf8:	e7c6      	b.n	8010c88 <_svfiprintf_r+0x124>
 8010cfa:	fb05 2101 	mla	r1, r5, r1, r2
 8010cfe:	2301      	movs	r3, #1
 8010d00:	4607      	mov	r7, r0
 8010d02:	e7f0      	b.n	8010ce6 <_svfiprintf_r+0x182>
 8010d04:	ab03      	add	r3, sp, #12
 8010d06:	9300      	str	r3, [sp, #0]
 8010d08:	4622      	mov	r2, r4
 8010d0a:	4b11      	ldr	r3, [pc, #68]	; (8010d50 <_svfiprintf_r+0x1ec>)
 8010d0c:	a904      	add	r1, sp, #16
 8010d0e:	4640      	mov	r0, r8
 8010d10:	f3af 8000 	nop.w
 8010d14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010d18:	4681      	mov	r9, r0
 8010d1a:	d1d6      	bne.n	8010cca <_svfiprintf_r+0x166>
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	065b      	lsls	r3, r3, #25
 8010d20:	f53f af35 	bmi.w	8010b8e <_svfiprintf_r+0x2a>
 8010d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d26:	b01d      	add	sp, #116	; 0x74
 8010d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2c:	ab03      	add	r3, sp, #12
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	4622      	mov	r2, r4
 8010d32:	4b07      	ldr	r3, [pc, #28]	; (8010d50 <_svfiprintf_r+0x1ec>)
 8010d34:	a904      	add	r1, sp, #16
 8010d36:	4640      	mov	r0, r8
 8010d38:	f000 f882 	bl	8010e40 <_printf_i>
 8010d3c:	e7ea      	b.n	8010d14 <_svfiprintf_r+0x1b0>
 8010d3e:	bf00      	nop
 8010d40:	08011770 	.word	0x08011770
 8010d44:	08011776 	.word	0x08011776
 8010d48:	0801177a 	.word	0x0801177a
 8010d4c:	00000000 	.word	0x00000000
 8010d50:	08010ab1 	.word	0x08010ab1

08010d54 <_printf_common>:
 8010d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d58:	4691      	mov	r9, r2
 8010d5a:	461f      	mov	r7, r3
 8010d5c:	688a      	ldr	r2, [r1, #8]
 8010d5e:	690b      	ldr	r3, [r1, #16]
 8010d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d64:	4293      	cmp	r3, r2
 8010d66:	bfb8      	it	lt
 8010d68:	4613      	movlt	r3, r2
 8010d6a:	f8c9 3000 	str.w	r3, [r9]
 8010d6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d72:	4606      	mov	r6, r0
 8010d74:	460c      	mov	r4, r1
 8010d76:	b112      	cbz	r2, 8010d7e <_printf_common+0x2a>
 8010d78:	3301      	adds	r3, #1
 8010d7a:	f8c9 3000 	str.w	r3, [r9]
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	0699      	lsls	r1, r3, #26
 8010d82:	bf42      	ittt	mi
 8010d84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010d88:	3302      	addmi	r3, #2
 8010d8a:	f8c9 3000 	strmi.w	r3, [r9]
 8010d8e:	6825      	ldr	r5, [r4, #0]
 8010d90:	f015 0506 	ands.w	r5, r5, #6
 8010d94:	d107      	bne.n	8010da6 <_printf_common+0x52>
 8010d96:	f104 0a19 	add.w	sl, r4, #25
 8010d9a:	68e3      	ldr	r3, [r4, #12]
 8010d9c:	f8d9 2000 	ldr.w	r2, [r9]
 8010da0:	1a9b      	subs	r3, r3, r2
 8010da2:	42ab      	cmp	r3, r5
 8010da4:	dc28      	bgt.n	8010df8 <_printf_common+0xa4>
 8010da6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010daa:	6822      	ldr	r2, [r4, #0]
 8010dac:	3300      	adds	r3, #0
 8010dae:	bf18      	it	ne
 8010db0:	2301      	movne	r3, #1
 8010db2:	0692      	lsls	r2, r2, #26
 8010db4:	d42d      	bmi.n	8010e12 <_printf_common+0xbe>
 8010db6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010dba:	4639      	mov	r1, r7
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	47c0      	blx	r8
 8010dc0:	3001      	adds	r0, #1
 8010dc2:	d020      	beq.n	8010e06 <_printf_common+0xb2>
 8010dc4:	6823      	ldr	r3, [r4, #0]
 8010dc6:	68e5      	ldr	r5, [r4, #12]
 8010dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8010dcc:	f003 0306 	and.w	r3, r3, #6
 8010dd0:	2b04      	cmp	r3, #4
 8010dd2:	bf08      	it	eq
 8010dd4:	1aad      	subeq	r5, r5, r2
 8010dd6:	68a3      	ldr	r3, [r4, #8]
 8010dd8:	6922      	ldr	r2, [r4, #16]
 8010dda:	bf0c      	ite	eq
 8010ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010de0:	2500      	movne	r5, #0
 8010de2:	4293      	cmp	r3, r2
 8010de4:	bfc4      	itt	gt
 8010de6:	1a9b      	subgt	r3, r3, r2
 8010de8:	18ed      	addgt	r5, r5, r3
 8010dea:	f04f 0900 	mov.w	r9, #0
 8010dee:	341a      	adds	r4, #26
 8010df0:	454d      	cmp	r5, r9
 8010df2:	d11a      	bne.n	8010e2a <_printf_common+0xd6>
 8010df4:	2000      	movs	r0, #0
 8010df6:	e008      	b.n	8010e0a <_printf_common+0xb6>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	4652      	mov	r2, sl
 8010dfc:	4639      	mov	r1, r7
 8010dfe:	4630      	mov	r0, r6
 8010e00:	47c0      	blx	r8
 8010e02:	3001      	adds	r0, #1
 8010e04:	d103      	bne.n	8010e0e <_printf_common+0xba>
 8010e06:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0e:	3501      	adds	r5, #1
 8010e10:	e7c3      	b.n	8010d9a <_printf_common+0x46>
 8010e12:	18e1      	adds	r1, r4, r3
 8010e14:	1c5a      	adds	r2, r3, #1
 8010e16:	2030      	movs	r0, #48	; 0x30
 8010e18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010e1c:	4422      	add	r2, r4
 8010e1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010e26:	3302      	adds	r3, #2
 8010e28:	e7c5      	b.n	8010db6 <_printf_common+0x62>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	4639      	mov	r1, r7
 8010e30:	4630      	mov	r0, r6
 8010e32:	47c0      	blx	r8
 8010e34:	3001      	adds	r0, #1
 8010e36:	d0e6      	beq.n	8010e06 <_printf_common+0xb2>
 8010e38:	f109 0901 	add.w	r9, r9, #1
 8010e3c:	e7d8      	b.n	8010df0 <_printf_common+0x9c>
	...

08010e40 <_printf_i>:
 8010e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010e48:	460c      	mov	r4, r1
 8010e4a:	7e09      	ldrb	r1, [r1, #24]
 8010e4c:	b085      	sub	sp, #20
 8010e4e:	296e      	cmp	r1, #110	; 0x6e
 8010e50:	4617      	mov	r7, r2
 8010e52:	4606      	mov	r6, r0
 8010e54:	4698      	mov	r8, r3
 8010e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e58:	f000 80b3 	beq.w	8010fc2 <_printf_i+0x182>
 8010e5c:	d822      	bhi.n	8010ea4 <_printf_i+0x64>
 8010e5e:	2963      	cmp	r1, #99	; 0x63
 8010e60:	d036      	beq.n	8010ed0 <_printf_i+0x90>
 8010e62:	d80a      	bhi.n	8010e7a <_printf_i+0x3a>
 8010e64:	2900      	cmp	r1, #0
 8010e66:	f000 80b9 	beq.w	8010fdc <_printf_i+0x19c>
 8010e6a:	2958      	cmp	r1, #88	; 0x58
 8010e6c:	f000 8083 	beq.w	8010f76 <_printf_i+0x136>
 8010e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010e78:	e032      	b.n	8010ee0 <_printf_i+0xa0>
 8010e7a:	2964      	cmp	r1, #100	; 0x64
 8010e7c:	d001      	beq.n	8010e82 <_printf_i+0x42>
 8010e7e:	2969      	cmp	r1, #105	; 0x69
 8010e80:	d1f6      	bne.n	8010e70 <_printf_i+0x30>
 8010e82:	6820      	ldr	r0, [r4, #0]
 8010e84:	6813      	ldr	r3, [r2, #0]
 8010e86:	0605      	lsls	r5, r0, #24
 8010e88:	f103 0104 	add.w	r1, r3, #4
 8010e8c:	d52a      	bpl.n	8010ee4 <_printf_i+0xa4>
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	6011      	str	r1, [r2, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	da03      	bge.n	8010e9e <_printf_i+0x5e>
 8010e96:	222d      	movs	r2, #45	; 0x2d
 8010e98:	425b      	negs	r3, r3
 8010e9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010e9e:	486f      	ldr	r0, [pc, #444]	; (801105c <_printf_i+0x21c>)
 8010ea0:	220a      	movs	r2, #10
 8010ea2:	e039      	b.n	8010f18 <_printf_i+0xd8>
 8010ea4:	2973      	cmp	r1, #115	; 0x73
 8010ea6:	f000 809d 	beq.w	8010fe4 <_printf_i+0x1a4>
 8010eaa:	d808      	bhi.n	8010ebe <_printf_i+0x7e>
 8010eac:	296f      	cmp	r1, #111	; 0x6f
 8010eae:	d020      	beq.n	8010ef2 <_printf_i+0xb2>
 8010eb0:	2970      	cmp	r1, #112	; 0x70
 8010eb2:	d1dd      	bne.n	8010e70 <_printf_i+0x30>
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	f043 0320 	orr.w	r3, r3, #32
 8010eba:	6023      	str	r3, [r4, #0]
 8010ebc:	e003      	b.n	8010ec6 <_printf_i+0x86>
 8010ebe:	2975      	cmp	r1, #117	; 0x75
 8010ec0:	d017      	beq.n	8010ef2 <_printf_i+0xb2>
 8010ec2:	2978      	cmp	r1, #120	; 0x78
 8010ec4:	d1d4      	bne.n	8010e70 <_printf_i+0x30>
 8010ec6:	2378      	movs	r3, #120	; 0x78
 8010ec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ecc:	4864      	ldr	r0, [pc, #400]	; (8011060 <_printf_i+0x220>)
 8010ece:	e055      	b.n	8010f7c <_printf_i+0x13c>
 8010ed0:	6813      	ldr	r3, [r2, #0]
 8010ed2:	1d19      	adds	r1, r3, #4
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	6011      	str	r1, [r2, #0]
 8010ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	e08c      	b.n	8010ffe <_printf_i+0x1be>
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	6011      	str	r1, [r2, #0]
 8010ee8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010eec:	bf18      	it	ne
 8010eee:	b21b      	sxthne	r3, r3
 8010ef0:	e7cf      	b.n	8010e92 <_printf_i+0x52>
 8010ef2:	6813      	ldr	r3, [r2, #0]
 8010ef4:	6825      	ldr	r5, [r4, #0]
 8010ef6:	1d18      	adds	r0, r3, #4
 8010ef8:	6010      	str	r0, [r2, #0]
 8010efa:	0628      	lsls	r0, r5, #24
 8010efc:	d501      	bpl.n	8010f02 <_printf_i+0xc2>
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	e002      	b.n	8010f08 <_printf_i+0xc8>
 8010f02:	0668      	lsls	r0, r5, #25
 8010f04:	d5fb      	bpl.n	8010efe <_printf_i+0xbe>
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	4854      	ldr	r0, [pc, #336]	; (801105c <_printf_i+0x21c>)
 8010f0a:	296f      	cmp	r1, #111	; 0x6f
 8010f0c:	bf14      	ite	ne
 8010f0e:	220a      	movne	r2, #10
 8010f10:	2208      	moveq	r2, #8
 8010f12:	2100      	movs	r1, #0
 8010f14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010f18:	6865      	ldr	r5, [r4, #4]
 8010f1a:	60a5      	str	r5, [r4, #8]
 8010f1c:	2d00      	cmp	r5, #0
 8010f1e:	f2c0 8095 	blt.w	801104c <_printf_i+0x20c>
 8010f22:	6821      	ldr	r1, [r4, #0]
 8010f24:	f021 0104 	bic.w	r1, r1, #4
 8010f28:	6021      	str	r1, [r4, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d13d      	bne.n	8010faa <_printf_i+0x16a>
 8010f2e:	2d00      	cmp	r5, #0
 8010f30:	f040 808e 	bne.w	8011050 <_printf_i+0x210>
 8010f34:	4665      	mov	r5, ip
 8010f36:	2a08      	cmp	r2, #8
 8010f38:	d10b      	bne.n	8010f52 <_printf_i+0x112>
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	07db      	lsls	r3, r3, #31
 8010f3e:	d508      	bpl.n	8010f52 <_printf_i+0x112>
 8010f40:	6923      	ldr	r3, [r4, #16]
 8010f42:	6862      	ldr	r2, [r4, #4]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	bfde      	ittt	le
 8010f48:	2330      	movle	r3, #48	; 0x30
 8010f4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f52:	ebac 0305 	sub.w	r3, ip, r5
 8010f56:	6123      	str	r3, [r4, #16]
 8010f58:	f8cd 8000 	str.w	r8, [sp]
 8010f5c:	463b      	mov	r3, r7
 8010f5e:	aa03      	add	r2, sp, #12
 8010f60:	4621      	mov	r1, r4
 8010f62:	4630      	mov	r0, r6
 8010f64:	f7ff fef6 	bl	8010d54 <_printf_common>
 8010f68:	3001      	adds	r0, #1
 8010f6a:	d14d      	bne.n	8011008 <_printf_i+0x1c8>
 8010f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f70:	b005      	add	sp, #20
 8010f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f76:	4839      	ldr	r0, [pc, #228]	; (801105c <_printf_i+0x21c>)
 8010f78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010f7c:	6813      	ldr	r3, [r2, #0]
 8010f7e:	6821      	ldr	r1, [r4, #0]
 8010f80:	1d1d      	adds	r5, r3, #4
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6015      	str	r5, [r2, #0]
 8010f86:	060a      	lsls	r2, r1, #24
 8010f88:	d50b      	bpl.n	8010fa2 <_printf_i+0x162>
 8010f8a:	07ca      	lsls	r2, r1, #31
 8010f8c:	bf44      	itt	mi
 8010f8e:	f041 0120 	orrmi.w	r1, r1, #32
 8010f92:	6021      	strmi	r1, [r4, #0]
 8010f94:	b91b      	cbnz	r3, 8010f9e <_printf_i+0x15e>
 8010f96:	6822      	ldr	r2, [r4, #0]
 8010f98:	f022 0220 	bic.w	r2, r2, #32
 8010f9c:	6022      	str	r2, [r4, #0]
 8010f9e:	2210      	movs	r2, #16
 8010fa0:	e7b7      	b.n	8010f12 <_printf_i+0xd2>
 8010fa2:	064d      	lsls	r5, r1, #25
 8010fa4:	bf48      	it	mi
 8010fa6:	b29b      	uxthmi	r3, r3
 8010fa8:	e7ef      	b.n	8010f8a <_printf_i+0x14a>
 8010faa:	4665      	mov	r5, ip
 8010fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fb0:	fb02 3311 	mls	r3, r2, r1, r3
 8010fb4:	5cc3      	ldrb	r3, [r0, r3]
 8010fb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010fba:	460b      	mov	r3, r1
 8010fbc:	2900      	cmp	r1, #0
 8010fbe:	d1f5      	bne.n	8010fac <_printf_i+0x16c>
 8010fc0:	e7b9      	b.n	8010f36 <_printf_i+0xf6>
 8010fc2:	6813      	ldr	r3, [r2, #0]
 8010fc4:	6825      	ldr	r5, [r4, #0]
 8010fc6:	6961      	ldr	r1, [r4, #20]
 8010fc8:	1d18      	adds	r0, r3, #4
 8010fca:	6010      	str	r0, [r2, #0]
 8010fcc:	0628      	lsls	r0, r5, #24
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	d501      	bpl.n	8010fd6 <_printf_i+0x196>
 8010fd2:	6019      	str	r1, [r3, #0]
 8010fd4:	e002      	b.n	8010fdc <_printf_i+0x19c>
 8010fd6:	066a      	lsls	r2, r5, #25
 8010fd8:	d5fb      	bpl.n	8010fd2 <_printf_i+0x192>
 8010fda:	8019      	strh	r1, [r3, #0]
 8010fdc:	2300      	movs	r3, #0
 8010fde:	6123      	str	r3, [r4, #16]
 8010fe0:	4665      	mov	r5, ip
 8010fe2:	e7b9      	b.n	8010f58 <_printf_i+0x118>
 8010fe4:	6813      	ldr	r3, [r2, #0]
 8010fe6:	1d19      	adds	r1, r3, #4
 8010fe8:	6011      	str	r1, [r2, #0]
 8010fea:	681d      	ldr	r5, [r3, #0]
 8010fec:	6862      	ldr	r2, [r4, #4]
 8010fee:	2100      	movs	r1, #0
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	f7ef f8f5 	bl	80001e0 <memchr>
 8010ff6:	b108      	cbz	r0, 8010ffc <_printf_i+0x1bc>
 8010ff8:	1b40      	subs	r0, r0, r5
 8010ffa:	6060      	str	r0, [r4, #4]
 8010ffc:	6863      	ldr	r3, [r4, #4]
 8010ffe:	6123      	str	r3, [r4, #16]
 8011000:	2300      	movs	r3, #0
 8011002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011006:	e7a7      	b.n	8010f58 <_printf_i+0x118>
 8011008:	6923      	ldr	r3, [r4, #16]
 801100a:	462a      	mov	r2, r5
 801100c:	4639      	mov	r1, r7
 801100e:	4630      	mov	r0, r6
 8011010:	47c0      	blx	r8
 8011012:	3001      	adds	r0, #1
 8011014:	d0aa      	beq.n	8010f6c <_printf_i+0x12c>
 8011016:	6823      	ldr	r3, [r4, #0]
 8011018:	079b      	lsls	r3, r3, #30
 801101a:	d413      	bmi.n	8011044 <_printf_i+0x204>
 801101c:	68e0      	ldr	r0, [r4, #12]
 801101e:	9b03      	ldr	r3, [sp, #12]
 8011020:	4298      	cmp	r0, r3
 8011022:	bfb8      	it	lt
 8011024:	4618      	movlt	r0, r3
 8011026:	e7a3      	b.n	8010f70 <_printf_i+0x130>
 8011028:	2301      	movs	r3, #1
 801102a:	464a      	mov	r2, r9
 801102c:	4639      	mov	r1, r7
 801102e:	4630      	mov	r0, r6
 8011030:	47c0      	blx	r8
 8011032:	3001      	adds	r0, #1
 8011034:	d09a      	beq.n	8010f6c <_printf_i+0x12c>
 8011036:	3501      	adds	r5, #1
 8011038:	68e3      	ldr	r3, [r4, #12]
 801103a:	9a03      	ldr	r2, [sp, #12]
 801103c:	1a9b      	subs	r3, r3, r2
 801103e:	42ab      	cmp	r3, r5
 8011040:	dcf2      	bgt.n	8011028 <_printf_i+0x1e8>
 8011042:	e7eb      	b.n	801101c <_printf_i+0x1dc>
 8011044:	2500      	movs	r5, #0
 8011046:	f104 0919 	add.w	r9, r4, #25
 801104a:	e7f5      	b.n	8011038 <_printf_i+0x1f8>
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1ac      	bne.n	8010faa <_printf_i+0x16a>
 8011050:	7803      	ldrb	r3, [r0, #0]
 8011052:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011056:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801105a:	e76c      	b.n	8010f36 <_printf_i+0xf6>
 801105c:	08011781 	.word	0x08011781
 8011060:	08011792 	.word	0x08011792

08011064 <_sbrk_r>:
 8011064:	b538      	push	{r3, r4, r5, lr}
 8011066:	4c06      	ldr	r4, [pc, #24]	; (8011080 <_sbrk_r+0x1c>)
 8011068:	2300      	movs	r3, #0
 801106a:	4605      	mov	r5, r0
 801106c:	4608      	mov	r0, r1
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	f7f0 fb20 	bl	80016b4 <_sbrk>
 8011074:	1c43      	adds	r3, r0, #1
 8011076:	d102      	bne.n	801107e <_sbrk_r+0x1a>
 8011078:	6823      	ldr	r3, [r4, #0]
 801107a:	b103      	cbz	r3, 801107e <_sbrk_r+0x1a>
 801107c:	602b      	str	r3, [r5, #0]
 801107e:	bd38      	pop	{r3, r4, r5, pc}
 8011080:	2000110c 	.word	0x2000110c

08011084 <__sread>:
 8011084:	b510      	push	{r4, lr}
 8011086:	460c      	mov	r4, r1
 8011088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801108c:	f000 f8bc 	bl	8011208 <_read_r>
 8011090:	2800      	cmp	r0, #0
 8011092:	bfab      	itete	ge
 8011094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011096:	89a3      	ldrhlt	r3, [r4, #12]
 8011098:	181b      	addge	r3, r3, r0
 801109a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801109e:	bfac      	ite	ge
 80110a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80110a2:	81a3      	strhlt	r3, [r4, #12]
 80110a4:	bd10      	pop	{r4, pc}

080110a6 <__swrite>:
 80110a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110aa:	461f      	mov	r7, r3
 80110ac:	898b      	ldrh	r3, [r1, #12]
 80110ae:	05db      	lsls	r3, r3, #23
 80110b0:	4605      	mov	r5, r0
 80110b2:	460c      	mov	r4, r1
 80110b4:	4616      	mov	r6, r2
 80110b6:	d505      	bpl.n	80110c4 <__swrite+0x1e>
 80110b8:	2302      	movs	r3, #2
 80110ba:	2200      	movs	r2, #0
 80110bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110c0:	f000 f868 	bl	8011194 <_lseek_r>
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80110ce:	81a3      	strh	r3, [r4, #12]
 80110d0:	4632      	mov	r2, r6
 80110d2:	463b      	mov	r3, r7
 80110d4:	4628      	mov	r0, r5
 80110d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110da:	f000 b817 	b.w	801110c <_write_r>

080110de <__sseek>:
 80110de:	b510      	push	{r4, lr}
 80110e0:	460c      	mov	r4, r1
 80110e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110e6:	f000 f855 	bl	8011194 <_lseek_r>
 80110ea:	1c43      	adds	r3, r0, #1
 80110ec:	89a3      	ldrh	r3, [r4, #12]
 80110ee:	bf15      	itete	ne
 80110f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80110f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80110f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80110fa:	81a3      	strheq	r3, [r4, #12]
 80110fc:	bf18      	it	ne
 80110fe:	81a3      	strhne	r3, [r4, #12]
 8011100:	bd10      	pop	{r4, pc}

08011102 <__sclose>:
 8011102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011106:	f000 b813 	b.w	8011130 <_close_r>
	...

0801110c <_write_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4c07      	ldr	r4, [pc, #28]	; (801112c <_write_r+0x20>)
 8011110:	4605      	mov	r5, r0
 8011112:	4608      	mov	r0, r1
 8011114:	4611      	mov	r1, r2
 8011116:	2200      	movs	r2, #0
 8011118:	6022      	str	r2, [r4, #0]
 801111a:	461a      	mov	r2, r3
 801111c:	f7f0 fa79 	bl	8001612 <_write>
 8011120:	1c43      	adds	r3, r0, #1
 8011122:	d102      	bne.n	801112a <_write_r+0x1e>
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	b103      	cbz	r3, 801112a <_write_r+0x1e>
 8011128:	602b      	str	r3, [r5, #0]
 801112a:	bd38      	pop	{r3, r4, r5, pc}
 801112c:	2000110c 	.word	0x2000110c

08011130 <_close_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	4c06      	ldr	r4, [pc, #24]	; (801114c <_close_r+0x1c>)
 8011134:	2300      	movs	r3, #0
 8011136:	4605      	mov	r5, r0
 8011138:	4608      	mov	r0, r1
 801113a:	6023      	str	r3, [r4, #0]
 801113c:	f7f0 fa85 	bl	800164a <_close>
 8011140:	1c43      	adds	r3, r0, #1
 8011142:	d102      	bne.n	801114a <_close_r+0x1a>
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	b103      	cbz	r3, 801114a <_close_r+0x1a>
 8011148:	602b      	str	r3, [r5, #0]
 801114a:	bd38      	pop	{r3, r4, r5, pc}
 801114c:	2000110c 	.word	0x2000110c

08011150 <_fstat_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4c07      	ldr	r4, [pc, #28]	; (8011170 <_fstat_r+0x20>)
 8011154:	2300      	movs	r3, #0
 8011156:	4605      	mov	r5, r0
 8011158:	4608      	mov	r0, r1
 801115a:	4611      	mov	r1, r2
 801115c:	6023      	str	r3, [r4, #0]
 801115e:	f7f0 fa80 	bl	8001662 <_fstat>
 8011162:	1c43      	adds	r3, r0, #1
 8011164:	d102      	bne.n	801116c <_fstat_r+0x1c>
 8011166:	6823      	ldr	r3, [r4, #0]
 8011168:	b103      	cbz	r3, 801116c <_fstat_r+0x1c>
 801116a:	602b      	str	r3, [r5, #0]
 801116c:	bd38      	pop	{r3, r4, r5, pc}
 801116e:	bf00      	nop
 8011170:	2000110c 	.word	0x2000110c

08011174 <_isatty_r>:
 8011174:	b538      	push	{r3, r4, r5, lr}
 8011176:	4c06      	ldr	r4, [pc, #24]	; (8011190 <_isatty_r+0x1c>)
 8011178:	2300      	movs	r3, #0
 801117a:	4605      	mov	r5, r0
 801117c:	4608      	mov	r0, r1
 801117e:	6023      	str	r3, [r4, #0]
 8011180:	f7f0 fa7f 	bl	8001682 <_isatty>
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	d102      	bne.n	801118e <_isatty_r+0x1a>
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	b103      	cbz	r3, 801118e <_isatty_r+0x1a>
 801118c:	602b      	str	r3, [r5, #0]
 801118e:	bd38      	pop	{r3, r4, r5, pc}
 8011190:	2000110c 	.word	0x2000110c

08011194 <_lseek_r>:
 8011194:	b538      	push	{r3, r4, r5, lr}
 8011196:	4c07      	ldr	r4, [pc, #28]	; (80111b4 <_lseek_r+0x20>)
 8011198:	4605      	mov	r5, r0
 801119a:	4608      	mov	r0, r1
 801119c:	4611      	mov	r1, r2
 801119e:	2200      	movs	r2, #0
 80111a0:	6022      	str	r2, [r4, #0]
 80111a2:	461a      	mov	r2, r3
 80111a4:	f7f0 fa78 	bl	8001698 <_lseek>
 80111a8:	1c43      	adds	r3, r0, #1
 80111aa:	d102      	bne.n	80111b2 <_lseek_r+0x1e>
 80111ac:	6823      	ldr	r3, [r4, #0]
 80111ae:	b103      	cbz	r3, 80111b2 <_lseek_r+0x1e>
 80111b0:	602b      	str	r3, [r5, #0]
 80111b2:	bd38      	pop	{r3, r4, r5, pc}
 80111b4:	2000110c 	.word	0x2000110c

080111b8 <__malloc_lock>:
 80111b8:	4770      	bx	lr

080111ba <__malloc_unlock>:
 80111ba:	4770      	bx	lr

080111bc <_realloc_r>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	4607      	mov	r7, r0
 80111c0:	4614      	mov	r4, r2
 80111c2:	460e      	mov	r6, r1
 80111c4:	b921      	cbnz	r1, 80111d0 <_realloc_r+0x14>
 80111c6:	4611      	mov	r1, r2
 80111c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80111cc:	f7ff bc16 	b.w	80109fc <_malloc_r>
 80111d0:	b922      	cbnz	r2, 80111dc <_realloc_r+0x20>
 80111d2:	f7ff fbc5 	bl	8010960 <_free_r>
 80111d6:	4625      	mov	r5, r4
 80111d8:	4628      	mov	r0, r5
 80111da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111dc:	f000 f826 	bl	801122c <_malloc_usable_size_r>
 80111e0:	42a0      	cmp	r0, r4
 80111e2:	d20f      	bcs.n	8011204 <_realloc_r+0x48>
 80111e4:	4621      	mov	r1, r4
 80111e6:	4638      	mov	r0, r7
 80111e8:	f7ff fc08 	bl	80109fc <_malloc_r>
 80111ec:	4605      	mov	r5, r0
 80111ee:	2800      	cmp	r0, #0
 80111f0:	d0f2      	beq.n	80111d8 <_realloc_r+0x1c>
 80111f2:	4631      	mov	r1, r6
 80111f4:	4622      	mov	r2, r4
 80111f6:	f7ff f84a 	bl	801028e <memcpy>
 80111fa:	4631      	mov	r1, r6
 80111fc:	4638      	mov	r0, r7
 80111fe:	f7ff fbaf 	bl	8010960 <_free_r>
 8011202:	e7e9      	b.n	80111d8 <_realloc_r+0x1c>
 8011204:	4635      	mov	r5, r6
 8011206:	e7e7      	b.n	80111d8 <_realloc_r+0x1c>

08011208 <_read_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4c07      	ldr	r4, [pc, #28]	; (8011228 <_read_r+0x20>)
 801120c:	4605      	mov	r5, r0
 801120e:	4608      	mov	r0, r1
 8011210:	4611      	mov	r1, r2
 8011212:	2200      	movs	r2, #0
 8011214:	6022      	str	r2, [r4, #0]
 8011216:	461a      	mov	r2, r3
 8011218:	f7f0 f9de 	bl	80015d8 <_read>
 801121c:	1c43      	adds	r3, r0, #1
 801121e:	d102      	bne.n	8011226 <_read_r+0x1e>
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	b103      	cbz	r3, 8011226 <_read_r+0x1e>
 8011224:	602b      	str	r3, [r5, #0]
 8011226:	bd38      	pop	{r3, r4, r5, pc}
 8011228:	2000110c 	.word	0x2000110c

0801122c <_malloc_usable_size_r>:
 801122c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011230:	1f18      	subs	r0, r3, #4
 8011232:	2b00      	cmp	r3, #0
 8011234:	bfbc      	itt	lt
 8011236:	580b      	ldrlt	r3, [r1, r0]
 8011238:	18c0      	addlt	r0, r0, r3
 801123a:	4770      	bx	lr

0801123c <_init>:
 801123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801123e:	bf00      	nop
 8011240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011242:	bc08      	pop	{r3}
 8011244:	469e      	mov	lr, r3
 8011246:	4770      	bx	lr

08011248 <_fini>:
 8011248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124a:	bf00      	nop
 801124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801124e:	bc08      	pop	{r3}
 8011250:	469e      	mov	lr, r3
 8011252:	4770      	bx	lr
